
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042b8  08016bd4  08016bd4  00026bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae8c  0801ae8c  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae8c  0801ae8c  0002ae8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae94  0801ae94  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae94  0801ae94  0002ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae98  0801ae98  0002ae98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801ae9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002608  20000238  0801b0d4  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002840  0801b0d4  00032840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aa12  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d71  00000000  00000000  0006ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  000729f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f30  00000000  00000000  00074c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012143  00000000  00000000  00076bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a0a1  00000000  00000000  00088d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b15cc  00000000  00000000  000b2da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f5c  00000000  00000000  001643ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016bbc 	.word	0x08016bbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08016bbc 	.word	0x08016bbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <DWT_Init+0x2c>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <DWT_Init+0x2c>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <DWT_Init+0x30>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <DWT_Init+0x30>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <DWT_Init+0x30>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
    //}
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000edf0 	.word	0xe000edf0
 8000d9c:	e0001000 	.word	0xe0001000

08000da0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <DWT_Delay+0x40>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <DWT_Delay+0x44>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <DWT_Delay+0x48>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9a      	lsrs	r2, r3, #18
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000dc2:	bf00      	nop
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <DWT_Delay+0x40>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d8f8      	bhi.n	8000dc4 <DWT_Delay+0x24>
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e0001000 	.word	0xe0001000
 8000de4:	2000004c 	.word	0x2000004c
 8000de8:	431bde83 	.word	0x431bde83

08000dec <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	773b      	strb	r3, [r7, #28]
 8000e0e:	e07d      	b.n	8000f0c <updateFilterSection+0x120>
		UIDMatched = false;
 8000e10:	2300      	movs	r3, #0
 8000e12:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	777b      	strb	r3, [r7, #29]
 8000e18:	e02f      	b.n	8000e7a <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e1a:	7f7a      	ldrb	r2, [r7, #29]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	1c58      	adds	r0, r3, #1
 8000e2a:	7f3a      	ldrb	r2, [r7, #28]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	3308      	adds	r3, #8
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3303      	adds	r3, #3
 8000e3e:	2208      	movs	r2, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	f015 fa95 	bl	8016370 <memcmp>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d113      	bne.n	8000e74 <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000e4c:	7f7a      	ldrb	r2, [r7, #29]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f107 010c 	add.w	r1, r7, #12
 8000e60:	2208      	movs	r2, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f015 fa84 	bl	8016370 <memcmp>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	77bb      	strb	r3, [r7, #30]
					break;
 8000e72:	e005      	b.n	8000e80 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e74:	7f7b      	ldrb	r3, [r7, #29]
 8000e76:	3301      	adds	r3, #1
 8000e78:	777b      	strb	r3, [r7, #29]
 8000e7a:	7f7b      	ldrb	r3, [r7, #29]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d9cc      	bls.n	8000e1a <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000e80:	7fbb      	ldrb	r3, [r7, #30]
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d03c      	beq.n	8000f06 <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000e8c:	7f3a      	ldrb	r2, [r7, #28]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	3308      	adds	r3, #8
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	f107 010c 	add.w	r1, r7, #12
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f015 fa62 	bl	8016370 <memcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d029      	beq.n	8000f06 <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000eb2:	7f3a      	ldrb	r2, [r7, #28]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f015 fa6a 	bl	80163a4 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000ed0:	7f3a      	ldrb	r2, [r7, #28]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f015 fa5c 	bl	80163a4 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000eec:	7f3a      	ldrb	r2, [r7, #28]
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	3313      	adds	r3, #19
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000f02:	2301      	movs	r3, #1
 8000f04:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000f06:	7f3b      	ldrb	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	773b      	strb	r3, [r7, #28]
 8000f0c:	7f3b      	ldrb	r3, [r7, #28]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f67f af7e 	bls.w	8000e10 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000f14:	2300      	movs	r3, #0
 8000f16:	777b      	strb	r3, [r7, #29]
 8000f18:	e0bc      	b.n	8001094 <updateFilterSection+0x2a8>
		UIDMatched = false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	773b      	strb	r3, [r7, #28]
 8000f22:	e01e      	b.n	8000f62 <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000f24:	7f7a      	ldrb	r2, [r7, #29]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	1c58      	adds	r0, r3, #1
 8000f34:	7f3a      	ldrb	r2, [r7, #28]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	3308      	adds	r3, #8
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	3303      	adds	r3, #3
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f015 fa10 	bl	8016370 <memcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000f56:	2301      	movs	r3, #1
 8000f58:	77bb      	strb	r3, [r7, #30]
				break;
 8000f5a:	e005      	b.n	8000f68 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f5c:	7f3b      	ldrb	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	773b      	strb	r3, [r7, #28]
 8000f62:	7f3b      	ldrb	r3, [r7, #28]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d9dd      	bls.n	8000f24 <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000f68:	7fbb      	ldrb	r3, [r7, #30]
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 808c 	beq.w	800108e <updateFilterSection+0x2a2>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000f76:	7f7a      	ldrb	r2, [r7, #29]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	3301      	adds	r3, #1
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f015 f9ef 	bl	8016370 <memcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d07a      	beq.n	800108e <updateFilterSection+0x2a2>
				// A new filter has been installed.
				bool stageEmpty; // Holder for the empty stage
				uint8_t stagePos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000f98:	7f7a      	ldrb	r2, [r7, #29]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	220a      	movs	r2, #10
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f015 f9dd 	bl	8016370 <memcmp>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d066      	beq.n	800108a <updateFilterSection+0x29e>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	76bb      	strb	r3, [r7, #26]
 8000fc0:	e021      	b.n	8001006 <updateFilterSection+0x21a>
						stageEmpty = true; // Assume the stage is empty
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	767b      	strb	r3, [r7, #25]
 8000fca:	e013      	b.n	8000ff4 <updateFilterSection+0x208>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000fcc:	7e7a      	ldrb	r2, [r7, #25]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3313      	adds	r3, #19
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	7ebb      	ldrb	r3, [r7, #26]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d101      	bne.n	8000fee <updateFilterSection+0x202>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000fea:	2300      	movs	r3, #0
 8000fec:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fee:	7e7b      	ldrb	r3, [r7, #25]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	767b      	strb	r3, [r7, #25]
 8000ff4:	7e7b      	ldrb	r3, [r7, #25]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d9e8      	bls.n	8000fcc <updateFilterSection+0x1e0>
							}
						}

						if (stageEmpty) {
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d106      	bne.n	800100e <updateFilterSection+0x222>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8001000:	7ebb      	ldrb	r3, [r7, #26]
 8001002:	3301      	adds	r3, #1
 8001004:	76bb      	strb	r3, [r7, #26]
 8001006:	7ebb      	ldrb	r3, [r7, #26]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d9da      	bls.n	8000fc2 <updateFilterSection+0x1d6>
 800100c:	e000      	b.n	8001010 <updateFilterSection+0x224>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 800100e:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[stagePos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 8001010:	7eba      	ldrb	r2, [r7, #26]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	3308      	adds	r3, #8
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	1cd8      	adds	r0, r3, #3
 8001024:	7f7a      	ldrb	r2, [r7, #29]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	2208      	movs	r2, #8
 8001036:	4619      	mov	r1, r3
 8001038:	f015 f9a9 	bl	801638e <memcpy>
					memcpy(currentFilters->filter[stagePos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 800103c:	7eba      	ldrb	r2, [r7, #26]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	1c58      	adds	r0, r3, #1
 800104e:	7f7a      	ldrb	r2, [r7, #29]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3308      	adds	r3, #8
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	3301      	adds	r3, #1
 8001060:	220a      	movs	r2, #10
 8001062:	4619      	mov	r1, r3
 8001064:	f015 f993 	bl	801638e <memcpy>
					currentFilters->filter[stagePos].position = stagePos + 1;
 8001068:	7eba      	ldrb	r2, [r7, #26]
 800106a:	7ebb      	ldrb	r3, [r7, #26]
 800106c:	3301      	adds	r3, #1
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	440b      	add	r3, r1
 800107e:	3313      	adds	r3, #19
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 8001084:	2302      	movs	r3, #2
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e001      	b.n	800108e <updateFilterSection+0x2a2>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 800108a:	2303      	movs	r3, #3
 800108c:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 800108e:	7f7b      	ldrb	r3, [r7, #29]
 8001090:	3301      	adds	r3, #1
 8001092:	777b      	strb	r3, [r7, #29]
 8001094:	7f7b      	ldrb	r3, [r7, #29]
 8001096:	2b02      	cmp	r3, #2
 8001098:	f67f af3f 	bls.w	8000f1a <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	701a      	strb	r2, [r3, #0]

	return status;
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af02      	add	r7, sp, #8

	// Initialize the temperature sensor
	LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 80010b6:	2220      	movs	r2, #32
 80010b8:	4921      	ldr	r1, [pc, #132]	; (8001140 <setupIOs+0x90>)
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <setupIOs+0x94>)
 80010bc:	f002 fba0 	bl	8003800 <LM75B_Init>

	// Initialize and Setup the E-Paper Display
	EPD_Init(EPD_2_0, &hspi2, &epd1);
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <setupIOs+0x98>)
 80010c2:	4922      	ldr	r1, [pc, #136]	; (800114c <setupIOs+0x9c>)
 80010c4:	2002      	movs	r0, #2
 80010c6:	f000 fd23 	bl	8001b10 <EPD_Init>

	// Initialize the GFX Library for the EPD
	Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <setupIOs+0x98>)
 80010cc:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <setupIOs+0x98>)
 80010d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010d2:	461a      	mov	r2, r3
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <setupIOs+0xa0>)
 80010d6:	f001 fed9 	bl	8002e8c <Canvas_Init>
	// Text rotation for a vertical display orientation
	canvas_SetRotate(&canvas1, ROTATE_90);
 80010da:	2101      	movs	r1, #1
 80010dc:	481c      	ldr	r0, [pc, #112]	; (8001150 <setupIOs+0xa0>)
 80010de:	f002 f8ff 	bl	80032e0 <canvas_SetRotate>

	// Clear the EPD
	EPD_begin(&epd1);
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <setupIOs+0x98>)
 80010e4:	f000 fe48 	bl	8001d78 <EPD_begin>
	EPD_clear(&epd1);
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <setupIOs+0x98>)
 80010ea:	f001 f9d1 	bl	8002490 <EPD_clear>
	EPD_end(&epd1);
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <setupIOs+0x98>)
 80010f0:	f001 f8b2 	bl	8002258 <EPD_end>

	// Render a string of text to the buffer image
	canvas_setBGImage(&canvas1, image_background);
 80010f4:	4917      	ldr	r1, [pc, #92]	; (8001154 <setupIOs+0xa4>)
 80010f6:	4816      	ldr	r0, [pc, #88]	; (8001150 <setupIOs+0xa0>)
 80010f8:	f002 fadb 	bl	80036b2 <canvas_setBGImage>
	canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <setupIOs+0xa8>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <setupIOs+0xac>)
 8001106:	2203      	movs	r2, #3
 8001108:	210a      	movs	r1, #10
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <setupIOs+0xa0>)
 800110c:	f002 fa8b 	bl	8003626 <canvas_DrawStringAt>
	// Update the EPD with the new image
	canvas_PrintEPD(&canvas1, &epd1);
 8001110:	490d      	ldr	r1, [pc, #52]	; (8001148 <setupIOs+0x98>)
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <setupIOs+0xa0>)
 8001114:	f002 fab8 	bl	8003688 <canvas_PrintEPD>
	//  BQ27441_Init(&hi2c1, &lipo1);
	//  // Setup the Fuel Gauge
	//  BQ27441_Setup(&lipo1);

	// Initialize the SD Card
	dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <setupIOs+0xb0>)
 800111c:	f000 faf4 	bl	8001708 <dataLoggerInit>

	HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2108      	movs	r1, #8
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <setupIOs+0xb4>)
 8001126:	f004 fc29 	bl	800597c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800112a:	2005      	movs	r0, #5
 800112c:	f004 f936 	bl	800539c <HAL_Delay>
	spiInit(&hspi1);
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <setupIOs+0xb8>)
 8001132:	f003 f96f 	bl	8004414 <spiInit>

	rfidControllerInit();
 8001136:	f003 f889 	bl	800424c <rfidControllerInit>
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020400 	.word	0x40020400
 8001144:	20000fd4 	.word	0x20000fd4
 8001148:	20000ed4 	.word	0x20000ed4
 800114c:	20000f7c 	.word	0x20000f7c
 8001150:	20000f60 	.word	0x20000f60
 8001154:	08016db8 	.word	0x08016db8
 8001158:	2000003c 	.word	0x2000003c
 800115c:	08016bd4 	.word	0x08016bd4
 8001160:	40020800 	.word	0x40020800
 8001164:	40020000 	.word	0x40020000
 8001168:	200010cc 	.word	0x200010cc

0800116c <processIOs>:


void processIOs(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	filterSectionStatus_t filterStatus;

	while (1) {

		// Check ISR events
		checkISREvents();
 8001172:	f000 f85b 	bl	800122c <checkISREvents>

		switch (processState) {
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <processIOs+0xa8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d02d      	beq.n	80011da <processIOs+0x6e>
 800117e:	2b02      	cmp	r3, #2
 8001180:	d043      	beq.n	800120a <processIOs+0x9e>
 8001182:	2b00      	cmp	r3, #0
 8001184:	d145      	bne.n	8001212 <processIOs+0xa6>
			case NORMAL_OPERATION:
				// Check on the CLI to see if any new commands are present
				//checkCliStatus();

				// Find filters present in the matte box
				checkFilterTags(&dTags);
 8001186:	4824      	ldr	r0, [pc, #144]	; (8001218 <processIOs+0xac>)
 8001188:	f003 f878 	bl	800427c <checkFilterTags>

				// Compare found filter tags with previous filter section
				filterStatus = updateFilterSection(&dTags, &fSection);
 800118c:	4923      	ldr	r1, [pc, #140]	; (800121c <processIOs+0xb0>)
 800118e:	4822      	ldr	r0, [pc, #136]	; (8001218 <processIOs+0xac>)
 8001190:	f7ff fe2c 	bl	8000dec <updateFilterSection>
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]

				switch (filterStatus) {
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d818      	bhi.n	80011d0 <processIOs+0x64>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <processIOs+0x38>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011d1 	.word	0x080011d1
 80011a8:	080011b5 	.word	0x080011b5
 80011ac:	080011b5 	.word	0x080011b5
 80011b0:	080011c9 	.word	0x080011c9
						break;

					case FILTER_REMOVED:
					case FILTER_INSTALLED:
						// Update the EPD with the new filter line up.
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80011b4:	2300      	movs	r3, #0
 80011b6:	4a19      	ldr	r2, [pc, #100]	; (800121c <processIOs+0xb0>)
 80011b8:	4919      	ldr	r1, [pc, #100]	; (8001220 <processIOs+0xb4>)
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <processIOs+0xb8>)
 80011bc:	f001 feaa 	bl	8002f14 <canvas_DrawFilters>
						// Log to the SD Card
						SDDataLog(&fSection);
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <processIOs+0xb0>)
 80011c2:	f000 fc39 	bl	8001a38 <SDDataLog>
						break;
 80011c6:	e003      	b.n	80011d0 <processIOs+0x64>

					case UNKNOWN_FILTER_NAME:
						// Change state
						processState = UPDATE_FILTER_NAME;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <processIOs+0xa8>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
						break;
 80011ce:	bf00      	nop
				}

				// TODO -  Go to sleep here
				//gotoSleep();

				HAL_Delay(500);
 80011d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d4:	f004 f8e2 	bl	800539c <HAL_Delay>
				break;
 80011d8:	e01b      	b.n	8001212 <processIOs+0xa6>

			case CHANGE_FILTER_POS:
				// Wait for another button press. Timeout after X amount of time.
				if (timeoutCtr >= FILTER_POSITION_TIMEOUT) {
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <processIOs+0xbc>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011e2:	d308      	bcc.n	80011f6 <processIOs+0x8a>
					// Draw stored
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80011e4:	2300      	movs	r3, #0
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <processIOs+0xb0>)
 80011e8:	490d      	ldr	r1, [pc, #52]	; (8001220 <processIOs+0xb4>)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <processIOs+0xb8>)
 80011ec:	f001 fe92 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <processIOs+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
				}

				HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f004 f8d0 	bl	800539c <HAL_Delay>
				timeoutCtr++;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <processIOs+0xbc>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <processIOs+0xbc>)
 8001206:	801a      	strh	r2, [r3, #0]
				break;
 8001208:	e003      	b.n	8001212 <processIOs+0xa6>

			case UPDATE_FILTER_NAME:

				// Place Holder
				processState = NORMAL_OPERATION;
 800120a:	4b02      	ldr	r3, [pc, #8]	; (8001214 <processIOs+0xa8>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
				break;
 8001210:	bf00      	nop
		checkISREvents();
 8001212:	e7ae      	b.n	8001172 <processIOs+0x6>
 8001214:	20000254 	.word	0x20000254
 8001218:	20000e9c 	.word	0x20000e9c
 800121c:	20000f24 	.word	0x20000f24
 8001220:	20000ed4 	.word	0x20000ed4
 8001224:	20000f60 	.word	0x20000f60
 8001228:	20000f6e 	.word	0x20000f6e

0800122c <checkISREvents>:
}

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
void checkISREvents(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	bool posFound;
//	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1};

	if (isr_flags > 0){
 8001232:	4bae      	ldr	r3, [pc, #696]	; (80014ec <checkISREvents+0x2c0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8193 	beq.w	8001562 <checkISREvents+0x336>
		if (isr_flags & INIT_FAT_FS) {
 800123c:	4bab      	ldr	r3, [pc, #684]	; (80014ec <checkISREvents+0x2c0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <checkISREvents+0x24>
			// An SD Card was inserted, Re-initialize FatFs and DataLogger
			dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	48a9      	ldr	r0, [pc, #676]	; (80014f0 <checkISREvents+0x2c4>)
 800124c:	f000 fa5c 	bl	8001708 <dataLoggerInit>
		}

		if (isr_flags & DEINIT_FAT_FS) {
 8001250:	4ba6      	ldr	r3, [pc, #664]	; (80014ec <checkISREvents+0x2c0>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <checkISREvents+0x34>
			// An SD Card was removed, De-initialize FatFs and DataLogger
			dataLoggerDeInit();
 800125c:	f000 faa6 	bl	80017ac <dataLoggerDeInit>
		}

		if (isr_flags & BTN_1_SH_PRESS) {
 8001260:	4ba2      	ldr	r3, [pc, #648]	; (80014ec <checkISREvents+0x2c0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d04d      	beq.n	8001308 <checkISREvents+0xdc>
			// Button 1 was short pressed.
			switch (processState) {
 800126c:	4ba1      	ldr	r3, [pc, #644]	; (80014f4 <checkISREvents+0x2c8>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d02f      	beq.n	80012d4 <checkISREvents+0xa8>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d044      	beq.n	8001302 <checkISREvents+0xd6>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d145      	bne.n	8001308 <checkISREvents+0xdc>
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 800127c:	2300      	movs	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	e010      	b.n	80012a8 <checkISREvents+0x7c>

						if (fSection.filter[i].position == 1) {
 8001286:	79ba      	ldrb	r2, [r7, #6]
 8001288:	499b      	ldr	r1, [pc, #620]	; (80014f8 <checkISREvents+0x2cc>)
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	440b      	add	r3, r1
 8001296:	3313      	adds	r3, #19
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <checkISREvents+0x76>
							posFound = true;
 800129e:	2301      	movs	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71bb      	strb	r3, [r7, #6]
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d9eb      	bls.n	8001286 <checkISREvents+0x5a>
						}
					}

					if (posFound) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d028      	beq.n	8001306 <checkISREvents+0xda>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 1;			// Log Button 1 as the first Selected Filter
 80012b4:	4b91      	ldr	r3, [pc, #580]	; (80014fc <checkISREvents+0x2d0>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80012ba:	4b91      	ldr	r3, [pc, #580]	; (8001500 <checkISREvents+0x2d4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 1);
 80012c0:	2301      	movs	r3, #1
 80012c2:	4a8d      	ldr	r2, [pc, #564]	; (80014f8 <checkISREvents+0x2cc>)
 80012c4:	498f      	ldr	r1, [pc, #572]	; (8001504 <checkISREvents+0x2d8>)
 80012c6:	4890      	ldr	r0, [pc, #576]	; (8001508 <checkISREvents+0x2dc>)
 80012c8:	f001 fe24 	bl	8002f14 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80012cc:	4b89      	ldr	r3, [pc, #548]	; (80014f4 <checkISREvents+0x2c8>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80012d2:	e018      	b.n	8001306 <checkISREvents+0xda>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 80012d4:	4b89      	ldr	r3, [pc, #548]	; (80014fc <checkISREvents+0x2d0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <checkISREvents+0xbc>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 80012dc:	4b87      	ldr	r3, [pc, #540]	; (80014fc <checkISREvents+0x2d0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f94e 	bl	8001584 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80012e8:	4b84      	ldr	r3, [pc, #528]	; (80014fc <checkISREvents+0x2d0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80012ee:	2300      	movs	r3, #0
 80012f0:	4a81      	ldr	r2, [pc, #516]	; (80014f8 <checkISREvents+0x2cc>)
 80012f2:	4984      	ldr	r1, [pc, #528]	; (8001504 <checkISREvents+0x2d8>)
 80012f4:	4884      	ldr	r0, [pc, #528]	; (8001508 <checkISREvents+0x2dc>)
 80012f6:	f001 fe0d 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80012fa:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <checkISREvents+0x2c8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
					break;
 8001300:	e002      	b.n	8001308 <checkISREvents+0xdc>

				case UPDATE_FILTER_NAME:
					// This button is reserved as "up". Change the list focus.
					// If the top slot is selected, load new page
					break;
 8001302:	bf00      	nop
 8001304:	e000      	b.n	8001308 <checkISREvents+0xdc>
					break;
 8001306:	bf00      	nop
			}
		}

		if (isr_flags & BTN_1_LG_PRESS) {
 8001308:	4b78      	ldr	r3, [pc, #480]	; (80014ec <checkISREvents+0x2c0>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01f      	beq.n	8001354 <checkISREvents+0x128>
			// Button 1 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001314:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <checkISREvents+0x2c8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d003      	beq.n	8001324 <checkISREvents+0xf8>
 800131c:	2b02      	cmp	r3, #2
 800131e:	d018      	beq.n	8001352 <checkISREvents+0x126>
 8001320:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 8001322:	e017      	b.n	8001354 <checkISREvents+0x128>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 8001324:	4b75      	ldr	r3, [pc, #468]	; (80014fc <checkISREvents+0x2d0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <checkISREvents+0x10c>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 800132c:	4b73      	ldr	r3, [pc, #460]	; (80014fc <checkISREvents+0x2d0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f926 	bl	8001584 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001338:	4b70      	ldr	r3, [pc, #448]	; (80014fc <checkISREvents+0x2d0>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 800133e:	2300      	movs	r3, #0
 8001340:	4a6d      	ldr	r2, [pc, #436]	; (80014f8 <checkISREvents+0x2cc>)
 8001342:	4970      	ldr	r1, [pc, #448]	; (8001504 <checkISREvents+0x2d8>)
 8001344:	4870      	ldr	r0, [pc, #448]	; (8001508 <checkISREvents+0x2dc>)
 8001346:	f001 fde5 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <checkISREvents+0x2c8>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
					break;
 8001350:	e000      	b.n	8001354 <checkISREvents+0x128>

				case UPDATE_FILTER_NAME:
					break;
 8001352:	bf00      	nop
			}
		}

		if (isr_flags & BTN_2_SH_PRESS) {
 8001354:	4b65      	ldr	r3, [pc, #404]	; (80014ec <checkISREvents+0x2c0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d04d      	beq.n	80013fc <checkISREvents+0x1d0>
			// Button 2 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001360:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <checkISREvents+0x2c8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d02f      	beq.n	80013c8 <checkISREvents+0x19c>
 8001368:	2b02      	cmp	r3, #2
 800136a:	d044      	beq.n	80013f6 <checkISREvents+0x1ca>
 800136c:	2b00      	cmp	r3, #0
 800136e:	d145      	bne.n	80013fc <checkISREvents+0x1d0>
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	717b      	strb	r3, [r7, #5]
 8001378:	e010      	b.n	800139c <checkISREvents+0x170>

						if (fSection.filter[i].position == 2) {
 800137a:	797a      	ldrb	r2, [r7, #5]
 800137c:	495e      	ldr	r1, [pc, #376]	; (80014f8 <checkISREvents+0x2cc>)
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	440b      	add	r3, r1
 800138a:	3313      	adds	r3, #19
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d101      	bne.n	8001396 <checkISREvents+0x16a>
							posFound = true;
 8001392:	2301      	movs	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	3301      	adds	r3, #1
 800139a:	717b      	strb	r3, [r7, #5]
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d9eb      	bls.n	800137a <checkISREvents+0x14e>
						}
					}

					if (posFound) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d028      	beq.n	80013fa <checkISREvents+0x1ce>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 2;			// Log Button 2 as the first Selected Filter
 80013a8:	4b54      	ldr	r3, [pc, #336]	; (80014fc <checkISREvents+0x2d0>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80013ae:	4b54      	ldr	r3, [pc, #336]	; (8001500 <checkISREvents+0x2d4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 2);
 80013b4:	2302      	movs	r3, #2
 80013b6:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <checkISREvents+0x2cc>)
 80013b8:	4952      	ldr	r1, [pc, #328]	; (8001504 <checkISREvents+0x2d8>)
 80013ba:	4853      	ldr	r0, [pc, #332]	; (8001508 <checkISREvents+0x2dc>)
 80013bc:	f001 fdaa 	bl	8002f14 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <checkISREvents+0x2c8>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80013c6:	e018      	b.n	80013fa <checkISREvents+0x1ce>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <checkISREvents+0x2d0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d005      	beq.n	80013dc <checkISREvents+0x1b0>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <checkISREvents+0x2d0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f8d4 	bl	8001584 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <checkISREvents+0x2d0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80013e2:	2300      	movs	r3, #0
 80013e4:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <checkISREvents+0x2cc>)
 80013e6:	4947      	ldr	r1, [pc, #284]	; (8001504 <checkISREvents+0x2d8>)
 80013e8:	4847      	ldr	r0, [pc, #284]	; (8001508 <checkISREvents+0x2dc>)
 80013ea:	f001 fd93 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <checkISREvents+0x2c8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
					break;
 80013f4:	e002      	b.n	80013fc <checkISREvents+0x1d0>

				case UPDATE_FILTER_NAME:
					break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <checkISREvents+0x1d0>
					break;
 80013fa:	bf00      	nop
			}
		}

		if (isr_flags & BTN_2_LG_PRESS) {
 80013fc:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <checkISREvents+0x2c0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01f      	beq.n	8001448 <checkISREvents+0x21c>
			// Button 2 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001408:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <checkISREvents+0x2c8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d003      	beq.n	8001418 <checkISREvents+0x1ec>
 8001410:	2b02      	cmp	r3, #2
 8001412:	d018      	beq.n	8001446 <checkISREvents+0x21a>
 8001414:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 8001416:	e017      	b.n	8001448 <checkISREvents+0x21c>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <checkISREvents+0x2d0>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d005      	beq.n	800142c <checkISREvents+0x200>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <checkISREvents+0x2d0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2102      	movs	r1, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f8ac 	bl	8001584 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <checkISREvents+0x2d0>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001432:	2300      	movs	r3, #0
 8001434:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <checkISREvents+0x2cc>)
 8001436:	4933      	ldr	r1, [pc, #204]	; (8001504 <checkISREvents+0x2d8>)
 8001438:	4833      	ldr	r0, [pc, #204]	; (8001508 <checkISREvents+0x2dc>)
 800143a:	f001 fd6b 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <checkISREvents+0x2c8>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
					break;
 8001444:	e000      	b.n	8001448 <checkISREvents+0x21c>

				case UPDATE_FILTER_NAME:
					break;
 8001446:	bf00      	nop
			}
		}

		if (isr_flags & BTN_3_SH_PRESS) {
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <checkISREvents+0x2c0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05e      	beq.n	8001512 <checkISREvents+0x2e6>
			// Button 3 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <checkISREvents+0x2c8>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d02f      	beq.n	80014bc <checkISREvents+0x290>
 800145c:	2b02      	cmp	r3, #2
 800145e:	d055      	beq.n	800150c <checkISREvents+0x2e0>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d156      	bne.n	8001512 <checkISREvents+0x2e6>
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	713b      	strb	r3, [r7, #4]
 800146c:	e010      	b.n	8001490 <checkISREvents+0x264>

						if (fSection.filter[i].position == 3) {
 800146e:	793a      	ldrb	r2, [r7, #4]
 8001470:	4921      	ldr	r1, [pc, #132]	; (80014f8 <checkISREvents+0x2cc>)
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	440b      	add	r3, r1
 800147e:	3313      	adds	r3, #19
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d101      	bne.n	800148a <checkISREvents+0x25e>
							posFound = true;
 8001486:	2301      	movs	r3, #1
 8001488:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800148a:	793b      	ldrb	r3, [r7, #4]
 800148c:	3301      	adds	r3, #1
 800148e:	713b      	strb	r3, [r7, #4]
 8001490:	793b      	ldrb	r3, [r7, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d9eb      	bls.n	800146e <checkISREvents+0x242>
						}
					}

					if (posFound) {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d039      	beq.n	8001510 <checkISREvents+0x2e4>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 3;			// Log Button 3 as the first Selected Filter
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <checkISREvents+0x2d0>)
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <checkISREvents+0x2d4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 3);
 80014a8:	2303      	movs	r3, #3
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <checkISREvents+0x2cc>)
 80014ac:	4915      	ldr	r1, [pc, #84]	; (8001504 <checkISREvents+0x2d8>)
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <checkISREvents+0x2dc>)
 80014b0:	f001 fd30 	bl	8002f14 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <checkISREvents+0x2c8>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80014ba:	e029      	b.n	8001510 <checkISREvents+0x2e4>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <checkISREvents+0x2d0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d005      	beq.n	80014d0 <checkISREvents+0x2a4>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <checkISREvents+0x2d0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2103      	movs	r1, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f85a 	bl	8001584 <changeFilterPosition>
					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <checkISREvents+0x2d0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80014d6:	2300      	movs	r3, #0
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <checkISREvents+0x2cc>)
 80014da:	490a      	ldr	r1, [pc, #40]	; (8001504 <checkISREvents+0x2d8>)
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <checkISREvents+0x2dc>)
 80014de:	f001 fd19 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <checkISREvents+0x2c8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
					break;
 80014e8:	e013      	b.n	8001512 <checkISREvents+0x2e6>
 80014ea:	bf00      	nop
 80014ec:	20000e98 	.word	0x20000e98
 80014f0:	40020800 	.word	0x40020800
 80014f4:	20000254 	.word	0x20000254
 80014f8:	20000f24 	.word	0x20000f24
 80014fc:	20000f6c 	.word	0x20000f6c
 8001500:	20000f6e 	.word	0x20000f6e
 8001504:	20000ed4 	.word	0x20000ed4
 8001508:	20000f60 	.word	0x20000f60

				case UPDATE_FILTER_NAME:
					break;
 800150c:	bf00      	nop
 800150e:	e000      	b.n	8001512 <checkISREvents+0x2e6>
					break;
 8001510:	bf00      	nop
			}
		}

		if (isr_flags & BTN_3_LG_PRESS) {
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <checkISREvents+0x340>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	da1f      	bge.n	800155c <checkISREvents+0x330>
			// Button 3 was long pressed. Update state to Update Filter Name
			switch (processState) {
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <checkISREvents+0x344>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <checkISREvents+0x300>
 8001524:	2b02      	cmp	r3, #2
 8001526:	d018      	beq.n	800155a <checkISREvents+0x32e>
 8001528:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 800152a:	e017      	b.n	800155c <checkISREvents+0x330>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <checkISREvents+0x348>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d005      	beq.n	8001540 <checkISREvents+0x314>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <checkISREvents+0x348>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2103      	movs	r1, #3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f822 	bl	8001584 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <checkISREvents+0x348>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001546:	2300      	movs	r3, #0
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <checkISREvents+0x34c>)
 800154a:	490c      	ldr	r1, [pc, #48]	; (800157c <checkISREvents+0x350>)
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <checkISREvents+0x354>)
 800154e:	f001 fce1 	bl	8002f14 <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <checkISREvents+0x344>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
					break;
 8001558:	e000      	b.n	800155c <checkISREvents+0x330>

				case UPDATE_FILTER_NAME:
					break;
 800155a:	bf00      	nop
			}
		}

		isr_flags = 0;	// Reset the flag after handling
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <checkISREvents+0x340>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	}
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000e98 	.word	0x20000e98
 8001570:	20000254 	.word	0x20000254
 8001574:	20000f6c 	.word	0x20000f6c
 8001578:	20000f24 	.word	0x20000f24
 800157c:	20000ed4 	.word	0x20000ed4
 8001580:	20000f60 	.word	0x20000f60

08001584 <changeFilterPosition>:

void changeFilterPosition(uint8_t firstBtn, uint8_t secondBtn) {
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	460a      	mov	r2, r1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1, -1, -1};
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <changeFilterPosition+0x138>)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4611      	mov	r1, r2
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	3302      	adds	r3, #2
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	701a      	strb	r2, [r3, #0]

	// The filter position switch is done with 2 steps.
	// Step 1. Loop through the filter positions, and transfer the positions into the proper slotIndex
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e022      	b.n	80015f2 <changeFilterPosition+0x6e>
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	73bb      	strb	r3, [r7, #14]
 80015b0:	e019      	b.n	80015e6 <changeFilterPosition+0x62>
			// Look for the filter in the associated slot index
			if (fSection.filter[j].position == i + 1) {
 80015b2:	7bba      	ldrb	r2, [r7, #14]
 80015b4:	4942      	ldr	r1, [pc, #264]	; (80016c0 <changeFilterPosition+0x13c>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	3313      	adds	r3, #19
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	3301      	adds	r3, #1
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <changeFilterPosition+0x5c>
				slotIndex[i] = j;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80015d6:	f107 0110 	add.w	r1, r7, #16
 80015da:	440b      	add	r3, r1
 80015dc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d9e2      	bls.n	80015b2 <changeFilterPosition+0x2e>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	3301      	adds	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d9d9      	bls.n	80015ac <changeFilterPosition+0x28>
		}
	}

	// Step 2. If there are any open spots, they will be represented as -1 within slotIndex.
	// We need to overwrite any -1's with usable filter indexes. That is what this loop is doing.
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	737b      	strb	r3, [r7, #13]
 80015fc:	e030      	b.n	8001660 <changeFilterPosition+0xdc>
		// Look for the filter in the associated slot index
		if (fSection.filter[i].position == 0) {
 80015fe:	7b7a      	ldrb	r2, [r7, #13]
 8001600:	492f      	ldr	r1, [pc, #188]	; (80016c0 <changeFilterPosition+0x13c>)
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	440b      	add	r3, r1
 800160e:	3313      	adds	r3, #19
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <changeFilterPosition+0xd6>
			// Find the first empty position
			uint8_t j = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 800161a:	e002      	b.n	8001622 <changeFilterPosition+0x9e>
				j++;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	f107 0210 	add.w	r2, r7, #16
 8001628:	4413      	add	r3, r2
 800162a:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 800162e:	43db      	mvns	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	09db      	lsrs	r3, r3, #7
 8001634:	b2da      	uxtb	r2, r3
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	2b02      	cmp	r3, #2
 800163a:	bf94      	ite	ls
 800163c:	2301      	movls	r3, #1
 800163e:	2300      	movhi	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4013      	ands	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e8      	bne.n	800161c <changeFilterPosition+0x98>
			}
			slotIndex[j] = i;
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001650:	f107 0110 	add.w	r1, r7, #16
 8001654:	440b      	add	r3, r1
 8001656:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800165a:	7b7b      	ldrb	r3, [r7, #13]
 800165c:	3301      	adds	r3, #1
 800165e:	737b      	strb	r3, [r7, #13]
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d9cb      	bls.n	80015fe <changeFilterPosition+0x7a>
	}
	// FYI. slotIndex is the place holder for the fSection.filter index. EG -> It is to be used within fSection.filter[slotIndex]

	// Now, we have a slotIndex that is referencing the proper filter order and we just need to reposition the filters now:
	// 1st button pressed goes to 2nd button slot
	fSection.filter[slotIndex[firstBtn - 1]].position = secondBtn;
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	3b01      	subs	r3, #1
 800166a:	f107 0210 	add.w	r2, r7, #16
 800166e:	4413      	add	r3, r2
 8001670:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001674:	461a      	mov	r2, r3
 8001676:	4912      	ldr	r1, [pc, #72]	; (80016c0 <changeFilterPosition+0x13c>)
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	440b      	add	r3, r1
 8001684:	3313      	adds	r3, #19
 8001686:	79ba      	ldrb	r2, [r7, #6]
 8001688:	701a      	strb	r2, [r3, #0]
	// 2nd button pressed goes to 1st button slot
	fSection.filter[slotIndex[secondBtn - 1]].position = firstBtn;
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	3b01      	subs	r3, #1
 800168e:	f107 0210 	add.w	r2, r7, #16
 8001692:	4413      	add	r3, r2
 8001694:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001698:	461a      	mov	r2, r3
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <changeFilterPosition+0x13c>)
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	3313      	adds	r3, #19
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	08016bdc 	.word	0x08016bdc
 80016c0:	20000f24 	.word	0x20000f24

080016c4 <isLogDirValid>:
static uint16_t sdPowerPin;

/******************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
bool isLogDirValid(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af00      	add	r7, sp, #0
	bool retVal = false;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DIR logDir;

	// Try to open the directory
	FRESULT res = f_opendir(&logDir, DL_LOG_DIR_PATH);
 80016d0:	463b      	mov	r3, r7
 80016d2:	490c      	ldr	r1, [pc, #48]	; (8001704 <isLogDirValid+0x40>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f013 f922 	bl	801491e <f_opendir>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (FR_OK == res)
 80016e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d106      	bne.n	80016f6 <isLogDirValid+0x32>
	{
		// The directory exists, close it back up
		f_closedir(&logDir);
 80016e8:	463b      	mov	r3, r7
 80016ea:	4618      	mov	r0, r3
 80016ec:	f013 f98a 	bl	8014a04 <f_closedir>
		retVal = true;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return retVal;
 80016f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3738      	adds	r7, #56	; 0x38
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	08016be0 	.word	0x08016be0

08001708 <dataLoggerInit>:

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/

DL_error dataLoggerInit(GPIO_TypeDef* sd_Port, uint16_t sd_Pin) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
	DL_error retVal = DATALOG_ERR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]

	// Check RTC. Initialize if needed.
	if (!rtcModuleIsInit()) {
 8001718:	f002 ff2a 	bl	8004570 <rtcModuleIsInit>
 800171c:	4603      	mov	r3, r0
 800171e:	f083 0301 	eor.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <dataLoggerInit+0x26>
		rtcModuleInit(&hrtc);
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <dataLoggerInit+0x90>)
 800172a:	f002 ff0d 	bl	8004548 <rtcModuleInit>
	}

	//Bind GPIO Port and Pin
	if (sdPowerPort == NULL) {
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <dataLoggerInit+0x94>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <dataLoggerInit+0x3a>
		sdPowerPort = sd_Port;
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <dataLoggerInit+0x94>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]
		sdPowerPin = sd_Pin;
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <dataLoggerInit+0x98>)
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	8013      	strh	r3, [r2, #0]
	}

	if (startSDCard() != DATALOG_OK) {
 8001742:	f000 f83f 	bl	80017c4 <startSDCard>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <dataLoggerInit+0x48>
		return DATALOG_ERR;
 800174c:	2301      	movs	r3, #1
 800174e:	e01f      	b.n	8001790 <dataLoggerInit+0x88>
	}

	// Verify that FatFs is initialized
	if (FatFsIsModuleInit()) {
 8001750:	f00b f8c0 	bl	800c8d4 <FatFsIsModuleInit>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d014      	beq.n	8001784 <dataLoggerInit+0x7c>
		if (!isLogDirValid()) {
 800175a:	f7ff ffb3 	bl	80016c4 <isLogDirValid>
 800175e:	4603      	mov	r3, r0
 8001760:	f083 0301 	eor.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00e      	beq.n	8001788 <dataLoggerInit+0x80>
			// Create the new directory and file
			FRESULT fr;
			fr = f_mkdir(DL_LOG_DIR_PATH);
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <dataLoggerInit+0x9c>)
 800176c:	f013 f970 	bl	8014a50 <f_mkdir>
 8001770:	4603      	mov	r3, r0
 8001772:	73bb      	strb	r3, [r7, #14]
			if (fr == FR_OK) {
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <dataLoggerInit+0x78>
				// The directory was created successfully
				retVal = DATALOG_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e003      	b.n	8001788 <dataLoggerInit+0x80>
			} else {
				// FatFs Error
				return retVal;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	e005      	b.n	8001790 <dataLoggerInit+0x88>
			}
		}
	} else {
		// FatFs Not Initialized
		return retVal;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	e003      	b.n	8001790 <dataLoggerInit+0x88>
	}

	dlModInit = true;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <dataLoggerInit+0xa0>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
	return retVal;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20001028 	.word	0x20001028
 800179c:	20000258 	.word	0x20000258
 80017a0:	2000025c 	.word	0x2000025c
 80017a4:	08016be0 	.word	0x08016be0
 80017a8:	20000255 	.word	0x20000255

080017ac <dataLoggerDeInit>:

DL_error dataLoggerDeInit(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	dlModInit = false;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <dataLoggerDeInit+0x14>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
	return stopSDCard();
 80017b6:	f000 f837 	bl	8001828 <stopSDCard>
 80017ba:	4603      	mov	r3, r0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000255 	.word	0x20000255

080017c4 <startSDCard>:

DL_error startSDCard(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	// See if a card is installed
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET){
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <startSDCard+0x58>)
 80017ce:	f004 f8bd 	bl	800594c <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <startSDCard+0x18>
		// No card is installed.
		return DATALOG_ERR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e01a      	b.n	8001812 <startSDCard+0x4e>
	}

	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_SET);
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <startSDCard+0x5c>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <startSDCard+0x60>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f004 f8c8 	bl	800597c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017ec:	2005      	movs	r0, #5
 80017ee:	f003 fdd5 	bl	800539c <HAL_Delay>
	DL_error ret = FatFsInit();
 80017f2:	f00b f829 	bl	800c848 <FatFsInit>
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]

	// If there is a problem with the FatFs, turn off the power.
	if (ret != DATALOG_OK) {
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <startSDCard+0x4c>
		HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <startSDCard+0x5c>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <startSDCard+0x60>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	f004 f8b6 	bl	800597c <HAL_GPIO_WritePin>
	}
	return ret;
 8001810:	79fb      	ldrb	r3, [r7, #7]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40020800 	.word	0x40020800
 8001820:	20000258 	.word	0x20000258
 8001824:	2000025c 	.word	0x2000025c

08001828 <stopSDCard>:

DL_error stopSDCard(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	// Unlink the FatFs and turn off the SD Card
	DL_error ret = FatFsDeInit();
 800182e:	f00b f841 	bl	800c8b4 <FatFsDeInit>
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <stopSDCard+0x28>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <stopSDCard+0x2c>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	f004 f89b 	bl	800597c <HAL_GPIO_WritePin>
	return ret;
 8001846:	79fb      	ldrb	r3, [r7, #7]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000258 	.word	0x20000258
 8001854:	2000025c 	.word	0x2000025c

08001858 <logDataToSD>:
/*	This function get's called from the FilterMachine whenever there's
 * a filter change. It first fills out a Log Record, then sends it to
 * this function to be copied to the SD Card.
 * */

DL_error logDataToSD(sdLog_record_t *sdLog) {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b0ba      	sub	sp, #232	; 0xe8
 800185c:	af02      	add	r7, sp, #8
 800185e:	6078      	str	r0, [r7, #4]

	// Ensure the modules are initialized
	if (dlModInit) {
 8001860:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <logDataToSD+0x1bc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80d0 	beq.w	8001a0a <logDataToSD+0x1b2>

		// Verify that the directory has been initialized
		if (!isLogDirValid()) {
 800186a:	f7ff ff2b 	bl	80016c4 <isLogDirValid>
 800186e:	4603      	mov	r3, r0
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <logDataToSD+0x26>
			return DATALOG_ERR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0c6      	b.n	8001a0c <logDataToSD+0x1b4>
		}

		// The log directory is valid. Start organizing the data.
		// Convert all non-string fields
		char dateStamp_s[11] = {0};
 800187e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	f8c3 2007 	str.w	r2, [r3, #7]
		char logFileName_s[35] = {0};
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2223      	movs	r2, #35	; 0x23
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f014 fd85 	bl	80163a4 <memset>
		char timeStamp_s[11] = {0};
 800189a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	f8c3 2007 	str.w	r2, [r3, #7]

		// Compile the Date
		sprintf(dateStamp_s, "%02d-%02d-%d",
				sdLog->dateTimeStamp.month,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80018ac:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.day,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80018b2:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.year);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80018b8:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	4955      	ldr	r1, [pc, #340]	; (8001a18 <logDataToSD+0x1c0>)
 80018c2:	f014 fe2f 	bl	8016524 <siprintf>

		// File Name Format: FilterLog_Date_Matte Box ID
		// Example: FilterLog_01-01-2020_LBSA0100P
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
				dateStamp_s,
				sdLog->matteBoxID);
 80018c6:	687b      	ldr	r3, [r7, #4]
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
 80018c8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80018cc:	f107 0008 	add.w	r0, r7, #8
 80018d0:	4952      	ldr	r1, [pc, #328]	; (8001a1c <logDataToSD+0x1c4>)
 80018d2:	f014 fe27 	bl	8016524 <siprintf>

		// Compile the time
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
				sdLog->dateTimeStamp.hours,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 80018da:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.minutes,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7adb      	ldrb	r3, [r3, #11]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 80018e0:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.seconds);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 80018e6:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	494c      	ldr	r1, [pc, #304]	; (8001a20 <logDataToSD+0x1c8>)
 80018f0:	f014 fe18 	bl	8016524 <siprintf>

		// Prepare to write the file
		FRESULT fr;
		FIL* logFil = malloc(sizeof(FIL));
 80018f4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80018f8:	f014 fd2a 	bl	8016350 <malloc>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		// Change to the directory
		fr = f_chdir(DL_LOG_DIR_PATH);
 8001902:	4848      	ldr	r0, [pc, #288]	; (8001a24 <logDataToSD+0x1cc>)
 8001904:	f012 ffc1 	bl	801488a <f_chdir>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		// If the file exists, open it. Otherwise, create the log file.
		fr = f_open(logFil, (const TCHAR*) logFileName_s, FA_OPEN_APPEND | FA_WRITE);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	4619      	mov	r1, r3
 8001916:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800191a:	f012 fbdb 	bl	80140d4 <f_open>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		if (fr != FR_OK) {
 8001924:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <logDataToSD+0xd8>
			// Can't open the file
			return DATALOG_ERR;
 800192c:	2301      	movs	r3, #1
 800192e:	e06d      	b.n	8001a0c <logDataToSD+0x1b4>
		}

		// The file is open and ready. Write the fields to the file.
		// Check to see if the file is empty
		if (logFil->fptr == 0){
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d12b      	bne.n	8001992 <logDataToSD+0x13a>
			// Brand New File. Make the Headers
			char headers[100] = {0};
 800193a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800193e:	2264      	movs	r2, #100	; 0x64
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f014 fd2e 	bl	80163a4 <memset>

			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
					sdLog->matteBoxID,
 8001948:	687a      	ldr	r2, [r7, #4]
			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
 800194a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800194e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001952:	4935      	ldr	r1, [pc, #212]	; (8001a28 <logDataToSD+0x1d0>)
 8001954:	f014 fde6 	bl	8016524 <siprintf>
					dateStamp_s);
			const char tmpStr[50] = "Time,Filter Slot 1,Filter Slot 2,Filter Slot 3\n";
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <logDataToSD+0x1d4>)
 800195a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800195e:	461d      	mov	r5, r3
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800196c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001970:	2300      	movs	r3, #0
 8001972:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			f_puts(headers, (FIL*) logFil);
 8001976:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800197a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800197e:	4618      	mov	r0, r3
 8001980:	f013 fe1e 	bl	80155c0 <f_puts>
			f_puts(tmpStr, (FIL*) logFil);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800198c:	4618      	mov	r0, r3
 800198e:	f013 fe17 	bl	80155c0 <f_puts>
		}

		// Write the Time Stamp
		f_puts(timeStamp_s, (FIL*) logFil);
 8001992:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001996:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800199a:	4618      	mov	r0, r3
 800199c:	f013 fe10 	bl	80155c0 <f_puts>

		// Write the Filter Name in Slot 1
		f_puts(sdLog->filterNames[0].filterName, (FIL*) logFil);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3312      	adds	r3, #18
 80019a4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019a8:	4618      	mov	r0, r3
 80019aa:	f013 fe09 	bl	80155c0 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 80019ae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019b2:	481f      	ldr	r0, [pc, #124]	; (8001a30 <logDataToSD+0x1d8>)
 80019b4:	f013 fe04 	bl	80155c0 <f_puts>

		// Write the Filter Name in Slot 2
		f_puts(sdLog->filterNames[1].filterName, (FIL*) logFil);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	331d      	adds	r3, #29
 80019bc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019c0:	4618      	mov	r0, r3
 80019c2:	f013 fdfd 	bl	80155c0 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 80019c6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <logDataToSD+0x1d8>)
 80019cc:	f013 fdf8 	bl	80155c0 <f_puts>

		// Write the Filter Name in Slot 3
		f_puts(sdLog->filterNames[2].filterName, (FIL*) logFil);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3328      	adds	r3, #40	; 0x28
 80019d4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019d8:	4618      	mov	r0, r3
 80019da:	f013 fdf1 	bl	80155c0 <f_puts>

		// Make a new line
		f_puts(DL_ENDL, (FIL*) logFil);
 80019de:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <logDataToSD+0x1dc>)
 80019e4:	f013 fdec 	bl	80155c0 <f_puts>

		// Finish and Close the file
		fr = f_close((FIL*) logFil);
 80019e8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80019ec:	f012 ff23 	bl	8014836 <f_close>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		// De-allocate the FatFs
		free(logFil);
 80019f6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80019fa:	f014 fcb1 	bl	8016360 <free>

		if (fr == FR_OK) {
 80019fe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <logDataToSD+0x1b2>
			// The file closed successfully
			return DATALOG_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <logDataToSD+0x1b4>
		}
	}
	return DATALOG_ERR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	37e0      	adds	r7, #224	; 0xe0
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	20000255 	.word	0x20000255
 8001a18:	08016bf0 	.word	0x08016bf0
 8001a1c:	08016c00 	.word	0x08016c00
 8001a20:	08016c14 	.word	0x08016c14
 8001a24:	08016be0 	.word	0x08016be0
 8001a28:	08016c24 	.word	0x08016c24
 8001a2c:	08016c68 	.word	0x08016c68
 8001a30:	08016c60 	.word	0x08016c60
 8001a34:	08016c64 	.word	0x08016c64

08001a38 <SDDataLog>:

DL_error SDDataLog(filterSection_t *fSection) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef dateStamp;
	RTC_TimeTypeDef timeStamp;
	sdLog_record_t sdLog = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2234      	movs	r2, #52	; 0x34
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f014 fcab 	bl	80163a4 <memset>

	if (!dlModInit) {
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <SDDataLog+0xd0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SDDataLog+0x28>
		return DATALOG_ERR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04f      	b.n	8001b00 <SDDataLog+0xc8>
	}

	// See if FATFS and SD Card are ready


	strcpy(sdLog.matteBoxID, MATTE_BOX_HW_ID);
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <SDDataLog+0xd4>)
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a68:	c303      	stmia	r3!, {r0, r1}
 8001a6a:	801a      	strh	r2, [r3, #0]

	// Get the Time and Store it
	rtcGetDateTime(&dateStamp, &timeStamp);
 8001a6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fd86 	bl	8004588 <rtcGetDateTime>

	// Load the DateTime results into the DataLog structure
	sdLog.dateTimeStamp.month = dateStamp.Month;
 8001a7c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001a80:	75fb      	strb	r3, [r7, #23]
	sdLog.dateTimeStamp.day = dateStamp.Date;
 8001a82:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001a86:	75bb      	strb	r3, [r7, #22]
	sdLog.dateTimeStamp.year = dateStamp.Year + 2000;
 8001a88:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	833b      	strh	r3, [r7, #24]

	sdLog.dateTimeStamp.hours = timeStamp.Hours;
 8001a96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a9a:	74bb      	strb	r3, [r7, #18]
	sdLog.dateTimeStamp.minutes = timeStamp.Minutes;
 8001a9c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001aa0:	74fb      	strb	r3, [r7, #19]
	sdLog.dateTimeStamp.seconds = timeStamp.Seconds;
 8001aa2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001aa6:	753b      	strb	r3, [r7, #20]

	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001aae:	e01d      	b.n	8001aec <SDDataLog+0xb4>
		strcpy(&sdLog.filterNames[i].filterName, fSection->filter[i].filterName);
 8001ab0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3310      	adds	r3, #16
 8001ac4:	440b      	add	r3, r1
 8001ac6:	1c98      	adds	r0, r3, #2
 8001ac8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	3301      	adds	r3, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	f014 fd41 	bl	8016564 <strcpy>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d9dd      	bls.n	8001ab0 <SDDataLog+0x78>
	}

	// Log to the SD Card
	return logDataToSD(&sdLog);
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fead 	bl	8001858 <logDataToSD>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3758      	adds	r7, #88	; 0x58
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000255 	.word	0x20000255
 8001b0c:	08016c9c 	.word	0x08016c9c

08001b10 <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001b1e:	f7ff f925 	bl	8000d6c <DWT_Init>

	epd->status = EPD_OK;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a81      	ldr	r2, [pc, #516]	; (8001d5c <EPD_Init+0x24c>)
 8001b56:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a81      	ldr	r2, [pc, #516]	; (8001d60 <EPD_Init+0x250>)
 8001b5c:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <EPD_Init+0x250>)
 8001b62:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <EPD_Init+0x250>)
 8001b68:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <EPD_Init+0x24c>)
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b76:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d80b      	bhi.n	8001b98 <EPD_Init+0x88>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <EPD_Init+0x78>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001bd7 	.word	0x08001bd7
 8001b8c:	08001c15 	.word	0x08001c15
 8001b90:	08001c53 	.word	0x08001c53
 8001b94:	08001c99 	.word	0x08001c99
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2260      	movs	r2, #96	; 0x60
 8001b9c:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2218      	movs	r2, #24
 8001bae:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	; (8001d64 <EPD_Init+0x254>)
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2209      	movs	r2, #9
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001bd4:	e080      	b.n	8001cd8 <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2290      	movs	r2, #144	; 0x90
 8001be0:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2212      	movs	r2, #18
 8001be6:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <EPD_Init+0x258>)
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2209      	movs	r2, #9
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001c12:	e061      	b.n	8001cd8 <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2260      	movs	r2, #96	; 0x60
 8001c18:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	22c8      	movs	r2, #200	; 0xc8
 8001c1e:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2219      	movs	r2, #25
 8001c24:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2218      	movs	r2, #24
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <EPD_Init+0x25c>)
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2209      	movs	r2, #9
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001c50:	e042      	b.n	8001cd8 <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f240 2276 	movw	r2, #630	; 0x276
 8001c58:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	22e8      	movs	r2, #232	; 0xe8
 8001c64:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	221d      	movs	r2, #29
 8001c6a:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2210      	movs	r2, #16
 8001c78:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <EPD_Init+0x260>)
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2209      	movs	r2, #9
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001c96:	e01f      	b.n	8001cd8 <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f240 2276 	movw	r2, #630	; 0x276
 8001c9e:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	22b0      	movs	r2, #176	; 0xb0
 8001ca4:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001cac:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2221      	movs	r2, #33	; 0x21
 8001cb2:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	222c      	movs	r2, #44	; 0x2c
 8001cb8:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <EPD_Init+0x264>)
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001cd6:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 8001ce0:	2119      	movs	r1, #25
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fbaa 	bl	800243c <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001cf6:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001cfc:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001cfe:	3303      	adds	r3, #3
 8001d00:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	649a      	str	r2, [r3, #72]	; 0x48
 8001d06:	e00a      	b.n	8001d1e <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d0c:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001d16:	3303      	adds	r3, #3
 8001d18:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	4618      	mov	r0, r3
 8001d28:	f014 fb12 	bl	8016350 <malloc>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f014 fb30 	bl	80163a4 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb4d 	bl	80023e4 <power_off>

	// COG state for partial update
	epd->COG_on = false;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20000000 	.word	0x20000000
 8001d68:	2000000c 	.word	0x2000000c
 8001d6c:	20000018 	.word	0x20000018
 8001d70:	20000024 	.word	0x20000024
 8001d74:	20000030 	.word	0x20000030

08001d78 <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0a8      	sub	sp, #160	; 0xa0
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 823f 	bne.w	800220a <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <EPD_begin+0x1d4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 8001d94:	f107 030f 	add.w	r3, r7, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fd75 	bl	8003888 <LM75B_ReadTemp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fb46 	bl	800243c <EPD_set_temperature>
 8001db0:	e003      	b.n	8001dba <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 8001db2:	2119      	movs	r1, #25
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fb41 	bl	800243c <EPD_set_temperature>
		}
		setTemp = false;
 8001dba:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <EPD_begin+0x1d4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6958      	ldr	r0, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8a1b      	ldrh	r3, [r3, #16]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f003 fdd3 	bl	800597c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6858      	ldr	r0, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	885b      	ldrh	r3, [r3, #2]
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	f003 fdcb 	bl	800597c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68d8      	ldr	r0, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	891b      	ldrh	r3, [r3, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	f003 fdc3 	bl	800597c <HAL_GPIO_WritePin>

	Delay_ms(5);
 8001df6:	2005      	movs	r0, #5
 8001df8:	f003 fad0 	bl	800539c <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8c1b      	ldrh	r3, [r3, #32]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4619      	mov	r1, r3
 8001e08:	f003 fdb8 	bl	800597c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6858      	ldr	r0, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4619      	mov	r1, r3
 8001e18:	f003 fdb0 	bl	800597c <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f003 fabd 	bl	800539c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6958      	ldr	r0, [r3, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8a1b      	ldrh	r3, [r3, #16]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f003 fda5 	bl	800597c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001e32:	2005      	movs	r0, #5
 8001e34:	f003 fab2 	bl	800539c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6958      	ldr	r0, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8a1b      	ldrh	r3, [r3, #16]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f003 fd9a 	bl	800597c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001e48:	2005      	movs	r0, #5
 8001e4a:	f003 faa7 	bl	800539c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6958      	ldr	r0, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8a1b      	ldrh	r3, [r3, #16]
 8001e56:	2201      	movs	r2, #1
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f003 fd8f 	bl	800597c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001e5e:	2005      	movs	r0, #5
 8001e60:	f003 fa9c 	bl	800539c <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001e64:	e002      	b.n	8001e6c <EPD_begin+0xf4>
		Delay_us(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f7fe ff9a 	bl	8000da0 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8b1b      	ldrh	r3, [r3, #24]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f003 fd68 	bl	800594c <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d0f1      	beq.n	8001e66 <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001e82:	2371      	movs	r3, #113	; 0x71
 8001e84:	743b      	strb	r3, [r7, #16]
 8001e86:	2300      	movs	r3, #0
 8001e88:	747b      	strb	r3, [r7, #17]
 8001e8a:	f107 020c 	add.w	r2, r7, #12
 8001e8e:	f107 0110 	add.w	r1, r7, #16
 8001e92:	2302      	movs	r3, #2
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 ffcf 	bl	8002e38 <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001e9a:	2371      	movs	r3, #113	; 0x71
 8001e9c:	753b      	strb	r3, [r7, #20]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	757b      	strb	r3, [r7, #21]
 8001ea2:	f107 020c 	add.w	r2, r7, #12
 8001ea6:	f107 0114 	add.w	r1, r7, #20
 8001eaa:	2302      	movs	r3, #2
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 ffc3 	bl	8002e38 <SPI_read>
	int cog_id = receive_buffer[1];
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 8001eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d006      	beq.n	8001ed2 <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa8a 	bl	80023e4 <power_off>
		return;
 8001ed0:	e19c      	b.n	800220c <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <EPD_begin+0x1d8>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	833b      	strh	r3, [r7, #24]
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	2202      	movs	r2, #2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 ff83 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <EPD_begin+0x1dc>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	83bb      	strh	r3, [r7, #28]
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 ff79 	bl	8002dec <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <EPD_begin+0x1e0>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	843b      	strh	r3, [r7, #32]
 8001f00:	f107 0320 	add.w	r3, r7, #32
 8001f04:	2202      	movs	r2, #2
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 ff6f 	bl	8002dec <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8001f0e:	2373      	movs	r3, #115	; 0x73
 8001f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001f1a:	f107 020c 	add.w	r2, r7, #12
 8001f1e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f22:	2302      	movs	r3, #2
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 ff87 	bl	8002e38 <SPI_read>
	int broken_panel = receive_buffer[1];
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 8001f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa4e 	bl	80023e4 <power_off>
		return;
 8001f48:	e160      	b.n	800220c <EPD_begin+0x494>
 8001f4a:	bf00      	nop
 8001f4c:	2000025e 	.word	0x2000025e
 8001f50:	08016ccc 	.word	0x08016ccc
 8001f54:	08016cd0 	.word	0x08016cd0
 8001f58:	08016cd4 	.word	0x08016cd4
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8001f5c:	4bad      	ldr	r3, [pc, #692]	; (8002214 <EPD_begin+0x49c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f66:	2202      	movs	r2, #2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 ff3e 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8001f70:	4ba9      	ldr	r3, [pc, #676]	; (8002218 <EPD_begin+0x4a0>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 ff34 	bl	8002dec <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 8001f84:	4ba5      	ldr	r3, [pc, #660]	; (800221c <EPD_begin+0x4a4>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	863b      	strh	r3, [r7, #48]	; 0x30
 8001f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 ff2a 	bl	8002dec <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 ff21 	bl	8002dec <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8001faa:	4b9d      	ldr	r3, [pc, #628]	; (8002220 <EPD_begin+0x4a8>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 ff17 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 8001fbe:	4b99      	ldr	r3, [pc, #612]	; (8002224 <EPD_begin+0x4ac>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8001fc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 ff0d 	bl	8002dec <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 8001fd2:	4b95      	ldr	r3, [pc, #596]	; (8002228 <EPD_begin+0x4b0>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fdc:	2202      	movs	r2, #2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 ff03 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8001fe6:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <EPD_begin+0x4a0>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fef8 	bl	8002dec <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 8001ffc:	4b8b      	ldr	r3, [pc, #556]	; (800222c <EPD_begin+0x4b4>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002008:	2202      	movs	r2, #2
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 feed 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 8002012:	4b87      	ldr	r3, [pc, #540]	; (8002230 <EPD_begin+0x4b8>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800201a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800201e:	2202      	movs	r2, #2
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fee2 	bl	8002dec <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8002028:	4b82      	ldr	r3, [pc, #520]	; (8002234 <EPD_begin+0x4bc>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002034:	2202      	movs	r2, #2
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fed7 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 800203e:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <EPD_begin+0x4c0>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800204a:	2202      	movs	r2, #2
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fecc 	bl	8002dec <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <EPD_begin+0x4c4>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800205c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002060:	2202      	movs	r2, #2
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fec1 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 800206a:	4b75      	ldr	r3, [pc, #468]	; (8002240 <EPD_begin+0x4c8>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002076:	2202      	movs	r2, #2
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 feb6 	bl	8002dec <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8002080:	4b6e      	ldr	r3, [pc, #440]	; (800223c <EPD_begin+0x4c4>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002088:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800208c:	2202      	movs	r2, #2
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 feab 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002096:	2372      	movs	r3, #114	; 0x72
 8002098:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80020a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020a6:	2202      	movs	r2, #2
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fe9e 	bl	8002dec <SPI_send>

	Delay_ms(5);
 80020b0:	2005      	movs	r0, #5
 80020b2:	f003 f973 	bl	800539c <HAL_Delay>

	bool dc_ok = false;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020c2:	e075      	b.n	80021b0 <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80020c4:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <EPD_begin+0x4cc>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80020cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020d0:	2202      	movs	r2, #2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fe89 	bl	8002dec <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 80020da:	4b59      	ldr	r3, [pc, #356]	; (8002240 <EPD_begin+0x4c8>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80020e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020e6:	2202      	movs	r2, #2
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fe7e 	bl	8002dec <SPI_send>

		Delay_ms(240);
 80020f0:	20f0      	movs	r0, #240	; 0xf0
 80020f2:	f003 f953 	bl	800539c <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80020f6:	4b53      	ldr	r3, [pc, #332]	; (8002244 <EPD_begin+0x4cc>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80020fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002102:	2202      	movs	r2, #2
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fe70 	bl	8002dec <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <EPD_begin+0x4c0>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002114:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002118:	2202      	movs	r2, #2
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fe65 	bl	8002dec <SPI_send>

		Delay_ms(40);
 8002122:	2028      	movs	r0, #40	; 0x28
 8002124:	f003 f93a 	bl	800539c <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <EPD_begin+0x4cc>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002134:	2202      	movs	r2, #2
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fe57 	bl	8002dec <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <EPD_begin+0x4d0>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002146:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800214a:	2202      	movs	r2, #2
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fe4c 	bl	8002dec <SPI_send>

		Delay_ms(40);
 8002154:	2028      	movs	r0, #40	; 0x28
 8002156:	f003 f921 	bl	800539c <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 800215a:	4b3c      	ldr	r3, [pc, #240]	; (800224c <EPD_begin+0x4d4>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002162:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002166:	2202      	movs	r2, #2
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fe3e 	bl	8002dec <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8002170:	2373      	movs	r3, #115	; 0x73
 8002172:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800217c:	f107 020c 	add.w	r2, r7, #12
 8002180:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002184:	2302      	movs	r3, #2
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fe56 	bl	8002e38 <SPI_read>
		int dc_state = receive_buffer[1];
 800218c:	7b7b      	ldrb	r3, [r7, #13]
 800218e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 8002192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <EPD_begin+0x42e>
			dc_ok = true;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 80021a4:	e008      	b.n	80021b8 <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 80021a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021aa:	3301      	adds	r3, #1
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	dd85      	ble.n	80020c4 <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 80021b8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f909 	bl	80023e4 <power_off>
		return;
 80021d2:	e01b      	b.n	800220c <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <EPD_begin+0x4d8>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80021dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021e0:	2202      	movs	r2, #2
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fe01 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <EPD_begin+0x4dc>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80021f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021f6:	2202      	movs	r2, #2
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fdf6 	bl	8002dec <SPI_send>

	epd->COG_on = true;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002208:	e000      	b.n	800220c <EPD_begin+0x494>
		return;
 800220a:	bf00      	nop
}
 800220c:	37a0      	adds	r7, #160	; 0xa0
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08016cd8 	.word	0x08016cd8
 8002218:	08016cdc 	.word	0x08016cdc
 800221c:	08016ce0 	.word	0x08016ce0
 8002220:	08016ce4 	.word	0x08016ce4
 8002224:	08016ce8 	.word	0x08016ce8
 8002228:	08016cec 	.word	0x08016cec
 800222c:	08016cf0 	.word	0x08016cf0
 8002230:	08016cf4 	.word	0x08016cf4
 8002234:	08016cf8 	.word	0x08016cf8
 8002238:	08016cfc 	.word	0x08016cfc
 800223c:	08016d00 	.word	0x08016d00
 8002240:	08016d04 	.word	0x08016d04
 8002244:	08016d08 	.word	0x08016d08
 8002248:	08016d0c 	.word	0x08016d0c
 800224c:	08016cd4 	.word	0x08016cd4
 8002250:	08016ccc 	.word	0x08016ccc
 8002254:	08016d10 	.word	0x08016d10

08002258 <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b090      	sub	sp, #64	; 0x40
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fa48 	bl	80026f6 <nothing_frame>

	if (EPD_2_7 == epd->size) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d103      	bne.n	8002276 <EPD_end+0x1e>
		dummy_line(epd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa60 	bl	8002734 <dummy_line>
 8002274:	e005      	b.n	8002282 <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa6f 	bl	800275a <border_dummy_line>
		Delay_ms(200);
 800227c:	20c8      	movs	r0, #200	; 0xc8
 800227e:	f003 f88d 	bl	800539c <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <EPD_end+0x16c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	813b      	strh	r3, [r7, #8]
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	2202      	movs	r2, #2
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fdab 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002296:	2372      	movs	r3, #114	; 0x72
 8002298:	733b      	strb	r3, [r7, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	737b      	strb	r3, [r7, #13]
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	2202      	movs	r2, #2
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fda0 	bl	8002dec <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <EPD_end+0x170>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	823b      	strh	r3, [r7, #16]
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	2202      	movs	r2, #2
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fd96 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <EPD_end+0x174>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	82bb      	strh	r3, [r7, #20]
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2202      	movs	r2, #2
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fd8c 	bl	8002dec <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <EPD_end+0x178>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	833b      	strh	r3, [r7, #24]
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	2202      	movs	r2, #2
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fd82 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <EPD_end+0x17c>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	83bb      	strh	r3, [r7, #28]
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	2202      	movs	r2, #2
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fd78 	bl	8002dec <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80022fc:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <EPD_end+0x178>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	843b      	strh	r3, [r7, #32]
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	2202      	movs	r2, #2
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fd6e 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002310:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <EPD_end+0x174>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	2202      	movs	r2, #2
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fd64 	bl	8002dec <SPI_send>

	Delay_ms(120);
 8002324:	2078      	movs	r0, #120	; 0x78
 8002326:	f003 f839 	bl	800539c <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <EPD_end+0x180>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002334:	2202      	movs	r2, #2
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fd57 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 800233e:	4b27      	ldr	r3, [pc, #156]	; (80023dc <EPD_end+0x184>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002348:	2202      	movs	r2, #2
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fd4d 	bl	8002dec <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <EPD_end+0x178>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	863b      	strh	r3, [r7, #48]	; 0x30
 8002358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800235c:	2202      	movs	r2, #2
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fd43 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002366:	2372      	movs	r3, #114	; 0x72
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002376:	2202      	movs	r2, #2
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fd36 	bl	8002dec <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <EPD_end+0x188>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	873b      	strh	r3, [r7, #56]	; 0x38
 8002386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238a:	2202      	movs	r2, #2
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fd2c 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <EPD_end+0x174>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800239a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800239e:	2202      	movs	r2, #2
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fd22 	bl	8002dec <SPI_send>

	Delay_ms(50);
 80023a8:	2032      	movs	r0, #50	; 0x32
 80023aa:	f002 fff7 	bl	800539c <HAL_Delay>

	power_off(epd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f818 	bl	80023e4 <power_off>

	epd->COG_on = false;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80023bc:	bf00      	nop
 80023be:	3740      	adds	r7, #64	; 0x40
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	08016cd8 	.word	0x08016cd8
 80023c8:	08016d00 	.word	0x08016d00
 80023cc:	08016d04 	.word	0x08016d04
 80023d0:	08016d08 	.word	0x08016d08
 80023d4:	08016cfc 	.word	0x08016cfc
 80023d8:	08016cf8 	.word	0x08016cf8
 80023dc:	08016d14 	.word	0x08016d14
 80023e0:	08016ce4 	.word	0x08016ce4

080023e4 <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6958      	ldr	r0, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8a1b      	ldrh	r3, [r3, #16]
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	f003 fac0 	bl	800597c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6858      	ldr	r0, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	885b      	ldrh	r3, [r3, #2]
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	f003 fab8 	bl	800597c <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68d8      	ldr	r0, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	891b      	ldrh	r3, [r3, #8]
 8002414:	2201      	movs	r2, #1
 8002416:	4619      	mov	r1, r3
 8002418:	f003 fab0 	bl	800597c <HAL_GPIO_WritePin>
	Delay_ms(150);
 800241c:	2096      	movs	r0, #150	; 0x96
 800241e:	f002 ffbd 	bl	800539c <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68d8      	ldr	r0, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	891b      	ldrh	r3, [r3, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	f003 faa5 	bl	800597c <HAL_GPIO_WritePin>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800244a:	461c      	mov	r4, r3
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f000 f86a 	bl	8002526 <temperature_to_factor_10x>
 8002452:	4603      	mov	r3, r0
 8002454:	fb03 f304 	mul.w	r3, r3, r4
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <EPD_set_temperature+0x38>)
 800245a:	fb82 1203 	smull	r1, r2, r2, r3
 800245e:	1092      	asrs	r2, r2, #2
 8002460:	17db      	asrs	r3, r3, #31
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	66666667 	.word	0x66666667

08002478 <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
	setTemp = true;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <EPD_set_enable_temperature+0x14>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	2000025e 	.word	0x2000025e

08002490 <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 8002498:	2200      	movs	r2, #0
 800249a:	21ff      	movs	r1, #255	; 0xff
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8e5 	bl	800266c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 80024a2:	2201      	movs	r2, #1
 80024a4:	21ff      	movs	r1, #255	; 0xff
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8e0 	bl	800266c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 80024ac:	2202      	movs	r2, #2
 80024ae:	21aa      	movs	r1, #170	; 0xaa
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8db 	bl	800266c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 80024b6:	2203      	movs	r2, #3
 80024b8:	21aa      	movs	r1, #170	; 0xaa
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8d6 	bl	800266c <frame_fixed_repeat>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 80024d2:	2200      	movs	r2, #0
 80024d4:	21aa      	movs	r1, #170	; 0xaa
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8c8 	bl	800266c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 80024dc:	2201      	movs	r2, #1
 80024de:	21aa      	movs	r1, #170	; 0xaa
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8c3 	bl	800266c <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 80024e6:	2302      	movs	r3, #2
 80024e8:	2200      	movs	r2, #0
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8e0 	bl	80026b2 <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 80024f2:	2303      	movs	r3, #3
 80024f4:	2200      	movs	r2, #0
 80024f6:	6839      	ldr	r1, [r7, #0]
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8da 	bl	80026b2 <frame_data_repeat>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 8002512:	2303      	movs	r3, #3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f8ca 	bl	80026b2 <frame_data_repeat>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f113 0f09 	cmn.w	r3, #9
 8002534:	da01      	bge.n	800253a <temperature_to_factor_10x+0x14>
		return 170;
 8002536:	23aa      	movs	r3, #170	; 0xaa
 8002538:	e01f      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f113 0f04 	cmn.w	r3, #4
 8002540:	da01      	bge.n	8002546 <temperature_to_factor_10x+0x20>
		return 120;
 8002542:	2378      	movs	r3, #120	; 0x78
 8002544:	e019      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b05      	cmp	r3, #5
 800254a:	dc01      	bgt.n	8002550 <temperature_to_factor_10x+0x2a>
		return 80;
 800254c:	2350      	movs	r3, #80	; 0x50
 800254e:	e014      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b0a      	cmp	r3, #10
 8002554:	dc01      	bgt.n	800255a <temperature_to_factor_10x+0x34>
		return 40;
 8002556:	2328      	movs	r3, #40	; 0x28
 8002558:	e00f      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	dc01      	bgt.n	8002564 <temperature_to_factor_10x+0x3e>
		return 30;
 8002560:	231e      	movs	r3, #30
 8002562:	e00a      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b14      	cmp	r3, #20
 8002568:	dc01      	bgt.n	800256e <temperature_to_factor_10x+0x48>
		return 20;
 800256a:	2314      	movs	r3, #20
 800256c:	e005      	b.n	800257a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b28      	cmp	r3, #40	; 0x28
 8002572:	dc01      	bgt.n	8002578 <temperature_to_factor_10x+0x52>
		return 10;
 8002574:	230a      	movs	r3, #10
 8002576:	e000      	b.n	800257a <temperature_to_factor_10x+0x54>
	}
	return 7;
 8002578:	2307      	movs	r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af02      	add	r7, sp, #8
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
 8002592:	4613      	mov	r3, r2
 8002594:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e00e      	b.n	80025ba <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	b299      	uxth	r1, r3
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	78bb      	ldrb	r3, [r7, #2]
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fb06 	bl	8002bc0 <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3ea      	bcc.n	800259c <frame_fixed+0x16>
	}
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b088      	sub	sp, #32
 80025d2:	af02      	add	r7, sp, #8
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11e      	bne.n	8002620 <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
 80025e6:	e014      	b.n	8002612 <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	b299      	uxth	r1, r3
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	441a      	add	r2, r3
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fada 	bl	8002bc0 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	3301      	adds	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800261a:	429a      	cmp	r2, r3
 800261c:	d3e4      	bcc.n	80025e8 <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 800261e:	e021      	b.n	8002664 <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002620:	2300      	movs	r3, #0
 8002622:	75bb      	strb	r3, [r7, #22]
 8002624:	e018      	b.n	8002658 <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 8002632:	7dbb      	ldrb	r3, [r7, #22]
 8002634:	b299      	uxth	r1, r3
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	18d0      	adds	r0, r2, r3
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2300      	movs	r3, #0
 800264a:	4602      	mov	r2, r0
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fab7 	bl	8002bc0 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002652:	7dbb      	ldrb	r3, [r7, #22]
 8002654:	3301      	adds	r3, #1
 8002656:	75bb      	strb	r3, [r7, #22]
 8002658:	7dbb      	ldrb	r3, [r7, #22]
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002660:	429a      	cmp	r2, r3
 8002662:	d3e0      	bcc.n	8002626 <frame_data+0x58>
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	4613      	mov	r3, r2
 800267a:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 8002680:	f002 fe80 	bl	8005384 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 8002686:	78ba      	ldrb	r2, [r7, #2]
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff7a 	bl	8002586 <frame_fixed>
		iters++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3301      	adds	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002698:	f002 fe74 	bl	8005384 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d3ed      	bcc.n	8002686 <frame_fixed_repeat+0x1a>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 80026c4:	f002 fe5e 	bl	8005384 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff ff7c 	bl	80025ce <frame_data>
		iters++;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 80026dc:	f002 fe52 	bl	8005384 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d3ed      	bcc.n	80026ca <frame_data_repeat+0x18>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e00d      	b.n	8002720 <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8002704:	2300      	movs	r3, #0
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2300      	movs	r3, #0
 800270e:	2200      	movs	r2, #0
 8002710:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fa53 	bl	8002bc0 <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3301      	adds	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4293      	cmp	r3, r2
 800272a:	dbeb      	blt.n	8002704 <nothing_frame+0xe>
	}
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa37 	bl	8002bc0 <one_line>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af02      	add	r7, sp, #8
 8002760:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 8002762:	2303      	movs	r3, #3
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	2200      	movs	r2, #0
 800276e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa24 	bl	8002bc0 <one_line>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 800278e:	2300      	movs	r3, #0
 8002790:	82fb      	strh	r3, [r7, #22]
 8002792:	e098      	b.n	80028c6 <even_pixels+0x146>
		if (NULL != data) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 808b 	beq.w	80028b2 <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80027a8:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00f      	beq.n	80027d4 <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	6a3a      	ldr	r2, [r7, #32]
 80027b8:	4413      	add	r3, r2
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	7d7b      	ldrb	r3, [r7, #21]
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80027c6:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 80027c8:	7d3b      	ldrb	r3, [r7, #20]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	7d3b      	ldrb	r3, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 80027d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d82e      	bhi.n	800283a <even_pixels+0xba>
 80027dc:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <even_pixels+0x64>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	08002809 	.word	0x08002809
 80027ec:	0800281b 	.word	0x0800281b
 80027f0:	0800282d 	.word	0x0800282d
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 80027f4:	7d7b      	ldrb	r3, [r7, #21]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002804:	757b      	strb	r3, [r7, #21]
				break;
 8002806:	e018      	b.n	800283a <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 8002808:	7d7b      	ldrb	r3, [r7, #21]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3355      	adds	r3, #85	; 0x55
 8002816:	757b      	strb	r3, [r7, #21]
				break;
 8002818:	e00f      	b.n	800283a <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 800281a:	7d7b      	ldrb	r3, [r7, #21]
 800281c:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002820:	43db      	mvns	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002828:	757b      	strb	r3, [r7, #21]
				break;
 800282a:	e006      	b.n	800283a <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 800282c:	7d7b      	ldrb	r3, [r7, #21]
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002836:	757b      	strb	r3, [r7, #21]
				break;
 8002838:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 800283a:	7d7a      	ldrb	r2, [r7, #21]
 800283c:	7d3b      	ldrb	r3, [r7, #20]
 800283e:	4013      	ands	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	b25a      	sxtb	r2, r3
 8002844:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002848:	43db      	mvns	r3, r3
 800284a:	b25b      	sxtb	r3, r3
 800284c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002850:	b25b      	sxtb	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	b25b      	sxtb	r3, r3
 8002856:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 8002858:	7d7b      	ldrb	r3, [r7, #21]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 800285e:	7d7b      	ldrb	r3, [r7, #21]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 800286a:	7d7b      	ldrb	r3, [r7, #21]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 8002876:	7d7b      	ldrb	r3, [r7, #21]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 800287e:	7cbb      	ldrb	r3, [r7, #18]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	b25a      	sxtb	r2, r3
 8002884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002888:	4313      	orrs	r3, r2
 800288a:	b25a      	sxtb	r2, r3
 800288c:	7c7b      	ldrb	r3, [r7, #17]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	b25b      	sxtb	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	b25a      	sxtb	r2, r3
 8002896:	7c3b      	ldrb	r3, [r7, #16]
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	b25b      	sxtb	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1c59      	adds	r1, r3, #1
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	6011      	str	r1, [r2, #0]
 80028ac:	7d7a      	ldrb	r2, [r7, #21]
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e006      	b.n	80028c0 <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	6011      	str	r1, [r2, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	3301      	adds	r3, #1
 80028c4:	82fb      	strh	r3, [r7, #22]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028ca:	8afa      	ldrh	r2, [r7, #22]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f4ff af61 	bcc.w	8002794 <even_pixels+0x14>
		}
	}
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028f2:	82fb      	strh	r3, [r7, #22]
 80028f4:	e072      	b.n	80029dc <odd_pixels+0xfc>
		if (NULL != data) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d065      	beq.n	80029c8 <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 80028fc:	8afb      	ldrh	r3, [r7, #22]
 80028fe:	3b01      	subs	r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800290a:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 800290c:	23ff      	movs	r3, #255	; 0xff
 800290e:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	3b01      	subs	r3, #1
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	4413      	add	r3, r2
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	7d7b      	ldrb	r3, [r7, #21]
 8002922:	4053      	eors	r3, r2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800292a:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 800292c:	7d3b      	ldrb	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	b25a      	sxtb	r2, r3
 8002932:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	b25b      	sxtb	r3, r3
 800293a:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 800293c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002940:	2b03      	cmp	r3, #3
 8002942:	d82a      	bhi.n	800299a <odd_pixels+0xba>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <odd_pixels+0x6c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	0800295d 	.word	0x0800295d
 8002950:	0800296d 	.word	0x0800296d
 8002954:	0800297b 	.word	0x0800297b
 8002958:	08002991 	.word	0x08002991
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 800295c:	7d7b      	ldrb	r3, [r7, #21]
 800295e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002968:	757b      	strb	r3, [r7, #21]
				break;
 800296a:	e016      	b.n	800299a <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 800296c:	7d7b      	ldrb	r3, [r7, #21]
 800296e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3355      	adds	r3, #85	; 0x55
 8002976:	757b      	strb	r3, [r7, #21]
				break;
 8002978:	e00f      	b.n	800299a <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 800297a:	7d7b      	ldrb	r3, [r7, #21]
 800297c:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002980:	b2db      	uxtb	r3, r3
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	b25b      	sxtb	r3, r3
 8002986:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800298a:	b25b      	sxtb	r3, r3
 800298c:	757b      	strb	r3, [r7, #21]
				break;
 800298e:	e004      	b.n	800299a <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 8002990:	7d7b      	ldrb	r3, [r7, #21]
 8002992:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002996:	757b      	strb	r3, [r7, #21]
				break;
 8002998:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 800299a:	7d7a      	ldrb	r2, [r7, #21]
 800299c:	7d3b      	ldrb	r3, [r7, #20]
 800299e:	4013      	ands	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	b25a      	sxtb	r2, r3
 80029a4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	7d7a      	ldrb	r2, [r7, #21]
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e006      	b.n	80029d6 <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c59      	adds	r1, r3, #1
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	6011      	str	r1, [r2, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	3b01      	subs	r3, #1
 80029da:	82fb      	strh	r3, [r7, #22]
 80029dc:	8afb      	ldrh	r3, [r7, #22]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d189      	bne.n	80028f6 <odd_pixels+0x16>
		}
	}
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002a0e:	4013      	ands	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f243 3333 	movw	r3, #13107	; 0x3333
 8002a26:	4013      	ands	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	b21a      	sxth	r2, r3
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f245 5355 	movw	r3, #21845	; 0x5555
 8002a3e:	4013      	ands	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
	return value;
 8002a42:	88fb      	ldrh	r3, [r7, #6]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a62:	82fb      	strh	r3, [r7, #22]
 8002a64:	e0a1      	b.n	8002baa <all_pixels+0x15a>
		if (NULL != data) {
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808d 	beq.w	8002b88 <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 8002a6e:	8afb      	ldrh	r3, [r7, #22]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ffb8 	bl	80029f0 <interleave_bits>
 8002a80:	4603      	mov	r3, r0
 8002a82:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 8002a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a88:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01a      	beq.n	8002ac6 <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6a3a      	ldr	r2, [r7, #32]
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffa7 	bl	80029f0 <interleave_bits>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 8002aa6:	8a3a      	ldrh	r2, [r7, #16]
 8002aa8:	8abb      	ldrh	r3, [r7, #20]
 8002aaa:	4053      	eors	r3, r2
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	f245 5355 	movw	r3, #21845	; 0x5555
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 8002ab6:	8a3b      	ldrh	r3, [r7, #16]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	b21a      	sxth	r2, r3
 8002abc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 8002ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d839      	bhi.n	8002b42 <all_pixels+0xf2>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <all_pixels+0x84>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002af9 	.word	0x08002af9
 8002adc:	08002b0f 	.word	0x08002b0f
 8002ae0:	08002b2d 	.word	0x08002b2d
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 8002ae4:	8abb      	ldrh	r3, [r7, #20]
 8002ae6:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002aea:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <all_pixels+0x16c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	82bb      	strh	r3, [r7, #20]
				break;
 8002af6:	e024      	b.n	8002b42 <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 8002af8:	8abb      	ldrh	r3, [r7, #20]
 8002afa:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002afe:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002b08:	3355      	adds	r3, #85	; 0x55
 8002b0a:	82bb      	strh	r3, [r7, #20]
				break;
 8002b0c:	e019      	b.n	8002b42 <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002b0e:	8abb      	ldrh	r3, [r7, #20]
 8002b10:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002b14:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002b22:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	82bb      	strh	r3, [r7, #20]
				break;
 8002b2a:	e00a      	b.n	8002b42 <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002b2c:	8abb      	ldrh	r3, [r7, #20]
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002b3a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8002b3e:	82bb      	strh	r3, [r7, #20]
				break;
 8002b40:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 8002b42:	8aba      	ldrh	r2, [r7, #20]
 8002b44:	8a7b      	ldrh	r3, [r7, #18]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	b219      	sxth	r1, r3
 8002b54:	f245 5355 	movw	r3, #21845	; 0x5555
 8002b58:	400b      	ands	r3, r1
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 8002b62:	8abb      	ldrh	r3, [r7, #20]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	b298      	uxth	r0, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	b2c2      	uxtb	r2, r0
 8002b74:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c59      	adds	r1, r3, #1
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	6011      	str	r1, [r2, #0]
 8002b80:	8aba      	ldrh	r2, [r7, #20]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00d      	b.n	8002ba4 <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1c59      	adds	r1, r3, #1
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	6011      	str	r1, [r2, #0]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002ba4:	8afb      	ldrh	r3, [r7, #22]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	82fb      	strh	r3, [r7, #22]
 8002baa:	8afb      	ldrh	r3, [r7, #22]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f47f af5a 	bne.w	8002a66 <all_pixels+0x16>
		}
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	ffffaaaa 	.word	0xffffaaaa

08002bc0 <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 8002bd4:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <one_line+0x220>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	833b      	strh	r3, [r7, #24]
 8002bda:	f107 0318 	add.w	r3, r7, #24
 8002bde:	2202      	movs	r2, #2
 8002be0:	4619      	mov	r1, r3
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f902 	bl	8002dec <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	617a      	str	r2, [r7, #20]
 8002bf4:	2272      	movs	r2, #114	; 0x72
 8002bf6:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <one_line+0x4c>
		*p++ = 0x00;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	617a      	str	r2, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03e      	beq.n	8002c94 <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 8002c16:	7a7a      	ldrb	r2, [r7, #9]
 8002c18:	f107 0114 	add.w	r1, r7, #20
 8002c1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe58 	bl	80028e0 <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c36:	e01c      	b.n	8002c72 <one_line+0xb2>
			if (line / 4 == b - 1) {
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c42:	3b01      	subs	r3, #1
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d10c      	bne.n	8002c62 <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f103 	lsl.w	r1, r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	617a      	str	r2, [r7, #20]
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e004      	b.n	8002c6c <one_line+0xac>
			} else {
				*p++ = 0x00;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	617a      	str	r2, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002c6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1df      	bne.n	8002c38 <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 8002c78:	7a7a      	ldrb	r2, [r7, #9]
 8002c7a:	f107 0114 	add.w	r1, r7, #20
 8002c7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fd77 	bl	8002780 <even_pixels>
 8002c92:	e05b      	b.n	8002d4c <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002c94:	2300      	movs	r3, #0
 8002c96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c98:	e01e      	b.n	8002cd8 <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d011      	beq.n	8002cc8 <one_line+0x108>
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10b      	bne.n	8002cc8 <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	f003 0306 	and.w	r3, r3, #6
 8002cb6:	22c0      	movs	r2, #192	; 0xc0
 8002cb8:	fa42 f103 	asr.w	r1, r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	617a      	str	r2, [r7, #20]
 8002cc2:	b2ca      	uxtb	r2, r1
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e004      	b.n	8002cd2 <one_line+0x112>
			} else {
				*p++ = 0x00;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	617a      	str	r2, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3db      	bcc.n	8002c9a <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 8002ce2:	7a7a      	ldrb	r2, [r7, #9]
 8002ce4:	f107 0114 	add.w	r1, r7, #20
 8002ce8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff feaa 	bl	8002a50 <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d00:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d02:	e020      	b.n	8002d46 <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <one_line+0x176>
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d10b      	bne.n	8002d36 <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	f003 0306 	and.w	r3, r3, #6
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f103 	lsl.w	r1, r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	617a      	str	r2, [r7, #20]
 8002d30:	b2ca      	uxtb	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e004      	b.n	8002d40 <one_line+0x180>
			} else {
				*p++ = 0x00;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	617a      	str	r2, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d42:	3b01      	subs	r3, #1
 8002d44:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1db      	bne.n	8002d04 <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d003      	beq.n	8002d5e <one_line+0x19e>
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d007      	beq.n	8002d6a <one_line+0x1aa>
 8002d5a:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 8002d5c:	e01b      	b.n	8002d96 <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	617a      	str	r2, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
		break;
 8002d68:	e015      	b.n	8002d96 <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 8002d6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db10      	blt.n	8002d94 <one_line+0x1d4>
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	dd02      	ble.n	8002d7c <one_line+0x1bc>
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d006      	beq.n	8002d88 <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 8002d7a:	e00b      	b.n	8002d94 <one_line+0x1d4>
			*p++ = 0x00;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	617a      	str	r2, [r7, #20]
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
			break;
 8002d86:	e005      	b.n	8002d94 <one_line+0x1d4>
			*p++ = 0xaa;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	617a      	str	r2, [r7, #20]
 8002d8e:	22aa      	movs	r2, #170	; 0xaa
 8002d90:	701a      	strb	r2, [r3, #0]
			break;
 8002d92:	bf00      	nop
		break;
 8002d94:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f81f 	bl	8002dec <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <one_line+0x224>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	83bb      	strh	r3, [r7, #28]
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	2202      	movs	r2, #2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f815 	bl	8002dec <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <one_line+0x228>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	843b      	strh	r3, [r7, #32]
 8002dc8:	f107 0320 	add.w	r3, r7, #32
 8002dcc:	2202      	movs	r2, #2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f80b 	bl	8002dec <SPI_send>

	//Delay_ms(1);
}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	08016d18 	.word	0x08016d18
 8002de4:	08016ccc 	.word	0x08016ccc
 8002de8:	08016d1c 	.word	0x08016d1c

08002dec <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8c1b      	ldrh	r3, [r3, #32]
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	f002 fdb9 	bl	800597c <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	f007 f871 	bl	8009efc <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8c1b      	ldrh	r3, [r3, #32]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4619      	mov	r1, r3
 8002e26:	f002 fda9 	bl	800597c <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f7fd ffb8 	bl	8000da0 <DWT_Delay>
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8c1b      	ldrh	r3, [r3, #32]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4619      	mov	r1, r3
 8002e52:	f002 fd93 	bl	800597c <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	f007 f97c 	bl	800a164 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8c1b      	ldrh	r3, [r3, #32]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4619      	mov	r1, r3
 8002e78:	f002 fd80 	bl	800597c <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f7fd ff8f 	bl	8000da0 <DWT_Delay>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <Canvas_Init>:

/************************************************************************************************
 * GLOBAL FUNCTIONS
 ***********************************************************************************************/

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	883a      	ldrh	r2, [r7, #0]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f013 fa53 	bl	8016350 <malloc>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <Canvas_Init+0x84>)
 8002eb0:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <Canvas_Init+0x84>)
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	883a      	ldrh	r2, [r7, #0]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f013 fa6f 	bl	80163a4 <memset>

	if (b_canvas == NULL){
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <Canvas_Init+0x84>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01a      	b.n	8002f08 <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <Canvas_Init+0x84>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <Canvas_Init+0x6e>
 8002eec:	887b      	ldrh	r3, [r7, #2]
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	e000      	b.n	8002efc <Canvas_Init+0x70>
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	883a      	ldrh	r2, [r7, #0]
 8002f04:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000f70 	.word	0x20000f70

08002f14 <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters, uint8_t invPosition) {
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	f107 040c 	add.w	r4, r7, #12
 8002f20:	6020      	str	r0, [r4, #0]
 8002f22:	f107 0008 	add.w	r0, r7, #8
 8002f26:	6001      	str	r1, [r0, #0]
 8002f28:	1d39      	adds	r1, r7, #4
 8002f2a:	600a      	str	r2, [r1, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	1cfb      	adds	r3, r7, #3
 8002f30:	701a      	strb	r2, [r3, #0]
	// If it has been refreshed 5+ times, perform a full refresh
// invPosition inverts the color/filter name on a specific position. 0 = no invert, >0 = position is inverted

// TODO - Find out how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 8002f32:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 8002f3e:	f107 030c 	add.w	r3, r7, #12
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002f52:	461a      	mov	r2, r3
 8002f54:	f013 fa1b 	bl	801638e <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	497f      	ldr	r1, [pc, #508]	; (800315c <canvas_DrawFilters+0x248>)
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	f000 fba7 	bl	80036b2 <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 8002f64:	f107 000c 	add.w	r0, r7, #12
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <canvas_DrawFilters+0x24c>)
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4b7c      	ldr	r3, [pc, #496]	; (8003164 <canvas_DrawFilters+0x250>)
 8002f72:	2203      	movs	r2, #3
 8002f74:	210a      	movs	r1, #10
 8002f76:	6800      	ldr	r0, [r0, #0]
 8002f78:	f000 fb55 	bl	8003626 <canvas_DrawStringAt>

	// If a position is inverted, draw a filled rectangle in that position
	if (invPosition > 0) {
 8002f7c:	1cfb      	adds	r3, r7, #3
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02e      	beq.n	8002fe2 <canvas_DrawFilters+0xce>
		switch (invPosition) {
 8002f84:	1cfb      	adds	r3, r7, #3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d010      	beq.n	8002fae <canvas_DrawFilters+0x9a>
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d01b      	beq.n	8002fc8 <canvas_DrawFilters+0xb4>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d126      	bne.n	8002fe2 <canvas_DrawFilters+0xce>
			case 1:
				canvas_DrawFilledRectangle(canvas, 2, 19, 93, 75, false);
 8002f94:	f107 000c 	add.w	r0, r7, #12
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	234b      	movs	r3, #75	; 0x4b
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	235d      	movs	r3, #93	; 0x5d
 8002fa2:	2213      	movs	r2, #19
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	6800      	ldr	r0, [r0, #0]
 8002fa8:	f000 fbb1 	bl	800370e <canvas_DrawFilledRectangle>
				break;
 8002fac:	e019      	b.n	8002fe2 <canvas_DrawFilters+0xce>
			case 2:
				canvas_DrawFilledRectangle(canvas, 2, 82, 93, 137, false);
 8002fae:	f107 000c 	add.w	r0, r7, #12
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2389      	movs	r3, #137	; 0x89
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	235d      	movs	r3, #93	; 0x5d
 8002fbc:	2252      	movs	r2, #82	; 0x52
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	6800      	ldr	r0, [r0, #0]
 8002fc2:	f000 fba4 	bl	800370e <canvas_DrawFilledRectangle>
				break;
 8002fc6:	e00c      	b.n	8002fe2 <canvas_DrawFilters+0xce>
			case 3:
				canvas_DrawFilledRectangle(canvas, 2, 144, 93, 198, false);
 8002fc8:	f107 000c 	add.w	r0, r7, #12
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	23c6      	movs	r3, #198	; 0xc6
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	235d      	movs	r3, #93	; 0x5d
 8002fd6:	2290      	movs	r2, #144	; 0x90
 8002fd8:	2102      	movs	r1, #2
 8002fda:	6800      	ldr	r0, [r0, #0]
 8002fdc:	f000 fb97 	bl	800370e <canvas_DrawFilledRectangle>
				break;
 8002fe0:	bf00      	nop
		}
	}

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8002fe8:	e148      	b.n	800327c <canvas_DrawFilters+0x368>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8002ff0:	e13a      	b.n	8003268 <canvas_DrawFilters+0x354>
			if (currentFilters->filter[filter].position == filterStage){
 8002ff2:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	440b      	add	r3, r1
 8003006:	3313      	adds	r3, #19
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 800300e:	429a      	cmp	r2, r3
 8003010:	f040 8125 	bne.w	800325e <canvas_DrawFilters+0x34a>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 8003014:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8003018:	1d39      	adds	r1, r7, #4
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	680a      	ldr	r2, [r1, #0]
 8003026:	4413      	add	r3, r2
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	f607 1384 	addw	r3, r7, #2436	; 0x984
 800302e:	6810      	ldr	r0, [r2, #0]
 8003030:	6851      	ldr	r1, [r2, #4]
 8003032:	c303      	stmia	r3!, {r0, r1}
 8003034:	8912      	ldrh	r2, [r2, #8]
 8003036:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 800303e:	e00d      	b.n	800305c <canvas_DrawFilters+0x148>
					if (tmpName[nameLen] == 0x00){
 8003040:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003044:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8003048:	4413      	add	r3, r2
 800304a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <canvas_DrawFilters+0x152>
				for (nameLen = 0; nameLen < 10; nameLen++){
 8003052:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003056:	3301      	adds	r3, #1
 8003058:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 800305c:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003060:	2b09      	cmp	r3, #9
 8003062:	d9ed      	bls.n	8003040 <canvas_DrawFilters+0x12c>
 8003064:	e000      	b.n	8003068 <canvas_DrawFilters+0x154>
						break;
 8003066:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 8003068:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 800306c:	2b05      	cmp	r3, #5
 800306e:	d85f      	bhi.n	8003130 <canvas_DrawFilters+0x21c>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003078:	b2db      	uxtb	r3, r3
 800307a:	3b0f      	subs	r3, #15
 800307c:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8003080:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8003084:	4a38      	ldr	r2, [pc, #224]	; (8003168 <canvas_DrawFilters+0x254>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8003090:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003094:	3b01      	subs	r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 800309c:	fb12 f303 	smulbb	r3, r2, r3
 80030a0:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 80030a4:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80030b0:	4413      	add	r3, r2
 80030b2:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 80030b6:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80030ba:	3b0c      	subs	r3, #12
 80030bc:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 80030c0:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80030c4:	330f      	adds	r3, #15
 80030c6:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 80030da:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	4413      	add	r3, r2
 80030e4:	0fda      	lsrs	r2, r3, #31
 80030e6:	4413      	add	r3, r2
 80030e8:	105b      	asrs	r3, r3, #1
 80030ea:	425b      	negs	r3, r3
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 80030f2:	4413      	add	r3, r2
 80030f4:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw Text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, filterStage == invPosition ? 1 : 0);
 80030f8:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 80030fc:	b299      	uxth	r1, r3
 80030fe:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003102:	b29c      	uxth	r4, r3
 8003104:	1cfb      	adds	r3, r7, #3
 8003106:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f607 1284 	addw	r2, r7, #2436	; 0x984
 800311a:	f107 000c 	add.w	r0, r7, #12
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <canvas_DrawFilters+0x258>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	4622      	mov	r2, r4
 8003128:	6800      	ldr	r0, [r0, #0]
 800312a:	f000 fa7c 	bl	8003626 <canvas_DrawStringAt>
 800312e:	e096      	b.n	800325e <canvas_DrawFilters+0x34a>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 8003144:	f607 1184 	addw	r1, r7, #2436	; 0x984
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	2205      	movs	r2, #5
 800314e:	4618      	mov	r0, r3
 8003150:	f013 f91d 	bl	801638e <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 8003154:	2305      	movs	r3, #5
 8003156:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 800315a:	e01b      	b.n	8003194 <canvas_DrawFilters+0x280>
 800315c:	08017718 	.word	0x08017718
 8003160:	2000003c 	.word	0x2000003c
 8003164:	08016d20 	.word	0x08016d20
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	20000044 	.word	0x20000044
						botLine[i - 5] = tmpName[i];
 8003170:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 8003174:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8003178:	3b05      	subs	r3, #5
 800317a:	f607 1198 	addw	r1, r7, #2456	; 0x998
 800317e:	440a      	add	r2, r1
 8003180:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003184:	f107 0214 	add.w	r2, r7, #20
 8003188:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 800318a:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 800318e:	3301      	adds	r3, #1
 8003190:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8003194:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8003198:	2b09      	cmp	r3, #9
 800319a:	d9e9      	bls.n	8003170 <canvas_DrawFilters+0x25c>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	3b0f      	subs	r3, #15
 80031a8:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 80031ac:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 80031b0:	4a48      	ldr	r2, [pc, #288]	; (80032d4 <canvas_DrawFilters+0x3c0>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 80031bc:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 80031c8:	fb12 f303 	smulbb	r3, r2, r3
 80031cc:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 80031d0:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031dc:	4413      	add	r3, r2
 80031de:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 80031e2:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031e6:	3b18      	subs	r3, #24
 80031e8:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 80031ec:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031f0:	330f      	adds	r3, #15
 80031f2:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, filterStage == invPosition ? 1 : 0);
 80031f6:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031fa:	b299      	uxth	r1, r3
 80031fc:	1cfb      	adds	r3, r7, #3
 80031fe:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f107 021c 	add.w	r2, r7, #28
 8003212:	f107 000c 	add.w	r0, r7, #12
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <canvas_DrawFilters+0x3c4>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	460a      	mov	r2, r1
 8003220:	2106      	movs	r1, #6
 8003222:	6800      	ldr	r0, [r0, #0]
 8003224:	f000 f9ff 	bl	8003626 <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, filterStage == invPosition ? 1 : 0);
 8003228:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800322c:	b29b      	uxth	r3, r3
 800322e:	3318      	adds	r3, #24
 8003230:	b299      	uxth	r1, r3
 8003232:	1cfb      	adds	r3, r7, #3
 8003234:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f107 0214 	add.w	r2, r7, #20
 8003248:	f107 000c 	add.w	r0, r7, #12
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <canvas_DrawFilters+0x3c4>)
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	460a      	mov	r2, r1
 8003256:	2106      	movs	r1, #6
 8003258:	6800      	ldr	r0, [r0, #0]
 800325a:	f000 f9e4 	bl	8003626 <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 800325e:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 8003262:	3301      	adds	r3, #1
 8003264:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8003268:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 800326c:	2b02      	cmp	r3, #2
 800326e:	f67f aec0 	bls.w	8002ff2 <canvas_DrawFilters+0xde>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 8003272:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003276:	3301      	adds	r3, #1
 8003278:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 800327c:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003280:	2b03      	cmp	r3, #3
 8003282:	f67f aeb2 	bls.w	8002fea <canvas_DrawFilters+0xd6>
	}


	// Right now, it just does a complete refresh - Need to change in the future
	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <canvas_DrawFilters+0x3c8>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d810      	bhi.n	80032b0 <canvas_DrawFilters+0x39c>
		canvas_UpdateEPD(canvas, epd, prevImage);
 800328e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003292:	f107 0108 	add.w	r1, r7, #8
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	6809      	ldr	r1, [r1, #0]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f000 fa1f 	bl	80036e0 <canvas_UpdateEPD>
		refreshCount++;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <canvas_DrawFilters+0x3c8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <canvas_DrawFilters+0x3c8>)
 80032ac:	701a      	strb	r2, [r3, #0]
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}


}
 80032ae:	e00c      	b.n	80032ca <canvas_DrawFilters+0x3b6>
		EPD_set_enable_temperature();
 80032b0:	f7ff f8e2 	bl	8002478 <EPD_set_enable_temperature>
		canvas_PrintEPD(canvas, epd);
 80032b4:	f107 0208 	add.w	r2, r7, #8
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	6811      	ldr	r1, [r2, #0]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f000 f9e2 	bl	8003688 <canvas_PrintEPD>
		refreshCount = 0;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <canvas_DrawFilters+0x3c8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	aaaaaaab 	.word	0xaaaaaaab
 80032d8:	20000044 	.word	0x20000044
 80032dc:	2000025f 	.word	0x2000025f

080032e0 <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	721a      	strb	r2, [r3, #8]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	817b      	strh	r3, [r7, #10]
 800330e:	4613      	mov	r3, r2
 8003310:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b07      	cmp	r3, #7
 8003320:	d82a      	bhi.n	8003378 <canvas_DrawAbsolutePixel+0x78>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <canvas_DrawAbsolutePixel+0x28>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003349 	.word	0x08003349
 800332c:	0800334f 	.word	0x0800334f
 8003330:	08003355 	.word	0x08003355
 8003334:	0800335b 	.word	0x0800335b
 8003338:	08003361 	.word	0x08003361
 800333c:	08003367 	.word	0x08003367
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003373 	.word	0x08003373
		case 0:
			bit_pos = 7;
 8003348:	2307      	movs	r3, #7
 800334a:	75fb      	strb	r3, [r7, #23]
			break;
 800334c:	e014      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 800334e:	2306      	movs	r3, #6
 8003350:	75fb      	strb	r3, [r7, #23]
			break;
 8003352:	e011      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 8003354:	2305      	movs	r3, #5
 8003356:	75fb      	strb	r3, [r7, #23]
			break;
 8003358:	e00e      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 800335a:	2304      	movs	r3, #4
 800335c:	75fb      	strb	r3, [r7, #23]
			break;
 800335e:	e00b      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 8003360:	2303      	movs	r3, #3
 8003362:	75fb      	strb	r3, [r7, #23]
			break;
 8003364:	e008      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 8003366:	2302      	movs	r3, #2
 8003368:	75fb      	strb	r3, [r7, #23]
			break;
 800336a:	e005      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 800336c:	2301      	movs	r3, #1
 800336e:	75fb      	strb	r3, [r7, #23]
			break;
 8003370:	e002      	b.n	8003378 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
			break;
 8003376:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	897a      	ldrh	r2, [r7, #10]
 800337e:	429a      	cmp	r2, r3
 8003380:	d249      	bcs.n	8003416 <canvas_DrawAbsolutePixel+0x116>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88db      	ldrh	r3, [r3, #6]
 8003386:	893a      	ldrh	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d244      	bcs.n	8003416 <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	8880      	ldrh	r0, [r0, #4]
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	440b      	add	r3, r1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da00      	bge.n	80033aa <canvas_DrawAbsolutePixel+0xaa>
 80033a8:	3307      	adds	r3, #7
 80033aa:	10db      	asrs	r3, r3, #3
 80033ac:	4618      	mov	r0, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4413      	add	r3, r2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25a      	sxtb	r2, r3
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	fa41 f303 	asr.w	r3, r1, r3
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	b25a      	sxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4601      	mov	r1, r0
 80033ce:	440b      	add	r3, r1
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e020      	b.n	8003418 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	8880      	ldrh	r0, [r0, #4]
 80033e2:	fb00 f303 	mul.w	r3, r0, r3
 80033e6:	440b      	add	r3, r1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da00      	bge.n	80033ee <canvas_DrawAbsolutePixel+0xee>
 80033ec:	3307      	adds	r3, #7
 80033ee:	10db      	asrs	r3, r3, #3
 80033f0:	4618      	mov	r0, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4413      	add	r3, r2
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b25a      	sxtb	r2, r3
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	fa41 f303 	asr.w	r3, r1, r3
 8003402:	b25b      	sxtb	r3, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	b25a      	sxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4601      	mov	r1, r0
 800340e:	440b      	add	r3, r1
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e000      	b.n	8003418 <canvas_DrawAbsolutePixel+0x118>
        return;
 8003416:	bf00      	nop
        }
    }
}
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	817b      	strh	r3, [r7, #10]
 8003432:	4613      	mov	r3, r2
 8003434:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	7a1b      	ldrb	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d110      	bne.n	8003460 <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	889b      	ldrh	r3, [r3, #4]
 8003442:	897a      	ldrh	r2, [r7, #10]
 8003444:	429a      	cmp	r2, r3
 8003446:	d267      	bcs.n	8003518 <canvas_DrawPixel+0xf4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88db      	ldrh	r3, [r3, #6]
 800344c:	893a      	ldrh	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d262      	bcs.n	8003518 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003452:	893a      	ldrh	r2, [r7, #8]
 8003454:	8979      	ldrh	r1, [r7, #10]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff ff51 	bl	8003300 <canvas_DrawAbsolutePixel>
 800345e:	e062      	b.n	8003526 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7a1b      	ldrb	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d119      	bne.n	800349c <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88db      	ldrh	r3, [r3, #6]
 800346c:	897a      	ldrh	r2, [r7, #10]
 800346e:	429a      	cmp	r2, r3
 8003470:	d254      	bcs.n	800351c <canvas_DrawPixel+0xf8>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	889b      	ldrh	r3, [r3, #4]
 8003476:	893a      	ldrh	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d24f      	bcs.n	800351c <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 800347c:	897b      	ldrh	r3, [r7, #10]
 800347e:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	889a      	ldrh	r2, [r3, #4]
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ff33 	bl	8003300 <canvas_DrawAbsolutePixel>
 800349a:	e044      	b.n	8003526 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	7a1b      	ldrb	r3, [r3, #8]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d11a      	bne.n	80034da <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	889b      	ldrh	r3, [r3, #4]
 80034a8:	897a      	ldrh	r2, [r7, #10]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d238      	bcs.n	8003520 <canvas_DrawPixel+0xfc>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88db      	ldrh	r3, [r3, #6]
 80034b2:	893a      	ldrh	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d233      	bcs.n	8003520 <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	889a      	ldrh	r2, [r3, #4]
 80034bc:	897b      	ldrh	r3, [r7, #10]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88da      	ldrh	r2, [r3, #6]
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	8979      	ldrh	r1, [r7, #10]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff ff14 	bl	8003300 <canvas_DrawAbsolutePixel>
 80034d8:	e025      	b.n	8003526 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	7a1b      	ldrb	r3, [r3, #8]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d121      	bne.n	8003526 <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88db      	ldrh	r3, [r3, #6]
 80034e6:	897a      	ldrh	r2, [r7, #10]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d21b      	bcs.n	8003524 <canvas_DrawPixel+0x100>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	889b      	ldrh	r3, [r3, #4]
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d216      	bcs.n	8003524 <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 80034f6:	897b      	ldrh	r3, [r7, #10]
 80034f8:	617b      	str	r3, [r7, #20]
        x = y;
 80034fa:	893b      	ldrh	r3, [r7, #8]
 80034fc:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88da      	ldrh	r2, [r3, #6]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	b29b      	uxth	r3, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800350a:	893a      	ldrh	r2, [r7, #8]
 800350c:	8979      	ldrh	r1, [r7, #10]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fef5 	bl	8003300 <canvas_DrawAbsolutePixel>
 8003516:	e006      	b.n	8003526 <canvas_DrawPixel+0x102>
            return;
 8003518:	bf00      	nop
 800351a:	e004      	b.n	8003526 <canvas_DrawPixel+0x102>
          return;
 800351c:	bf00      	nop
 800351e:	e002      	b.n	8003526 <canvas_DrawPixel+0x102>
          return;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <canvas_DrawPixel+0x102>
          return;
 8003524:	bf00      	nop
    }
}
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	3b20      	subs	r3, #32
 800354a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354c:	88d2      	ldrh	r2, [r2, #6]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003554:	8892      	ldrh	r2, [r2, #4]
 8003556:	08d2      	lsrs	r2, r2, #3
 8003558:	b292      	uxth	r2, r2
 800355a:	4611      	mov	r1, r2
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	8892      	ldrh	r2, [r2, #4]
 8003560:	f002 0207 	and.w	r2, r2, #7
 8003564:	b292      	uxth	r2, r2
 8003566:	2a00      	cmp	r2, #0
 8003568:	bf14      	ite	ne
 800356a:	2201      	movne	r2, #1
 800356c:	2200      	moveq	r2, #0
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440a      	add	r2, r1
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	e044      	b.n	8003612 <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e02e      	b.n	80035ec <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	425a      	negs	r2, r3
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	f002 0207 	and.w	r2, r2, #7
 80035a0:	bf58      	it	pl
 80035a2:	4253      	negpl	r3, r2
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	fa42 f303 	asr.w	r3, r2, r3
 80035aa:	400b      	ands	r3, r1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	4413      	add	r3, r2
 80035b8:	b299      	uxth	r1, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	893b      	ldrh	r3, [r7, #8]
 80035c0:	4413      	add	r3, r2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff ff2c 	bl	8003424 <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	425a      	negs	r2, r3
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	f002 0207 	and.w	r2, r2, #7
 80035d8:	bf58      	it	pl
 80035da:	4253      	negpl	r3, r2
 80035dc:	2b07      	cmp	r3, #7
 80035de:	d102      	bne.n	80035e6 <canvas_DrawCharAt+0xba>
                ptr++;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	889b      	ldrh	r3, [r3, #4]
 80035f0:	461a      	mov	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	dbca      	blt.n	800358e <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	889b      	ldrh	r3, [r3, #4]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <canvas_DrawCharAt+0xe0>
            ptr++;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3301      	adds	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	88db      	ldrh	r3, [r3, #6]
 8003616:	461a      	mov	r2, r3
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4293      	cmp	r3, r2
 800361c:	dbb4      	blt.n	8003588 <canvas_DrawCharAt+0x5c>
        }
    }
}
 800361e:	bf00      	nop
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 8003626:	b580      	push	{r7, lr}
 8003628:	b08a      	sub	sp, #40	; 0x28
 800362a:	af02      	add	r7, sp, #8
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
 8003634:	4613      	mov	r3, r2
 8003636:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8003644:	e018      	b.n	8003678 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	b299      	uxth	r1, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	7818      	ldrb	r0, [r3, #0]
 800364e:	893a      	ldrh	r2, [r7, #8]
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4603      	mov	r3, r0
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff ff66 	bl	800352c <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	461a      	mov	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	4413      	add	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3301      	adds	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
        counter++;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3301      	adds	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e2      	bne.n	8003646 <canvas_DrawStringAt+0x20>
    }
}
 8003680:	bf00      	nop
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f7fe fb70 	bl	8001d78 <EPD_begin>
	EPD_image_0(epd, canvas->image);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7fe ff12 	bl	80024c8 <EPD_image_0>
	EPD_end(epd);
 80036a4:	6838      	ldr	r0, [r7, #0]
 80036a6:	f7fe fdd7 	bl	8002258 <EPD_end>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	889a      	ldrh	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	88db      	ldrh	r3, [r3, #6]
 80036c4:	fb12 f303 	smulbb	r3, r2, r3
 80036c8:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	89fa      	ldrh	r2, [r7, #14]
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f012 fe5b 	bl	801638e <memcpy>
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 80036ec:	68b8      	ldr	r0, [r7, #8]
 80036ee:	f7fe fb43 	bl	8001d78 <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68b8      	ldr	r0, [r7, #8]
 80036fc:	f7fe ff03 	bl	8002506 <EPD_partial_image>
	EPD_end(epd);
 8003700:	68b8      	ldr	r0, [r7, #8]
 8003702:	f7fe fda9 	bl	8002258 <EPD_end>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <canvas_DrawFilledRectangle>:
 ***********************************************************************************************/

/**
*  @brief: this draws a filled rectangle
*/
void canvas_DrawFilledRectangle(Canvas* canvas, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t colored) {
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af02      	add	r7, sp, #8
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	461a      	mov	r2, r3
 800371c:	4603      	mov	r3, r0
 800371e:	70fb      	strb	r3, [r7, #3]
 8003720:	460b      	mov	r3, r1
 8003722:	70bb      	strb	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 8003728:	787a      	ldrb	r2, [r7, #1]
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	429a      	cmp	r2, r3
 800372e:	d901      	bls.n	8003734 <canvas_DrawFilledRectangle+0x26>
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	e000      	b.n	8003736 <canvas_DrawFilledRectangle+0x28>
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	61bb      	str	r3, [r7, #24]
    max_x = x1 > x0 ? x1 : x0;
 8003738:	787a      	ldrb	r2, [r7, #1]
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	429a      	cmp	r2, r3
 800373e:	d901      	bls.n	8003744 <canvas_DrawFilledRectangle+0x36>
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	e000      	b.n	8003746 <canvas_DrawFilledRectangle+0x38>
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	617b      	str	r3, [r7, #20]
    min_y = y1 > y0 ? y0 : y1;
 8003748:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800374c:	78bb      	ldrb	r3, [r7, #2]
 800374e:	429a      	cmp	r2, r3
 8003750:	d901      	bls.n	8003756 <canvas_DrawFilledRectangle+0x48>
 8003752:	78bb      	ldrb	r3, [r7, #2]
 8003754:	e001      	b.n	800375a <canvas_DrawFilledRectangle+0x4c>
 8003756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800375a:	613b      	str	r3, [r7, #16]
    max_y = y1 > y0 ? y1 : y0;
 800375c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003760:	78bb      	ldrb	r3, [r7, #2]
 8003762:	429a      	cmp	r2, r3
 8003764:	d902      	bls.n	800376c <canvas_DrawFilledRectangle+0x5e>
 8003766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800376a:	e000      	b.n	800376e <canvas_DrawFilledRectangle+0x60>
 800376c:	78bb      	ldrb	r3, [r7, #2]
 800376e:	60fb      	str	r3, [r7, #12]

    for (i = min_x; i <= max_x; i++) {
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e016      	b.n	80037a4 <canvas_DrawFilledRectangle+0x96>
      canvas_DrawVerticalLine(canvas, i, min_y, max_y - min_y + 1, colored);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	b2d9      	uxtb	r1, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	b2d8      	uxtb	r0, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	4602      	mov	r2, r0
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f80b 	bl	80037b4 <canvas_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dde4      	ble.n	8003776 <canvas_DrawFilledRectangle+0x68>
    }
}
 80037ac:	bf00      	nop
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <canvas_DrawVerticalLine>:


/**
*  @brief: this draws a vertical line on the frame buffer
*/
void canvas_DrawVerticalLine(Canvas* canvas, uint8_t x, uint8_t y, uint8_t line_height, uint8_t colored) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	70fb      	strb	r3, [r7, #3]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70bb      	strb	r3, [r7, #2]
 80037ca:	4613      	mov	r3, r2
 80037cc:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = y; i < y + line_height; i++) {
 80037ce:	78bb      	ldrb	r3, [r7, #2]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e00a      	b.n	80037ea <canvas_DrawVerticalLine+0x36>
        canvas_DrawPixel(canvas, x, i, colored);
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	b299      	uxth	r1, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	7e3b      	ldrb	r3, [r7, #24]
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fe20 	bl	8003424 <canvas_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	78ba      	ldrb	r2, [r7, #2]
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	4413      	add	r3, r2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	dbee      	blt.n	80037d4 <canvas_DrawVerticalLine+0x20>
    }
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <LM75B_Init+0x78>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <LM75B_Init+0x7c>)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 800381a:	4a19      	ldr	r2, [pc, #100]	; (8003880 <LM75B_Init+0x80>)
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <LM75B_Init+0x7c>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <LM75B_Init+0x80>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	4619      	mov	r1, r3
 800382c:	f002 f8a6 	bl	800597c <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 8003830:	2001      	movs	r0, #1
 8003832:	f001 fdb3 	bl	800539c <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 8003836:	f107 0316 	add.w	r3, r7, #22
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f88a 	bl	8003954 <readConfigReg>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <LM75B_Init+0x7c>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <LM75B_Init+0x80>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	4619      	mov	r1, r3
 8003850:	f002 f894 	bl	800597c <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <LM75B_Init+0x5e>
		return LM75B_ERR;
 800385a:	2300      	movs	r3, #0
 800385c:	e008      	b.n	8003870 <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <LM75B_Init+0x6e>
		LM75BInitialized = true;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <LM75B_Init+0x84>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000260 	.word	0x20000260
 800387c:	20000f78 	.word	0x20000f78
 8003880:	20000f74 	.word	0x20000f74
 8003884:	20000264 	.word	0x20000264

08003888 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <LM75B_ReadTemp+0xc0>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 800389e:	2300      	movs	r3, #0
 80038a0:	e04d      	b.n	800393e <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <LM75B_ReadTemp+0xc4>)
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <LM75B_ReadTemp+0xc8>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	4619      	mov	r1, r3
 80038ae:	f002 f865 	bl	800597c <HAL_GPIO_WritePin>
	HAL_Delay(10); // Small delay to ensure stable power
 80038b2:	200a      	movs	r0, #10
 80038b4:	f001 fd72 	bl	800539c <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 80038b8:	2300      	movs	r3, #0
 80038ba:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	2202      	movs	r2, #2
 80038c2:	4619      	mov	r1, r3
 80038c4:	2000      	movs	r0, #0
 80038c6:	f000 f853 	bl	8003970 <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <LM75B_ReadTemp+0xc4>)
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <LM75B_ReadTemp+0xc8>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	4619      	mov	r1, r3
 80038d6:	f002 f851 	bl	800597c <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 80038da:	7a3b      	ldrb	r3, [r7, #8]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	b21a      	sxth	r2, r3
 80038e0:	7a7b      	ldrb	r3, [r7, #9]
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	4313      	orrs	r3, r2
 80038e6:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 80038e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ec:	115b      	asrs	r3, r3, #5
 80038ee:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 80038f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fe15 	bl	8000524 <__aeabi_i2d>
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003902:	f7fc fe79 	bl	80005f8 <__aeabi_dmul>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	4618      	mov	r0, r3
 800390c:	4621      	mov	r1, r4
 800390e:	f7fd f885 	bl	8000a1c <__aeabi_d2iz>
 8003912:	4603      	mov	r3, r0
 8003914:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 800391a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800391e:	2b00      	cmp	r3, #0
 8003920:	da09      	bge.n	8003936 <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 8003922:	7b7b      	ldrb	r3, [r7, #13]
 8003924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	425b      	negs	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	b25a      	sxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e002      	b.n	800393c <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7b7a      	ldrb	r2, [r7, #13]
 800393a:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 800393c:	2301      	movs	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000264 	.word	0x20000264
 800394c:	20000f78 	.word	0x20000f78
 8003950:	20000f74 	.word	0x20000f74

08003954 <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 800395c:	2201      	movs	r2, #1
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	2001      	movs	r0, #1
 8003962:	f000 f805 	bl	8003970 <LM75B_i2cReadBytes>
 8003966:	4603      	mov	r3, r0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af04      	add	r7, sp, #16
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
 800397c:	4613      	mov	r3, r2
 800397e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <LM75B_i2cReadBytes+0x4c>)
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	b299      	uxth	r1, r3
 8003988:	79bb      	ldrb	r3, [r7, #6]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2301      	movs	r3, #1
 800399a:	460a      	mov	r2, r1
 800399c:	2190      	movs	r1, #144	; 0x90
 800399e:	f002 f963 	bl	8005c68 <HAL_I2C_Mem_Read>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000260 	.word	0x20000260

080039c0 <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	460a      	mov	r2, r1
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <iso15693Initialize+0x1a>
 80039d6:	21ed      	movs	r1, #237	; 0xed
 80039d8:	e000      	b.n	80039dc <iso15693Initialize+0x1c>
 80039da:	21ec      	movs	r1, #236	; 0xec
 80039dc:	79bb      	ldrb	r3, [r7, #6]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <iso15693Initialize+0x26>
 80039e2:	23eb      	movs	r3, #235	; 0xeb
 80039e4:	e000      	b.n	80039e8 <iso15693Initialize+0x28>
 80039e6:	23ec      	movs	r3, #236	; 0xec
 80039e8:	461a      	mov	r2, r3
 80039ea:	2007      	movs	r0, #7
 80039ec:	f009 fe68 	bl	800d6c0 <rfalSetMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80039f4:	2001      	movs	r0, #1
 80039f6:	f00a fa8f 	bl	800df18 <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 80039fa:	4809      	ldr	r0, [pc, #36]	; (8003a20 <iso15693Initialize+0x60>)
 80039fc:	f00a fad8 	bl	800dfb0 <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 8003a00:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8003a04:	f00a fac0 	bl	800df88 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8003a08:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8003a0c:	f00a faa6 	bl	800df5c <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 8003a10:	f00a fafc 	bl	800e00c <rfalFieldOnAndStartGT>

    return err;
 8003a14:	89fb      	ldrh	r3, [r7, #14]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	000108d8 	.word	0x000108d8

08003a24 <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8003a34:	f00a fb52 	bl	800e0dc <rfalFieldOff>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	e000      	b.n	8003a3e <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b091      	sub	sp, #68	; 0x44
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	60ba      	str	r2, [r7, #8]
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8003a60:	2300      	movs	r3, #0
 8003a62:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8003a64:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003a70:	e2f8      	b.n	8004064 <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2100      	movs	r1, #0
 8003a76:	48aa      	ldr	r0, [pc, #680]	; (8003d20 <iso15693Inventory+0x2d8>)
 8003a78:	f012 fc94 	bl	80163a4 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 8003a7c:	4ba9      	ldr	r3, [pc, #676]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003a7e:	2204      	movs	r2, #4
 8003a80:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003a88:	4ba6      	ldr	r3, [pc, #664]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4ba4      	ldr	r3, [pc, #656]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003a94:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8003a96:	4ba3      	ldr	r3, [pc, #652]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 8003a9c:	4aa1      	ldr	r2, [pc, #644]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	08db      	lsrs	r3, r3, #3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	7bba      	ldrb	r2, [r7, #14]
 8003aaa:	f002 0207 	and.w	r2, r2, #7
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	bfcc      	ite	gt
 8003ab2:	2201      	movgt	r2, #1
 8003ab4:	2200      	movle	r2, #0
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	4413      	add	r3, r2
 8003aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 8003abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ac2:	3303      	adds	r3, #3
 8003ac4:	2b48      	cmp	r3, #72	; 0x48
 8003ac6:	dd02      	ble.n	8003ace <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003acc:	e2ca      	b.n	8004064 <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2201      	movs	r2, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 8003aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aee:	3b01      	subs	r3, #1
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	4413      	add	r3, r2
 8003af4:	7819      	ldrb	r1, [r3, #0]
 8003af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003afa:	3b01      	subs	r3, #1
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	4413      	add	r3, r2
 8003b00:	7eba      	ldrb	r2, [r7, #26]
 8003b02:	400a      	ands	r2, r1
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 8003b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4885      	ldr	r0, [pc, #532]	; (8003d28 <iso15693Inventory+0x2e0>)
 8003b12:	f012 fc3c 	bl	801638e <memcpy>

    slotNumPos = maskLength & 7;
 8003b16:	7bbb      	ldrb	r3, [r7, #14]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8003b34:	23ff      	movs	r3, #255	; 0xff
 8003b36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <iso15693Inventory+0xfe>
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	e000      	b.n	8003b48 <iso15693Inventory+0x100>
 8003b46:	230f      	movs	r3, #15
 8003b48:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <iso15693Inventory+0x112>
 8003b52:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d10e      	bne.n	8003b78 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 8003b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b5e:	3303      	adds	r3, #3
 8003b60:	b2d9      	uxtb	r1, r3
 8003b62:	f107 0316 	add.w	r3, r7, #22
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	230c      	movs	r3, #12
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	486d      	ldr	r0, [pc, #436]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003b6e:	f00b fc57 	bl	800f420 <rfalISO15693TransceiveAnticollisionFrame>
 8003b72:	4603      	mov	r3, r0
 8003b74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b76:	e00b      	b.n	8003b90 <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8003b78:	2005      	movs	r0, #5
 8003b7a:	f001 fc0f 	bl	800539c <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 8003b7e:	f107 0316 	add.w	r3, r7, #22
 8003b82:	461a      	mov	r2, r3
 8003b84:	210c      	movs	r1, #12
 8003b86:	69f8      	ldr	r0, [r7, #28]
 8003b88:	f00b fd02 	bl	800f590 <rfalISO15693TransceiveEOFAnticollision>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8003b90:	8afb      	ldrh	r3, [r7, #22]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 8003ba2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ba4:	2b1d      	cmp	r3, #29
 8003ba6:	f040 80a1 	bne.w	8003cec <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d802      	bhi.n	8003bb6 <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 8003bb0:	231d      	movs	r3, #29
 8003bb2:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003bb4:	e256      	b.n	8004064 <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003bb6:	8afb      	ldrh	r3, [r7, #22]
 8003bb8:	3b02      	subs	r3, #2
 8003bba:	7e3a      	ldrb	r2, [r7, #24]
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2201      	movne	r2, #1
 8003bc2:	2200      	moveq	r2, #0
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	da02      	bge.n	8003bd6 <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 8003bd4:	e08a      	b.n	8003cec <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d17a      	bne.n	8003cd2 <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 8003bdc:	8afb      	ldrh	r3, [r7, #22]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3b02      	subs	r3, #2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	7e3b      	ldrb	r3, [r7, #24]
 8003bea:	4413      	add	r3, r2
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003bf4:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003bf8:	789b      	ldrb	r3, [r3, #2]
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d902      	bls.n	8003c04 <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 8003bfe:	2304      	movs	r3, #4
 8003c00:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 8003c02:	e073      	b.n	8003cec <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 8003c04:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 8003c0e:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003c12:	f04f 0201 	mov.w	r2, #1
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	f1a1 0620 	sub.w	r6, r1, #32
 8003c1e:	f1c1 0020 	rsb	r0, r1, #32
 8003c22:	fa03 f501 	lsl.w	r5, r3, r1
 8003c26:	fa02 f606 	lsl.w	r6, r2, r6
 8003c2a:	4335      	orrs	r5, r6
 8003c2c:	fa22 f000 	lsr.w	r0, r2, r0
 8003c30:	4305      	orrs	r5, r0
 8003c32:	fa02 f401 	lsl.w	r4, r2, r1
 8003c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3a:	ea42 0004 	orr.w	r0, r2, r4
 8003c3e:	ea43 0105 	orr.w	r1, r3, r5
 8003c42:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 8003c46:	8afb      	ldrh	r3, [r7, #22]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3302      	adds	r3, #2
 8003c54:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4833      	ldr	r0, [pc, #204]	; (8003d28 <iso15693Inventory+0x2e0>)
 8003c5c:	f012 fb97 	bl	801638e <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 8003c60:	7e3b      	ldrb	r3, [r7, #24]
 8003c62:	2201      	movs	r2, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 8003c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c72:	3302      	adds	r3, #2
 8003c74:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003c76:	5cd1      	ldrb	r1, [r2, r3]
 8003c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	7eba      	ldrb	r2, [r7, #26]
 8003c80:	400a      	ands	r2, r1
 8003c82:	b2d1      	uxtb	r1, r2
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003c86:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 8003c88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c8c:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <iso15693Inventory+0x2d8>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d115      	bne.n	8003cc0 <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c98:	3302      	adds	r3, #2
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	b25a      	sxtb	r2, r3
 8003ca0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b25a      	sxtb	r2, r3
 8003cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cb8:	3302      	adds	r3, #2
 8003cba:	b2d1      	uxtb	r1, r2
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <iso15693Inventory+0x2dc>)
 8003cbe:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 8003cc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <iso15693Inventory+0x2d8>)
 8003cc6:	5cd2      	ldrb	r2, [r2, r3]
 8003cc8:	3201      	adds	r2, #1
 8003cca:	b2d1      	uxtb	r1, r2
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <iso15693Inventory+0x2d8>)
 8003cce:	54d1      	strb	r1, [r2, r3]
 8003cd0:	e00c      	b.n	8003cec <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 8003cd2:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003cd6:	f1c3 030f 	rsb	r3, r3, #15
 8003cda:	2201      	movs	r2, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	b21a      	sxth	r2, r3
 8003ce2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 8003cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cee:	2b1d      	cmp	r3, #29
 8003cf0:	f000 80c8 	beq.w	8003e84 <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 8003cf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 8003cfa:	7efb      	ldrb	r3, [r7, #27]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 8003d00:	7efa      	ldrb	r2, [r7, #27]
 8003d02:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003d06:	429a      	cmp	r2, r3
 8003d08:	f080 81a9 	bcs.w	800405e <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 80b5 	bne.w	8003e84 <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 8003d1e:	e091      	b.n	8003e44 <iso15693Inventory+0x3fc>
 8003d20:	200002b4 	.word	0x200002b4
 8003d24:	20000268 	.word	0x20000268
 8003d28:	2000026b 	.word	0x2000026b
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 8003d2c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	f1c1 0620 	rsb	r6, r1, #32
 8003d36:	f1a1 0020 	sub.w	r0, r1, #32
 8003d3a:	fa22 f801 	lsr.w	r8, r2, r1
 8003d3e:	fa03 f606 	lsl.w	r6, r3, r6
 8003d42:	ea48 0806 	orr.w	r8, r8, r6
 8003d46:	fa23 f000 	lsr.w	r0, r3, r0
 8003d4a:	ea48 0800 	orr.w	r8, r8, r0
 8003d4e:	fa23 f901 	lsr.w	r9, r3, r1
 8003d52:	f04f 0201 	mov.w	r2, #1
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea02 0008 	and.w	r0, r2, r8
 8003d5e:	ea03 0109 	and.w	r1, r3, r9
 8003d62:	ea50 0301 	orrs.w	r3, r0, r1
 8003d66:	d06d      	beq.n	8003e44 <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 8003d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d6a:	4ab2      	ldr	r2, [pc, #712]	; (8004034 <iso15693Inventory+0x5ec>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d939      	bls.n	8003de6 <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 8003d72:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003d74:	f04f 0201 	mov.w	r2, #1
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f1a1 0620 	sub.w	r6, r1, #32
 8003d80:	f1c1 0020 	rsb	r0, r1, #32
 8003d84:	fa03 fb01 	lsl.w	fp, r3, r1
 8003d88:	fa02 f606 	lsl.w	r6, r2, r6
 8003d8c:	ea4b 0b06 	orr.w	fp, fp, r6
 8003d90:	fa22 f000 	lsr.w	r0, r2, r0
 8003d94:	ea4b 0b00 	orr.w	fp, fp, r0
 8003d98:	fa02 fa01 	lsl.w	sl, r2, r1
 8003d9c:	ea6f 020a 	mvn.w	r2, sl
 8003da0:	ea6f 030b 	mvn.w	r3, fp
 8003da4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003da8:	ea02 0200 	and.w	r2, r2, r0
 8003dac:	ea03 0301 	and.w	r3, r3, r1
 8003db0:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003db6:	4a9f      	ldr	r2, [pc, #636]	; (8004034 <iso15693Inventory+0x5ec>)
 8003db8:	2100      	movs	r1, #0
 8003dba:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 8003dbc:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db3f      	blt.n	8003e44 <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003dc4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003dc8:	2201      	movs	r2, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	b21a      	sxth	r2, r3
 8003dd4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003dd8:	4013      	ands	r3, r2
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 8003dde:	23ff      	movs	r3, #255	; 0xff
 8003de0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003de4:	e02e      	b.n	8003e44 <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 8003de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003de8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 8003dec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	4b90      	ldr	r3, [pc, #576]	; (8004038 <iso15693Inventory+0x5f0>)
 8003df6:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 8003df8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	4a8a      	ldr	r2, [pc, #552]	; (8004038 <iso15693Inventory+0x5f0>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b25a      	sxtb	r2, r3
 8003e26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	b2d1      	uxtb	r1, r2
 8003e2e:	4a82      	ldr	r2, [pc, #520]	; (8004038 <iso15693Inventory+0x5f0>)
 8003e30:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 8003e32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e36:	4a7f      	ldr	r2, [pc, #508]	; (8004034 <iso15693Inventory+0x5ec>)
 8003e38:	5cd2      	ldrb	r2, [r2, r3]
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	b2d1      	uxtb	r1, r2
 8003e3e:	4a7d      	ldr	r2, [pc, #500]	; (8004034 <iso15693Inventory+0x5ec>)
 8003e40:	54d1      	strb	r1, [r2, r3]
                                break;
 8003e42:	e005      	b.n	8003e50 <iso15693Inventory+0x408>
                    while (i--)
 8003e44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f af6e 	bne.w	8003d2c <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 8003e50:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db15      	blt.n	8003e84 <iso15693Inventory+0x43c>
 8003e58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e5c:	4a75      	ldr	r2, [pc, #468]	; (8004034 <iso15693Inventory+0x5ec>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 8003e64:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003e68:	2201      	movs	r2, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b21b      	sxth	r3, r3
 8003e7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 8003e7e:	23ff      	movs	r3, #255	; 0xff
 8003e80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 8003e84:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db06      	blt.n	8003e9a <iso15693Inventory+0x452>
            {
                slot--;
 8003e8c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 8003e9a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f6bf ae54 	bge.w	8003b4c <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <iso15693Inventory+0x5f0>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <iso15693Inventory+0x5f0>)
 8003eba:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 8003ebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f040 80c2 	bne.w	800404a <iso15693Inventory+0x602>
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f040 80be 	bne.w	800404a <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ed2:	e0b6      	b.n	8004042 <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 8003ed4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ed8:	fa42 f303 	asr.w	r3, r2, r3
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80ab 	beq.w	800403c <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003ee6:	7bbb      	ldrb	r3, [r7, #14]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	7bba      	ldrb	r2, [r7, #14]
 8003eee:	f002 0207 	and.w	r2, r2, #7
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	bfcc      	ite	gt
 8003ef6:	2201      	movgt	r2, #1
 8003ef8:	2200      	movle	r2, #0
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4413      	add	r3, r2
 8003efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 8003f02:	7e7b      	ldrb	r3, [r7, #25]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 8003f08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 8003f12:	7e7b      	ldrb	r3, [r7, #25]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d95b      	bls.n	8003fd0 <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 8003f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 8003f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f26:	3302      	adds	r3, #2
 8003f28:	4a43      	ldr	r2, [pc, #268]	; (8004038 <iso15693Inventory+0x5f0>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	b25a      	sxtb	r2, r3
 8003f2e:	7e7b      	ldrb	r3, [r7, #25]
 8003f30:	f1c3 0308 	rsb	r3, r3, #8
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	4013      	ands	r3, r2
 8003f44:	b25a      	sxtb	r2, r3
 8003f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	b2d1      	uxtb	r1, r2
 8003f4e:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <iso15693Inventory+0x5f0>)
 8003f50:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 8003f52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f56:	3302      	adds	r3, #2
 8003f58:	4a37      	ldr	r2, [pc, #220]	; (8004038 <iso15693Inventory+0x5f0>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003f60:	7e7b      	ldrb	r3, [r7, #25]
 8003f62:	f1c3 0308 	rsb	r3, r3, #8
 8003f66:	fa41 f303 	asr.w	r3, r1, r3
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b25a      	sxtb	r2, r3
 8003f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f74:	3302      	adds	r3, #2
 8003f76:	b2d1      	uxtb	r1, r2
 8003f78:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <iso15693Inventory+0x5f0>)
 8003f7a:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 8003f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <iso15693Inventory+0x5f0>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	b25a      	sxtb	r2, r3
 8003f88:	7e7b      	ldrb	r3, [r7, #25]
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b25a      	sxtb	r2, r3
 8003f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b2d1      	uxtb	r1, r2
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <iso15693Inventory+0x5f0>)
 8003fa6:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 8003fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fac:	3301      	adds	r3, #1
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <iso15693Inventory+0x5f0>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	b25a      	sxtb	r2, r3
 8003fb4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003fb6:	7e7b      	ldrb	r3, [r7, #25]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b25a      	sxtb	r2, r3
 8003fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2d1      	uxtb	r1, r2
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <iso15693Inventory+0x5f0>)
 8003fcc:	54d1      	strb	r1, [r2, r3]
 8003fce:	e028      	b.n	8004022 <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 8003fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <iso15693Inventory+0x5f0>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	b25a      	sxtb	r2, r3
 8003fdc:	7e7b      	ldrb	r3, [r7, #25]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	b25a      	sxtb	r2, r3
 8003ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	b2d1      	uxtb	r1, r2
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <iso15693Inventory+0x5f0>)
 8003ffa:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 8003ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004000:	3302      	adds	r3, #2
 8004002:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <iso15693Inventory+0x5f0>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	b25a      	sxtb	r2, r3
 8004008:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800400a:	7e7b      	ldrb	r3, [r7, #25]
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	b25b      	sxtb	r3, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	b25a      	sxtb	r2, r3
 8004016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800401a:	3302      	adds	r3, #2
 800401c:	b2d1      	uxtb	r1, r2
 800401e:	4a06      	ldr	r2, [pc, #24]	; (8004038 <iso15693Inventory+0x5f0>)
 8004020:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 8004022:	7bbb      	ldrb	r3, [r7, #14]
 8004024:	3304      	adds	r3, #4
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <iso15693Inventory+0x5f0>)
 800402a:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 800402c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800402e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 8004032:	e00a      	b.n	800404a <iso15693Inventory+0x602>
 8004034:	200002b4 	.word	0x200002b4
 8004038:	20000268 	.word	0x20000268
            for (i = 0; i < 16; i++)
 800403c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800403e:	3301      	adds	r3, #1
 8004040:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004042:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004044:	2b0f      	cmp	r3, #15
 8004046:	f67f af45 	bls.w	8003ed4 <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 800404a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800404e:	4313      	orrs	r3, r2
 8004050:	f47f ad7c 	bne.w	8003b4c <iso15693Inventory+0x104>
 8004054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f ad78 	bne.w	8003b4c <iso15693Inventory+0x104>

out_max_cards:
 800405c:	e000      	b.n	8004060 <iso15693Inventory+0x618>
                        goto out_max_cards;
 800405e:	bf00      	nop
    err = ERR_NONE;
 8004060:	2300      	movs	r3, #0
 8004062:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 8004064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004066:	7efa      	ldrb	r2, [r7, #27]
 8004068:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 800406a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 8004072:	2316      	movs	r3, #22
 8004074:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 8004076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8004078:	4618      	mov	r0, r3
 800407a:	373c      	adds	r7, #60	; 0x3c
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop

08004084 <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af06      	add	r7, sp, #24
 800408a:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <iso15693SelectPicc+0x54>)
 800408e:	7819      	ldrb	r1, [r3, #0]
 8004090:	2351      	movs	r3, #81	; 0x51
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	2300      	movs	r3, #0
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2304      	movs	r3, #4
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <iso15693SelectPicc+0x58>)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	2025      	movs	r0, #37	; 0x25
 80040ac:	f000 f876 	bl	800419c <iso15693SendRequest>
 80040b0:	4603      	mov	r3, r0
 80040b2:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80040b4:	89fb      	ldrh	r3, [r7, #14]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <iso15693SelectPicc+0x58>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 80040c2:	2306      	movs	r3, #6
 80040c4:	81fb      	strh	r3, [r7, #14]
 80040c6:	e002      	b.n	80040ce <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <iso15693SelectPicc+0x4a>
    }

out:
 80040cc:	bf00      	nop
    return err;
 80040ce:	89fb      	ldrh	r3, [r7, #14]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200002f4 	.word	0x200002f4
 80040dc:	20000268 	.word	0x20000268

080040e0 <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af06      	add	r7, sp, #24
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	72fb      	strb	r3, [r7, #11]
 80040ee:	4613      	mov	r3, r2
 80040f0:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 80040f2:	7afb      	ldrb	r3, [r7, #11]
 80040f4:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 80040f6:	7abb      	ldrb	r3, [r7, #10]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <iso15693ReadMultipleBlocks+0xb0>)
 8004100:	7819      	ldrb	r1, [r3, #0]
 8004102:	2351      	movs	r3, #81	; 0x51
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	2302      	movs	r3, #2
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	2348      	movs	r3, #72	; 0x48
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <iso15693ReadMultipleBlocks+0xb4>)
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	2023      	movs	r0, #35	; 0x23
 8004120:	f000 f83c 	bl	800419c <iso15693SendRequest>
 8004124:	4603      	mov	r3, r0
 8004126:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004128:	8afb      	ldrh	r3, [r7, #22]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d128      	bne.n	8004180 <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 800412e:	8abb      	ldrh	r3, [r7, #20]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d927      	bls.n	8004184 <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 8004134:	4b17      	ldr	r3, [pc, #92]	; (8004194 <iso15693ReadMultipleBlocks+0xb4>)
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2200      	movs	r2, #0
 800414c:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <iso15693ReadMultipleBlocks+0xb4>)
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	82fb      	strh	r3, [r7, #22]
 8004154:	e017      	b.n	8004186 <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 8004156:	8abb      	ldrh	r3, [r7, #20]
 8004158:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800415a:	429a      	cmp	r2, r3
 800415c:	d203      	bcs.n	8004166 <iso15693ReadMultipleBlocks+0x86>
 800415e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004160:	3b01      	subs	r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	e002      	b.n	800416c <iso15693ReadMultipleBlocks+0x8c>
 8004166:	8abb      	ldrh	r3, [r7, #20]
 8004168:	3b01      	subs	r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416e:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <iso15693ReadMultipleBlocks+0xb8>)
 8004178:	6a38      	ldr	r0, [r7, #32]
 800417a:	f012 f908 	bl	801638e <memcpy>
 800417e:	e002      	b.n	8004186 <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004180:	bf00      	nop
 8004182:	e000      	b.n	8004186 <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 8004184:	bf00      	nop
    return err;
 8004186:	8afb      	ldrh	r3, [r7, #22]

}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200002f4 	.word	0x200002f4
 8004194:	20000268 	.word	0x20000268
 8004198:	20000269 	.word	0x20000269

0800419c <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af04      	add	r7, sp, #16
 80041a2:	60ba      	str	r2, [r7, #8]
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	460b      	mov	r3, r1
 80041ac:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 80041ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041b2:	330a      	adds	r3, #10
 80041b4:	2b48      	cmp	r3, #72	; 0x48
 80041b6:	dd01      	ble.n	80041bc <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e03f      	b.n	800423c <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041c2:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	f043 0310 	orr.w	r3, r3, #16
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <iso15693SendRequest+0xa8>)
 80041d4:	701a      	strb	r2, [r3, #0]
        length = 2;
 80041d6:	2302      	movs	r3, #2
 80041d8:	75fb      	strb	r3, [r7, #23]
 80041da:	e00e      	b.n	80041fa <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 80041dc:	7bbb      	ldrb	r3, [r7, #14]
 80041de:	f043 0320 	orr.w	r3, r3, #32
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <iso15693SendRequest+0xa8>)
 80041e6:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3302      	adds	r3, #2
 80041ec:	2208      	movs	r2, #8
 80041ee:	4619      	mov	r1, r3
 80041f0:	4815      	ldr	r0, [pc, #84]	; (8004248 <iso15693SendRequest+0xac>)
 80041f2:	f012 f8cc 	bl	801638e <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 80041f6:	230a      	movs	r3, #10
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <iso15693SendRequest+0xa8>)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <iso15693SendRequest+0xa8>)
 8004204:	4413      	add	r3, r2
 8004206:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800420a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420c:	4618      	mov	r0, r3
 800420e:	f012 f8be 	bl	801638e <memcpy>
    length += addSendDataLength;
 8004212:	7dfa      	ldrb	r2, [r7, #23]
 8004214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004218:	4413      	add	r3, r2
 800421a:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	b299      	uxth	r1, r3
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	8c3a      	ldrh	r2, [r7, #32]
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	2300      	movs	r3, #0
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4803      	ldr	r0, [pc, #12]	; (8004244 <iso15693SendRequest+0xa8>)
 8004236:	f00a f92f 	bl	800e498 <rfalTransceiveBlockingTxRx>
 800423a:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000268 	.word	0x20000268
 8004248:	2000026a 	.word	0x2000026a

0800424c <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 8004252:	2300      	movs	r3, #0
 8004254:	80fb      	strh	r3, [r7, #6]

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 8004256:	f008 fcdf 	bl	800cc18 <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 800425a:	f009 f9bf 	bl	800d5dc <rfalInitialize>
 800425e:	4603      	mov	r3, r0
 8004260:	80fb      	strh	r3, [r7, #6]
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <rfidControllerInit+0x22>
		rfidInitialized = true;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <rfidControllerInit+0x2c>)
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
	}
	return err;
 800426e:	88fb      	ldrh	r3, [r7, #6]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	200002f5 	.word	0x200002f5

0800427c <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b08e      	sub	sp, #56	; 0x38
 8004280:	af04      	add	r7, sp, #16
 8004282:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 8004284:	2300      	movs	r3, #0
 8004286:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 8004288:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <checkFilterTags+0x18c>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	f083 0301 	eor.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <checkFilterTags+0x1e>
 8004296:	2307      	movs	r3, #7
 8004298:	e0b1      	b.n	80043fe <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042a6:	e021      	b.n	80042ec <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 80042a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	3301      	adds	r3, #1
 80042ba:	2208      	movs	r2, #8
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f012 f870 	bl	80163a4 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 80042c4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	3308      	adds	r3, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	3301      	adds	r3, #1
 80042d8:	220a      	movs	r2, #10
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f012 f861 	bl	80163a4 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80042e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042e6:	3301      	adds	r3, #1
 80042e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d9d9      	bls.n	80042a8 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 80042f8:	2100      	movs	r1, #0
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7ff fb60 	bl	80039c0 <iso15693Initialize>
 8004300:	4603      	mov	r3, r0
 8004302:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004306:	2b00      	cmp	r3, #0
 8004308:	d16e      	bne.n	80043e8 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 800430a:	4b40      	ldr	r3, [pc, #256]	; (800440c <checkFilterTags+0x190>)
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2303      	movs	r3, #3
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <checkFilterTags+0x194>)
 8004314:	2200      	movs	r2, #0
 8004316:	2100      	movs	r1, #0
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff fb95 	bl	8003a48 <iso15693Inventory>
 800431e:	4603      	mov	r3, r0
 8004320:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004324:	2b00      	cmp	r3, #0
 8004326:	d161      	bne.n	80043ec <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004328:	2300      	movs	r3, #0
 800432a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800432e:	e050      	b.n	80043d2 <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 8004330:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a34      	ldr	r2, [pc, #208]	; (8004410 <checkFilterTags+0x194>)
 800433e:	4413      	add	r3, r2
 8004340:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 8004342:	6a38      	ldr	r0, [r7, #32]
 8004344:	f7ff fe9e 	bl	8004084 <iso15693SelectPicc>
 8004348:	4603      	mov	r3, r0
 800434a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800434c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800434e:	2b00      	cmp	r3, #0
 8004350:	d14e      	bne.n	80043f0 <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8004352:	f107 021f 	add.w	r2, r7, #31
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	2311      	movs	r3, #17
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	f107 030c 	add.w	r3, r7, #12
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	2204      	movs	r2, #4
 800436a:	2100      	movs	r1, #0
 800436c:	6a38      	ldr	r0, [r7, #32]
 800436e:	f7ff feb7 	bl	80040e0 <iso15693ReadMultipleBlocks>
 8004372:	4603      	mov	r3, r0
 8004374:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004378:	2b00      	cmp	r3, #0
 800437a:	d13b      	bne.n	80043f4 <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 800437c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	1c58      	adds	r0, r3, #1
 800438e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <checkFilterTags+0x194>)
 800439c:	4413      	add	r3, r2
 800439e:	3302      	adds	r3, #2
 80043a0:	2208      	movs	r2, #8
 80043a2:	4619      	mov	r1, r3
 80043a4:	f011 fff3 	bl	801638e <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 80043a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	3308      	adds	r3, #8
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3301      	adds	r3, #1
 80043bc:	f107 010c 	add.w	r1, r7, #12
 80043c0:	220a      	movs	r2, #10
 80043c2:	4618      	mov	r0, r3
 80043c4:	f011 ffe3 	bl	801638e <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 80043c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <checkFilterTags+0x190>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3a8      	bcc.n	8004330 <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <checkFilterTags+0x190>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e006      	b.n	80043f6 <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 80043e8:	bf00      	nop
 80043ea:	e004      	b.n	80043f6 <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 80043f4:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7ff fb14 	bl	8003a24 <iso15693Deinitialize>

	return err;
 80043fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200002f5 	.word	0x200002f5
 800440c:	200002f6 	.word	0x200002f6
 8004410:	200002f8 	.word	0x200002f8

08004414 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 800441c:	4a08      	ldr	r2, [pc, #32]	; (8004440 <spiInit+0x2c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000071c 	.word	0x2000071c

08004444 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	2200      	movs	r2, #0
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 fa90 	bl	800597c <HAL_GPIO_WritePin>
}     
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	2201      	movs	r2, #1
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 fa80 	bl	800597c <HAL_GPIO_WritePin>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8004492:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <spiTxRx+0x70>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <spiTxRx+0x1a>
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e026      	b.n	80044ec <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a4:	d901      	bls.n	80044aa <spiTxRx+0x26>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e020      	b.n	80044ec <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4810      	ldr	r0, [pc, #64]	; (80044f8 <spiTxRx+0x74>)
 80044b8:	f011 ff69 	bl	801638e <memcpy>
 80044bc:	e005      	b.n	80044ca <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	461a      	mov	r2, r3
 80044c2:	2100      	movs	r1, #0
 80044c4:	480c      	ldr	r0, [pc, #48]	; (80044f8 <spiTxRx+0x74>)
 80044c6:	f011 ff6d 	bl	80163a4 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <spiTxRx+0x70>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <spiTxRx+0x54>
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	e000      	b.n	80044da <spiTxRx+0x56>
 80044d8:	4a08      	ldr	r2, [pc, #32]	; (80044fc <spiTxRx+0x78>)
 80044da:	88f9      	ldrh	r1, [r7, #6]
 80044dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	460b      	mov	r3, r1
 80044e4:	4904      	ldr	r1, [pc, #16]	; (80044f8 <spiTxRx+0x74>)
 80044e6:	f005 fe3d 	bl	800a164 <HAL_SPI_TransmitReceive>
 80044ea:	4603      	mov	r3, r0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	2000071c 	.word	0x2000071c
 80044f8:	2000031c 	.word	0x2000031c
 80044fc:	2000051c 	.word	0x2000051c

08004500 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 800450a:	f000 ff3b 	bl	8005384 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	4413      	add	r3, r2
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8004524:	f000 ff2e 	bl	8005384 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	da01      	bge.n	800453e <timerIsExpired+0x22>
  {
    return true;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <timerIsExpired+0x24>
  }
  
  return false;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <rtcModuleInit>:
 *******************************************************************************/

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
void rtcModuleInit(RTC_HandleTypeDef *hrtc) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	// Register the Handle
	pRtcHandle = hrtc;
 8004550:	4a05      	ldr	r2, [pc, #20]	; (8004568 <rtcModuleInit+0x20>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6013      	str	r3, [r2, #0]
	rtcModInit = true;
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <rtcModuleInit+0x24>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000720 	.word	0x20000720
 800456c:	20000724 	.word	0x20000724

08004570 <rtcModuleIsInit>:

bool rtcModuleIsInit( void ) {
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	return rtcModInit;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <rtcModuleIsInit+0x14>)
 8004576:	781b      	ldrb	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000724 	.word	0x20000724

08004588 <rtcGetDateTime>:
	}

	return RTC_OK;
}

RTC_error rtcGetDateTime(RTC_DateTypeDef* dateRet, RTC_TimeTypeDef* timeRet) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	// Check If Module is Initialized
	if (!rtcModInit) {
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <rtcGetDateTime+0x58>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <rtcGetDateTime+0x1c>
		return RTC_ERR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e018      	b.n	80045d6 <rtcGetDateTime+0x4e>
	}

	// Get the Time
	if (HAL_RTC_GetTime(pRtcHandle, timeRet, RTC_FORMAT_BIN) != HAL_OK) {
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <rtcGetDateTime+0x5c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 f819 	bl	80085e4 <HAL_RTC_GetTime>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <rtcGetDateTime+0x34>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e00c      	b.n	80045d6 <rtcGetDateTime+0x4e>
	}

	// Get the Date
	if (HAL_RTC_GetDate(pRtcHandle, dateRet, RTC_FORMAT_BIN) != HAL_OK) {
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <rtcGetDateTime+0x5c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 f912 	bl	80087ee <HAL_RTC_GetDate>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <rtcGetDateTime+0x4c>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <rtcGetDateTime+0x4e>
	}

	return RTC_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000724 	.word	0x20000724
 80045e4:	20000720 	.word	0x20000720

080045e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045ec:	f000 fe64 	bl	80052b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045f0:	f000 f814 	bl	800461c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045f4:	f000 f9a8 	bl	8004948 <MX_GPIO_Init>
  MX_I2C1_Init();
 80045f8:	f000 f892 	bl	8004720 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80045fc:	f000 f918 	bl	8004830 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8004600:	f000 f936 	bl	8004870 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004604:	f000 f96a 	bl	80048dc <MX_SPI2_Init>
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 8004608:	f011 f986 	bl	8015918 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800460c:	f000 f8b6 	bl	800477c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 8004610:	f7fc fd4e 	bl	80010b0 <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 8004614:	f7fc fdaa 	bl	800116c <processIOs>
 8004618:	e7fc      	b.n	8004614 <main+0x2c>
	...

0800461c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b09a      	sub	sp, #104	; 0x68
 8004620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004626:	2230      	movs	r2, #48	; 0x30
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f011 feba 	bl	80163a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
 8004650:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <SystemClock_Config+0xfc>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <SystemClock_Config+0xfc>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <SystemClock_Config+0xfc>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	4b2a      	ldr	r3, [pc, #168]	; (800471c <SystemClock_Config+0x100>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a29      	ldr	r2, [pc, #164]	; (800471c <SystemClock_Config+0x100>)
 8004678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <SystemClock_Config+0x100>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004686:	607b      	str	r3, [r7, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800468a:	2309      	movs	r3, #9
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800468e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004694:	2301      	movs	r3, #1
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004698:	2302      	movs	r3, #2
 800469a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800469c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80046a2:	2304      	movs	r3, #4
 80046a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80046a6:	2348      	movs	r3, #72	; 0x48
 80046a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046aa:	2302      	movs	r3, #2
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80046ae:	2303      	movs	r3, #3
 80046b0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 f908 	bl	80078cc <HAL_RCC_OscConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80046c2:	f000 fa3f 	bl	8004b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046c6:	230f      	movs	r3, #15
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046ca:	2302      	movs	r3, #2
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fb62 	bl	8007dac <HAL_RCC_ClockConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80046ee:	f000 fa29 	bl	8004b44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80046f2:	2302      	movs	r3, #2
 80046f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80046f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	4618      	mov	r0, r3
 8004702:	f003 fd31 	bl	8008168 <HAL_RCCEx_PeriphCLKConfig>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800470c:	f000 fa1a 	bl	8004b44 <Error_Handler>
  }
}
 8004710:	bf00      	nop
 8004712:	3768      	adds	r7, #104	; 0x68
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000

08004720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <MX_I2C1_Init+0x50>)
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <MX_I2C1_Init+0x54>)
 8004728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <MX_I2C1_Init+0x50>)
 800472c:	4a12      	ldr	r2, [pc, #72]	; (8004778 <MX_I2C1_Init+0x58>)
 800472e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <MX_I2C1_Init+0x50>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <MX_I2C1_Init+0x50>)
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <MX_I2C1_Init+0x50>)
 800473e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <MX_I2C1_Init+0x50>)
 8004746:	2200      	movs	r2, #0
 8004748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <MX_I2C1_Init+0x50>)
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <MX_I2C1_Init+0x50>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <MX_I2C1_Init+0x50>)
 8004758:	2200      	movs	r2, #0
 800475a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800475c:	4804      	ldr	r0, [pc, #16]	; (8004770 <MX_I2C1_Init+0x50>)
 800475e:	f001 f94b 	bl	80059f8 <HAL_I2C_Init>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004768:	f000 f9ec 	bl	8004b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800476c:	bf00      	nop
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000fd4 	.word	0x20000fd4
 8004774:	40005400 	.word	0x40005400
 8004778:	00061a80 	.word	0x00061a80

0800477c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004790:	2300      	movs	r3, #0
 8004792:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <MX_RTC_Init+0xac>)
 8004796:	4a25      	ldr	r2, [pc, #148]	; (800482c <MX_RTC_Init+0xb0>)
 8004798:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <MX_RTC_Init+0xac>)
 800479c:	2200      	movs	r2, #0
 800479e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <MX_RTC_Init+0xac>)
 80047a2:	227f      	movs	r2, #127	; 0x7f
 80047a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <MX_RTC_Init+0xac>)
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <MX_RTC_Init+0xac>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <MX_RTC_Init+0xac>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <MX_RTC_Init+0xac>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047be:	481a      	ldr	r0, [pc, #104]	; (8004828 <MX_RTC_Init+0xac>)
 80047c0:	f003 fdc2 	bl	8008348 <HAL_RTC_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80047ca:	f000 f9bb 	bl	8004b44 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2201      	movs	r2, #1
 80047e6:	4619      	mov	r1, r3
 80047e8:	480f      	ldr	r0, [pc, #60]	; (8004828 <MX_RTC_Init+0xac>)
 80047ea:	f003 fe3e 	bl	800846a <HAL_RTC_SetTime>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80047f4:	f000 f9a6 	bl	8004b44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80047f8:	2301      	movs	r3, #1
 80047fa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80047fc:	2301      	movs	r3, #1
 80047fe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004800:	2301      	movs	r3, #1
 8004802:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004804:	2300      	movs	r3, #0
 8004806:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004808:	463b      	mov	r3, r7
 800480a:	2201      	movs	r2, #1
 800480c:	4619      	mov	r1, r3
 800480e:	4806      	ldr	r0, [pc, #24]	; (8004828 <MX_RTC_Init+0xac>)
 8004810:	f003 ff46 	bl	80086a0 <HAL_RTC_SetDate>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800481a:	f000 f993 	bl	8004b44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20001028 	.word	0x20001028
 800482c:	40002800 	.word	0x40002800

08004830 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <MX_SDIO_SD_Init+0x3c>)
 8004838:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 800483c:	2200      	movs	r2, #0
 800483e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <MX_SDIO_SD_Init+0x38>)
 800485a:	2202      	movs	r2, #2
 800485c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	20001048 	.word	0x20001048
 800486c:	40012c00 	.word	0x40012c00

08004870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <MX_SPI1_Init+0x64>)
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <MX_SPI1_Init+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <MX_SPI1_Init+0x64>)
 800487c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <MX_SPI1_Init+0x64>)
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <MX_SPI1_Init+0x64>)
 800488a:	2200      	movs	r2, #0
 800488c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <MX_SPI1_Init+0x64>)
 8004890:	2200      	movs	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <MX_SPI1_Init+0x64>)
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <MX_SPI1_Init+0x64>)
 800489c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048a4:	2210      	movs	r2, #16
 80048a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048bc:	220a      	movs	r2, #10
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048c0:	4804      	ldr	r0, [pc, #16]	; (80048d4 <MX_SPI1_Init+0x64>)
 80048c2:	f005 fab7 	bl	8009e34 <HAL_SPI_Init>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048cc:	f000 f93a 	bl	8004b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	200010cc 	.word	0x200010cc
 80048d8:	40013000 	.word	0x40013000

080048dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <MX_SPI2_Init+0x64>)
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <MX_SPI2_Init+0x68>)
 80048e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <MX_SPI2_Init+0x64>)
 80048e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <MX_SPI2_Init+0x64>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <MX_SPI2_Init+0x64>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <MX_SPI2_Init+0x64>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <MX_SPI2_Init+0x64>)
 8004902:	2200      	movs	r2, #0
 8004904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <MX_SPI2_Init+0x64>)
 8004908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <MX_SPI2_Init+0x64>)
 8004910:	2208      	movs	r2, #8
 8004912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <MX_SPI2_Init+0x64>)
 8004916:	2200      	movs	r2, #0
 8004918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <MX_SPI2_Init+0x64>)
 800491c:	2200      	movs	r2, #0
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <MX_SPI2_Init+0x64>)
 8004922:	2200      	movs	r2, #0
 8004924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <MX_SPI2_Init+0x64>)
 8004928:	220a      	movs	r2, #10
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800492c:	4804      	ldr	r0, [pc, #16]	; (8004940 <MX_SPI2_Init+0x64>)
 800492e:	f005 fa81 	bl	8009e34 <HAL_SPI_Init>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004938:	f000 f904 	bl	8004b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000f7c 	.word	0x20000f7c
 8004944:	40003800 	.word	0x40003800

08004948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4a71      	ldr	r2, [pc, #452]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6313      	str	r3, [r2, #48]	; 0x30
 800496e:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a6a      	ldr	r2, [pc, #424]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 8004984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b68      	ldr	r3, [pc, #416]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	4a63      	ldr	r2, [pc, #396]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6313      	str	r3, [r2, #48]	; 0x30
 80049a6:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4b56      	ldr	r3, [pc, #344]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	4a55      	ldr	r2, [pc, #340]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	6313      	str	r3, [r2, #48]	; 0x30
 80049de:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <MX_GPIO_Init+0x1e4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 80049ea:	2200      	movs	r2, #0
 80049ec:	2143      	movs	r1, #67	; 0x43
 80049ee:	4850      	ldr	r0, [pc, #320]	; (8004b30 <MX_GPIO_Init+0x1e8>)
 80049f0:	f000 ffc4 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 80049f4:	2200      	movs	r2, #0
 80049f6:	f240 111b 	movw	r1, #283	; 0x11b
 80049fa:	484e      	ldr	r0, [pc, #312]	; (8004b34 <MX_GPIO_Init+0x1ec>)
 80049fc:	f000 ffbe 	bl	800597c <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8004a00:	2200      	movs	r2, #0
 8004a02:	2123      	movs	r1, #35	; 0x23
 8004a04:	484c      	ldr	r0, [pc, #304]	; (8004b38 <MX_GPIO_Init+0x1f0>)
 8004a06:	f000 ffb9 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8004a0a:	2343      	movs	r3, #67	; 0x43
 8004a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	2300      	movs	r3, #0
 8004a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1a:	f107 0314 	add.w	r3, r7, #20
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4843      	ldr	r0, [pc, #268]	; (8004b30 <MX_GPIO_Init+0x1e8>)
 8004a22:	f000 fe11 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004a26:	f240 131b 	movw	r3, #283	; 0x11b
 8004a2a:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a34:	2300      	movs	r3, #0
 8004a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	483d      	ldr	r0, [pc, #244]	; (8004b34 <MX_GPIO_Init+0x1ec>)
 8004a40:	f000 fe02 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8004a44:	2304      	movs	r3, #4
 8004a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004a50:	f107 0314 	add.w	r3, r7, #20
 8004a54:	4619      	mov	r1, r3
 8004a56:	4837      	ldr	r0, [pc, #220]	; (8004b34 <MX_GPIO_Init+0x1ec>)
 8004a58:	f000 fdf6 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a60:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <MX_GPIO_Init+0x1f4>)
 8004a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4830      	ldr	r0, [pc, #192]	; (8004b30 <MX_GPIO_Init+0x1e8>)
 8004a70:	f000 fdea 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8004a74:	2323      	movs	r3, #35	; 0x23
 8004a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a80:	2300      	movs	r3, #0
 8004a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	4619      	mov	r1, r3
 8004a8a:	482b      	ldr	r0, [pc, #172]	; (8004b38 <MX_GPIO_Init+0x1f0>)
 8004a8c:	f000 fddc 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin;
 8004a90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004a96:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <MX_GPIO_Init+0x1f8>)
 8004a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4824      	ldr	r0, [pc, #144]	; (8004b38 <MX_GPIO_Init+0x1f0>)
 8004aa6:	f000 fdcf 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <MX_GPIO_Init+0x1f8>)
 8004ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4619      	mov	r1, r3
 8004abc:	481c      	ldr	r0, [pc, #112]	; (8004b30 <MX_GPIO_Init+0x1e8>)
 8004abe:	f000 fdc3 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4818      	ldr	r0, [pc, #96]	; (8004b38 <MX_GPIO_Init+0x1f0>)
 8004ad6:	f000 fdb7 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_IRQ_Pin LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = TEMP_IRQ_Pin|LOW_BAT_IRQ_Pin;
 8004ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <MX_GPIO_Init+0x1f4>)
 8004ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	4619      	mov	r1, r3
 8004aee:	4812      	ldr	r0, [pc, #72]	; (8004b38 <MX_GPIO_Init+0x1f0>)
 8004af0:	f000 fdaa 	bl	8005648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004af4:	2200      	movs	r2, #0
 8004af6:	2100      	movs	r1, #0
 8004af8:	200a      	movs	r0, #10
 8004afa:	f000 fd4c 	bl	8005596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004afe:	200a      	movs	r0, #10
 8004b00:	f000 fd65 	bl	80055ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2100      	movs	r1, #0
 8004b08:	2017      	movs	r0, #23
 8004b0a:	f000 fd44 	bl	8005596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b0e:	2017      	movs	r0, #23
 8004b10:	f000 fd5d 	bl	80055ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	2028      	movs	r0, #40	; 0x28
 8004b1a:	f000 fd3c 	bl	8005596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b1e:	2028      	movs	r0, #40	; 0x28
 8004b20:	f000 fd55 	bl	80055ce <HAL_NVIC_EnableIRQ>

}
 8004b24:	bf00      	nop
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40020400 	.word	0x40020400
 8004b3c:	10110000 	.word	0x10110000
 8004b40:	10310000 	.word	0x10310000

08004b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b68:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_MspInit+0x4c>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bac:	f107 0314 	add.w	r3, r7, #20
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_I2C_MspInit+0x84>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d12b      	bne.n	8004c1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 8004be2:	23c0      	movs	r3, #192	; 0xc0
 8004be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be6:	2312      	movs	r3, #18
 8004be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <HAL_I2C_MspInit+0x8c>)
 8004bfe:	f000 fd23 	bl	8005648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c1e:	bf00      	nop
 8004c20:	3728      	adds	r7, #40	; 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40005400 	.word	0x40005400
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020400 	.word	0x40020400

08004c34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a05      	ldr	r2, [pc, #20]	; (8004c58 <HAL_RTC_MspInit+0x24>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d102      	bne.n	8004c4c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RTC_MspInit+0x28>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40002800 	.word	0x40002800
 8004c5c:	42470e3c 	.word	0x42470e3c

08004c60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <HAL_SD_MspInit+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d171      	bne.n	8004d66 <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c90:	6453      	str	r3, [r2, #68]	; 0x44
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	6313      	str	r3, [r2, #48]	; 0x30
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004cc4:	f043 0304 	orr.w	r3, r3, #4
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004ce0:	f043 0308 	orr.w	r3, r3, #8
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_SD_MspInit+0x114>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d00:	2303      	movs	r3, #3
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d04:	230c      	movs	r3, #12
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d08:	f107 031c 	add.w	r3, r7, #28
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	481a      	ldr	r0, [pc, #104]	; (8004d78 <HAL_SD_MspInit+0x118>)
 8004d10:	f000 fc9a 	bl	8005648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8004d14:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d22:	2303      	movs	r3, #3
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d26:	230c      	movs	r3, #12
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d2a:	f107 031c 	add.w	r3, r7, #28
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4812      	ldr	r0, [pc, #72]	; (8004d7c <HAL_SD_MspInit+0x11c>)
 8004d32:	f000 fc89 	bl	8005648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d36:	2304      	movs	r3, #4
 8004d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d42:	2303      	movs	r3, #3
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d46:	230c      	movs	r3, #12
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d4a:	f107 031c 	add.w	r3, r7, #28
 8004d4e:	4619      	mov	r1, r3
 8004d50:	480b      	ldr	r0, [pc, #44]	; (8004d80 <HAL_SD_MspInit+0x120>)
 8004d52:	f000 fc79 	bl	8005648 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2031      	movs	r0, #49	; 0x31
 8004d5c:	f000 fc1b 	bl	8005596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004d60:	2031      	movs	r0, #49	; 0x31
 8004d62:	f000 fc34 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004d66:	bf00      	nop
 8004d68:	3730      	adds	r7, #48	; 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020400 	.word	0x40020400
 8004d7c:	40020800 	.word	0x40020800
 8004d80:	40020c00 	.word	0x40020c00

08004d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08c      	sub	sp, #48	; 0x30
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8c:	f107 031c 	add.w	r3, r7, #28
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a45      	ldr	r2, [pc, #276]	; (8004eb8 <HAL_SPI_MspInit+0x134>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d134      	bne.n	8004e10 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	4b44      	ldr	r3, [pc, #272]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4a43      	ldr	r2, [pc, #268]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004db4:	6453      	str	r3, [r2, #68]	; 0x44
 8004db6:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd2:	4b3a      	ldr	r3, [pc, #232]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 8004dde:	23e0      	movs	r3, #224	; 0xe0
 8004de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de2:	2302      	movs	r3, #2
 8004de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dea:	2303      	movs	r3, #3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004dee:	2305      	movs	r3, #5
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df2:	f107 031c 	add.w	r3, r7, #28
 8004df6:	4619      	mov	r1, r3
 8004df8:	4831      	ldr	r0, [pc, #196]	; (8004ec0 <HAL_SPI_MspInit+0x13c>)
 8004dfa:	f000 fc25 	bl	8005648 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	2023      	movs	r0, #35	; 0x23
 8004e04:	f000 fbc7 	bl	8005596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004e08:	2023      	movs	r0, #35	; 0x23
 8004e0a:	f000 fbe0 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e0e:	e04f      	b.n	8004eb0 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <HAL_SPI_MspInit+0x140>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d14a      	bne.n	8004eb0 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e28:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <HAL_SPI_MspInit+0x138>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 8004e6e:	230c      	movs	r3, #12
 8004e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e7e:	2305      	movs	r3, #5
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e82:	f107 031c 	add.w	r3, r7, #28
 8004e86:	4619      	mov	r1, r3
 8004e88:	480f      	ldr	r0, [pc, #60]	; (8004ec8 <HAL_SPI_MspInit+0x144>)
 8004e8a:	f000 fbdd 	bl	8005648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ea0:	2305      	movs	r3, #5
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4808      	ldr	r0, [pc, #32]	; (8004ecc <HAL_SPI_MspInit+0x148>)
 8004eac:	f000 fbcc 	bl	8005648 <HAL_GPIO_Init>
}
 8004eb0:	bf00      	nop
 8004eb2:	3730      	adds	r7, #48	; 0x30
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40013000 	.word	0x40013000
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	40003800 	.word	0x40003800
 8004ec8:	40020800 	.word	0x40020800
 8004ecc:	40020400 	.word	0x40020400

08004ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ee2:	e7fe      	b.n	8004ee2 <HardFault_Handler+0x4>

08004ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ee8:	e7fe      	b.n	8004ee8 <MemManage_Handler+0x4>

08004eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004eee:	e7fe      	b.n	8004eee <BusFault_Handler+0x4>

08004ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ef4:	e7fe      	b.n	8004ef4 <UsageFault_Handler+0x4>

08004ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f12:	b480      	push	{r7}
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f24:	f000 fa1a 	bl	800535c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004f30:	2010      	movs	r0, #16
 8004f32:	f000 fd3d 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 8004f36:	f00b fa2f 	bl	8010398 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t irq5tickCnt;
	static uint32_t irq5tickOffset = 0;
	// Software Debounce
	irq5tickCnt = HAL_GetTick();
 8004f46:	f000 fa1d 	bl	8005384 <HAL_GetTick>
 8004f4a:	6078      	str	r0, [r7, #4]

	if ((irq5tickCnt - irq5tickOffset) > 10) {
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <EXTI9_5_IRQHandler+0x68>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b0a      	cmp	r3, #10
 8004f56:	d918      	bls.n	8004f8a <EXTI9_5_IRQHandler+0x4a>
		irq5tickOffset = irq5tickCnt;
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <EXTI9_5_IRQHandler+0x68>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6013      	str	r3, [r2, #0]
		// Service the SD Card Insert/Remove
		if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET) {
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	4812      	ldr	r0, [pc, #72]	; (8004fac <EXTI9_5_IRQHandler+0x6c>)
 8004f62:	f000 fcf3 	bl	800594c <HAL_GPIO_ReadPin>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <EXTI9_5_IRQHandler+0x3c>
			// The card has been inserted. Init FatFs/Logger.
			isr_flags |= (isr_flags_t) INIT_FAT_FS;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <EXTI9_5_IRQHandler+0x70>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <EXTI9_5_IRQHandler+0x70>)
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e006      	b.n	8004f8a <EXTI9_5_IRQHandler+0x4a>
		} else {
			// The card has been removed.  Deinit FatFs/Logger.
			isr_flags |= (isr_flags_t) DEINIT_FAT_FS;
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <EXTI9_5_IRQHandler+0x70>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <EXTI9_5_IRQHandler+0x70>)
 8004f88:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004f8a:	2080      	movs	r0, #128	; 0x80
 8004f8c:	f000 fd10 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f94:	f000 fd0c 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004f98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f9c:	f000 fd08 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000728 	.word	0x20000728
 8004fac:	40020800 	.word	0x40020800
 8004fb0:	20000e98 	.word	0x20000e98

08004fb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <SPI1_IRQHandler+0x10>)
 8004fba:	f005 fa75 	bl	800a4a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200010cc 	.word	0x200010cc

08004fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static uint32_t tickStart, tickEnd = 0; // Interval Tracking
	static uint8_t btn1flag, btn2flag, btn3flag = 0;

	// Check Pin States
	if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_SET) {
 8004fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fd0:	4872      	ldr	r0, [pc, #456]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8004fd2:	f000 fcbb 	bl	800594c <HAL_GPIO_ReadPin>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10b      	bne.n	8004ff4 <EXTI15_10_IRQHandler+0x2c>
		// Button 1 Initial Press
		btn1flag = 1;
 8004fdc:	4b70      	ldr	r3, [pc, #448]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8004fe2:	f000 f9cf 	bl	8005384 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b6e      	ldr	r3, [pc, #440]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 8004fea:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8004fec:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6d      	ldr	r2, [pc, #436]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 8004ff2:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_SET) {
 8004ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ff8:	4868      	ldr	r0, [pc, #416]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8004ffa:	f000 fca7 	bl	800594c <HAL_GPIO_ReadPin>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d10b      	bne.n	800501c <EXTI15_10_IRQHandler+0x54>
		// Button 2 Initial Press
		btn2flag = 1;
 8005004:	4b69      	ldr	r3, [pc, #420]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 800500a:	f000 f9bb 	bl	8005384 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	4b64      	ldr	r3, [pc, #400]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 8005012:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005014:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a63      	ldr	r2, [pc, #396]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 800501a:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_SET) {
 800501c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005020:	485e      	ldr	r0, [pc, #376]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8005022:	f000 fc93 	bl	800594c <HAL_GPIO_ReadPin>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10b      	bne.n	8005044 <EXTI15_10_IRQHandler+0x7c>
		// Button 3 Initial Press
		btn3flag = 1;
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 800502e:	2201      	movs	r2, #1
 8005030:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8005032:	f000 f9a7 	bl	8005384 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	4b5a      	ldr	r3, [pc, #360]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 800503a:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a59      	ldr	r2, [pc, #356]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 8005042:	6013      	str	r3, [r2, #0]
	}

	if (btn1flag) {
 8005044:	4b56      	ldr	r3, [pc, #344]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <EXTI15_10_IRQHandler+0x9e>
		if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_RESET) {
 800504c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005050:	4852      	ldr	r0, [pc, #328]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8005052:	f000 fc7b 	bl	800594c <HAL_GPIO_ReadPin>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <EXTI15_10_IRQHandler+0x9e>
			// Button 1 was released
			tickEnd = HAL_GetTick();
 800505c:	f000 f992 	bl	8005384 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	4b51      	ldr	r3, [pc, #324]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 8005064:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn2flag) {
 8005066:	4b51      	ldr	r3, [pc, #324]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <EXTI15_10_IRQHandler+0xc0>
		if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_RESET) {
 800506e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005072:	484a      	ldr	r0, [pc, #296]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8005074:	f000 fc6a 	bl	800594c <HAL_GPIO_ReadPin>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <EXTI15_10_IRQHandler+0xc0>
			// Button 2 was released
			tickEnd = HAL_GetTick();
 800507e:	f000 f981 	bl	8005384 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	4b48      	ldr	r3, [pc, #288]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 8005086:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn3flag) {
 8005088:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <EXTI15_10_IRQHandler+0xe2>
		if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_RESET) {
 8005090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005094:	4841      	ldr	r0, [pc, #260]	; (800519c <EXTI15_10_IRQHandler+0x1d4>)
 8005096:	f000 fc59 	bl	800594c <HAL_GPIO_ReadPin>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <EXTI15_10_IRQHandler+0xe2>
			// Button 3 was released
			tickEnd = HAL_GetTick();
 80050a0:	f000 f970 	bl	8005384 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 80050a8:	601a      	str	r2, [r3, #0]
		}
	}

	// Evaluate Results
	if (tickEnd - tickStart > 0) {
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d064      	beq.n	8005180 <EXTI15_10_IRQHandler+0x1b8>
		// Avoid 1st event
		if (tickEnd - tickStart <= 1000) {
 80050b6:	4b3c      	ldr	r3, [pc, #240]	; (80051a8 <EXTI15_10_IRQHandler+0x1e0>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b3a      	ldr	r3, [pc, #232]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c4:	d829      	bhi.n	800511a <EXTI15_10_IRQHandler+0x152>
			// Short press
			if (btn1flag) {
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <EXTI15_10_IRQHandler+0x11a>
				isr_flags |= (isr_flags_t) BTN_1_SH_PRESS;
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 80050da:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 80050dc:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 80050e2:	4b32      	ldr	r3, [pc, #200]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <EXTI15_10_IRQHandler+0x136>
				isr_flags |= (isr_flags_t) BTN_2_SH_PRESS;
 80050ea:	4b32      	ldr	r3, [pc, #200]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f043 0310 	orr.w	r3, r3, #16
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 80050f6:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 80050f8:	4b2c      	ldr	r3, [pc, #176]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <EXTI15_10_IRQHandler+0x152>
				isr_flags |= (isr_flags_t) BTN_3_SH_PRESS;
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	b2da      	uxtb	r2, r3
 8005110:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005112:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8005114:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
			}
		}

		if (HAL_GetTick() - tickStart > 1000) {
 800511a:	f000 f933 	bl	8005384 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <EXTI15_10_IRQHandler+0x1dc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800512a:	d929      	bls.n	8005180 <EXTI15_10_IRQHandler+0x1b8>
			// Long press
			if (btn1flag) {
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <EXTI15_10_IRQHandler+0x180>
				isr_flags |= (isr_flags_t) BTN_1_LG_PRESS;
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f043 0308 	orr.w	r3, r3, #8
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005140:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <EXTI15_10_IRQHandler+0x1d8>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8005148:	4b18      	ldr	r3, [pc, #96]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <EXTI15_10_IRQHandler+0x19c>
				isr_flags |= (isr_flags_t) BTN_2_LG_PRESS;
 8005150:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f043 0320 	orr.w	r3, r3, #32
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 800515c:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <EXTI15_10_IRQHandler+0x1e4>)
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <EXTI15_10_IRQHandler+0x1b8>
				isr_flags |= (isr_flags_t) BTN_3_LG_PRESS;
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <EXTI15_10_IRQHandler+0x1ec>)
 8005178:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <EXTI15_10_IRQHandler+0x1e8>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005180:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005184:	f000 fc14 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005188:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800518c:	f000 fc10 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005190:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005194:	f000 fc0c 	bl	80059b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40020400 	.word	0x40020400
 80051a0:	2000072c 	.word	0x2000072c
 80051a4:	20000730 	.word	0x20000730
 80051a8:	20000734 	.word	0x20000734
 80051ac:	20000738 	.word	0x20000738
 80051b0:	20000739 	.word	0x20000739
 80051b4:	20000e98 	.word	0x20000e98

080051b8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80051bc:	4802      	ldr	r0, [pc, #8]	; (80051c8 <SDIO_IRQHandler+0x10>)
 80051be:	f004 f821 	bl	8009204 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20001048 	.word	0x20001048

080051cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80051d0:	4802      	ldr	r0, [pc, #8]	; (80051dc <OTG_FS_IRQHandler+0x10>)
 80051d2:	f001 fb41 	bl	8006858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20002434 	.word	0x20002434

080051e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <_sbrk+0x50>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <_sbrk+0x16>
		heap_end = &end;
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <_sbrk+0x50>)
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <_sbrk+0x54>)
 80051f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <_sbrk+0x50>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <_sbrk+0x50>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	466a      	mov	r2, sp
 8005206:	4293      	cmp	r3, r2
 8005208:	d907      	bls.n	800521a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800520a:	f011 f877 	bl	80162fc <__errno>
 800520e:	4602      	mov	r2, r0
 8005210:	230c      	movs	r3, #12
 8005212:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	e006      	b.n	8005228 <_sbrk+0x48>
	}

	heap_end += incr;
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <_sbrk+0x50>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	4a03      	ldr	r2, [pc, #12]	; (8005230 <_sbrk+0x50>)
 8005224:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	2000073c 	.word	0x2000073c
 8005234:	20002840 	.word	0x20002840

08005238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <SystemInit+0x28>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	4a07      	ldr	r2, [pc, #28]	; (8005260 <SystemInit+0x28>)
 8005244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <SystemInit+0x28>)
 800524e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005252:	609a      	str	r2, [r3, #8]
#endif
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <Reset_Handler>:
 8005264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800529c <LoopFillZerobss+0x14>
 8005268:	2100      	movs	r1, #0
 800526a:	e003      	b.n	8005274 <LoopCopyDataInit>

0800526c <CopyDataInit>:
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <LoopFillZerobss+0x18>)
 800526e:	585b      	ldr	r3, [r3, r1]
 8005270:	5043      	str	r3, [r0, r1]
 8005272:	3104      	adds	r1, #4

08005274 <LoopCopyDataInit>:
 8005274:	480b      	ldr	r0, [pc, #44]	; (80052a4 <LoopFillZerobss+0x1c>)
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <LoopFillZerobss+0x20>)
 8005278:	1842      	adds	r2, r0, r1
 800527a:	429a      	cmp	r2, r3
 800527c:	d3f6      	bcc.n	800526c <CopyDataInit>
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <LoopFillZerobss+0x24>)
 8005280:	e002      	b.n	8005288 <LoopFillZerobss>

08005282 <FillZerobss>:
 8005282:	2300      	movs	r3, #0
 8005284:	f842 3b04 	str.w	r3, [r2], #4

08005288 <LoopFillZerobss>:
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <LoopFillZerobss+0x28>)
 800528a:	429a      	cmp	r2, r3
 800528c:	d3f9      	bcc.n	8005282 <FillZerobss>
 800528e:	f7ff ffd3 	bl	8005238 <SystemInit>
 8005292:	f011 f839 	bl	8016308 <__libc_init_array>
 8005296:	f7ff f9a7 	bl	80045e8 <main>
 800529a:	4770      	bx	lr
 800529c:	20020000 	.word	0x20020000
 80052a0:	0801ae9c 	.word	0x0801ae9c
 80052a4:	20000000 	.word	0x20000000
 80052a8:	20000238 	.word	0x20000238
 80052ac:	20000238 	.word	0x20000238
 80052b0:	20002840 	.word	0x20002840

080052b4 <ADC_IRQHandler>:
 80052b4:	e7fe      	b.n	80052b4 <ADC_IRQHandler>
	...

080052b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_Init+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_Init+0x40>)
 80052c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_Init+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <HAL_Init+0x40>)
 80052ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052d4:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <HAL_Init+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <HAL_Init+0x40>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f000 f94d 	bl	8005580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f000 f808 	bl	80052fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052ec:	f7ff fc32 	bl	8004b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023c00 	.word	0x40023c00

080052fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_InitTick+0x54>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_InitTick+0x58>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	4619      	mov	r1, r3
 800530e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005312:	fbb3 f3f1 	udiv	r3, r3, r1
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f965 	bl	80055ea <HAL_SYSTICK_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e00e      	b.n	8005348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b0f      	cmp	r3, #15
 800532e:	d80a      	bhi.n	8005346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005330:	2200      	movs	r2, #0
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	f000 f92d 	bl	8005596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800533c:	4a06      	ldr	r2, [pc, #24]	; (8005358 <HAL_InitTick+0x5c>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e000      	b.n	8005348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	2000004c 	.word	0x2000004c
 8005354:	20000054 	.word	0x20000054
 8005358:	20000050 	.word	0x20000050

0800535c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_IncTick+0x20>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_IncTick+0x24>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4413      	add	r3, r2
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <HAL_IncTick+0x24>)
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000054 	.word	0x20000054
 8005380:	20001124 	.word	0x20001124

08005384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return uwTick;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_GetTick+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20001124 	.word	0x20001124

0800539c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7ff ffee 	bl	8005384 <HAL_GetTick>
 80053a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d005      	beq.n	80053c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_Delay+0x40>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053c2:	bf00      	nop
 80053c4:	f7ff ffde 	bl	8005384 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d8f7      	bhi.n	80053c4 <HAL_Delay+0x28>
  {
  }
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000054 	.word	0x20000054

080053e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	60d3      	str	r3, [r2, #12]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <__NVIC_GetPriorityGrouping+0x18>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 0307 	and.w	r3, r3, #7
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db0b      	blt.n	800546e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	4907      	ldr	r1, [pc, #28]	; (800547c <__NVIC_EnableIRQ+0x38>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2001      	movs	r0, #1
 8005466:	fa00 f202 	lsl.w	r2, r0, r2
 800546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	e000e100 	.word	0xe000e100

08005480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	6039      	str	r1, [r7, #0]
 800548a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db0a      	blt.n	80054aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	490c      	ldr	r1, [pc, #48]	; (80054cc <__NVIC_SetPriority+0x4c>)
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	0112      	lsls	r2, r2, #4
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	440b      	add	r3, r1
 80054a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a8:	e00a      	b.n	80054c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4908      	ldr	r1, [pc, #32]	; (80054d0 <__NVIC_SetPriority+0x50>)
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	3b04      	subs	r3, #4
 80054b8:	0112      	lsls	r2, r2, #4
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	440b      	add	r3, r1
 80054be:	761a      	strb	r2, [r3, #24]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000e100 	.word	0xe000e100
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f1c3 0307 	rsb	r3, r3, #7
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	bf28      	it	cs
 80054f2:	2304      	movcs	r3, #4
 80054f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3304      	adds	r3, #4
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d902      	bls.n	8005504 <NVIC_EncodePriority+0x30>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3b03      	subs	r3, #3
 8005502:	e000      	b.n	8005506 <NVIC_EncodePriority+0x32>
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43da      	mvns	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	401a      	ands	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800551c:	f04f 31ff 	mov.w	r1, #4294967295
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	43d9      	mvns	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800552c:	4313      	orrs	r3, r2
         );
}
 800552e:	4618      	mov	r0, r3
 8005530:	3724      	adds	r7, #36	; 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800554c:	d301      	bcc.n	8005552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800554e:	2301      	movs	r3, #1
 8005550:	e00f      	b.n	8005572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <SysTick_Config+0x40>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555a:	210f      	movs	r1, #15
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	f7ff ff8e 	bl	8005480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <SysTick_Config+0x40>)
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <SysTick_Config+0x40>)
 800556c:	2207      	movs	r2, #7
 800556e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	e000e010 	.word	0xe000e010

08005580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff29 	bl	80053e0 <__NVIC_SetPriorityGrouping>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055a8:	f7ff ff3e 	bl	8005428 <__NVIC_GetPriorityGrouping>
 80055ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f7ff ff8e 	bl	80054d4 <NVIC_EncodePriority>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff5d 	bl	8005480 <__NVIC_SetPriority>
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff31 	bl	8005444 <__NVIC_EnableIRQ>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ffa2 	bl	800553c <SysTick_Config>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d004      	beq.n	8005620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e00c      	b.n	800563a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2205      	movs	r2, #5
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e159      	b.n	8005918 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005664:	2201      	movs	r2, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	f040 8148 	bne.w	8005912 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d00b      	beq.n	80056a2 <HAL_GPIO_Init+0x5a>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d007      	beq.n	80056a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005696:	2b11      	cmp	r3, #17
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b12      	cmp	r3, #18
 80056a0:	d130      	bne.n	8005704 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2203      	movs	r2, #3
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056d8:	2201      	movs	r2, #1
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 0201 	and.w	r2, r3, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2203      	movs	r2, #3
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0xfc>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b12      	cmp	r3, #18
 8005742:	d123      	bne.n	800578c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	08da      	lsrs	r2, r3, #3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3208      	adds	r2, #8
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	220f      	movs	r2, #15
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	08da      	lsrs	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3208      	adds	r2, #8
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	2203      	movs	r2, #3
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0203 	and.w	r2, r3, #3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a2 	beq.w	8005912 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b56      	ldr	r3, [pc, #344]	; (800592c <HAL_GPIO_Init+0x2e4>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a55      	ldr	r2, [pc, #340]	; (800592c <HAL_GPIO_Init+0x2e4>)
 80057d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_GPIO_Init+0x2e4>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ea:	4a51      	ldr	r2, [pc, #324]	; (8005930 <HAL_GPIO_Init+0x2e8>)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3302      	adds	r3, #2
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	220f      	movs	r2, #15
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a48      	ldr	r2, [pc, #288]	; (8005934 <HAL_GPIO_Init+0x2ec>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d019      	beq.n	800584a <HAL_GPIO_Init+0x202>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a47      	ldr	r2, [pc, #284]	; (8005938 <HAL_GPIO_Init+0x2f0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_GPIO_Init+0x1fe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a46      	ldr	r2, [pc, #280]	; (800593c <HAL_GPIO_Init+0x2f4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00d      	beq.n	8005842 <HAL_GPIO_Init+0x1fa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a45      	ldr	r2, [pc, #276]	; (8005940 <HAL_GPIO_Init+0x2f8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <HAL_GPIO_Init+0x1f6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a44      	ldr	r2, [pc, #272]	; (8005944 <HAL_GPIO_Init+0x2fc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_GPIO_Init+0x1f2>
 8005836:	2304      	movs	r3, #4
 8005838:	e008      	b.n	800584c <HAL_GPIO_Init+0x204>
 800583a:	2307      	movs	r3, #7
 800583c:	e006      	b.n	800584c <HAL_GPIO_Init+0x204>
 800583e:	2303      	movs	r3, #3
 8005840:	e004      	b.n	800584c <HAL_GPIO_Init+0x204>
 8005842:	2302      	movs	r3, #2
 8005844:	e002      	b.n	800584c <HAL_GPIO_Init+0x204>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_GPIO_Init+0x204>
 800584a:	2300      	movs	r3, #0
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f002 0203 	and.w	r2, r2, #3
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	4093      	lsls	r3, r2
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800585c:	4934      	ldr	r1, [pc, #208]	; (8005930 <HAL_GPIO_Init+0x2e8>)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	3302      	adds	r3, #2
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800586a:	4b37      	ldr	r3, [pc, #220]	; (8005948 <HAL_GPIO_Init+0x300>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800588e:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_GPIO_Init+0x300>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005894:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <HAL_GPIO_Init+0x300>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058b8:	4a23      	ldr	r2, [pc, #140]	; (8005948 <HAL_GPIO_Init+0x300>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058be:	4b22      	ldr	r3, [pc, #136]	; (8005948 <HAL_GPIO_Init+0x300>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058e2:	4a19      	ldr	r2, [pc, #100]	; (8005948 <HAL_GPIO_Init+0x300>)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058e8:	4b17      	ldr	r3, [pc, #92]	; (8005948 <HAL_GPIO_Init+0x300>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800590c:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_GPIO_Init+0x300>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	f67f aea2 	bls.w	8005664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005920:	bf00      	nop
 8005922:	3724      	adds	r7, #36	; 0x24
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40023800 	.word	0x40023800
 8005930:	40013800 	.word	0x40013800
 8005934:	40020000 	.word	0x40020000
 8005938:	40020400 	.word	0x40020400
 800593c:	40020800 	.word	0x40020800
 8005940:	40020c00 	.word	0x40020c00
 8005944:	40021000 	.word	0x40021000
 8005948:	40013c00 	.word	0x40013c00

0800594c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e001      	b.n	800596e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
 8005988:	4613      	mov	r3, r2
 800598a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800598c:	787b      	ldrb	r3, [r7, #1]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005992:	887a      	ldrh	r2, [r7, #2]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005998:	e003      	b.n	80059a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	041a      	lsls	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	619a      	str	r2, [r3, #24]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059c6:	4a05      	ldr	r2, [pc, #20]	; (80059dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f806 	bl	80059e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40013c00 	.word	0x40013c00

080059e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e11f      	b.n	8005c4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f8c0 	bl	8004ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	; 0x24
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a5c:	f002 fb70 	bl	8008140 <HAL_RCC_GetPCLK1Freq>
 8005a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4a7b      	ldr	r2, [pc, #492]	; (8005c54 <HAL_I2C_Init+0x25c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d807      	bhi.n	8005a7c <HAL_I2C_Init+0x84>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a7a      	ldr	r2, [pc, #488]	; (8005c58 <HAL_I2C_Init+0x260>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	bf94      	ite	ls
 8005a74:	2301      	movls	r3, #1
 8005a76:	2300      	movhi	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e006      	b.n	8005a8a <HAL_I2C_Init+0x92>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a77      	ldr	r2, [pc, #476]	; (8005c5c <HAL_I2C_Init+0x264>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bf94      	ite	ls
 8005a84:	2301      	movls	r3, #1
 8005a86:	2300      	movhi	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0db      	b.n	8005c4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a72      	ldr	r2, [pc, #456]	; (8005c60 <HAL_I2C_Init+0x268>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	0c9b      	lsrs	r3, r3, #18
 8005a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a64      	ldr	r2, [pc, #400]	; (8005c54 <HAL_I2C_Init+0x25c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d802      	bhi.n	8005acc <HAL_I2C_Init+0xd4>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	e009      	b.n	8005ae0 <HAL_I2C_Init+0xe8>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	4a63      	ldr	r2, [pc, #396]	; (8005c64 <HAL_I2C_Init+0x26c>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	099b      	lsrs	r3, r3, #6
 8005ade:	3301      	adds	r3, #1
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4956      	ldr	r1, [pc, #344]	; (8005c54 <HAL_I2C_Init+0x25c>)
 8005afc:	428b      	cmp	r3, r1
 8005afe:	d80d      	bhi.n	8005b1c <HAL_I2C_Init+0x124>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1e59      	subs	r1, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	bf38      	it	cc
 8005b18:	2304      	movcc	r3, #4
 8005b1a:	e04f      	b.n	8005bbc <HAL_I2C_Init+0x1c4>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d111      	bne.n	8005b48 <HAL_I2C_Init+0x150>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e012      	b.n	8005b6e <HAL_I2C_Init+0x176>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e58      	subs	r0, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	0099      	lsls	r1, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Init+0x17e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e022      	b.n	8005bbc <HAL_I2C_Init+0x1c4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10e      	bne.n	8005b9c <HAL_I2C_Init+0x1a4>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e58      	subs	r0, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	440b      	add	r3, r1
 8005b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	e00f      	b.n	8005bbc <HAL_I2C_Init+0x1c4>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1e58      	subs	r0, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	0099      	lsls	r1, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	6809      	ldr	r1, [r1, #0]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6911      	ldr	r1, [r2, #16]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	000186a0 	.word	0x000186a0
 8005c58:	001e847f 	.word	0x001e847f
 8005c5c:	003d08ff 	.word	0x003d08ff
 8005c60:	431bde83 	.word	0x431bde83
 8005c64:	10624dd3 	.word	0x10624dd3

08005c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	817b      	strh	r3, [r7, #10]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	813b      	strh	r3, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c82:	f7ff fb7f 	bl	8005384 <HAL_GetTick>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	f040 8208 	bne.w	80060a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	2319      	movs	r3, #25
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	497b      	ldr	r1, [pc, #492]	; (8005e8c <HAL_I2C_Mem_Read+0x224>)
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 faed 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
 8005cae:	e1fb      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Mem_Read+0x56>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e1f4      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d007      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2222      	movs	r2, #34	; 0x22
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a5b      	ldr	r2, [pc, #364]	; (8005e90 <HAL_I2C_Mem_Read+0x228>)
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d26:	88f8      	ldrh	r0, [r7, #6]
 8005d28:	893a      	ldrh	r2, [r7, #8]
 8005d2a:	8979      	ldrh	r1, [r7, #10]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4603      	mov	r3, r0
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f9bc 	bl	80060b4 <I2C_RequestMemoryRead>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e1b0      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d113      	bne.n	8005d76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e184      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d11b      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e164      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d11b      	bne.n	8005df6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	e144      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e0c:	e138      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	f200 80f1 	bhi.w	8005ffa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d123      	bne.n	8005e68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fb42 	bl	80064ae <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e139      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e66:	e10b      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d14e      	bne.n	8005f0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2200      	movs	r2, #0
 8005e78:	4906      	ldr	r1, [pc, #24]	; (8005e94 <HAL_I2C_Mem_Read+0x22c>)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fa00 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e10e      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
 8005e8a:	bf00      	nop
 8005e8c:	00100002 	.word	0x00100002
 8005e90:	ffff0000 	.word	0xffff0000
 8005e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f0c:	e0b8      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2200      	movs	r2, #0
 8005f16:	4966      	ldr	r1, [pc, #408]	; (80060b0 <HAL_I2C_Mem_Read+0x448>)
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f9b1 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0bf      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	2200      	movs	r2, #0
 8005f72:	494f      	ldr	r1, [pc, #316]	; (80060b0 <HAL_I2C_Mem_Read+0x448>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f983 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e091      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ff8:	e042      	b.n	8006080 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa55 	bl	80064ae <I2C_WaitOnRXNEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e04c      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d118      	bne.n	8006080 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f aec2 	bne.w	8005e0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3728      	adds	r7, #40	; 0x28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	00010004 	.word	0x00010004

080060b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f8c0 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e0a9      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800612e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	4951      	ldr	r1, [pc, #324]	; (800627c <I2C_RequestMemoryRead+0x1c8>)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f8f9 	bl	800632e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e096      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	6a39      	ldr	r1, [r7, #32]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f963 	bl	800642c <I2C_WaitOnTXEFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b04      	cmp	r3, #4
 8006172:	d107      	bne.n	8006184 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006182:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e075      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800618e:	893b      	ldrh	r3, [r7, #8]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]
 8006198:	e021      	b.n	80061de <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800619a:	893b      	ldrh	r3, [r7, #8]
 800619c:	0a1b      	lsrs	r3, r3, #8
 800619e:	b29b      	uxth	r3, r3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	6a39      	ldr	r1, [r7, #32]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f93d 	bl	800642c <I2C_WaitOnTXEFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d107      	bne.n	80061d0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04f      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061d4:	893b      	ldrh	r3, [r7, #8]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f922 	bl	800642c <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e034      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2200      	movs	r2, #0
 8006222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f82a 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e013      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800624c:	897b      	ldrh	r3, [r7, #10]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	4906      	ldr	r1, [pc, #24]	; (800627c <I2C_RequestMemoryRead+0x1c8>)
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 f863 	bl	800632e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	00010002 	.word	0x00010002

08006280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006290:	e025      	b.n	80062de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d021      	beq.n	80062de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629a:	f7ff f873 	bl	8005384 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d302      	bcc.n	80062b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d116      	bne.n	80062de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e023      	b.n	8006326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10d      	bne.n	8006304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4013      	ands	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	e00c      	b.n	800631e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	43da      	mvns	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4013      	ands	r3, r2
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf0c      	ite	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	2300      	movne	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	429a      	cmp	r2, r3
 8006322:	d0b6      	beq.n	8006292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800633c:	e051      	b.n	80063e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634c:	d123      	bne.n	8006396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f043 0204 	orr.w	r2, r3, #4
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e046      	b.n	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d021      	beq.n	80063e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fe fff1 	bl	8005384 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d116      	bne.n	80063e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e020      	b.n	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d10c      	bne.n	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	43da      	mvns	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	e00b      	b.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	43da      	mvns	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d18d      	bne.n	800633e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006438:	e02d      	b.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f88d 	bl	800655a <I2C_IsAcknowledgeFailed>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e02d      	b.n	80064a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d021      	beq.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006452:	f7fe ff97 	bl	8005384 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d116      	bne.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f043 0220 	orr.w	r2, r3, #32
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e007      	b.n	80064a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	d1ca      	bne.n	800643a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064ba:	e042      	b.n	8006542 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d119      	bne.n	80064fe <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f06f 0210 	mvn.w	r2, #16
 80064d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e029      	b.n	8006552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fe:	f7fe ff41 	bl	8005384 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	d302      	bcc.n	8006514 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d116      	bne.n	8006542 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e007      	b.n	8006552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d1b5      	bne.n	80064bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006570:	d11b      	bne.n	80065aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800657a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b08f      	sub	sp, #60	; 0x3c
 80065bc:	af0a      	add	r7, sp, #40	; 0x28
 80065be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e10f      	b.n	80067ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f00f fb7b 	bl	8015ce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2203      	movs	r2, #3
 80065ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f004 ff4e 	bl	800b4aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	687e      	ldr	r6, [r7, #4]
 8006616:	466d      	mov	r5, sp
 8006618:	f106 0410 	add.w	r4, r6, #16
 800661c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800661e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006628:	e885 0003 	stmia.w	r5, {r0, r1}
 800662c:	1d33      	adds	r3, r6, #4
 800662e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006630:	6838      	ldr	r0, [r7, #0]
 8006632:	f004 fe25 	bl	800b280 <USB_CoreInit>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0d0      	b.n	80067ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f004 ff3c 	bl	800b4cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	e04a      	b.n	80066f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	333d      	adds	r3, #61	; 0x3d
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800666e:	7bfa      	ldrb	r2, [r7, #15]
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	333c      	adds	r3, #60	; 0x3c
 800667e:	7bfa      	ldrb	r2, [r7, #15]
 8006680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006682:	7bfa      	ldrb	r2, [r7, #15]
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	b298      	uxth	r0, r3
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3342      	adds	r3, #66	; 0x42
 8006696:	4602      	mov	r2, r0
 8006698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	333f      	adds	r3, #63	; 0x3f
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3344      	adds	r3, #68	; 0x44
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066c2:	7bfa      	ldrb	r2, [r7, #15]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	3348      	adds	r3, #72	; 0x48
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3350      	adds	r3, #80	; 0x50
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	3301      	adds	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	7bfa      	ldrb	r2, [r7, #15]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d3af      	bcc.n	800665a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]
 80066fe:	e044      	b.n	800678a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006700:	7bfa      	ldrb	r2, [r7, #15]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006716:	7bfa      	ldrb	r2, [r7, #15]
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006728:	7bfa      	ldrb	r2, [r7, #15]
 800672a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800672c:	7bfa      	ldrb	r2, [r7, #15]
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4613      	mov	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006742:	7bfa      	ldrb	r2, [r7, #15]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006758:	7bfa      	ldrb	r2, [r7, #15]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800676e:	7bfa      	ldrb	r2, [r7, #15]
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	3301      	adds	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
 800678a:	7bfa      	ldrb	r2, [r7, #15]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d3b5      	bcc.n	8006700 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	687e      	ldr	r6, [r7, #4]
 800679c:	466d      	mov	r5, sp
 800679e:	f106 0410 	add.w	r4, r6, #16
 80067a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80067b2:	1d33      	adds	r3, r6, #4
 80067b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067b6:	6838      	ldr	r0, [r7, #0]
 80067b8:	f004 feb2 	bl	800b520 <USB_DevInit>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e00d      	b.n	80067ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f005 fea7 	bl	800c536 <USB_DevDisconnect>

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_PCD_Start+0x1c>
 800680a:	2302      	movs	r3, #2
 800680c:	e020      	b.n	8006850 <HAL_PCD_Start+0x5e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	2b01      	cmp	r3, #1
 800681c:	d109      	bne.n	8006832 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006822:	2b01      	cmp	r3, #1
 8006824:	d005      	beq.n	8006832 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f005 fe65 	bl	800c506 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f004 fe21 	bl	800b488 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b08d      	sub	sp, #52	; 0x34
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f005 ff0c 	bl	800c68c <USB_GetMode>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 838e 	bne.w	8006f98 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f005 fe70 	bl	800c566 <USB_ReadInterrupts>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8384 	beq.w	8006f96 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f005 fe67 	bl	800c566 <USB_ReadInterrupts>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d107      	bne.n	80068b2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f002 0202 	and.w	r2, r2, #2
 80068b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f005 fe55 	bl	800c566 <USB_ReadInterrupts>
 80068bc:	4603      	mov	r3, r0
 80068be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068c6:	d17b      	bne.n	80069c0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f005 fe5b 	bl	800c58c <USB_ReadDevAllOutEpInterrupt>
 80068d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80068d8:	e06f      	b.n	80069ba <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d064      	beq.n	80069ae <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f005 fe80 	bl	800c5f4 <USB_ReadDevOutEPInterrupt>
 80068f4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00c      	beq.n	800691a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	2301      	movs	r3, #1
 8006910:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fe0d 	bl	8007534 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 ff0c 	bl	8007744 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2308      	movs	r3, #8
 800693c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	2310      	movs	r3, #16
 8006958:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d015      	beq.n	8006990 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d108      	bne.n	800697e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006976:	461a      	mov	r2, r3
 8006978:	2101      	movs	r1, #1
 800697a:	f005 fecb 	bl	800c714 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	461a      	mov	r2, r3
 800698c:	2320      	movs	r3, #32
 800698e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	461a      	mov	r2, r3
 80069a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	3301      	adds	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d18c      	bne.n	80068da <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f005 fdce 	bl	800c566 <USB_ReadInterrupts>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069d4:	f040 80c4 	bne.w	8006b60 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f005 fdef 	bl	800c5c0 <USB_ReadDevAllInEpInterrupt>
 80069e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069e8:	e0b6      	b.n	8006b58 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80ab 	beq.w	8006b4c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f005 fe15 	bl	800c630 <USB_ReadDevInEPInterrupt>
 8006a06:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d05b      	beq.n	8006aca <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	69f9      	ldr	r1, [r7, #28]
 8006a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a32:	4013      	ands	r3, r2
 8006a34:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a42:	461a      	mov	r2, r3
 8006a44:	2301      	movs	r3, #1
 8006a46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d11b      	bne.n	8006a88 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3348      	adds	r3, #72	; 0x48
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a66:	4613      	mov	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	3344      	adds	r3, #68	; 0x44
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4419      	add	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4403      	add	r3, r0
 8006a84:	3348      	adds	r3, #72	; 0x48
 8006a86:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f00f f9bf 	bl	8015e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d116      	bne.n	8006aca <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d113      	bne.n	8006aca <HAL_PCD_IRQHandler+0x272>
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3350      	adds	r3, #80	; 0x50
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d108      	bne.n	8006aca <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	f005 fe25 	bl	800c714 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	461a      	mov	r2, r3
 8006afe:	2310      	movs	r3, #16
 8006b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2340      	movs	r3, #64	; 0x40
 8006b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	461a      	mov	r2, r3
 8006b36:	2302      	movs	r3, #2
 8006b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fc67 	bl	800741a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	3301      	adds	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f47f af45 	bne.w	80069ea <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f005 fcfe 	bl	800c566 <USB_ReadInterrupts>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b74:	d122      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d108      	bne.n	8006ba6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fe88 	bl	80078b4 <HAL_PCDEx_LPM_Callback>
 8006ba4:	e002      	b.n	8006bac <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f00f f9a0 	bl	8015eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f005 fcd0 	bl	800c566 <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d112      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d102      	bne.n	8006be8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f00f f95c 	bl	8015ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006bf6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f005 fcb2 	bl	800c566 <USB_ReadInterrupts>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	f040 80a7 	bne.w	8006d5e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2110      	movs	r1, #16
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f004 fdea 	bl	800b804 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c30:	2300      	movs	r3, #0
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c34:	e036      	b.n	8006ca4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	461a      	mov	r2, r3
 8006c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d3c3      	bcc.n	8006c36 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cbc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006cc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cda:	f043 030b 	orr.w	r3, r3, #11
 8006cde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf0:	f043 030b 	orr.w	r3, r3, #11
 8006cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cf6:	e015      	b.n	8006d24 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d0a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006d0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1e:	f043 030b 	orr.w	r3, r3, #11
 8006d22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f005 fce3 	bl	800c714 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 fbff 	bl	800c566 <USB_ReadInterrupts>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d124      	bne.n	8006dbe <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f005 fc95 	bl	800c6a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 fd9f 	bl	800b8c6 <USB_GetDevSpeed>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681c      	ldr	r4, [r3, #0]
 8006d94:	f001 f9c8 	bl	8008128 <HAL_RCC_GetHCLKFreq>
 8006d98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	4620      	mov	r0, r4
 8006da4:	f004 face 	bl	800b344 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f00f f85a 	bl	8015e62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f005 fbcf 	bl	800c566 <USB_ReadInterrupts>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d161      	bne.n	8006e96 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0210 	bic.w	r2, r2, #16
 8006de0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3304      	adds	r3, #4
 8006e00:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	0c5b      	lsrs	r3, r3, #17
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d124      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d035      	beq.n	8006e86 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6a38      	ldr	r0, [r7, #32]
 8006e2e:	f005 fa47 	bl	800c2c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	619a      	str	r2, [r3, #24]
 8006e56:	e016      	b.n	8006e86 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	0c5b      	lsrs	r3, r3, #17
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	d110      	bne.n	8006e86 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6a38      	ldr	r0, [r7, #32]
 8006e70:	f005 fa26 	bl	800c2c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0210 	orr.w	r2, r2, #16
 8006e94:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f005 fb63 	bl	800c566 <USB_ReadInterrupts>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f00e ffcb 	bl	8015e46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f002 0208 	and.w	r2, r2, #8
 8006ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f005 fb4e 	bl	800c566 <USB_ReadInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f00f f823 	bl	8015f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695a      	ldr	r2, [r3, #20]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f005 fb33 	bl	800c566 <USB_ReadInterrupts>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0a:	d10f      	bne.n	8006f2c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f00e fff6 	bl	8015f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f005 fb18 	bl	800c566 <USB_ReadInterrupts>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d10a      	bne.n	8006f58 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f00f f804 	bl	8015f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f005 fb02 	bl	800c566 <USB_ReadInterrupts>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d115      	bne.n	8006f98 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f00e fff4 	bl	8015f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
 8006f94:	e000      	b.n	8006f98 <HAL_PCD_IRQHandler+0x740>
      return;
 8006f96:	bf00      	nop
    }
  }
}
 8006f98:	3734      	adds	r7, #52	; 0x34
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}

08006f9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_PCD_SetAddress+0x1a>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e013      	b.n	8006fe0 <HAL_PCD_SetAddress+0x42>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f005 fa72 	bl	800c4ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	70fb      	strb	r3, [r7, #3]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	803b      	strh	r3, [r7, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800700a:	2b00      	cmp	r3, #0
 800700c:	da0f      	bge.n	800702e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	3338      	adds	r3, #56	; 0x38
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	705a      	strb	r2, [r3, #1]
 800702c:	e00f      	b.n	800704e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	4613      	mov	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4413      	add	r3, r2
 8007044:	3304      	adds	r3, #4
 8007046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	b2da      	uxtb	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800705a:	883a      	ldrh	r2, [r7, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	78ba      	ldrb	r2, [r7, #2]
 8007064:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007078:	78bb      	ldrb	r3, [r7, #2]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d102      	bne.n	8007084 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_PCD_EP_Open+0xaa>
 800708e:	2302      	movs	r3, #2
 8007090:	e00e      	b.n	80070b0 <HAL_PCD_EP_Open+0xc8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f004 fc35 	bl	800b910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80070ae:	7afb      	ldrb	r3, [r7, #11]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0f      	bge.n	80070ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3338      	adds	r3, #56	; 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	705a      	strb	r2, [r3, #1]
 80070ea:	e00f      	b.n	800710c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	b2da      	uxtb	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_PCD_EP_Close+0x6e>
 8007122:	2302      	movs	r3, #2
 8007124:	e00e      	b.n	8007144 <HAL_PCD_EP_Close+0x8c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68f9      	ldr	r1, [r7, #12]
 8007134:	4618      	mov	r0, r3
 8007136:	f004 fc73 	bl	800ba20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	607a      	str	r2, [r7, #4]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	460b      	mov	r3, r1
 800715a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	f003 020f 	and.w	r2, r3, #15
 8007162:	4613      	mov	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	3304      	adds	r3, #4
 8007174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2200      	movs	r2, #0
 8007186:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	b2da      	uxtb	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d102      	bne.n	80071a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	6979      	ldr	r1, [r7, #20]
 80071c0:	f004 fef6 	bl	800bfb0 <USB_EP0StartXfer>
 80071c4:	e008      	b.n	80071d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	f004 fca8 	bl	800bb28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	440b      	add	r3, r1
 8007200:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007204:	681b      	ldr	r3, [r3, #0]
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	460b      	mov	r3, r1
 8007220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	4613      	mov	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3338      	adds	r3, #56	; 0x38
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2201      	movs	r2, #1
 8007250:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d102      	bne.n	800726c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	6979      	ldr	r1, [r7, #20]
 8007284:	f004 fe94 	bl	800bfb0 <USB_EP0StartXfer>
 8007288:	e008      	b.n	800729c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	6979      	ldr	r1, [r7, #20]
 8007298:	f004 fc46 	bl	800bb28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 020f 	and.w	r2, r3, #15
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d901      	bls.n	80072c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e050      	b.n	8007366 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da0f      	bge.n	80072ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	3338      	adds	r3, #56	; 0x38
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	705a      	strb	r2, [r3, #1]
 80072ea:	e00d      	b.n	8007308 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4613      	mov	r3, r2
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	3304      	adds	r3, #4
 8007300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_PCD_EP_SetStall+0x82>
 8007324:	2302      	movs	r3, #2
 8007326:	e01e      	b.n	8007366 <HAL_PCD_EP_SetStall+0xc0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	4618      	mov	r0, r3
 8007338:	f004 ffeb 	bl	800c312 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	b2d9      	uxtb	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007356:	461a      	mov	r2, r3
 8007358:	f005 f9dc 	bl	800c714 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 020f 	and.w	r2, r3, #15
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d901      	bls.n	800738c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e042      	b.n	8007412 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800738c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0f      	bge.n	80073b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 020f 	and.w	r2, r3, #15
 800739a:	4613      	mov	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	3338      	adds	r3, #56	; 0x38
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	705a      	strb	r2, [r3, #1]
 80073b2:	e00f      	b.n	80073d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4413      	add	r3, r2
 80073ca:	3304      	adds	r3, #4
 80073cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_PCD_EP_ClrStall+0x86>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e00e      	b.n	8007412 <HAL_PCD_EP_ClrStall+0xa4>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	4618      	mov	r0, r3
 8007404:	f004 fff3 	bl	800c3ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b08a      	sub	sp, #40	; 0x28
 800741e:	af02      	add	r7, sp, #8
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	3338      	adds	r3, #56	; 0x38
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	3304      	adds	r3, #4
 8007440:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	429a      	cmp	r2, r3
 800744c:	d901      	bls.n	8007452 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e06c      	b.n	800752c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	429a      	cmp	r2, r3
 8007466:	d902      	bls.n	800746e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3303      	adds	r3, #3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007476:	e02b      	b.n	80074d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	695a      	ldr	r2, [r3, #20]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	429a      	cmp	r2, r3
 800748c:	d902      	bls.n	8007494 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3303      	adds	r3, #3
 8007498:	089b      	lsrs	r3, r3, #2
 800749a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68d9      	ldr	r1, [r3, #12]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4603      	mov	r3, r0
 80074b2:	6978      	ldr	r0, [r7, #20]
 80074b4:	f004 fecf 	bl	800c256 <USB_WritePacket>

    ep->xfer_buff  += len;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	441a      	add	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	441a      	add	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d809      	bhi.n	80074fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d203      	bcs.n	80074fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1be      	bne.n	8007478 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	695a      	ldr	r2, [r3, #20]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	429a      	cmp	r2, r3
 8007504:	d811      	bhi.n	800752a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2201      	movs	r2, #1
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	43db      	mvns	r3, r3
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007526:	4013      	ands	r3, r2
 8007528:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	333c      	adds	r3, #60	; 0x3c
 800754c:	3304      	adds	r3, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b01      	cmp	r3, #1
 8007568:	f040 80b3 	bne.w	80076d2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d028      	beq.n	80075c8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a70      	ldr	r2, [pc, #448]	; (800773c <PCD_EP_OutXfrComplete_int+0x208>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d90e      	bls.n	800759c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007594:	461a      	mov	r2, r3
 8007596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800759a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f00e fc0b 	bl	8015db8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075ac:	461a      	mov	r2, r3
 80075ae:	2101      	movs	r1, #1
 80075b0:	f005 f8b0 	bl	800c714 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	461a      	mov	r2, r3
 80075c2:	2308      	movs	r3, #8
 80075c4:	6093      	str	r3, [r2, #8]
 80075c6:	e0b3      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	461a      	mov	r2, r3
 80075e0:	2320      	movs	r3, #32
 80075e2:	6093      	str	r3, [r2, #8]
 80075e4:	e0a4      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 809f 	bne.w	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a51      	ldr	r2, [pc, #324]	; (800773c <PCD_EP_OutXfrComplete_int+0x208>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d90f      	bls.n	800761a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007610:	461a      	mov	r2, r3
 8007612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007616:	6093      	str	r3, [r2, #8]
 8007618:	e08a      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800762c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	0159      	lsls	r1, r3, #5
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	440b      	add	r3, r1
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007640:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4403      	add	r3, r0
 8007650:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007654:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	4613      	mov	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007668:	6819      	ldr	r1, [r3, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4403      	add	r3, r0
 8007678:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4419      	add	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4403      	add	r3, r0
 800768e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007692:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f00e fb9e 	bl	8015ddc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d144      	bne.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	4613      	mov	r3, r2
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d138      	bne.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076c8:	461a      	mov	r2, r3
 80076ca:	2101      	movs	r1, #1
 80076cc:	f005 f822 	bl	800c714 <USB_EP0_OutStart>
 80076d0:	e02e      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <PCD_EP_OutXfrComplete_int+0x20c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d124      	bne.n	8007724 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	461a      	mov	r2, r3
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	6093      	str	r3, [r2, #8]
 80076f8:	e01a      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	2320      	movs	r3, #32
 8007714:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f00e fb5d 	bl	8015ddc <HAL_PCD_DataOutStageCallback>
 8007722:	e005      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f00e fb56 	bl	8015ddc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	4f54300a 	.word	0x4f54300a
 8007740:	4f54310a 	.word	0x4f54310a

08007744 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	333c      	adds	r3, #60	; 0x3c
 800775c:	3304      	adds	r3, #4
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d113      	bne.n	80077a2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a1f      	ldr	r2, [pc, #124]	; (80077fc <PCD_EP_OutSetupPacket_int+0xb8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d922      	bls.n	80077c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01d      	beq.n	80077c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	461a      	mov	r2, r3
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	6093      	str	r3, [r2, #8]
 80077a0:	e012      	b.n	80077c8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a16      	ldr	r2, [pc, #88]	; (8007800 <PCD_EP_OutSetupPacket_int+0xbc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d10e      	bne.n	80077c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	461a      	mov	r2, r3
 80077c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f00e faf5 	bl	8015db8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <PCD_EP_OutSetupPacket_int+0xb8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d90c      	bls.n	80077f0 <PCD_EP_OutSetupPacket_int+0xac>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d108      	bne.n	80077f0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077e8:	461a      	mov	r2, r3
 80077ea:	2101      	movs	r1, #1
 80077ec:	f004 ff92 	bl	800c714 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	4f54300a 	.word	0x4f54300a
 8007800:	4f54310a 	.word	0x4f54310a

08007804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	4613      	mov	r3, r2
 8007812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d107      	bne.n	8007832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007822:	883b      	ldrh	r3, [r7, #0]
 8007824:	0419      	lsls	r1, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	430a      	orrs	r2, r1
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
 8007830:	e028      	b.n	8007884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	0c1b      	lsrs	r3, r3, #16
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e00d      	b.n	8007862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	3340      	adds	r3, #64	; 0x40
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	0c1b      	lsrs	r3, r3, #16
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	3301      	adds	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
 8007862:	7bfa      	ldrb	r2, [r7, #15]
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	3b01      	subs	r3, #1
 8007868:	429a      	cmp	r2, r3
 800786a:	d3ec      	bcc.n	8007846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800786c:	883b      	ldrh	r3, [r7, #0]
 800786e:	0418      	lsls	r0, r3, #16
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	3b01      	subs	r3, #1
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4302      	orrs	r2, r0
 800787c:	3340      	adds	r3, #64	; 0x40
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	887a      	ldrh	r2, [r7, #2]
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e25b      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d075      	beq.n	80079d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078ea:	4ba3      	ldr	r3, [pc, #652]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d00c      	beq.n	8007910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f6:	4ba0      	ldr	r3, [pc, #640]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d112      	bne.n	8007928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007902:	4b9d      	ldr	r3, [pc, #628]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790e:	d10b      	bne.n	8007928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007910:	4b99      	ldr	r3, [pc, #612]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d05b      	beq.n	80079d4 <HAL_RCC_OscConfig+0x108>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d157      	bne.n	80079d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e236      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d106      	bne.n	8007940 <HAL_RCC_OscConfig+0x74>
 8007932:	4b91      	ldr	r3, [pc, #580]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a90      	ldr	r2, [pc, #576]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e01d      	b.n	800797c <HAL_RCC_OscConfig+0xb0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x98>
 800794a:	4b8b      	ldr	r3, [pc, #556]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a8a      	ldr	r2, [pc, #552]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b88      	ldr	r3, [pc, #544]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a87      	ldr	r2, [pc, #540]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800795c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e00b      	b.n	800797c <HAL_RCC_OscConfig+0xb0>
 8007964:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a83      	ldr	r2, [pc, #524]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800796a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	4b81      	ldr	r3, [pc, #516]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a80      	ldr	r2, [pc, #512]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800797a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d013      	beq.n	80079ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007984:	f7fd fcfe 	bl	8005384 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800798c:	f7fd fcfa 	bl	8005384 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b64      	cmp	r3, #100	; 0x64
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e1fb      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800799e:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f0      	beq.n	800798c <HAL_RCC_OscConfig+0xc0>
 80079aa:	e014      	b.n	80079d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ac:	f7fd fcea 	bl	8005384 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079b4:	f7fd fce6 	bl	8005384 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b64      	cmp	r3, #100	; 0x64
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e1e7      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079c6:	4b6c      	ldr	r3, [pc, #432]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0xe8>
 80079d2:	e000      	b.n	80079d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d063      	beq.n	8007aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079e2:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ee:	4b62      	ldr	r3, [pc, #392]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d11c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d116      	bne.n	8007a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a06:	4b5c      	ldr	r3, [pc, #368]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_RCC_OscConfig+0x152>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d001      	beq.n	8007a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e1bb      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a1e:	4b56      	ldr	r3, [pc, #344]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4952      	ldr	r1, [pc, #328]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a32:	e03a      	b.n	8007aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d020      	beq.n	8007a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a3c:	4b4f      	ldr	r3, [pc, #316]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a42:	f7fd fc9f 	bl	8005384 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a4a:	f7fd fc9b 	bl	8005384 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e19c      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5c:	4b46      	ldr	r3, [pc, #280]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0f0      	beq.n	8007a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a68:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4940      	ldr	r1, [pc, #256]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	600b      	str	r3, [r1, #0]
 8007a7c:	e015      	b.n	8007aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7e:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fd fc7e 	bl	8005384 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a8c:	f7fd fc7a 	bl	8005384 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e17b      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a9e:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d030      	beq.n	8007b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007abe:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <HAL_RCC_OscConfig+0x2b4>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fd fc5e 	bl	8005384 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007acc:	f7fd fc5a 	bl	8005384 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e15b      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ade:	4b26      	ldr	r3, [pc, #152]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x200>
 8007aea:	e015      	b.n	8007b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aec:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <HAL_RCC_OscConfig+0x2b4>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af2:	f7fd fc47 	bl	8005384 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007afa:	f7fd fc43 	bl	8005384 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e144      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80a0 	beq.w	8007c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b2a:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b44:	6413      	str	r3, [r2, #64]	; 0x40
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b4e:	60bb      	str	r3, [r7, #8]
 8007b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b52:	2301      	movs	r3, #1
 8007b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d121      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b6e:	f7fd fc09 	bl	8005384 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b74:	e011      	b.n	8007b9a <HAL_RCC_OscConfig+0x2ce>
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	42470000 	.word	0x42470000
 8007b80:	42470e80 	.word	0x42470e80
 8007b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b88:	f7fd fbfc 	bl	8005384 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e0fd      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9a:	4b81      	ldr	r3, [pc, #516]	; (8007da0 <HAL_RCC_OscConfig+0x4d4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d106      	bne.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
 8007bae:	4b7d      	ldr	r3, [pc, #500]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	4a7c      	ldr	r2, [pc, #496]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bb4:	f043 0301 	orr.w	r3, r3, #1
 8007bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bba:	e01c      	b.n	8007bf6 <HAL_RCC_OscConfig+0x32a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d10c      	bne.n	8007bde <HAL_RCC_OscConfig+0x312>
 8007bc4:	4b77      	ldr	r3, [pc, #476]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a76      	ldr	r2, [pc, #472]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bca:	f043 0304 	orr.w	r3, r3, #4
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd0:	4b74      	ldr	r3, [pc, #464]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a73      	ldr	r2, [pc, #460]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6713      	str	r3, [r2, #112]	; 0x70
 8007bdc:	e00b      	b.n	8007bf6 <HAL_RCC_OscConfig+0x32a>
 8007bde:	4b71      	ldr	r3, [pc, #452]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a70      	ldr	r2, [pc, #448]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bea:	4b6e      	ldr	r3, [pc, #440]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	4a6d      	ldr	r2, [pc, #436]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007bf0:	f023 0304 	bic.w	r3, r3, #4
 8007bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d015      	beq.n	8007c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfe:	f7fd fbc1 	bl	8005384 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c04:	e00a      	b.n	8007c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c06:	f7fd fbbd 	bl	8005384 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e0bc      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1c:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0ee      	beq.n	8007c06 <HAL_RCC_OscConfig+0x33a>
 8007c28:	e014      	b.n	8007c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c2a:	f7fd fbab 	bl	8005384 <HAL_GetTick>
 8007c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c30:	e00a      	b.n	8007c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c32:	f7fd fba7 	bl	8005384 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e0a6      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c48:	4b56      	ldr	r3, [pc, #344]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1ee      	bne.n	8007c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d105      	bne.n	8007c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c5a:	4b52      	ldr	r3, [pc, #328]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a51      	ldr	r2, [pc, #324]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 8092 	beq.w	8007d94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c70:	4b4c      	ldr	r3, [pc, #304]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 030c 	and.w	r3, r3, #12
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d05c      	beq.n	8007d36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d141      	bne.n	8007d08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c84:	4b48      	ldr	r3, [pc, #288]	; (8007da8 <HAL_RCC_OscConfig+0x4dc>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8a:	f7fd fb7b 	bl	8005384 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c92:	f7fd fb77 	bl	8005384 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e078      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ca4:	4b3f      	ldr	r3, [pc, #252]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f0      	bne.n	8007c92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	019b      	lsls	r3, r3, #6
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	061b      	lsls	r3, r3, #24
 8007cd4:	4933      	ldr	r1, [pc, #204]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cda:	4b33      	ldr	r3, [pc, #204]	; (8007da8 <HAL_RCC_OscConfig+0x4dc>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce0:	f7fd fb50 	bl	8005384 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce8:	f7fd fb4c 	bl	8005384 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e04d      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cfa:	4b2a      	ldr	r3, [pc, #168]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
 8007d06:	e045      	b.n	8007d94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d08:	4b27      	ldr	r3, [pc, #156]	; (8007da8 <HAL_RCC_OscConfig+0x4dc>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fd fb39 	bl	8005384 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d16:	f7fd fb35 	bl	8005384 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e036      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f0      	bne.n	8007d16 <HAL_RCC_OscConfig+0x44a>
 8007d34:	e02e      	b.n	8007d94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e029      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d42:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <HAL_RCC_OscConfig+0x4d8>)
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d11c      	bne.n	8007d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d115      	bne.n	8007d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d10d      	bne.n	8007d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d106      	bne.n	8007d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d001      	beq.n	8007d94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40007000 	.word	0x40007000
 8007da4:	40023800 	.word	0x40023800
 8007da8:	42470060 	.word	0x42470060

08007dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0cc      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dc0:	4b68      	ldr	r3, [pc, #416]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d90c      	bls.n	8007de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dce:	4b65      	ldr	r3, [pc, #404]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd6:	4b63      	ldr	r3, [pc, #396]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e0b8      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e00:	4b59      	ldr	r3, [pc, #356]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a58      	ldr	r2, [pc, #352]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a52      	ldr	r2, [pc, #328]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e24:	4b50      	ldr	r3, [pc, #320]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	494d      	ldr	r1, [pc, #308]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d044      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d107      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e4a:	4b47      	ldr	r3, [pc, #284]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d119      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e07f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d003      	beq.n	8007e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d107      	bne.n	8007e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e6a:	4b3f      	ldr	r3, [pc, #252]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e06f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e7a:	4b3b      	ldr	r3, [pc, #236]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e067      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e8a:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f023 0203 	bic.w	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4934      	ldr	r1, [pc, #208]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e9c:	f7fd fa72 	bl	8005384 <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea2:	e00a      	b.n	8007eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ea4:	f7fd fa6e 	bl	8005384 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e04f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eba:	4b2b      	ldr	r3, [pc, #172]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 020c 	and.w	r2, r3, #12
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d1eb      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ecc:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d20c      	bcs.n	8007ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eda:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e032      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f00:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4916      	ldr	r1, [pc, #88]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	490e      	ldr	r1, [pc, #56]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f32:	f000 f821 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 8007f36:	4601      	mov	r1, r0
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <HAL_RCC_ClockConfig+0x1c0>)
 8007f44:	5cd3      	ldrb	r3, [r2, r3]
 8007f46:	fa21 f303 	lsr.w	r3, r1, r3
 8007f4a:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <HAL_RCC_ClockConfig+0x1c8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fd f9d2 	bl	80052fc <HAL_InitTick>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40023c00 	.word	0x40023c00
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	0801a710 	.word	0x0801a710
 8007f70:	2000004c 	.word	0x2000004c
 8007f74:	20000050 	.word	0x20000050

08007f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	2300      	movs	r3, #0
 8007f88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f8e:	4b63      	ldr	r3, [pc, #396]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 030c 	and.w	r3, r3, #12
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d007      	beq.n	8007faa <HAL_RCC_GetSysClockFreq+0x32>
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d008      	beq.n	8007fb0 <HAL_RCC_GetSysClockFreq+0x38>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 80b4 	bne.w	800810c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fa4:	4b5e      	ldr	r3, [pc, #376]	; (8008120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007fa6:	60bb      	str	r3, [r7, #8]
       break;
 8007fa8:	e0b3      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007faa:	4b5e      	ldr	r3, [pc, #376]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007fac:	60bb      	str	r3, [r7, #8]
      break;
 8007fae:	e0b0      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fb0:	4b5a      	ldr	r3, [pc, #360]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fba:	4b58      	ldr	r3, [pc, #352]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d04a      	beq.n	800805c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fc6:	4b55      	ldr	r3, [pc, #340]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	099b      	lsrs	r3, r3, #6
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	ea03 0501 	and.w	r5, r3, r1
 8007fdc:	ea04 0602 	and.w	r6, r4, r2
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	f04f 0400 	mov.w	r4, #0
 8007fec:	0154      	lsls	r4, r2, #5
 8007fee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007ff2:	014b      	lsls	r3, r1, #5
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	1b49      	subs	r1, r1, r5
 8007ffa:	eb62 0206 	sbc.w	r2, r2, r6
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	f04f 0400 	mov.w	r4, #0
 8008006:	0194      	lsls	r4, r2, #6
 8008008:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800800c:	018b      	lsls	r3, r1, #6
 800800e:	1a5b      	subs	r3, r3, r1
 8008010:	eb64 0402 	sbc.w	r4, r4, r2
 8008014:	f04f 0100 	mov.w	r1, #0
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	00e2      	lsls	r2, r4, #3
 800801e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008022:	00d9      	lsls	r1, r3, #3
 8008024:	460b      	mov	r3, r1
 8008026:	4614      	mov	r4, r2
 8008028:	195b      	adds	r3, r3, r5
 800802a:	eb44 0406 	adc.w	r4, r4, r6
 800802e:	f04f 0100 	mov.w	r1, #0
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	0262      	lsls	r2, r4, #9
 8008038:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800803c:	0259      	lsls	r1, r3, #9
 800803e:	460b      	mov	r3, r1
 8008040:	4614      	mov	r4, r2
 8008042:	4618      	mov	r0, r3
 8008044:	4621      	mov	r1, r4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f04f 0400 	mov.w	r4, #0
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	f7f8 fd0c 	bl	8000a6c <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e049      	b.n	80080f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805c:	4b2f      	ldr	r3, [pc, #188]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	099b      	lsrs	r3, r3, #6
 8008062:	f04f 0400 	mov.w	r4, #0
 8008066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	ea03 0501 	and.w	r5, r3, r1
 8008072:	ea04 0602 	and.w	r6, r4, r2
 8008076:	4629      	mov	r1, r5
 8008078:	4632      	mov	r2, r6
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	f04f 0400 	mov.w	r4, #0
 8008082:	0154      	lsls	r4, r2, #5
 8008084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008088:	014b      	lsls	r3, r1, #5
 800808a:	4619      	mov	r1, r3
 800808c:	4622      	mov	r2, r4
 800808e:	1b49      	subs	r1, r1, r5
 8008090:	eb62 0206 	sbc.w	r2, r2, r6
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	f04f 0400 	mov.w	r4, #0
 800809c:	0194      	lsls	r4, r2, #6
 800809e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80080a2:	018b      	lsls	r3, r1, #6
 80080a4:	1a5b      	subs	r3, r3, r1
 80080a6:	eb64 0402 	sbc.w	r4, r4, r2
 80080aa:	f04f 0100 	mov.w	r1, #0
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	00e2      	lsls	r2, r4, #3
 80080b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80080b8:	00d9      	lsls	r1, r3, #3
 80080ba:	460b      	mov	r3, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	195b      	adds	r3, r3, r5
 80080c0:	eb44 0406 	adc.w	r4, r4, r6
 80080c4:	f04f 0100 	mov.w	r1, #0
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	02a2      	lsls	r2, r4, #10
 80080ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80080d2:	0299      	lsls	r1, r3, #10
 80080d4:	460b      	mov	r3, r1
 80080d6:	4614      	mov	r4, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	4621      	mov	r1, r4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f04f 0400 	mov.w	r4, #0
 80080e2:	461a      	mov	r2, r3
 80080e4:	4623      	mov	r3, r4
 80080e6:	f7f8 fcc1 	bl	8000a6c <__aeabi_uldivmod>
 80080ea:	4603      	mov	r3, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	3301      	adds	r3, #1
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	fbb2 f3f3 	udiv	r3, r2, r3
 8008108:	60bb      	str	r3, [r7, #8]
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800810c:	4b04      	ldr	r3, [pc, #16]	; (8008120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800810e:	60bb      	str	r3, [r7, #8]
      break;
 8008110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008112:	68bb      	ldr	r3, [r7, #8]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811c:	40023800 	.word	0x40023800
 8008120:	00f42400 	.word	0x00f42400
 8008124:	007a1200 	.word	0x007a1200

08008128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800812c:	4b03      	ldr	r3, [pc, #12]	; (800813c <HAL_RCC_GetHCLKFreq+0x14>)
 800812e:	681b      	ldr	r3, [r3, #0]
}
 8008130:	4618      	mov	r0, r3
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000004c 	.word	0x2000004c

08008140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008144:	f7ff fff0 	bl	8008128 <HAL_RCC_GetHCLKFreq>
 8008148:	4601      	mov	r1, r0
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	0a9b      	lsrs	r3, r3, #10
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	4a03      	ldr	r2, [pc, #12]	; (8008164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008156:	5cd3      	ldrb	r3, [r2, r3]
 8008158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40023800 	.word	0x40023800
 8008164:	0801a720 	.word	0x0801a720

08008168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800818c:	2b00      	cmp	r3, #0
 800818e:	d038      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008190:	4b68      	ldr	r3, [pc, #416]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008196:	f7fd f8f5 	bl	8005384 <HAL_GetTick>
 800819a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800819c:	e008      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800819e:	f7fd f8f1 	bl	8005384 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e0bd      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081b0:	4b61      	ldr	r3, [pc, #388]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f0      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	019b      	lsls	r3, r3, #6
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	071b      	lsls	r3, r3, #28
 80081ce:	495a      	ldr	r1, [pc, #360]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081d6:	4b57      	ldr	r3, [pc, #348]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081dc:	f7fd f8d2 	bl	8005384 <HAL_GetTick>
 80081e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081e2:	e008      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081e4:	f7fd f8ce 	bl	8005384 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e09a      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081f6:	4b50      	ldr	r3, [pc, #320]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8083 	beq.w	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	4a47      	ldr	r2, [pc, #284]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800821e:	6413      	str	r3, [r2, #64]	; 0x40
 8008220:	4b45      	ldr	r3, [pc, #276]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800822c:	4b43      	ldr	r3, [pc, #268]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a42      	ldr	r2, [pc, #264]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008236:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008238:	f7fd f8a4 	bl	8005384 <HAL_GetTick>
 800823c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008240:	f7fd f8a0 	bl	8005384 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e06c      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008252:	4b3a      	ldr	r3, [pc, #232]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f0      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800825e:	4b36      	ldr	r3, [pc, #216]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008266:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d02f      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	429a      	cmp	r2, r3
 800827a:	d028      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800827c:	4b2e      	ldr	r3, [pc, #184]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008284:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008286:	4b2e      	ldr	r3, [pc, #184]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008288:	2201      	movs	r2, #1
 800828a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800828c:	4b2c      	ldr	r3, [pc, #176]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008292:	4a29      	ldr	r2, [pc, #164]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008298:	4b27      	ldr	r3, [pc, #156]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d114      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80082a4:	f7fd f86e 	bl	8005384 <HAL_GetTick>
 80082a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082aa:	e00a      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ac:	f7fd f86a 	bl	8005384 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e034      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0ee      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082da:	d10d      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80082dc:	4b16      	ldr	r3, [pc, #88]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f0:	4911      	ldr	r1, [pc, #68]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	608b      	str	r3, [r1, #8]
 80082f6:	e005      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008302:	6093      	str	r3, [r2, #8]
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008310:	4909      	ldr	r1, [pc, #36]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008312:	4313      	orrs	r3, r2
 8008314:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7d1a      	ldrb	r2, [r3, #20]
 8008326:	4b07      	ldr	r3, [pc, #28]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008328:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	42470068 	.word	0x42470068
 8008338:	40023800 	.word	0x40023800
 800833c:	40007000 	.word	0x40007000
 8008340:	42470e40 	.word	0x42470e40
 8008344:	424711e0 	.word	0x424711e0

08008348 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e083      	b.n	8008462 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7f5b      	ldrb	r3, [r3, #29]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fc fc62 	bl	8004c34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	22ca      	movs	r2, #202	; 0xca
 800837c:	625a      	str	r2, [r3, #36]	; 0x24
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2253      	movs	r2, #83	; 0x53
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 faa8 	bl	80088dc <RTC_EnterInitMode>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2204      	movs	r2, #4
 800839e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e05e      	b.n	8008462 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6899      	ldr	r1, [r3, #8]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	68d2      	ldr	r2, [r2, #12]
 80083de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6919      	ldr	r1, [r3, #16]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	041a      	lsls	r2, r3, #16
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008402:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10e      	bne.n	8008430 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa3a 	bl	800888c <HAL_RTC_WaitForSynchro>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	22ff      	movs	r2, #255	; 0xff
 8008424:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e018      	b.n	8008462 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800843e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	22ff      	movs	r2, #255	; 0xff
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008460:	2300      	movs	r3, #0
  }
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800846a:	b590      	push	{r4, r7, lr}
 800846c:	b087      	sub	sp, #28
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	7f1b      	ldrb	r3, [r3, #28]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_RTC_SetTime+0x1c>
 8008482:	2302      	movs	r3, #2
 8008484:	e0aa      	b.n	80085dc <HAL_RTC_SetTime+0x172>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2202      	movs	r2, #2
 8008490:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d126      	bne.n	80084e6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2200      	movs	r2, #0
 80084aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fa3f 	bl	8008934 <RTC_ByteToBcd2>
 80084b6:	4603      	mov	r3, r0
 80084b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa38 	bl	8008934 <RTC_ByteToBcd2>
 80084c4:	4603      	mov	r3, r0
 80084c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	789b      	ldrb	r3, [r3, #2]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fa30 	bl	8008934 <RTC_ByteToBcd2>
 80084d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80084d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084e0:	4313      	orrs	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e018      	b.n	8008518 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008506:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800850c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	78db      	ldrb	r3, [r3, #3]
 8008512:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	22ca      	movs	r2, #202	; 0xca
 800851e:	625a      	str	r2, [r3, #36]	; 0x24
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2253      	movs	r2, #83	; 0x53
 8008526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f9d7 	bl	80088dc <RTC_EnterInitMode>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	22ff      	movs	r2, #255	; 0xff
 800853a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2204      	movs	r2, #4
 8008540:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e047      	b.n	80085dc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008556:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800855a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800856a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6899      	ldr	r1, [r3, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008592:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 0320 	and.w	r3, r3, #32
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d111      	bne.n	80085c6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f972 	bl	800888c <HAL_RTC_WaitForSynchro>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	22ff      	movs	r2, #255	; 0xff
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2204      	movs	r2, #4
 80085ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e00a      	b.n	80085dc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	22ff      	movs	r2, #255	; 0xff
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085da:	2300      	movs	r3, #0
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd90      	pop	{r4, r7, pc}

080085e4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008616:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800861a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11a      	bne.n	8008696 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f983 	bl	8008970 <RTC_Bcd2ToByte>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f97a 	bl	8008970 <RTC_Bcd2ToByte>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	789b      	ldrb	r3, [r3, #2]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f971 	bl	8008970 <RTC_Bcd2ToByte>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	7f1b      	ldrb	r3, [r3, #28]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_RTC_SetDate+0x1c>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e094      	b.n	80087e6 <HAL_RTC_SetDate+0x146>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2202      	movs	r2, #2
 80086c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10e      	bne.n	80086ec <HAL_RTC_SetDate+0x4c>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	330a      	adds	r3, #10
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11c      	bne.n	800872c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	78db      	ldrb	r3, [r3, #3]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f91c 	bl	8008934 <RTC_ByteToBcd2>
 80086fc:	4603      	mov	r3, r0
 80086fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f915 	bl	8008934 <RTC_ByteToBcd2>
 800870a:	4603      	mov	r3, r0
 800870c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800870e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	789b      	ldrb	r3, [r3, #2]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f90d 	bl	8008934 <RTC_ByteToBcd2>
 800871a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800871c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e00e      	b.n	800874a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	78db      	ldrb	r3, [r3, #3]
 8008730:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008738:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800873e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	22ca      	movs	r2, #202	; 0xca
 8008750:	625a      	str	r2, [r3, #36]	; 0x24
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2253      	movs	r2, #83	; 0x53
 8008758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f8be 	bl	80088dc <RTC_EnterInitMode>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	22ff      	movs	r2, #255	; 0xff
 800876c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2204      	movs	r2, #4
 8008772:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e033      	b.n	80087e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800878c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800879c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d111      	bne.n	80087d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f86d 	bl	800888c <HAL_RTC_WaitForSynchro>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2204      	movs	r2, #4
 80087c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e00a      	b.n	80087e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	22ff      	movs	r2, #255	; 0xff
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80087e4:	2300      	movs	r3, #0
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd90      	pop	{r4, r7, pc}

080087ee <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008808:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800880c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	0c1b      	lsrs	r3, r3, #16
 8008812:	b2da      	uxtb	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 031f 	and.w	r3, r3, #31
 8008822:	b2da      	uxtb	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	0b5b      	lsrs	r3, r3, #13
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	b2da      	uxtb	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11a      	bne.n	8008882 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	78db      	ldrb	r3, [r3, #3]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f88d 	bl	8008970 <RTC_Bcd2ToByte>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f884 	bl	8008970 <RTC_Bcd2ToByte>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	789b      	ldrb	r3, [r3, #2]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f87b 	bl	8008970 <RTC_Bcd2ToByte>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088a8:	f7fc fd6c 	bl	8005384 <HAL_GetTick>
 80088ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088ae:	e009      	b.n	80088c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088b0:	f7fc fd68 	bl	8005384 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088be:	d901      	bls.n	80088c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e007      	b.n	80088d4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ee      	beq.n	80088b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d119      	bne.n	800892a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008900:	f7fc fd40 	bl	8005384 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008906:	e009      	b.n	800891c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008908:	f7fc fd3c 	bl	8005384 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008916:	d901      	bls.n	800891c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e007      	b.n	800892c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0ee      	beq.n	8008908 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008942:	e005      	b.n	8008950 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	3b0a      	subs	r3, #10
 800894e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b09      	cmp	r3, #9
 8008954:	d8f6      	bhi.n	8008944 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	b2da      	uxtb	r2, r3
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	4313      	orrs	r3, r2
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	b2da      	uxtb	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	4413      	add	r3, r2
 800899e:	b2db      	uxtb	r3, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e022      	b.n	8008a04 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fc f945 	bl	8004c60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2203      	movs	r2, #3
 80089da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f814 	bl	8008a0c <HAL_SD_InitCard>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e00a      	b.n	8008a04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a0c:	b5b0      	push	{r4, r5, r7, lr}
 8008a0e:	b08e      	sub	sp, #56	; 0x38
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008a28:	2376      	movs	r3, #118	; 0x76
 8008a2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681d      	ldr	r5, [r3, #0]
 8008a30:	466c      	mov	r4, sp
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a3e:	f107 0308 	add.w	r3, r7, #8
 8008a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a44:	4628      	mov	r0, r5
 8008a46:	f001 fef9 	bl	800a83c <SDIO_Init>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e031      	b.n	8008ac0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008a5c:	4b1a      	ldr	r3, [pc, #104]	; (8008ac8 <HAL_SD_InitCard+0xbc>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 ff31 	bl	800a8ce <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008a6c:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <HAL_SD_InitCard+0xbc>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f882 	bl	8009b7c <SD_PowerON>
 8008a78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e013      	b.n	8008ac0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 ffa1 	bl	80099e0 <SD_InitCard>
 8008a9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00b      	beq.n	8008abe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3728      	adds	r7, #40	; 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ac8:	422580a0 	.word	0x422580a0

08008acc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b092      	sub	sp, #72	; 0x48
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ada:	f7fc fc53 	bl	8005384 <HAL_GetTick>
 8008ade:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d107      	bne.n	8008afe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e1d9      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	f040 81cc 	bne.w	8008ea4 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d907      	bls.n	8008b30 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e1c0      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2203      	movs	r2, #3
 8008b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d002      	beq.n	8008b4e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	025b      	lsls	r3, r3, #9
 8008b4c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 ff4c 	bl	800a9f4 <SDMMC_CmdBlockLength>
 8008b5c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00f      	beq.n	8008b84 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a9b      	ldr	r2, [pc, #620]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b72:	431a      	orrs	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e196      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b84:	f04f 33ff 	mov.w	r3, #4294967295
 8008b88:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	025b      	lsls	r3, r3, #9
 8008b8e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008b90:	2390      	movs	r3, #144	; 0x90
 8008b92:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008b94:	2302      	movs	r3, #2
 8008b96:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f107 0214 	add.w	r2, r7, #20
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fef6 	bl	800a99c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d90a      	bls.n	8008bcc <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 ff5a 	bl	800aa7c <SDMMC_CmdReadMultiBlock>
 8008bc8:	6478      	str	r0, [r7, #68]	; 0x44
 8008bca:	e009      	b.n	8008be0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 ff2d 	bl	800aa38 <SDMMC_CmdReadSingleBlock>
 8008bde:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d012      	beq.n	8008c0c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a7b      	ldr	r2, [pc, #492]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e152      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008c10:	e061      	b.n	8008cd6 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d03c      	beq.n	8008c9a <HAL_SD_ReadBlocks+0x1ce>
 8008c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d039      	beq.n	8008c9a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2a:	e033      	b.n	8008c94 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 fe2e 	bl	800a892 <SDIO_ReadFIFO>
 8008c36:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	3301      	adds	r3, #1
 8008c44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	3301      	adds	r3, #1
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	3301      	adds	r3, #1
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	3b01      	subs	r3, #1
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	0e1b      	lsrs	r3, r3, #24
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c84:	3301      	adds	r3, #1
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	3301      	adds	r3, #1
 8008c92:	643b      	str	r3, [r7, #64]	; 0x40
 8008c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c96:	2b07      	cmp	r3, #7
 8008c98:	d9c8      	bls.n	8008c2c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008c9a:	f7fc fb73 	bl	8005384 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d902      	bls.n	8008cb0 <HAL_SD_ReadBlocks+0x1e4>
 8008caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d112      	bne.n	8008cd6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a48      	ldr	r2, [pc, #288]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e0ed      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cdc:	f240 332a 	movw	r3, #810	; 0x32a
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d095      	beq.n	8008c12 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d022      	beq.n	8008d3a <HAL_SD_ReadBlocks+0x26e>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d91f      	bls.n	8008d3a <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d01b      	beq.n	8008d3a <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f001 ff1e 	bl	800ab48 <SDMMC_CmdStopTransfer>
 8008d0c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d012      	beq.n	8008d3a <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a2f      	ldr	r2, [pc, #188]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d22:	431a      	orrs	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e0bb      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d012      	beq.n	8008d6e <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a22      	ldr	r2, [pc, #136]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	f043 0208 	orr.w	r2, r3, #8
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e0a1      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d012      	beq.n	8008da2 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	f043 0202 	orr.w	r2, r3, #2
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e087      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d064      	beq.n	8008e7a <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <HAL_SD_ReadBlocks+0x30c>)
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	f043 0220 	orr.w	r2, r3, #32
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e06d      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
 8008dd6:	bf00      	nop
 8008dd8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fd56 	bl	800a892 <SDIO_ReadFIFO>
 8008de6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	3301      	adds	r3, #1
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	3301      	adds	r3, #1
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	3301      	adds	r3, #1
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	3b01      	subs	r3, #1
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	3301      	adds	r3, #1
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e3e:	f7fc faa1 	bl	8005384 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d902      	bls.n	8008e54 <HAL_SD_ReadBlocks+0x388>
 8008e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d112      	bne.n	8008e7a <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a18      	ldr	r2, [pc, #96]	; (8008ebc <HAL_SD_ReadBlocks+0x3f0>)
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e01b      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SD_ReadBlocks+0x3c2>
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1a6      	bne.n	8008ddc <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e006      	b.n	8008eb2 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
  }
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3748      	adds	r7, #72	; 0x48
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	004005ff 	.word	0x004005ff

08008ec0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b092      	sub	sp, #72	; 0x48
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ece:	f7fc fa59 	bl	8005384 <HAL_GetTick>
 8008ed2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e184      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	f040 8177 	bne.w	80091ee <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d907      	bls.n	8008f24 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e16b      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2203      	movs	r2, #3
 8008f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2200      	movs	r2, #0
 8008f32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d002      	beq.n	8008f42 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	025b      	lsls	r3, r3, #9
 8008f40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fd52 	bl	800a9f4 <SDMMC_CmdBlockLength>
 8008f50:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00f      	beq.n	8008f78 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a9d      	ldr	r2, [pc, #628]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 8008f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f66:	431a      	orrs	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e141      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	025b      	lsls	r3, r3, #9
 8008f82:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f84:	2390      	movs	r3, #144	; 0x90
 8008f86:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008f90:	2301      	movs	r3, #1
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f107 0218 	add.w	r2, r7, #24
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fcfc 	bl	800a99c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d90a      	bls.n	8008fc0 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2220      	movs	r2, #32
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fda4 	bl	800ab04 <SDMMC_CmdWriteMultiBlock>
 8008fbc:	6478      	str	r0, [r7, #68]	; 0x44
 8008fbe:	e009      	b.n	8008fd4 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fd77 	bl	800aac0 <SDMMC_CmdWriteSingleBlock>
 8008fd2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d012      	beq.n	8009000 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a7d      	ldr	r2, [pc, #500]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e0fd      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009004:	e065      	b.n	80090d2 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d040      	beq.n	8009096 <HAL_SD_WriteBlocks+0x1d6>
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d03d      	beq.n	8009096 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800901a:	2300      	movs	r3, #0
 800901c:	643b      	str	r3, [r7, #64]	; 0x40
 800901e:	e037      	b.n	8009090 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	3301      	adds	r3, #1
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800902c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902e:	3b01      	subs	r3, #1
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	021a      	lsls	r2, r3, #8
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	3301      	adds	r3, #1
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	3b01      	subs	r3, #1
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	041a      	lsls	r2, r3, #16
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	3301      	adds	r3, #1
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	061a      	lsls	r2, r3, #24
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	4313      	orrs	r3, r2
 800906c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	3301      	adds	r3, #1
 8009072:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	3b01      	subs	r3, #1
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f107 0214 	add.w	r2, r7, #20
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f001 fc11 	bl	800a8ac <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800908a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908c:	3301      	adds	r3, #1
 800908e:	643b      	str	r3, [r7, #64]	; 0x40
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	2b07      	cmp	r3, #7
 8009094:	d9c4      	bls.n	8009020 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009096:	f7fc f975 	bl	8005384 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d902      	bls.n	80090ac <HAL_SD_WriteBlocks+0x1ec>
 80090a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d112      	bne.n	80090d2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a48      	ldr	r2, [pc, #288]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ba:	431a      	orrs	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e094      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d8:	f240 331a 	movw	r3, #794	; 0x31a
 80090dc:	4013      	ands	r3, r2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d091      	beq.n	8009006 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d022      	beq.n	8009136 <HAL_SD_WriteBlocks+0x276>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d91f      	bls.n	8009136 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d01b      	beq.n	8009136 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fd20 	bl	800ab48 <SDMMC_CmdStopTransfer>
 8009108:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910c:	2b00      	cmp	r3, #0
 800910e:	d012      	beq.n	8009136 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a2f      	ldr	r2, [pc, #188]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911e:	431a      	orrs	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e062      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d012      	beq.n	800916a <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a22      	ldr	r2, [pc, #136]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	f043 0208 	orr.w	r2, r3, #8
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e048      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d012      	beq.n	800919e <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a15      	ldr	r2, [pc, #84]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009184:	f043 0202 	orr.w	r2, r3, #2
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e02e      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d015      	beq.n	80091d8 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a08      	ldr	r2, [pc, #32]	; (80091d4 <HAL_SD_WriteBlocks+0x314>)
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	f043 0210 	orr.w	r2, r3, #16
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e014      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
 80091d2:	bf00      	nop
 80091d4:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e006      	b.n	80091fc <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3748      	adds	r7, #72	; 0x48
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009210:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d008      	beq.n	8009232 <HAL_SD_IRQHandler+0x2e>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fd5c 	bl	8009ce8 <SD_Read_IT>
 8009230:	e165      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 808f 	beq.w	8009360 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800924a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800925a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800925e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d039      	beq.n	80092ee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <HAL_SD_IRQHandler+0x8a>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d011      	beq.n	80092b2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f001 fc58 	bl	800ab48 <SDMMC_CmdStopTransfer>
 8009298:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f92f 	bl	8009510 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <HAL_SD_IRQHandler+0xda>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f003 fb8a 	bl	800c9f8 <HAL_SD_RxCpltCallback>
 80092e4:	e10b      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f003 fb7c 	bl	800c9e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092ec:	e107      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8102 	beq.w	80094fe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f003 0320 	and.w	r3, r3, #32
 8009300:	2b00      	cmp	r3, #0
 8009302:	d011      	beq.n	8009328 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f001 fc1d 	bl	800ab48 <SDMMC_CmdStopTransfer>
 800930e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d008      	beq.n	8009328 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8f4 	bl	8009510 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	f040 80e5 	bne.w	80094fe <HAL_SD_IRQHandler+0x2fa>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	f040 80df 	bne.w	80094fe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0208 	bic.w	r2, r2, #8
 800934e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f003 fb43 	bl	800c9e4 <HAL_SD_TxCpltCallback>
}
 800935e:	e0ce      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d008      	beq.n	8009380 <HAL_SD_IRQHandler+0x17c>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fd06 	bl	8009d8a <SD_Write_IT>
 800937e:	e0be      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009386:	f240 233a 	movw	r3, #570	; 0x23a
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 80b6 	beq.w	80094fe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f043 0202 	orr.w	r2, r3, #2
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	f043 0208 	orr.w	r2, r3, #8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	f043 0210 	orr.w	r2, r3, #16
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	f043 0208 	orr.w	r2, r3, #8
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f240 723a 	movw	r2, #1850	; 0x73a
 800941c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800942c:	f023 0302 	bic.w	r3, r3, #2
 8009430:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fb86 	bl	800ab48 <SDMMC_CmdStopTransfer>
 800943c:	4602      	mov	r2, r0
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0308 	and.w	r3, r3, #8
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f855 	bl	8009510 <HAL_SD_ErrorCallback>
}
 8009466:	e04a      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946e:	2b00      	cmp	r3, #0
 8009470:	d045      	beq.n	80094fe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	2b00      	cmp	r3, #0
 800947a:	d104      	bne.n	8009486 <HAL_SD_IRQHandler+0x282>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d011      	beq.n	80094aa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948a:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <HAL_SD_IRQHandler+0x304>)
 800948c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009492:	4618      	mov	r0, r3
 8009494:	f7fc f8b5 	bl	8005602 <HAL_DMA_Abort_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d02f      	beq.n	80094fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fa2e 	bl	8009904 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80094a8:	e029      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <HAL_SD_IRQHandler+0x2ba>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d011      	beq.n	80094e2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	4a12      	ldr	r2, [pc, #72]	; (800950c <HAL_SD_IRQHandler+0x308>)
 80094c4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fc f899 	bl	8005602 <HAL_DMA_Abort_IT>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fa49 	bl	8009972 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80094e0:	e00d      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f003 fa6a 	bl	800c9d0 <HAL_SD_AbortCallback>
}
 80094fc:	e7ff      	b.n	80094fe <HAL_SD_IRQHandler+0x2fa>
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	08009905 	.word	0x08009905
 800950c:	08009973 	.word	0x08009973

08009510 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009532:	0f9b      	lsrs	r3, r3, #30
 8009534:	b2da      	uxtb	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953e:	0e9b      	lsrs	r3, r3, #26
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	b2da      	uxtb	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009550:	0e1b      	lsrs	r3, r3, #24
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	b2da      	uxtb	r2, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	b2da      	uxtb	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	b2da      	uxtb	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	b29a      	uxth	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009590:	0c1b      	lsrs	r3, r3, #16
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	b2da      	uxtb	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095a2:	0bdb      	lsrs	r3, r3, #15
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b4:	0b9b      	lsrs	r3, r3, #14
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c6:	0b5b      	lsrs	r3, r3, #13
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d8:	0b1b      	lsrs	r3, r3, #12
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2200      	movs	r2, #0
 80095ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d163      	bne.n	80096bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f8:	009a      	lsls	r2, r3, #2
 80095fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095fe:	4013      	ands	r3, r2
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009604:	0f92      	lsrs	r2, r2, #30
 8009606:	431a      	orrs	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009610:	0edb      	lsrs	r3, r3, #27
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	b2da      	uxtb	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009634:	0d5b      	lsrs	r3, r3, #21
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	b2da      	uxtb	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009646:	0c9b      	lsrs	r3, r3, #18
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	b2da      	uxtb	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009658:	0bdb      	lsrs	r3, r3, #15
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	b2da      	uxtb	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	7e1b      	ldrb	r3, [r3, #24]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	3302      	adds	r3, #2
 800967c:	2201      	movs	r2, #1
 800967e:	fa02 f303 	lsl.w	r3, r2, r3
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009686:	fb02 f203 	mul.w	r2, r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	7a1b      	ldrb	r3, [r3, #8]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	2201      	movs	r2, #1
 800969a:	409a      	lsls	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096a8:	0a52      	lsrs	r2, r2, #9
 80096aa:	fb02 f203 	mul.w	r2, r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096b8:	661a      	str	r2, [r3, #96]	; 0x60
 80096ba:	e031      	b.n	8009720 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d11d      	bne.n	8009700 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	431a      	orrs	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	3301      	adds	r3, #1
 80096e0:	029a      	lsls	r2, r3, #10
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	661a      	str	r2, [r3, #96]	; 0x60
 80096fe:	e00f      	b.n	8009720 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a58      	ldr	r2, [pc, #352]	; (8009868 <HAL_SD_GetCardCSD+0x344>)
 8009706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e09d      	b.n	800985c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009724:	0b9b      	lsrs	r3, r3, #14
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009736:	09db      	lsrs	r3, r3, #7
 8009738:	b2db      	uxtb	r3, r3
 800973a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973e:	b2da      	uxtb	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974e:	b2da      	uxtb	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009758:	0fdb      	lsrs	r3, r3, #31
 800975a:	b2da      	uxtb	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009764:	0f5b      	lsrs	r3, r3, #29
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	b2da      	uxtb	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	0e9b      	lsrs	r3, r3, #26
 8009778:	b2db      	uxtb	r3, r3
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	b2da      	uxtb	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009788:	0d9b      	lsrs	r3, r3, #22
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	b2da      	uxtb	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	0d5b      	lsrs	r3, r3, #21
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b6:	0c1b      	lsrs	r3, r3, #16
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	0bdb      	lsrs	r3, r3, #15
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097de:	0b9b      	lsrs	r3, r3, #14
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	0b5b      	lsrs	r3, r3, #13
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009806:	0b1b      	lsrs	r3, r3, #12
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981a:	0a9b      	lsrs	r3, r3, #10
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	b2da      	uxtb	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b2db      	uxtb	r3, r3
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	b2da      	uxtb	r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984a:	b2da      	uxtb	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	004005ff 	.word	0x004005ff

0800986c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098d0:	f107 030c 	add.w	r3, r7, #12
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f9de 	bl	8009c98 <SD_SendStatus>
 80098dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0a5b      	lsrs	r3, r3, #9
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098fa:	693b      	ldr	r3, [r7, #16]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f240 523a 	movw	r2, #1338	; 0x53a
 800991a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7ff ffd1 	bl	80098c4 <HAL_SD_GetCardState>
 8009922:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b06      	cmp	r3, #6
 8009936:	d002      	beq.n	800993e <SD_DMATxAbort+0x3a>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b05      	cmp	r3, #5
 800993c:	d10a      	bne.n	8009954 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f001 f900 	bl	800ab48 <SDMMC_CmdStopTransfer>
 8009948:	4602      	mov	r2, r0
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	431a      	orrs	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f003 f837 	bl	800c9d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009962:	e002      	b.n	800996a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fdd3 	bl	8009510 <HAL_SD_ErrorCallback>
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f240 523a 	movw	r2, #1338	; 0x53a
 8009988:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff ff9a 	bl	80098c4 <HAL_SD_GetCardState>
 8009990:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b06      	cmp	r3, #6
 80099a4:	d002      	beq.n	80099ac <SD_DMARxAbort+0x3a>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	d10a      	bne.n	80099c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 f8c9 	bl	800ab48 <SDMMC_CmdStopTransfer>
 80099b6:	4602      	mov	r2, r0
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d103      	bne.n	80099d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f003 f800 	bl	800c9d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80099d0:	e002      	b.n	80099d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fd9c 	bl	8009510 <HAL_SD_ErrorCallback>
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099e0:	b5b0      	push	{r4, r5, r7, lr}
 80099e2:	b094      	sub	sp, #80	; 0x50
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80099e8:	2301      	movs	r3, #1
 80099ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 ff7b 	bl	800a8ec <SDIO_GetPowerState>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a00:	e0b7      	b.n	8009b72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d02f      	beq.n	8009a6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 f961 	bl	800acd6 <SDMMC_CmdSendCID>
 8009a14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1e:	e0a8      	b.n	8009b72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 ffa5 	bl	800a976 <SDIO_GetResponse>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2104      	movs	r1, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 ff9c 	bl	800a976 <SDIO_GetResponse>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2108      	movs	r1, #8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 ff93 	bl	800a976 <SDIO_GetResponse>
 8009a50:	4602      	mov	r2, r0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	210c      	movs	r1, #12
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 ff8a 	bl	800a976 <SDIO_GetResponse>
 8009a62:	4602      	mov	r2, r0
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d00d      	beq.n	8009a8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f107 020e 	add.w	r2, r7, #14
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 f967 	bl	800ad50 <SDMMC_CmdSetRelAdd>
 8009a82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8c:	e071      	b.n	8009b72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d036      	beq.n	8009b04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a96:	89fb      	ldrh	r3, [r7, #14]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f001 f931 	bl	800ad12 <SDMMC_CmdSendCSD>
 8009ab0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	e05a      	b.n	8009b72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 ff57 	bl	800a976 <SDIO_GetResponse>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2104      	movs	r1, #4
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 ff4e 	bl	800a976 <SDIO_GetResponse>
 8009ada:	4602      	mov	r2, r0
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2108      	movs	r1, #8
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 ff45 	bl	800a976 <SDIO_GetResponse>
 8009aec:	4602      	mov	r2, r0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	210c      	movs	r1, #12
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 ff3c 	bl	800a976 <SDIO_GetResponse>
 8009afe:	4602      	mov	r2, r0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2104      	movs	r1, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 ff33 	bl	800a976 <SDIO_GetResponse>
 8009b10:	4603      	mov	r3, r0
 8009b12:	0d1a      	lsrs	r2, r3, #20
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b18:	f107 0310 	add.w	r3, r7, #16
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff fd00 	bl	8009524 <HAL_SD_GetCardCSD>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b2e:	e020      	b.n	8009b72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6819      	ldr	r1, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	f04f 0400 	mov.w	r4, #0
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4623      	mov	r3, r4
 8009b42:	4608      	mov	r0, r1
 8009b44:	f001 f822 	bl	800ab8c <SDMMC_CmdSelDesel>
 8009b48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_InitCard+0x174>
  {
    return errorstate;
 8009b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b52:	e00e      	b.n	8009b72 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681d      	ldr	r5, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	466c      	mov	r4, sp
 8009b5c:	f103 0210 	add.w	r2, r3, #16
 8009b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b66:	3304      	adds	r3, #4
 8009b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 fe66 	bl	800a83c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3740      	adds	r7, #64	; 0x40
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009b7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 f81c 	bl	800abd2 <SDMMC_CmdGoIdleState>
 8009b9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	e072      	b.n	8009c8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 f82f 	bl	800ac0e <SDMMC_CmdOperCond>
 8009bb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00d      	beq.n	8009bd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f805 	bl	800abd2 <SDMMC_CmdGoIdleState>
 8009bc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <SD_PowerON+0x5e>
    {
      return errorstate;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e05b      	b.n	8009c8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d137      	bne.n	8009c52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2100      	movs	r1, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f82f 	bl	800ac4c <SDMMC_CmdAppCommand>
 8009bee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d02d      	beq.n	8009c52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bfa:	e047      	b.n	8009c8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 f822 	bl	800ac4c <SDMMC_CmdAppCommand>
 8009c08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <SD_PowerON+0x98>
    {
      return errorstate;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	e03b      	b.n	8009c8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	491e      	ldr	r1, [pc, #120]	; (8009c94 <SD_PowerON+0x118>)
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 f838 	bl	800ac90 <SDMMC_CmdAppOperCommand>
 8009c20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c2c:	e02e      	b.n	8009c8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fe9e 	bl	800a976 <SDIO_GetResponse>
 8009c3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	0fdb      	lsrs	r3, r3, #31
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <SD_PowerON+0xcc>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <SD_PowerON+0xce>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	613b      	str	r3, [r7, #16]

    count++;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d802      	bhi.n	8009c62 <SD_PowerON+0xe6>
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0cc      	beq.n	8009bfc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d902      	bls.n	8009c72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c70:	e00c      	b.n	8009c8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	645a      	str	r2, [r3, #68]	; 0x44
 8009c82:	e002      	b.n	8009c8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	c1100000 	.word	0xc1100000

08009c98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009cac:	e018      	b.n	8009ce0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f001 f869 	bl	800ad92 <SDMMC_CmdSendStatus>
 8009cc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	e009      	b.n	8009ce0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fe4f 	bl	800a976 <SDIO_GetResponse>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d03f      	beq.n	8009d82 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]
 8009d06:	e033      	b.n	8009d70 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fdc0 	bl	800a892 <SDIO_ReadFIFO>
 8009d12:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3301      	adds	r3, #1
 8009d36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	0c1b      	lsrs	r3, r3, #16
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	0e1b      	lsrs	r3, r3, #24
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b07      	cmp	r3, #7
 8009d74:	d9c8      	bls.n	8009d08 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009d82:	bf00      	nop
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b086      	sub	sp, #24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d043      	beq.n	8009e2c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009da4:	2300      	movs	r3, #0
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e037      	b.n	8009e1a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	021a      	lsls	r2, r3, #8
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	041a      	lsls	r2, r3, #16
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	061a      	lsls	r2, r3, #24
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fd4c 	bl	800a8ac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3301      	adds	r3, #1
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b07      	cmp	r3, #7
 8009e1e:	d9c4      	bls.n	8009daa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e056      	b.n	8009ef4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fa ff8f 	bl	8004d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	ea42 0103 	orr.w	r1, r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	0c1b      	lsrs	r3, r3, #16
 8009ec4:	f003 0104 	and.w	r1, r3, #4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	69da      	ldr	r2, [r3, #28]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ee2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_SPI_Transmit+0x22>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e11e      	b.n	800a15c <HAL_SPI_Transmit+0x260>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f26:	f7fb fa2d 	bl	8005384 <HAL_GetTick>
 8009f2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d002      	beq.n	8009f42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f40:	e103      	b.n	800a14a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <HAL_SPI_Transmit+0x52>
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d102      	bne.n	8009f54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f52:	e0fa      	b.n	800a14a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2203      	movs	r2, #3
 8009f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	88fa      	ldrh	r2, [r7, #6]
 8009f6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	88fa      	ldrh	r2, [r7, #6]
 8009f72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f9a:	d107      	bne.n	8009fac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009faa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb6:	2b40      	cmp	r3, #64	; 0x40
 8009fb8:	d007      	beq.n	8009fca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd2:	d14b      	bne.n	800a06c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <HAL_SPI_Transmit+0xe6>
 8009fdc:	8afb      	ldrh	r3, [r7, #22]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d13e      	bne.n	800a060 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	881a      	ldrh	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff2:	1c9a      	adds	r2, r3, #2
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b29a      	uxth	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a006:	e02b      	b.n	800a060 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b02      	cmp	r3, #2
 800a014:	d112      	bne.n	800a03c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	881a      	ldrh	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b01      	subs	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	86da      	strh	r2, [r3, #54]	; 0x36
 800a03a:	e011      	b.n	800a060 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a03c:	f7fb f9a2 	bl	8005384 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d803      	bhi.n	800a054 <HAL_SPI_Transmit+0x158>
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d102      	bne.n	800a05a <HAL_SPI_Transmit+0x15e>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d102      	bne.n	800a060 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a05e:	e074      	b.n	800a14a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1ce      	bne.n	800a008 <HAL_SPI_Transmit+0x10c>
 800a06a:	e04c      	b.n	800a106 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <HAL_SPI_Transmit+0x17e>
 800a074:	8afb      	ldrh	r3, [r7, #22]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d140      	bne.n	800a0fc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	330c      	adds	r3, #12
 800a084:	7812      	ldrb	r2, [r2, #0]
 800a086:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a096:	b29b      	uxth	r3, r3
 800a098:	3b01      	subs	r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a0a0:	e02c      	b.n	800a0fc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d113      	bne.n	800a0d8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	330c      	adds	r3, #12
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a0d6:	e011      	b.n	800a0fc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0d8:	f7fb f954 	bl	8005384 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d803      	bhi.n	800a0f0 <HAL_SPI_Transmit+0x1f4>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d102      	bne.n	800a0f6 <HAL_SPI_Transmit+0x1fa>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a0fa:	e026      	b.n	800a14a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1cd      	bne.n	800a0a2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 fb54 	bl	800a7b8 <SPI_EndRxTxTransaction>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a124:	2300      	movs	r3, #0
 800a126:	613b      	str	r3, [r7, #16]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	613b      	str	r3, [r7, #16]
 800a138:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	77fb      	strb	r3, [r7, #31]
 800a146:	e000      	b.n	800a14a <HAL_SPI_Transmit+0x24e>
  }

error:
 800a148:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	; 0x30
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a172:	2301      	movs	r3, #1
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_SPI_TransmitReceive+0x26>
 800a186:	2302      	movs	r3, #2
 800a188:	e18a      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x33c>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a192:	f7fb f8f7 	bl	8005384 <HAL_GetTick>
 800a196:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1a8:	887b      	ldrh	r3, [r7, #2]
 800a1aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d00f      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x70>
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ba:	d107      	bne.n	800a1cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <HAL_SPI_TransmitReceive+0x68>
 800a1c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d003      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1d2:	e15b      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x82>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x82>
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1ec:	e14e      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d003      	beq.n	800a202 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	887a      	ldrh	r2, [r7, #2]
 800a224:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	887a      	ldrh	r2, [r7, #2]
 800a22a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a242:	2b40      	cmp	r3, #64	; 0x40
 800a244:	d007      	beq.n	800a256 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25e:	d178      	bne.n	800a352 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <HAL_SPI_TransmitReceive+0x10a>
 800a268:	8b7b      	ldrh	r3, [r7, #26]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d166      	bne.n	800a33c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	881a      	ldrh	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27e:	1c9a      	adds	r2, r3, #2
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a292:	e053      	b.n	800a33c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d11b      	bne.n	800a2da <HAL_SPI_TransmitReceive+0x176>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d016      	beq.n	800a2da <HAL_SPI_TransmitReceive+0x176>
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d113      	bne.n	800a2da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b6:	881a      	ldrh	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	1c9a      	adds	r2, r3, #2
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d119      	bne.n	800a31c <HAL_SPI_TransmitReceive+0x1b8>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d014      	beq.n	800a31c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	b292      	uxth	r2, r2
 800a2fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	1c9a      	adds	r2, r3, #2
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a318:	2301      	movs	r3, #1
 800a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a31c:	f7fb f832 	bl	8005384 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a328:	429a      	cmp	r2, r3
 800a32a:	d807      	bhi.n	800a33c <HAL_SPI_TransmitReceive+0x1d8>
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d003      	beq.n	800a33c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a33a:	e0a7      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1a6      	bne.n	800a294 <HAL_SPI_TransmitReceive+0x130>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1a1      	bne.n	800a294 <HAL_SPI_TransmitReceive+0x130>
 800a350:	e07c      	b.n	800a44c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_SPI_TransmitReceive+0x1fc>
 800a35a:	8b7b      	ldrh	r3, [r7, #26]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d16b      	bne.n	800a438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	330c      	adds	r3, #12
 800a36a:	7812      	ldrb	r2, [r2, #0]
 800a36c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	3b01      	subs	r3, #1
 800a380:	b29a      	uxth	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a386:	e057      	b.n	800a438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b02      	cmp	r3, #2
 800a394:	d11c      	bne.n	800a3d0 <HAL_SPI_TransmitReceive+0x26c>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d017      	beq.n	800a3d0 <HAL_SPI_TransmitReceive+0x26c>
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d114      	bne.n	800a3d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	330c      	adds	r3, #12
 800a3b0:	7812      	ldrb	r2, [r2, #0]
 800a3b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d119      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x2ae>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d014      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a40e:	2301      	movs	r3, #1
 800a410:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a412:	f7fa ffb7 	bl	8005384 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a41e:	429a      	cmp	r2, r3
 800a420:	d803      	bhi.n	800a42a <HAL_SPI_TransmitReceive+0x2c6>
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d102      	bne.n	800a430 <HAL_SPI_TransmitReceive+0x2cc>
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d103      	bne.n	800a438 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a436:	e029      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1a2      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x224>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a446:	b29b      	uxth	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d19d      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f9b1 	bl	800a7b8 <SPI_EndRxTxTransaction>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d006      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2220      	movs	r2, #32
 800a466:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a468:	e010      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10b      	bne.n	800a48a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	e000      	b.n	800a48c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a48a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a49c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3730      	adds	r7, #48	; 0x30
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	099b      	lsrs	r3, r3, #6
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10f      	bne.n	800a4ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	099b      	lsrs	r3, r3, #6
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
    return;
 800a4ea:	e0d8      	b.n	800a69e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <HAL_SPI_IRQHandler+0x66>
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	09db      	lsrs	r3, r3, #7
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	4798      	blx	r3
    return;
 800a50c:	e0c7      	b.n	800a69e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	095b      	lsrs	r3, r3, #5
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10c      	bne.n	800a534 <HAL_SPI_IRQHandler+0x8c>
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	099b      	lsrs	r3, r3, #6
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	0a1b      	lsrs	r3, r3, #8
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80b5 	beq.w	800a69e <HAL_SPI_IRQHandler+0x1f6>
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	095b      	lsrs	r3, r3, #5
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80ae 	beq.w	800a69e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	099b      	lsrs	r3, r3, #6
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d023      	beq.n	800a596 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b03      	cmp	r3, #3
 800a558:	d011      	beq.n	800a57e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55e:	f043 0204 	orr.w	r2, r3, #4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	e00b      	b.n	800a596 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	693b      	ldr	r3, [r7, #16]
        return;
 800a594:	e083      	b.n	800a69e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	095b      	lsrs	r3, r3, #5
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d014      	beq.n	800a5cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a6:	f043 0201 	orr.w	r2, r3, #1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5dc:	f043 0208 	orr.w	r2, r3, #8
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60bb      	str	r3, [r7, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	60bb      	str	r3, [r7, #8]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d050      	beq.n	800a69c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a608:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <HAL_SPI_IRQHandler+0x17e>
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d034      	beq.n	800a690 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0203 	bic.w	r2, r2, #3
 800a634:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d011      	beq.n	800a662 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	4a18      	ldr	r2, [pc, #96]	; (800a6a4 <HAL_SPI_IRQHandler+0x1fc>)
 800a644:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fa ffd9 	bl	8005602 <HAL_DMA_Abort_IT>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a666:	2b00      	cmp	r3, #0
 800a668:	d016      	beq.n	800a698 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66e:	4a0d      	ldr	r2, [pc, #52]	; (800a6a4 <HAL_SPI_IRQHandler+0x1fc>)
 800a670:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a676:	4618      	mov	r0, r3
 800a678:	f7fa ffc3 	bl	8005602 <HAL_DMA_Abort_IT>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a68e:	e003      	b.n	800a698 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f809 	bl	800a6a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a696:	e000      	b.n	800a69a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a698:	bf00      	nop
    return;
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
  }
}
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0800a6bd 	.word	0x0800a6bd

0800a6a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff ffe6 	bl	800a6a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6f4:	e04c      	b.n	800a790 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d048      	beq.n	800a790 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a6fe:	f7fa fe41 	bl	8005384 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d902      	bls.n	800a714 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d13d      	bne.n	800a790 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a722:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a72c:	d111      	bne.n	800a752 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a736:	d004      	beq.n	800a742 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a740:	d107      	bne.n	800a752 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a750:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75a:	d10f      	bne.n	800a77c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a77a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e00f      	b.n	800a7b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	4013      	ands	r3, r2
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	bf0c      	ite	eq
 800a7a0:	2301      	moveq	r3, #1
 800a7a2:	2300      	movne	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d1a3      	bne.n	800a6f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	; (800a834 <SPI_EndRxTxTransaction+0x7c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a1b      	ldr	r2, [pc, #108]	; (800a838 <SPI_EndRxTxTransaction+0x80>)
 800a7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ce:	0d5b      	lsrs	r3, r3, #21
 800a7d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7d4:	fb02 f303 	mul.w	r3, r2, r3
 800a7d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7e2:	d112      	bne.n	800a80a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2180      	movs	r1, #128	; 0x80
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ff78 	bl	800a6e4 <SPI_WaitFlagStateUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d016      	beq.n	800a828 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fe:	f043 0220 	orr.w	r2, r3, #32
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e00f      	b.n	800a82a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00a      	beq.n	800a826 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	3b01      	subs	r3, #1
 800a814:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a820:	2b80      	cmp	r3, #128	; 0x80
 800a822:	d0f2      	beq.n	800a80a <SPI_EndRxTxTransaction+0x52>
 800a824:	e000      	b.n	800a828 <SPI_EndRxTxTransaction+0x70>
        break;
 800a826:	bf00      	nop
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	2000004c 	.word	0x2000004c
 800a838:	165e9f81 	.word	0x165e9f81

0800a83c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a83c:	b084      	sub	sp, #16
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	f107 001c 	add.w	r0, r7, #28
 800a84a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a852:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a854:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a856:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a85a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a85e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a862:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a866:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	431a      	orrs	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	b004      	add	sp, #16
 800a890:	4770      	bx	lr

0800a892 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2203      	movs	r2, #3
 800a8da:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f7fa fd5d 	bl	800539c <HAL_Delay>
  
  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0303 	and.w	r3, r3, #3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a926:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a92c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a932:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a942:	f023 030f 	bic.w	r3, r3, #15
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	431a      	orrs	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	b2db      	uxtb	r3, r3
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3314      	adds	r3, #20
 800a984:	461a      	mov	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	4413      	add	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
}  
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a9c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a9ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9da:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	431a      	orrs	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0

}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa02:	2310      	movs	r3, #16
 800aa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ff74 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aa20:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa24:	2110      	movs	r1, #16
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f9fe 	bl	800ae28 <SDMMC_GetCmdResp1>
 800aa2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa46:	2311      	movs	r3, #17
 800aa48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff ff52 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	2111      	movs	r1, #17
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f9dc 	bl	800ae28 <SDMMC_GetCmdResp1>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa8a:	2312      	movs	r3, #18
 800aa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff30 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	2112      	movs	r1, #18
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f9ba 	bl	800ae28 <SDMMC_GetCmdResp1>
 800aab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aace:	2318      	movs	r3, #24
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff ff0e 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	2118      	movs	r1, #24
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f998 	bl	800ae28 <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab12:	2319      	movs	r3, #25
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff feec 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab34:	2119      	movs	r1, #25
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f976 	bl	800ae28 <SDMMC_GetCmdResp1>
 800ab3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab54:	230c      	movs	r3, #12
 800ab56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab58:	2340      	movs	r3, #64	; 0x40
 800ab5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fecb 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ab72:	4a05      	ldr	r2, [pc, #20]	; (800ab88 <SDMMC_CmdStopTransfer+0x40>)
 800ab74:	210c      	movs	r1, #12
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f956 	bl	800ae28 <SDMMC_GetCmdResp1>
 800ab7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	05f5e100 	.word	0x05f5e100

0800ab8c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ab9c:	2307      	movs	r3, #7
 800ab9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aba0:	2340      	movs	r3, #64	; 0x40
 800aba2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abae:	f107 0310 	add.w	r3, r7, #16
 800abb2:	4619      	mov	r1, r3
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff fea7 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800abba:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbe:	2107      	movs	r1, #7
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 f931 	bl	800ae28 <SDMMC_GetCmdResp1>
 800abc6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3728      	adds	r7, #40	; 0x28
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b088      	sub	sp, #32
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abe6:	2300      	movs	r3, #0
 800abe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abf0:	f107 0308 	add.w	r3, r7, #8
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff fe86 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f8eb 	bl	800add8 <SDMMC_GetCmdError>
 800ac02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac04:	69fb      	ldr	r3, [r7, #28]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b088      	sub	sp, #32
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac1c:	2308      	movs	r3, #8
 800ac1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac20:	2340      	movs	r3, #64	; 0x40
 800ac22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac24:	2300      	movs	r3, #0
 800ac26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff fe67 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fad4 	bl	800b1e8 <SDMMC_GetCmdResp7>
 800ac40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac42:	69fb      	ldr	r3, [r7, #28]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac5a:	2337      	movs	r3, #55	; 0x37
 800ac5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac5e:	2340      	movs	r3, #64	; 0x40
 800ac60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fe48 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ac78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7c:	2137      	movs	r1, #55	; 0x37
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f8d2 	bl	800ae28 <SDMMC_GetCmdResp1>
 800ac84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aca6:	2329      	movs	r3, #41	; 0x29
 800aca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acb8:	f107 0308 	add.w	r3, r7, #8
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff fe22 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f9e1 	bl	800b08c <SDMMC_GetCmdResp3>
 800acca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800accc:	69fb      	ldr	r3, [r7, #28]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b088      	sub	sp, #32
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ace2:	2302      	movs	r3, #2
 800ace4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ace6:	23c0      	movs	r3, #192	; 0xc0
 800ace8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acf4:	f107 0308 	add.w	r3, r7, #8
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff fe04 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f97d 	bl	800b000 <SDMMC_GetCmdResp2>
 800ad06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad08:	69fb      	ldr	r3, [r7, #28]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3720      	adds	r7, #32
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b088      	sub	sp, #32
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ad20:	2309      	movs	r3, #9
 800ad22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ad24:	23c0      	movs	r3, #192	; 0xc0
 800ad26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad32:	f107 0308 	add.w	r3, r7, #8
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff fde5 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f95e 	bl	800b000 <SDMMC_GetCmdResp2>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad62:	2340      	movs	r3, #64	; 0x40
 800ad64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad70:	f107 0308 	add.w	r3, r7, #8
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff fdc6 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	2103      	movs	r1, #3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9bd 	bl	800b100 <SDMMC_GetCmdResp6>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ada0:	230d      	movs	r3, #13
 800ada2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ada4:	2340      	movs	r3, #64	; 0x40
 800ada6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff fda5 	bl	800a908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800adbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc2:	210d      	movs	r1, #13
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f82f 	bl	800ae28 <SDMMC_GetCmdResp1>
 800adca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adcc:	69fb      	ldr	r3, [r7, #28]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800add8:	b490      	push	{r4, r7}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ade0:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <SDMMC_GetCmdError+0x48>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a0f      	ldr	r2, [pc, #60]	; (800ae24 <SDMMC_GetCmdError+0x4c>)
 800ade6:	fba2 2303 	umull	r2, r3, r2, r3
 800adea:	0a5b      	lsrs	r3, r3, #9
 800adec:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800adf4:	4623      	mov	r3, r4
 800adf6:	1e5c      	subs	r4, r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae00:	e009      	b.n	800ae16 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0f2      	beq.n	800adf4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	22c5      	movs	r2, #197	; 0xc5
 800ae12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc90      	pop	{r4, r7}
 800ae1e:	4770      	bx	lr
 800ae20:	2000004c 	.word	0x2000004c
 800ae24:	10624dd3 	.word	0x10624dd3

0800ae28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ae28:	b590      	push	{r4, r7, lr}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	460b      	mov	r3, r1
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ae36:	4b6f      	ldr	r3, [pc, #444]	; (800aff4 <SDMMC_GetCmdResp1+0x1cc>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a6f      	ldr	r2, [pc, #444]	; (800aff8 <SDMMC_GetCmdResp1+0x1d0>)
 800ae3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae40:	0a5b      	lsrs	r3, r3, #9
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae48:	4623      	mov	r3, r4
 800ae4a:	1e5c      	subs	r4, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae54:	e0c9      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0f0      	beq.n	800ae48 <SDMMC_GetCmdResp1+0x20>
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1eb      	bne.n	800ae48 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2204      	movs	r2, #4
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae82:	2304      	movs	r3, #4
 800ae84:	e0b1      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2201      	movs	r2, #1
 800ae96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e0a6      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	22c5      	movs	r2, #197	; 0xc5
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff fd5a 	bl	800a95c <SDIO_GetCommandResponse>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461a      	mov	r2, r3
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d001      	beq.n	800aeb6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e099      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fd5c 	bl	800a976 <SDIO_GetResponse>
 800aebe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4b4e      	ldr	r3, [pc, #312]	; (800affc <SDMMC_GetCmdResp1+0x1d4>)
 800aec4:	4013      	ands	r3, r2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e08d      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da02      	bge.n	800aeda <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aed8:	e087      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aee4:	2340      	movs	r3, #64	; 0x40
 800aee6:	e080      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aef2:	2380      	movs	r3, #128	; 0x80
 800aef4:	e079      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800af00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af04:	e071      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800af10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af14:	e069      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800af20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af24:	e061      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800af30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af34:	e059      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af44:	e051      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af54:	e049      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800af60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800af64:	e041      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800af70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af74:	e039      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af84:	e031      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af94:	e029      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800afa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afa4:	e021      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800afb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800afb4:	e019      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800afc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afc4:	e011      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800afd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800afd4:	e009      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f003 0308 	and.w	r3, r3, #8
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800afe0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800afe4:	e001      	b.n	800afea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800afe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd90      	pop	{r4, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	2000004c 	.word	0x2000004c
 800aff8:	10624dd3 	.word	0x10624dd3
 800affc:	fdffe008 	.word	0xfdffe008

0800b000 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b000:	b490      	push	{r4, r7}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <SDMMC_GetCmdResp2+0x84>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a1e      	ldr	r2, [pc, #120]	; (800b088 <SDMMC_GetCmdResp2+0x88>)
 800b00e:	fba2 2303 	umull	r2, r3, r2, r3
 800b012:	0a5b      	lsrs	r3, r3, #9
 800b014:	f241 3288 	movw	r2, #5000	; 0x1388
 800b018:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b01c:	4623      	mov	r3, r4
 800b01e:	1e5c      	subs	r4, r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b028:	e026      	b.n	800b078 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0f0      	beq.n	800b01c <SDMMC_GetCmdResp2+0x1c>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1eb      	bne.n	800b01c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d004      	beq.n	800b05a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2204      	movs	r2, #4
 800b054:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b056:	2304      	movs	r3, #4
 800b058:	e00e      	b.n	800b078 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e003      	b.n	800b078 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	22c5      	movs	r2, #197	; 0xc5
 800b074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc90      	pop	{r4, r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	2000004c 	.word	0x2000004c
 800b088:	10624dd3 	.word	0x10624dd3

0800b08c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b08c:	b490      	push	{r4, r7}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b094:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <SDMMC_GetCmdResp3+0x6c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <SDMMC_GetCmdResp3+0x70>)
 800b09a:	fba2 2303 	umull	r2, r3, r2, r3
 800b09e:	0a5b      	lsrs	r3, r3, #9
 800b0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	1e5c      	subs	r4, r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d102      	bne.n	800b0b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0b4:	e01b      	b.n	800b0ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f0      	beq.n	800b0a8 <SDMMC_GetCmdResp3+0x1c>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1eb      	bne.n	800b0a8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2204      	movs	r2, #4
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0e2:	2304      	movs	r3, #4
 800b0e4:	e003      	b.n	800b0ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	22c5      	movs	r2, #197	; 0xc5
 800b0ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc90      	pop	{r4, r7}
 800b0f6:	4770      	bx	lr
 800b0f8:	2000004c 	.word	0x2000004c
 800b0fc:	10624dd3 	.word	0x10624dd3

0800b100 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b100:	b590      	push	{r4, r7, lr}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	460b      	mov	r3, r1
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b10e:	4b34      	ldr	r3, [pc, #208]	; (800b1e0 <SDMMC_GetCmdResp6+0xe0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a34      	ldr	r2, [pc, #208]	; (800b1e4 <SDMMC_GetCmdResp6+0xe4>)
 800b114:	fba2 2303 	umull	r2, r3, r2, r3
 800b118:	0a5b      	lsrs	r3, r3, #9
 800b11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b11e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b122:	4623      	mov	r3, r4
 800b124:	1e5c      	subs	r4, r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b12a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b12e:	e052      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b134:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0f0      	beq.n	800b122 <SDMMC_GetCmdResp6+0x22>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1eb      	bne.n	800b122 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2204      	movs	r2, #4
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b15c:	2304      	movs	r3, #4
 800b15e:	e03a      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2201      	movs	r2, #1
 800b170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b172:	2301      	movs	r3, #1
 800b174:	e02f      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff fbf0 	bl	800a95c <SDIO_GetCommandResponse>
 800b17c:	4603      	mov	r3, r0
 800b17e:	461a      	mov	r2, r3
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	4293      	cmp	r3, r2
 800b184:	d001      	beq.n	800b18a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b186:	2301      	movs	r3, #1
 800b188:	e025      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	22c5      	movs	r2, #197	; 0xc5
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b190:	2100      	movs	r1, #0
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f7ff fbef 	bl	800a976 <SDIO_GetResponse>
 800b198:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	e011      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1c0:	e009      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1d0:	e001      	b.n	800b1d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd90      	pop	{r4, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	2000004c 	.word	0x2000004c
 800b1e4:	10624dd3 	.word	0x10624dd3

0800b1e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b1e8:	b490      	push	{r4, r7}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1f0:	4b21      	ldr	r3, [pc, #132]	; (800b278 <SDMMC_GetCmdResp7+0x90>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a21      	ldr	r2, [pc, #132]	; (800b27c <SDMMC_GetCmdResp7+0x94>)
 800b1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fa:	0a5b      	lsrs	r3, r3, #9
 800b1fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b200:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b204:	4623      	mov	r3, r4
 800b206:	1e5c      	subs	r4, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b20c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b210:	e02c      	b.n	800b26c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b216:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f0      	beq.n	800b204 <SDMMC_GetCmdResp7+0x1c>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1eb      	bne.n	800b204 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	f003 0304 	and.w	r3, r3, #4
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2204      	movs	r2, #4
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b23e:	2304      	movs	r3, #4
 800b240:	e014      	b.n	800b26c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b254:	2301      	movs	r3, #1
 800b256:	e009      	b.n	800b26c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2240      	movs	r2, #64	; 0x40
 800b268:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b26a:	2300      	movs	r3, #0
  
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bc90      	pop	{r4, r7}
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	2000004c 	.word	0x2000004c
 800b27c:	10624dd3 	.word	0x10624dd3

0800b280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b280:	b084      	sub	sp, #16
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	f107 001c 	add.w	r0, r7, #28
 800b28e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	2b01      	cmp	r3, #1
 800b296:	d122      	bne.n	800b2de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d105      	bne.n	800b2d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f001 fa7c 	bl	800c7d0 <USB_CoreReset>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73fb      	strb	r3, [r7, #15]
 800b2dc:	e01a      	b.n	800b314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fa70 	bl	800c7d0 <USB_CoreReset>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
 800b306:	e005      	b.n	800b314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	2b01      	cmp	r3, #1
 800b318:	d10b      	bne.n	800b332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f043 0206 	orr.w	r2, r3, #6
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f043 0220 	orr.w	r2, r3, #32
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b33e:	b004      	add	sp, #16
 800b340:	4770      	bx	lr
	...

0800b344 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	4613      	mov	r3, r2
 800b350:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d165      	bne.n	800b424 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4a41      	ldr	r2, [pc, #260]	; (800b460 <USB_SetTurnaroundTime+0x11c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d906      	bls.n	800b36e <USB_SetTurnaroundTime+0x2a>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	4a40      	ldr	r2, [pc, #256]	; (800b464 <USB_SetTurnaroundTime+0x120>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d802      	bhi.n	800b36e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b368:	230f      	movs	r3, #15
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e062      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4a3c      	ldr	r2, [pc, #240]	; (800b464 <USB_SetTurnaroundTime+0x120>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d906      	bls.n	800b384 <USB_SetTurnaroundTime+0x40>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4a3b      	ldr	r2, [pc, #236]	; (800b468 <USB_SetTurnaroundTime+0x124>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d802      	bhi.n	800b384 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b37e:	230e      	movs	r3, #14
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e057      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	4a38      	ldr	r2, [pc, #224]	; (800b468 <USB_SetTurnaroundTime+0x124>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d906      	bls.n	800b39a <USB_SetTurnaroundTime+0x56>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	4a37      	ldr	r2, [pc, #220]	; (800b46c <USB_SetTurnaroundTime+0x128>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d802      	bhi.n	800b39a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b394:	230d      	movs	r3, #13
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e04c      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4a33      	ldr	r2, [pc, #204]	; (800b46c <USB_SetTurnaroundTime+0x128>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d906      	bls.n	800b3b0 <USB_SetTurnaroundTime+0x6c>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	4a32      	ldr	r2, [pc, #200]	; (800b470 <USB_SetTurnaroundTime+0x12c>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d802      	bhi.n	800b3b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e041      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4a2f      	ldr	r2, [pc, #188]	; (800b470 <USB_SetTurnaroundTime+0x12c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d906      	bls.n	800b3c6 <USB_SetTurnaroundTime+0x82>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	4a2e      	ldr	r2, [pc, #184]	; (800b474 <USB_SetTurnaroundTime+0x130>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d802      	bhi.n	800b3c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b3c0:	230b      	movs	r3, #11
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	e036      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	4a2a      	ldr	r2, [pc, #168]	; (800b474 <USB_SetTurnaroundTime+0x130>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d906      	bls.n	800b3dc <USB_SetTurnaroundTime+0x98>
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4a29      	ldr	r2, [pc, #164]	; (800b478 <USB_SetTurnaroundTime+0x134>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d802      	bhi.n	800b3dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b3d6:	230a      	movs	r3, #10
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e02b      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	4a26      	ldr	r2, [pc, #152]	; (800b478 <USB_SetTurnaroundTime+0x134>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d906      	bls.n	800b3f2 <USB_SetTurnaroundTime+0xae>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	4a25      	ldr	r2, [pc, #148]	; (800b47c <USB_SetTurnaroundTime+0x138>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d802      	bhi.n	800b3f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b3ec:	2309      	movs	r3, #9
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	e020      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	4a21      	ldr	r2, [pc, #132]	; (800b47c <USB_SetTurnaroundTime+0x138>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d906      	bls.n	800b408 <USB_SetTurnaroundTime+0xc4>
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4a20      	ldr	r2, [pc, #128]	; (800b480 <USB_SetTurnaroundTime+0x13c>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d802      	bhi.n	800b408 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b402:	2308      	movs	r3, #8
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	e015      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	4a1d      	ldr	r2, [pc, #116]	; (800b480 <USB_SetTurnaroundTime+0x13c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d906      	bls.n	800b41e <USB_SetTurnaroundTime+0xda>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	4a1c      	ldr	r2, [pc, #112]	; (800b484 <USB_SetTurnaroundTime+0x140>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d802      	bhi.n	800b41e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b418:	2307      	movs	r3, #7
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e00a      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b41e:	2306      	movs	r3, #6
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e007      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b42a:	2309      	movs	r3, #9
 800b42c:	617b      	str	r3, [r7, #20]
 800b42e:	e001      	b.n	800b434 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b430:	2309      	movs	r3, #9
 800b432:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	029b      	lsls	r3, r3, #10
 800b448:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b44c:	431a      	orrs	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	00d8acbf 	.word	0x00d8acbf
 800b464:	00e4e1bf 	.word	0x00e4e1bf
 800b468:	00f423ff 	.word	0x00f423ff
 800b46c:	0106737f 	.word	0x0106737f
 800b470:	011a499f 	.word	0x011a499f
 800b474:	01312cff 	.word	0x01312cff
 800b478:	014ca43f 	.word	0x014ca43f
 800b47c:	016e35ff 	.word	0x016e35ff
 800b480:	01a6ab1f 	.word	0x01a6ab1f
 800b484:	01e847ff 	.word	0x01e847ff

0800b488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f043 0201 	orr.w	r2, r3, #1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f023 0201 	bic.w	r2, r3, #1
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d106      	bne.n	800b4f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	e00b      	b.n	800b510 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60da      	str	r2, [r3, #12]
 800b50a:	e001      	b.n	800b510 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e003      	b.n	800b518 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b510:	2032      	movs	r0, #50	; 0x32
 800b512:	f7f9 ff43 	bl	800539c <HAL_Delay>

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b520:	b084      	sub	sp, #16
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b52e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b53a:	2300      	movs	r3, #0
 800b53c:	613b      	str	r3, [r7, #16]
 800b53e:	e009      	b.n	800b554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	3340      	adds	r3, #64	; 0x40
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	3301      	adds	r3, #1
 800b552:	613b      	str	r3, [r7, #16]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b0e      	cmp	r3, #14
 800b558:	d9f2      	bls.n	800b540 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d112      	bne.n	800b586 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b570:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	639a      	str	r2, [r3, #56]	; 0x38
 800b584:	e00b      	b.n	800b59e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	680b      	ldr	r3, [r1, #0]
 800b5bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d10c      	bne.n	800b5de <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d104      	bne.n	800b5d4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f961 	bl	800b894 <USB_SetDevSpeed>
 800b5d2:	e008      	b.n	800b5e6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f95c 	bl	800b894 <USB_SetDevSpeed>
 800b5dc:	e003      	b.n	800b5e6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b5de:	2103      	movs	r1, #3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f957 	bl	800b894 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b5e6:	2110      	movs	r1, #16
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f90b 	bl	800b804 <USB_FlushTxFifo>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f929 	bl	800b850 <USB_FlushRxFifo>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60e:	461a      	mov	r2, r3
 800b610:	2300      	movs	r3, #0
 800b612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61a:	461a      	mov	r2, r3
 800b61c:	2300      	movs	r3, #0
 800b61e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b626:	461a      	mov	r2, r3
 800b628:	2300      	movs	r3, #0
 800b62a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b62c:	2300      	movs	r3, #0
 800b62e:	613b      	str	r3, [r7, #16]
 800b630:	e043      	b.n	800b6ba <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	015a      	lsls	r2, r3, #5
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	4413      	add	r3, r2
 800b63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b648:	d118      	bne.n	800b67c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65c:	461a      	mov	r2, r3
 800b65e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	e013      	b.n	800b68e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	015a      	lsls	r2, r3, #5
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	4413      	add	r3, r2
 800b66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b672:	461a      	mov	r2, r3
 800b674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	e008      	b.n	800b68e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b688:	461a      	mov	r2, r3
 800b68a:	2300      	movs	r3, #0
 800b68c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69a:	461a      	mov	r2, r3
 800b69c:	2300      	movs	r3, #0
 800b69e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d3b7      	bcc.n	800b632 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	613b      	str	r3, [r7, #16]
 800b6c6:	e043      	b.n	800b750 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6de:	d118      	bne.n	800b712 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6f8:	6013      	str	r3, [r2, #0]
 800b6fa:	e013      	b.n	800b724 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4413      	add	r3, r2
 800b704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b708:	461a      	mov	r2, r3
 800b70a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	e008      	b.n	800b724 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71e:	461a      	mov	r2, r3
 800b720:	2300      	movs	r3, #0
 800b722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b730:	461a      	mov	r2, r3
 800b732:	2300      	movs	r3, #0
 800b734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	461a      	mov	r2, r3
 800b744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3301      	adds	r3, #1
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	429a      	cmp	r2, r3
 800b756:	d3b7      	bcc.n	800b6c8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b76a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d111      	bne.n	800b796 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b778:	461a      	mov	r2, r3
 800b77a:	4b20      	ldr	r3, [pc, #128]	; (800b7fc <USB_DevInit+0x2dc>)
 800b77c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b78c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b790:	f043 0303 	orr.w	r3, r3, #3
 800b794:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d105      	bne.n	800b7b6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	f043 0210 	orr.w	r2, r3, #16
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	699a      	ldr	r2, [r3, #24]
 800b7ba:	4b11      	ldr	r3, [pc, #68]	; (800b800 <USB_DevInit+0x2e0>)
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d005      	beq.n	800b7d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	f043 0208 	orr.w	r2, r3, #8
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d107      	bne.n	800b7ea <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7e2:	f043 0304 	orr.w	r3, r3, #4
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7f6:	b004      	add	sp, #16
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	00800100 	.word	0x00800100
 800b800:	803c3800 	.word	0x803c3800

0800b804 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	019b      	lsls	r3, r3, #6
 800b816:	f043 0220 	orr.w	r2, r3, #32
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3301      	adds	r3, #1
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <USB_FlushTxFifo+0x48>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d901      	bls.n	800b830 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e006      	b.n	800b83e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	f003 0320 	and.w	r3, r3, #32
 800b838:	2b20      	cmp	r3, #32
 800b83a:	d0f0      	beq.n	800b81e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	00030d40 	.word	0x00030d40

0800b850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2210      	movs	r2, #16
 800b860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3301      	adds	r3, #1
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4a09      	ldr	r2, [pc, #36]	; (800b890 <USB_FlushRxFifo+0x40>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d901      	bls.n	800b874 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e006      	b.n	800b882 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f003 0310 	and.w	r3, r3, #16
 800b87c:	2b10      	cmp	r3, #16
 800b87e:	d0f0      	beq.n	800b862 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	00030d40 	.word	0x00030d40

0800b894 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	68f9      	ldr	r1, [r7, #12]
 800b8b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b087      	sub	sp, #28
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 0306 	and.w	r3, r3, #6
 800b8de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d102      	bne.n	800b8ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]
 800b8ea:	e00a      	b.n	800b902 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d002      	beq.n	800b8f8 <USB_GetDevSpeed+0x32>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b06      	cmp	r3, #6
 800b8f6:	d102      	bne.n	800b8fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	75fb      	strb	r3, [r7, #23]
 800b8fc:	e001      	b.n	800b902 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b8fe:	230f      	movs	r3, #15
 800b900:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
}
 800b904:	4618      	mov	r0, r3
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	785b      	ldrb	r3, [r3, #1]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d13a      	bne.n	800b9a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b932:	69da      	ldr	r2, [r3, #28]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	f003 030f 	and.w	r3, r3, #15
 800b93c:	2101      	movs	r1, #1
 800b93e:	fa01 f303 	lsl.w	r3, r1, r3
 800b942:	b29b      	uxth	r3, r3
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b94a:	4313      	orrs	r3, r2
 800b94c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d155      	bne.n	800ba10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	78db      	ldrb	r3, [r3, #3]
 800b97e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b980:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	059b      	lsls	r3, r3, #22
 800b986:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b988:	4313      	orrs	r3, r2
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	440a      	add	r2, r1
 800b992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e036      	b.n	800ba10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a8:	69da      	ldr	r2, [r3, #28]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b8:	041b      	lsls	r3, r3, #16
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d11a      	bne.n	800ba10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	015a      	lsls	r2, r3, #5
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	78db      	ldrb	r3, [r3, #3]
 800b9f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b9f6:	430b      	orrs	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	0151      	lsls	r1, r2, #5
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	440a      	add	r2, r1
 800ba02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
	...

0800ba20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d135      	bne.n	800baa8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	f003 030f 	and.w	r3, r3, #15
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	43db      	mvns	r3, r3
 800ba56:	68f9      	ldr	r1, [r7, #12]
 800ba58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba66:	69da      	ldr	r2, [r3, #28]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f003 030f 	and.w	r3, r3, #15
 800ba70:	2101      	movs	r1, #1
 800ba72:	fa01 f303 	lsl.w	r3, r1, r3
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	43db      	mvns	r3, r3
 800ba7a:	68f9      	ldr	r1, [r7, #12]
 800ba7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba80:	4013      	ands	r3, r2
 800ba82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	0159      	lsls	r1, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	440b      	add	r3, r1
 800ba9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4b1f      	ldr	r3, [pc, #124]	; (800bb20 <USB_DeactivateEndpoint+0x100>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	600b      	str	r3, [r1, #0]
 800baa6:	e034      	b.n	800bb12 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	f003 030f 	and.w	r3, r3, #15
 800bab8:	2101      	movs	r1, #1
 800baba:	fa01 f303 	lsl.w	r3, r1, r3
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	43db      	mvns	r3, r3
 800bac2:	68f9      	ldr	r1, [r7, #12]
 800bac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bac8:	4013      	ands	r3, r2
 800baca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad2:	69da      	ldr	r2, [r3, #28]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	2101      	movs	r1, #1
 800bade:	fa01 f303 	lsl.w	r3, r1, r3
 800bae2:	041b      	lsls	r3, r3, #16
 800bae4:	43db      	mvns	r3, r3
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baec:	4013      	ands	r3, r2
 800baee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	0159      	lsls	r1, r3, #5
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	440b      	add	r3, r1
 800bb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <USB_DeactivateEndpoint+0x104>)
 800bb0e:	4013      	ands	r3, r2
 800bb10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	ec337800 	.word	0xec337800
 800bb24:	eff37800 	.word	0xeff37800

0800bb28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08a      	sub	sp, #40	; 0x28
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	4613      	mov	r3, r2
 800bb34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	785b      	ldrb	r3, [r3, #1]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	f040 815c 	bne.w	800be02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d132      	bne.n	800bbb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	69ba      	ldr	r2, [r7, #24]
 800bb62:	0151      	lsls	r1, r2, #5
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	440a      	add	r2, r1
 800bb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	0151      	lsls	r1, r2, #5
 800bb88:	69fa      	ldr	r2, [r7, #28]
 800bb8a:	440a      	add	r2, r1
 800bb8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	0151      	lsls	r1, r2, #5
 800bba8:	69fa      	ldr	r2, [r7, #28]
 800bbaa:	440a      	add	r2, r1
 800bbac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbb0:	0cdb      	lsrs	r3, r3, #19
 800bbb2:	04db      	lsls	r3, r3, #19
 800bbb4:	6113      	str	r3, [r2, #16]
 800bbb6:	e074      	b.n	800bca2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	0151      	lsls	r1, r2, #5
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	440a      	add	r2, r1
 800bbce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd2:	0cdb      	lsrs	r3, r3, #19
 800bbd4:	04db      	lsls	r3, r3, #19
 800bbd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	0151      	lsls	r1, r2, #5
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	440a      	add	r2, r1
 800bbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6959      	ldr	r1, [r3, #20]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	440b      	add	r3, r1
 800bc14:	1e59      	subs	r1, r3, #1
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc1e:	04d9      	lsls	r1, r3, #19
 800bc20:	4b9d      	ldr	r3, [pc, #628]	; (800be98 <USB_EPStartXfer+0x370>)
 800bc22:	400b      	ands	r3, r1
 800bc24:	69b9      	ldr	r1, [r7, #24]
 800bc26:	0148      	lsls	r0, r1, #5
 800bc28:	69f9      	ldr	r1, [r7, #28]
 800bc2a:	4401      	add	r1, r0
 800bc2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc30:	4313      	orrs	r3, r2
 800bc32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc40:	691a      	ldr	r2, [r3, #16]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc4a:	69b9      	ldr	r1, [r7, #24]
 800bc4c:	0148      	lsls	r0, r1, #5
 800bc4e:	69f9      	ldr	r1, [r7, #28]
 800bc50:	4401      	add	r1, r0
 800bc52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc56:	4313      	orrs	r3, r2
 800bc58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	78db      	ldrb	r3, [r3, #3]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d11f      	bne.n	800bca2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	0151      	lsls	r1, r2, #5
 800bc74:	69fa      	ldr	r2, [r7, #28]
 800bc76:	440a      	add	r2, r1
 800bc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bc80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bca2:	79fb      	ldrb	r3, [r7, #7]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d14b      	bne.n	800bd40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	78db      	ldrb	r3, [r3, #3]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d128      	bne.n	800bd1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d110      	bne.n	800bcfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	0151      	lsls	r1, r2, #5
 800bcee:	69fa      	ldr	r2, [r7, #28]
 800bcf0:	440a      	add	r2, r1
 800bcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	e00f      	b.n	800bd1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	69ba      	ldr	r2, [r7, #24]
 800bd0e:	0151      	lsls	r1, r2, #5
 800bd10:	69fa      	ldr	r2, [r7, #28]
 800bd12:	440a      	add	r2, r1
 800bd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	0151      	lsls	r1, r2, #5
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	440a      	add	r2, r1
 800bd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	e12f      	b.n	800bfa0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	015a      	lsls	r2, r3, #5
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	4413      	add	r3, r2
 800bd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	0151      	lsls	r1, r2, #5
 800bd52:	69fa      	ldr	r2, [r7, #28]
 800bd54:	440a      	add	r2, r1
 800bd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	78db      	ldrb	r3, [r3, #3]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d015      	beq.n	800bd94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 8117 	beq.w	800bfa0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	2101      	movs	r1, #1
 800bd84:	fa01 f303 	lsl.w	r3, r1, r3
 800bd88:	69f9      	ldr	r1, [r7, #28]
 800bd8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	634b      	str	r3, [r1, #52]	; 0x34
 800bd92:	e105      	b.n	800bfa0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d110      	bne.n	800bdc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	0151      	lsls	r1, r2, #5
 800bdb6:	69fa      	ldr	r2, [r7, #28]
 800bdb8:	440a      	add	r2, r1
 800bdba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	e00f      	b.n	800bde6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	0151      	lsls	r1, r2, #5
 800bdd8:	69fa      	ldr	r2, [r7, #28]
 800bdda:	440a      	add	r2, r1
 800bddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bde0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bde4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	68d9      	ldr	r1, [r3, #12]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	781a      	ldrb	r2, [r3, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	b298      	uxth	r0, r3
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fa2b 	bl	800c256 <USB_WritePacket>
 800be00:	e0ce      	b.n	800bfa0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	0151      	lsls	r1, r2, #5
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	440a      	add	r2, r1
 800be18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1c:	0cdb      	lsrs	r3, r3, #19
 800be1e:	04db      	lsls	r3, r3, #19
 800be20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	0151      	lsls	r1, r2, #5
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	440a      	add	r2, r1
 800be38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d126      	bne.n	800be9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	015a      	lsls	r2, r3, #5
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	4413      	add	r3, r2
 800be56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5a:	691a      	ldr	r2, [r3, #16]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be64:	69b9      	ldr	r1, [r7, #24]
 800be66:	0148      	lsls	r0, r1, #5
 800be68:	69f9      	ldr	r1, [r7, #28]
 800be6a:	4401      	add	r1, r0
 800be6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be70:	4313      	orrs	r3, r2
 800be72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	0151      	lsls	r1, r2, #5
 800be86:	69fa      	ldr	r2, [r7, #28]
 800be88:	440a      	add	r2, r1
 800be8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be92:	6113      	str	r3, [r2, #16]
 800be94:	e036      	b.n	800bf04 <USB_EPStartXfer+0x3dc>
 800be96:	bf00      	nop
 800be98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	695a      	ldr	r2, [r3, #20]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	1e5a      	subs	r2, r3, #1
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	691a      	ldr	r2, [r3, #16]
 800bec0:	8afb      	ldrh	r3, [r7, #22]
 800bec2:	04d9      	lsls	r1, r3, #19
 800bec4:	4b39      	ldr	r3, [pc, #228]	; (800bfac <USB_EPStartXfer+0x484>)
 800bec6:	400b      	ands	r3, r1
 800bec8:	69b9      	ldr	r1, [r7, #24]
 800beca:	0148      	lsls	r0, r1, #5
 800becc:	69f9      	ldr	r1, [r7, #28]
 800bece:	4401      	add	r1, r0
 800bed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bed4:	4313      	orrs	r3, r2
 800bed6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee4:	691a      	ldr	r2, [r3, #16]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	8af9      	ldrh	r1, [r7, #22]
 800beec:	fb01 f303 	mul.w	r3, r1, r3
 800bef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bef4:	69b9      	ldr	r1, [r7, #24]
 800bef6:	0148      	lsls	r0, r1, #5
 800bef8:	69f9      	ldr	r1, [r7, #28]
 800befa:	4401      	add	r1, r0
 800befc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf00:	4313      	orrs	r3, r2
 800bf02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d10d      	bne.n	800bf26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	68d9      	ldr	r1, [r3, #12]
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf22:	460a      	mov	r2, r1
 800bf24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	78db      	ldrb	r3, [r3, #3]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d128      	bne.n	800bf80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d110      	bne.n	800bf60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	0151      	lsls	r1, r2, #5
 800bf50:	69fa      	ldr	r2, [r7, #28]
 800bf52:	440a      	add	r2, r1
 800bf54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	e00f      	b.n	800bf80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	0151      	lsls	r1, r2, #5
 800bf72:	69fa      	ldr	r2, [r7, #28]
 800bf74:	440a      	add	r2, r1
 800bf76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	0151      	lsls	r1, r2, #5
 800bf92:	69fa      	ldr	r2, [r7, #28]
 800bf94:	440a      	add	r2, r1
 800bf96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	1ff80000 	.word	0x1ff80000

0800bfb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	f040 80cd 	bne.w	800c16c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d132      	bne.n	800c040 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	0151      	lsls	r1, r2, #5
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	440a      	add	r2, r1
 800bff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	4413      	add	r3, r2
 800c006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	0151      	lsls	r1, r2, #5
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	440a      	add	r2, r1
 800c014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c01c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	0151      	lsls	r1, r2, #5
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	440a      	add	r2, r1
 800c034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c038:	0cdb      	lsrs	r3, r3, #19
 800c03a:	04db      	lsls	r3, r3, #19
 800c03c:	6113      	str	r3, [r2, #16]
 800c03e:	e04e      	b.n	800c0de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	0151      	lsls	r1, r2, #5
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	440a      	add	r2, r1
 800c056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c05a:	0cdb      	lsrs	r3, r3, #19
 800c05c:	04db      	lsls	r3, r3, #19
 800c05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	0151      	lsls	r1, r2, #5
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	440a      	add	r2, r1
 800c076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c07a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c07e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c082:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	695a      	ldr	r2, [r3, #20]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d903      	bls.n	800c098 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	689a      	ldr	r2, [r3, #8]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	0151      	lsls	r1, r2, #5
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	015a      	lsls	r2, r3, #5
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ce:	6939      	ldr	r1, [r7, #16]
 800c0d0:	0148      	lsls	r0, r1, #5
 800c0d2:	6979      	ldr	r1, [r7, #20]
 800c0d4:	4401      	add	r1, r0
 800c0d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d11e      	bne.n	800c122 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	015a      	lsls	r2, r3, #5
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	0151      	lsls	r1, r2, #5
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	440a      	add	r2, r1
 800c116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c11a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	e092      	b.n	800c248 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c13c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c140:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d07e      	beq.n	800c248 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	2101      	movs	r1, #1
 800c15c:	fa01 f303 	lsl.w	r3, r1, r3
 800c160:	6979      	ldr	r1, [r7, #20]
 800c162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c166:	4313      	orrs	r3, r2
 800c168:	634b      	str	r3, [r1, #52]	; 0x34
 800c16a:	e06d      	b.n	800c248 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	0151      	lsls	r1, r2, #5
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	440a      	add	r2, r1
 800c182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c186:	0cdb      	lsrs	r3, r3, #19
 800c188:	04db      	lsls	r3, r3, #19
 800c18a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	4413      	add	r3, r2
 800c194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	0151      	lsls	r1, r2, #5
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	440a      	add	r2, r1
 800c1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	0151      	lsls	r1, r2, #5
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	440a      	add	r2, r1
 800c1d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ec:	691a      	ldr	r2, [r3, #16]
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1f6:	6939      	ldr	r1, [r7, #16]
 800c1f8:	0148      	lsls	r0, r1, #5
 800c1fa:	6979      	ldr	r1, [r7, #20]
 800c1fc:	4401      	add	r1, r0
 800c1fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c202:	4313      	orrs	r3, r2
 800c204:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d10d      	bne.n	800c228 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	68d9      	ldr	r1, [r3, #12]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	015a      	lsls	r2, r3, #5
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	4413      	add	r3, r2
 800c220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c224:	460a      	mov	r2, r1
 800c226:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c256:	b480      	push	{r7}
 800c258:	b089      	sub	sp, #36	; 0x24
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	60f8      	str	r0, [r7, #12]
 800c25e:	60b9      	str	r1, [r7, #8]
 800c260:	4611      	mov	r1, r2
 800c262:	461a      	mov	r2, r3
 800c264:	460b      	mov	r3, r1
 800c266:	71fb      	strb	r3, [r7, #7]
 800c268:	4613      	mov	r3, r2
 800c26a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c274:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d11a      	bne.n	800c2b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c27c:	88bb      	ldrh	r3, [r7, #4]
 800c27e:	3303      	adds	r3, #3
 800c280:	089b      	lsrs	r3, r3, #2
 800c282:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c284:	2300      	movs	r3, #0
 800c286:	61bb      	str	r3, [r7, #24]
 800c288:	e00f      	b.n	800c2aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	031a      	lsls	r2, r3, #12
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	4413      	add	r3, r2
 800c292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c296:	461a      	mov	r2, r3
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	61bb      	str	r3, [r7, #24]
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d3eb      	bcc.n	800c28a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3724      	adds	r7, #36	; 0x24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b089      	sub	sp, #36	; 0x24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	3303      	adds	r3, #3
 800c2da:	089b      	lsrs	r3, r3, #2
 800c2dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61bb      	str	r3, [r7, #24]
 800c2e2:	e00b      	b.n	800c2fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	61bb      	str	r3, [r7, #24]
 800c2fc:	69ba      	ldr	r2, [r7, #24]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	429a      	cmp	r2, r3
 800c302:	d3ef      	bcc.n	800c2e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c304:	69fb      	ldr	r3, [r7, #28]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3724      	adds	r7, #36	; 0x24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	785b      	ldrb	r3, [r3, #1]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d12c      	bne.n	800c388 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	015a      	lsls	r2, r3, #5
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	4413      	add	r3, r2
 800c336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db12      	blt.n	800c366 <USB_EPSetStall+0x54>
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00f      	beq.n	800c366 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	0151      	lsls	r1, r2, #5
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	440a      	add	r2, r1
 800c35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c364:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	0151      	lsls	r1, r2, #5
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	440a      	add	r2, r1
 800c37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	e02b      	b.n	800c3e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	db12      	blt.n	800c3c0 <USB_EPSetStall+0xae>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00f      	beq.n	800c3c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	015a      	lsls	r2, r3, #5
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	0151      	lsls	r1, r2, #5
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	440a      	add	r2, r1
 800c3b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	0151      	lsls	r1, r2, #5
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d128      	bne.n	800c45c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	015a      	lsls	r2, r3, #5
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	4413      	add	r3, r2
 800c412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	0151      	lsls	r1, r2, #5
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	440a      	add	r2, r1
 800c420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c428:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	78db      	ldrb	r3, [r3, #3]
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d003      	beq.n	800c43a <USB_EPClearStall+0x4c>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	78db      	ldrb	r3, [r3, #3]
 800c436:	2b02      	cmp	r3, #2
 800c438:	d138      	bne.n	800c4ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	e027      	b.n	800c4ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	0151      	lsls	r1, r2, #5
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	440a      	add	r2, r1
 800c472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c47a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	78db      	ldrb	r3, [r3, #3]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d003      	beq.n	800c48c <USB_EPClearStall+0x9e>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	78db      	ldrb	r3, [r3, #3]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d10f      	bne.n	800c4ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	015a      	lsls	r2, r3, #5
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	4413      	add	r3, r2
 800c494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	0151      	lsls	r1, r2, #5
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	440a      	add	r2, r1
 800c4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c4dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	78fb      	ldrb	r3, [r7, #3]
 800c4e8:	011b      	lsls	r3, r3, #4
 800c4ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c4ee:	68f9      	ldr	r1, [r7, #12]
 800c4f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c520:	f023 0302 	bic.w	r3, r3, #2
 800c524:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c526:	2003      	movs	r0, #3
 800c528:	f7f8 ff38 	bl	800539c <HAL_Delay>

  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c550:	f043 0302 	orr.w	r3, r3, #2
 800c554:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c556:	2003      	movs	r0, #3
 800c558:	f7f8 ff20 	bl	800539c <HAL_Delay>

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4013      	ands	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c57e:	68fb      	ldr	r3, [r7, #12]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	0c1b      	lsrs	r3, r3, #16
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5dc:	69db      	ldr	r3, [r3, #28]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	b29b      	uxth	r3, r3
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	4013      	ands	r3, r2
 800c620:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c622:	68bb      	ldr	r3, [r7, #8]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	460b      	mov	r3, r1
 800c63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c652:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	f003 030f 	and.w	r3, r3, #15
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	fa22 f303 	lsr.w	r3, r2, r3
 800c660:	01db      	lsls	r3, r3, #7
 800c662:	b2db      	uxtb	r3, r3
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	4313      	orrs	r3, r2
 800c668:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c66a:	78fb      	ldrb	r3, [r7, #3]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	4413      	add	r3, r2
 800c672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	4013      	ands	r3, r2
 800c67c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c67e:	68bb      	ldr	r3, [r7, #8]
}
 800c680:	4618      	mov	r0, r3
 800c682:	371c      	adds	r7, #28
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	f003 0301 	and.w	r3, r3, #1
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f003 0306 	and.w	r3, r3, #6
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d109      	bne.n	800c6f0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ea:	f043 0303 	orr.w	r3, r3, #3
 800c6ee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c702:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	460b      	mov	r3, r1
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	333c      	adds	r3, #60	; 0x3c
 800c72a:	3304      	adds	r3, #4
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	4a26      	ldr	r2, [pc, #152]	; (800c7cc <USB_EP0_OutStart+0xb8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d90a      	bls.n	800c74e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c748:	d101      	bne.n	800c74e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	e037      	b.n	800c7be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c754:	461a      	mov	r2, r3
 800c756:	2300      	movs	r3, #0
 800c758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c76c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c77c:	f043 0318 	orr.w	r3, r3, #24
 800c780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c790:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c794:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c796:	7afb      	ldrb	r3, [r7, #11]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d10f      	bne.n	800c7bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c7ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	4f54300a 	.word	0x4f54300a

0800c7d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	4a13      	ldr	r2, [pc, #76]	; (800c834 <USB_CoreReset+0x64>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d901      	bls.n	800c7ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e01b      	b.n	800c826 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	daf2      	bge.n	800c7dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	f043 0201 	orr.w	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4a09      	ldr	r2, [pc, #36]	; (800c834 <USB_CoreReset+0x64>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d901      	bls.n	800c818 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c814:	2303      	movs	r3, #3
 800c816:	e006      	b.n	800c826 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b01      	cmp	r3, #1
 800c822:	d0f0      	beq.n	800c806 <USB_CoreReset+0x36>

  return HAL_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	00030d40 	.word	0x00030d40

0800c838 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c838:	b480      	push	{r7}
 800c83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c83c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c83e:	4618      	mov	r0, r3
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <FatFsInit>:

/* USER CODE BEGIN Application */
     
SD_error FatFsInit(void) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af02      	add	r7, sp, #8
	// Initializing Fat Filesystem
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 800c84e:	4914      	ldr	r1, [pc, #80]	; (800c8a0 <FatFsInit+0x58>)
 800c850:	4814      	ldr	r0, [pc, #80]	; (800c8a4 <FatFsInit+0x5c>)
 800c852:	f008 ff25 	bl	80156a0 <FATFS_LinkDriver>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d11c      	bne.n	800c896 <FatFsInit+0x4e>
		FRESULT res;
		/* Attempt to Mount SD Drive */
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800c85c:	2201      	movs	r2, #1
 800c85e:	4910      	ldr	r1, [pc, #64]	; (800c8a0 <FatFsInit+0x58>)
 800c860:	4811      	ldr	r0, [pc, #68]	; (800c8a8 <FatFsInit+0x60>)
 800c862:	f007 fbf1 	bl	8014048 <f_mount>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00f      	beq.n	800c88c <FatFsInit+0x44>
			 /* Failed to mount drive */
			 res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800c86c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	4b0e      	ldr	r3, [pc, #56]	; (800c8ac <FatFsInit+0x64>)
 800c874:	2200      	movs	r2, #0
 800c876:	2107      	movs	r1, #7
 800c878:	4809      	ldr	r0, [pc, #36]	; (800c8a0 <FatFsInit+0x58>)
 800c87a:	f008 f9fd 	bl	8014c78 <f_mkfs>
 800c87e:	4603      	mov	r3, r0
 800c880:	71fb      	strb	r3, [r7, #7]
			 if (res != FR_OK) {
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <FatFsInit+0x44>
				 /* Error, failed to initialize filesystem */
				 return SD_ERR;
 800c888:	2301      	movs	r3, #1
 800c88a:	e005      	b.n	800c898 <FatFsInit+0x50>
			 }
		 }
		 fatFsModInit = true;
 800c88c:	4b08      	ldr	r3, [pc, #32]	; (800c8b0 <FatFsInit+0x68>)
 800c88e:	2201      	movs	r2, #1
 800c890:	701a      	strb	r2, [r3, #0]
	} else {
		// Failed to link SD Driver
		return SD_ERR;
	}
	return SD_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	e000      	b.n	800c898 <FatFsInit+0x50>
		return SD_ERR;
 800c896:	2301      	movs	r3, #1
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	2000132c 	.word	0x2000132c
 800c8a4:	0801a728 	.word	0x0801a728
 800c8a8:	20001560 	.word	0x20001560
 800c8ac:	2000112c 	.word	0x2000112c
 800c8b0:	20000740 	.word	0x20000740

0800c8b4 <FatFsDeInit>:

SD_error FatFsDeInit(void) {
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
	fatFsModInit = false;
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <FatFsDeInit+0x18>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
	return FATFS_UnLinkDriver(SDPath);
 800c8be:	4804      	ldr	r0, [pc, #16]	; (800c8d0 <FatFsDeInit+0x1c>)
 800c8c0:	f008 ff36 	bl	8015730 <FATFS_UnLinkDriver>
 800c8c4:	4603      	mov	r3, r0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20000740 	.word	0x20000740
 800c8d0:	2000132c 	.word	0x2000132c

0800c8d4 <FatFsIsModuleInit>:

	// Success
	return SD_OK;
}

bool FatFsIsModuleInit(void) {
 800c8d4:	b480      	push	{r7}
 800c8d6:	af00      	add	r7, sp, #0
	return fatFsModInit;
 800c8d8:	4b03      	ldr	r3, [pc, #12]	; (800c8e8 <FatFsIsModuleInit+0x14>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	20000740 	.word	0x20000740

0800c8ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c8f6:	f000 f89e 	bl	800ca36 <BSP_SD_IsDetected>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d001      	beq.n	800c904 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e005      	b.n	800c910 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c904:	4804      	ldr	r0, [pc, #16]	; (800c918 <BSP_SD_Init+0x2c>)
 800c906:	f7fc f851 	bl	80089ac <HAL_SD_Init>
 800c90a:	4603      	mov	r3, r0
 800c90c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c90e:	79fb      	ldrb	r3, [r7, #7]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20001048 	.word	0x20001048

0800c91c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af02      	add	r7, sp, #8
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	68f9      	ldr	r1, [r7, #12]
 800c938:	4806      	ldr	r0, [pc, #24]	; (800c954 <BSP_SD_ReadBlocks+0x38>)
 800c93a:	f7fc f8c7 	bl	8008acc <HAL_SD_ReadBlocks>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c948:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20001048 	.word	0x20001048

0800c958 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af02      	add	r7, sp, #8
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	4806      	ldr	r0, [pc, #24]	; (800c990 <BSP_SD_WriteBlocks+0x38>)
 800c976:	f7fc faa3 	bl	8008ec0 <HAL_SD_WriteBlocks>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c984:	7dfb      	ldrb	r3, [r7, #23]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	20001048 	.word	0x20001048

0800c994 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c998:	4805      	ldr	r0, [pc, #20]	; (800c9b0 <BSP_SD_GetCardState+0x1c>)
 800c99a:	f7fc ff93 	bl	80098c4 <HAL_SD_GetCardState>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	bf14      	ite	ne
 800c9a4:	2301      	movne	r3, #1
 800c9a6:	2300      	moveq	r3, #0
 800c9a8:	b2db      	uxtb	r3, r3
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20001048 	.word	0x20001048

0800c9b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	4803      	ldr	r0, [pc, #12]	; (800c9cc <BSP_SD_GetCardInfo+0x18>)
 800c9c0:	f7fc ff54 	bl	800986c <HAL_SD_GetCardInfo>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20001048 	.word	0x20001048

0800c9d0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c9d8:	f000 f818 	bl	800ca0c <BSP_SD_AbortCallback>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c9ec:	f000 f815 	bl	800ca1a <BSP_SD_WriteCpltCallback>
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ca00:	f000 f812 	bl	800ca28 <BSP_SD_ReadCpltCallback>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0

}
 800ca10:	bf00      	nop
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	af00      	add	r7, sp, #0

}
 800ca1e:	bf00      	nop
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0

}
 800ca2c:	bf00      	nop
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800ca40:	79fb      	ldrb	r3, [r7, #7]
 800ca42:	b2db      	uxtb	r3, r3
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ca5a:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <SD_CheckStatus+0x38>)
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ca60:	f7ff ff98 	bl	800c994 <BSP_SD_GetCardState>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d107      	bne.n	800ca7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ca6a:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <SD_CheckStatus+0x38>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	f023 0301 	bic.w	r3, r3, #1
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	4b04      	ldr	r3, [pc, #16]	; (800ca88 <SD_CheckStatus+0x38>)
 800ca78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ca7a:	4b03      	ldr	r3, [pc, #12]	; (800ca88 <SD_CheckStatus+0x38>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b2db      	uxtb	r3, r3
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000055 	.word	0x20000055

0800ca8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ca96:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <SD_initialize+0x38>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca9c:	f7ff ff26 	bl	800c8ec <BSP_SD_Init>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d107      	bne.n	800cab6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff ffd1 	bl	800ca50 <SD_CheckStatus>
 800caae:	4603      	mov	r3, r0
 800cab0:	461a      	mov	r2, r3
 800cab2:	4b04      	ldr	r3, [pc, #16]	; (800cac4 <SD_initialize+0x38>)
 800cab4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800cab6:	4b03      	ldr	r3, [pc, #12]	; (800cac4 <SD_initialize+0x38>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	b2db      	uxtb	r3, r3
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20000055 	.word	0x20000055

0800cac8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	4603      	mov	r3, r0
 800cad0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7ff ffbb 	bl	800ca50 <SD_CheckStatus>
 800cada:	4603      	mov	r3, r0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	68b8      	ldr	r0, [r7, #8]
 800cb02:	f7ff ff0b 	bl	800c91c <BSP_SD_ReadBlocks>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d107      	bne.n	800cb1c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb0c:	bf00      	nop
 800cb0e:	f7ff ff41 	bl	800c994 <BSP_SD_GetCardState>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1fa      	bne.n	800cb0e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b086      	sub	sp, #24
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	603b      	str	r3, [r7, #0]
 800cb32:	4603      	mov	r3, r0
 800cb34:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	68b8      	ldr	r0, [r7, #8]
 800cb44:	f7ff ff08 	bl	800c958 <BSP_SD_WriteBlocks>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d107      	bne.n	800cb5e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cb4e:	bf00      	nop
 800cb50:	f7ff ff20 	bl	800c994 <BSP_SD_GetCardState>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1fa      	bne.n	800cb50 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08c      	sub	sp, #48	; 0x30
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	603a      	str	r2, [r7, #0]
 800cb72:	71fb      	strb	r3, [r7, #7]
 800cb74:	460b      	mov	r3, r1
 800cb76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb7e:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <SD_ioctl+0xac>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <SD_ioctl+0x28>
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e03c      	b.n	800cc0a <SD_ioctl+0xa2>

  switch (cmd)
 800cb90:	79bb      	ldrb	r3, [r7, #6]
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d834      	bhi.n	800cc00 <SD_ioctl+0x98>
 800cb96:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <SD_ioctl+0x34>)
 800cb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9c:	0800cbad 	.word	0x0800cbad
 800cba0:	0800cbb5 	.word	0x0800cbb5
 800cba4:	0800cbcd 	.word	0x0800cbcd
 800cba8:	0800cbe7 	.word	0x0800cbe7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbb2:	e028      	b.n	800cc06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbb4:	f107 030c 	add.w	r3, r7, #12
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff fefb 	bl	800c9b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cbbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbca:	e01c      	b.n	800cc06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff feef 	bl	800c9b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbe4:	e00f      	b.n	800cc06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbe6:	f107 030c 	add.w	r3, r7, #12
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fee2 	bl	800c9b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf2:	0a5a      	lsrs	r2, r3, #9
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbfe:	e002      	b.n	800cc06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc00:	2304      	movs	r3, #4
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3730      	adds	r7, #48	; 0x30
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20000055 	.word	0x20000055

0800cc18 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800cc1c:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <rfalAnalogConfigInitialize+0x24>)
 800cc1e:	4a08      	ldr	r2, [pc, #32]	; (800cc40 <rfalAnalogConfigInitialize+0x28>)
 800cc20:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800cc22:	4b06      	ldr	r3, [pc, #24]	; (800cc3c <rfalAnalogConfigInitialize+0x24>)
 800cc24:	f240 22bb 	movw	r2, #699	; 0x2bb
 800cc28:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800cc2a:	4b04      	ldr	r3, [pc, #16]	; (800cc3c <rfalAnalogConfigInitialize+0x24>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800cc30:	bf00      	nop
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	20000744 	.word	0x20000744
 800cc40:	0801a73c 	.word	0x0801a73c

0800cc44 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800cc56:	4b4b      	ldr	r3, [pc, #300]	; (800cd84 <rfalSetAnalogConfig+0x140>)
 800cc58:	799b      	ldrb	r3, [r3, #6]
 800cc5a:	f083 0301 	eor.w	r3, r3, #1
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800cc64:	2305      	movs	r3, #5
 800cc66:	e089      	b.n	800cd7c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800cc68:	f107 020e 	add.w	r2, r7, #14
 800cc6c:	88fb      	ldrh	r3, [r7, #6]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 f889 	bl	800cd88 <rfalAnalogConfigSearch>
 800cc76:	4603      	mov	r3, r0
 800cc78:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800cc7a:	7d3b      	ldrb	r3, [r7, #20]
 800cc7c:	2bff      	cmp	r3, #255	; 0xff
 800cc7e:	d07b      	beq.n	800cd78 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800cc80:	4b40      	ldr	r3, [pc, #256]	; (800cd84 <rfalSetAnalogConfig+0x140>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	461a      	mov	r2, r3
 800cc86:	89fb      	ldrh	r3, [r7, #14]
 800cc88:	4413      	add	r3, r2
 800cc8a:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800cc8c:	7d3b      	ldrb	r3, [r7, #20]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	89fb      	ldrh	r3, [r7, #14]
 800cc96:	4413      	add	r3, r2
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800cc9c:	4b39      	ldr	r3, [pc, #228]	; (800cd84 <rfalSetAnalogConfig+0x140>)
 800cc9e:	889b      	ldrh	r3, [r3, #4]
 800cca0:	3301      	adds	r3, #1
 800cca2:	89fa      	ldrh	r2, [r7, #14]
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d201      	bcs.n	800ccac <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e067      	b.n	800cd7c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800ccac:	2300      	movs	r3, #0
 800ccae:	757b      	strb	r3, [r7, #21]
 800ccb0:	e05d      	b.n	800cd6e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800ccb2:	7d7b      	ldrb	r3, [r7, #21]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	4413      	add	r3, r2
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	7d7a      	ldrb	r2, [r7, #21]
 800ccc0:	0092      	lsls	r2, r2, #2
 800ccc2:	6939      	ldr	r1, [r7, #16]
 800ccc4:	440a      	add	r2, r1
 800ccc6:	7852      	ldrb	r2, [r2, #1]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d026      	beq.n	800cd20 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800ccd2:	7d7b      	ldrb	r3, [r7, #21]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	4413      	add	r3, r2
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	021b      	lsls	r3, r3, #8
 800ccde:	b21a      	sxth	r2, r3
 800cce0:	7d7b      	ldrb	r3, [r7, #21]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	6939      	ldr	r1, [r7, #16]
 800cce6:	440b      	add	r3, r1
 800cce8:	785b      	ldrb	r3, [r3, #1]
 800ccea:	b21b      	sxth	r3, r3
 800ccec:	4313      	orrs	r3, r2
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccf6:	b298      	uxth	r0, r3
 800ccf8:	7d7b      	ldrb	r3, [r7, #21]
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	4413      	add	r3, r2
 800cd00:	7899      	ldrb	r1, [r3, #2]
 800cd02:	7d7b      	ldrb	r3, [r7, #21]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	693a      	ldr	r2, [r7, #16]
 800cd08:	4413      	add	r3, r2
 800cd0a:	78db      	ldrb	r3, [r3, #3]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f002 fc81 	bl	800f614 <rfalChipChangeTestRegBits>
 800cd12:	4603      	mov	r3, r0
 800cd14:	82fb      	strh	r3, [r7, #22]
 800cd16:	8afb      	ldrh	r3, [r7, #22]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d025      	beq.n	800cd68 <rfalSetAnalogConfig+0x124>
 800cd1c:	8afb      	ldrh	r3, [r7, #22]
 800cd1e:	e02d      	b.n	800cd7c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800cd20:	7d7b      	ldrb	r3, [r7, #21]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	b21a      	sxth	r2, r3
 800cd2e:	7d7b      	ldrb	r3, [r7, #21]
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	6939      	ldr	r1, [r7, #16]
 800cd34:	440b      	add	r3, r1
 800cd36:	785b      	ldrb	r3, [r3, #1]
 800cd38:	b21b      	sxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	b298      	uxth	r0, r3
 800cd40:	7d7b      	ldrb	r3, [r7, #21]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	7899      	ldrb	r1, [r3, #2]
 800cd4a:	7d7b      	ldrb	r3, [r7, #21]
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4413      	add	r3, r2
 800cd52:	78db      	ldrb	r3, [r3, #3]
 800cd54:	461a      	mov	r2, r3
 800cd56:	f002 fc3b 	bl	800f5d0 <rfalChipChangeRegBits>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	82fb      	strh	r3, [r7, #22]
 800cd5e:	8afb      	ldrh	r3, [r7, #22]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <rfalSetAnalogConfig+0x124>
 800cd64:	8afb      	ldrh	r3, [r7, #22]
 800cd66:	e009      	b.n	800cd7c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800cd68:	7d7b      	ldrb	r3, [r7, #21]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	757b      	strb	r3, [r7, #21]
 800cd6e:	7d7a      	ldrb	r2, [r7, #21]
 800cd70:	7d3b      	ldrb	r3, [r7, #20]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d39d      	bcc.n	800ccb2 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800cd76:	e777      	b.n	800cc68 <rfalSetAnalogConfig+0x24>
            break;
 800cd78:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800cd7a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20000744 	.word	0x20000744

0800cd88 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	4603      	mov	r3, r0
 800cd90:	6039      	str	r1, [r7, #0]
 800cd92:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800cd94:	4b31      	ldr	r3, [pc, #196]	; (800ce5c <rfalAnalogConfigSearch+0xd4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800cd9a:	88fb      	ldrh	r3, [r7, #6]
 800cd9c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800cda0:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <rfalAnalogConfigSearch+0x34>
 800cda6:	88fb      	ldrh	r3, [r7, #6]
 800cda8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	e001      	b.n	800cdc0 <rfalAnalogConfigSearch+0x38>
 800cdbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdc0:	88fb      	ldrh	r3, [r7, #6]
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <rfalAnalogConfigSearch+0x48>
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	e000      	b.n	800cdd2 <rfalAnalogConfigSearch+0x4a>
 800cdd0:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800cdd6:	88fb      	ldrh	r3, [r7, #6]
 800cdd8:	f003 030f 	and.w	r3, r3, #15
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	d102      	bne.n	800cde8 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800cde2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cde6:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800cdee:	e029      	b.n	800ce44 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800cdf0:	8abb      	ldrh	r3, [r7, #20]
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	021b      	lsls	r3, r3, #8
 800cdfe:	b21a      	sxth	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3301      	adds	r3, #1
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	b21b      	sxth	r3, r3
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	b21b      	sxth	r3, r3
 800ce0c:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800ce0e:	897a      	ldrh	r2, [r7, #10]
 800ce10:	8afb      	ldrh	r3, [r7, #22]
 800ce12:	4013      	ands	r3, r2
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	88fa      	ldrh	r2, [r7, #6]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d108      	bne.n	800ce2e <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800ce1c:	8abb      	ldrh	r3, [r7, #20]
 800ce1e:	3303      	adds	r3, #3
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3302      	adds	r3, #2
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	e010      	b.n	800ce50 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3302      	adds	r3, #2
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800ce3a:	8abb      	ldrh	r3, [r7, #20]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	3303      	adds	r3, #3
 800ce42:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800ce44:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <rfalAnalogConfigSearch+0xd4>)
 800ce46:	889b      	ldrh	r3, [r3, #4]
 800ce48:	8aba      	ldrh	r2, [r7, #20]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d3d0      	bcc.n	800cdf0 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800ce4e:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800ce50:	4618      	mov	r0, r3
 800ce52:	371c      	adds	r7, #28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	20000744 	.word	0x20000744

0800ce60 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	6039      	str	r1, [r7, #0]
 800ce6a:	80fb      	strh	r3, [r7, #6]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800ce70:	88fb      	ldrh	r3, [r7, #6]
 800ce72:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800ce74:	2300      	movs	r3, #0
 800ce76:	81bb      	strh	r3, [r7, #12]
 800ce78:	e00d      	b.n	800ce96 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800ce7a:	89bb      	ldrh	r3, [r7, #12]
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	4413      	add	r3, r2
 800ce80:	781a      	ldrb	r2, [r3, #0]
 800ce82:	89fb      	ldrh	r3, [r7, #14]
 800ce84:	4611      	mov	r1, r2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f80e 	bl	800cea8 <rfalCrcUpdateCcitt>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800ce90:	89bb      	ldrh	r3, [r7, #12]
 800ce92:	3301      	adds	r3, #1
 800ce94:	81bb      	strh	r3, [r7, #12]
 800ce96:	89ba      	ldrh	r2, [r7, #12]
 800ce98:	88bb      	ldrh	r3, [r7, #4]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d3ed      	bcc.n	800ce7a <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800ce9e:	89fb      	ldrh	r3, [r7, #14]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	460a      	mov	r2, r1
 800ceb2:	80fb      	strh	r3, [r7, #6]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800ceb8:	88fb      	ldrh	r3, [r7, #6]
 800ceba:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800cebc:	797b      	ldrb	r3, [r7, #5]
 800cebe:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800cec0:	89fb      	ldrh	r3, [r7, #14]
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	7b7b      	ldrb	r3, [r7, #13]
 800cec6:	4053      	eors	r3, r2
 800cec8:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800ceca:	7b7b      	ldrb	r3, [r7, #13]
 800cecc:	011b      	lsls	r3, r3, #4
 800cece:	b25a      	sxtb	r2, r3
 800ced0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ced4:	4053      	eors	r3, r2
 800ced6:	b25b      	sxtb	r3, r3
 800ced8:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800ceda:	89fb      	ldrh	r3, [r7, #14]
 800cedc:	0a1b      	lsrs	r3, r3, #8
 800cede:	b29b      	uxth	r3, r3
 800cee0:	b21a      	sxth	r2, r3
 800cee2:	7b7b      	ldrb	r3, [r7, #13]
 800cee4:	021b      	lsls	r3, r3, #8
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	4053      	eors	r3, r2
 800ceea:	b21a      	sxth	r2, r3
 800ceec:	7b7b      	ldrb	r3, [r7, #13]
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	b21b      	sxth	r3, r3
 800cef2:	4053      	eors	r3, r2
 800cef4:	b21a      	sxth	r2, r3
 800cef6:	7b7b      	ldrb	r3, [r7, #13]
 800cef8:	091b      	lsrs	r3, r3, #4
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	b21b      	sxth	r3, r3
 800cefe:	4053      	eors	r3, r2
 800cf00:	b21b      	sxth	r3, r3
 800cf02:	81fb      	strh	r3, [r7, #14]

    return crc;
 800cf04:	89fb      	ldrh	r3, [r7, #14]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
	...

0800cf14 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800cf1e:	2208      	movs	r2, #8
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	480d      	ldr	r0, [pc, #52]	; (800cf58 <iso15693PhyConfigure+0x44>)
 800cf24:	f009 fa33 	bl	801638e <memcpy>
    
    if ( config->speedMode <= 3U)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d808      	bhi.n	800cf42 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	f1c3 0303 	rsb	r3, r3, #3
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <iso15693PhyConfigure+0x48>)
 800cf3e:	70da      	strb	r2, [r3, #3]
 800cf40:	e002      	b.n	800cf48 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800cf42:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <iso15693PhyConfigure+0x48>)
 800cf44:	2203      	movs	r2, #3
 800cf46:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	4a04      	ldr	r2, [pc, #16]	; (800cf5c <iso15693PhyConfigure+0x48>)
 800cf4c:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	2000074c 	.word	0x2000074c
 800cf5c:	20000058 	.word	0x20000058

0800cf60 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b08b      	sub	sp, #44	; 0x2c
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	4608      	mov	r0, r1
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	4603      	mov	r3, r0
 800cf70:	807b      	strh	r3, [r7, #2]
 800cf72:	460b      	mov	r3, r1
 800cf74:	707b      	strb	r3, [r7, #1]
 800cf76:	4613      	mov	r3, r2
 800cf78:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800cf82:	787b      	ldrb	r3, [r7, #1]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <iso15693VCDCode+0x2c>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	e000      	b.n	800cf8e <iso15693VCDCode+0x2e>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800cf90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf92:	2200      	movs	r2, #0
 800cf94:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800cf96:	4b94      	ldr	r3, [pc, #592]	; (800d1e8 <iso15693VCDCode+0x288>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d117      	bne.n	800cfce <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800cf9e:	2321      	movs	r3, #33	; 0x21
 800cfa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800cfa4:	2304      	movs	r3, #4
 800cfa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800cfaa:	4b90      	ldr	r3, [pc, #576]	; (800d1ec <iso15693VCDCode+0x28c>)
 800cfac:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800cfae:	887a      	ldrh	r2, [r7, #2]
 800cfb0:	7d7b      	ldrb	r3, [r7, #21]
 800cfb2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	3302      	adds	r3, #2
 800cfbc:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800cfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc0:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800cfc2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d823      	bhi.n	800d012 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e13a      	b.n	800d244 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800cfce:	2381      	movs	r3, #129	; 0x81
 800cfd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800cfd4:	2304      	movs	r3, #4
 800cfd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800cfda:	4b85      	ldr	r3, [pc, #532]	; (800d1f0 <iso15693VCDCode+0x290>)
 800cfdc:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800cfde:	887a      	ldrh	r2, [r7, #2]
 800cfe0:	7d7b      	ldrb	r3, [r7, #21]
 800cfe2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	019b      	lsls	r3, r3, #6
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	3302      	adds	r3, #2
 800cfec:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800cff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d005      	beq.n	800d006 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800cffa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cffe:	2b3f      	cmp	r3, #63	; 0x3f
 800d000:	d807      	bhi.n	800d012 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d002:	2301      	movs	r3, #1
 800d004:	e11e      	b.n	800d244 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d006:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d00a:	2b40      	cmp	r3, #64	; 0x40
 800d00c:	d801      	bhi.n	800d012 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d00e:	2301      	movs	r3, #1
 800d010:	e118      	b.n	800d244 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800d012:	887b      	ldrh	r3, [r7, #2]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01a:	2201      	movs	r2, #1
 800d01c:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d01e:	887b      	ldrh	r3, [r7, #2]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01b      	beq.n	800d05c <iso15693VCDCode+0xfc>
 800d024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d026:	881b      	ldrh	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d117      	bne.n	800d05c <iso15693VCDCode+0xfc>
 800d02c:	783b      	ldrb	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d014      	beq.n	800d05c <iso15693VCDCode+0xfc>
 800d032:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d036:	f083 0301 	eor.w	r3, r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00d      	beq.n	800d05c <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f043 0302 	orr.w	r3, r3, #2
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	f023 0301 	bic.w	r3, r3, #1
 800d056:	b2da      	uxtb	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d05e:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d060:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d064:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d066:	887b      	ldrh	r3, [r7, #2]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d03b      	beq.n	800d0e4 <iso15693VCDCode+0x184>
 800d06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d137      	bne.n	800d0e4 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d07a:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	b29a      	uxth	r2, r3
 800d084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d086:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d088:	8afb      	ldrh	r3, [r7, #22]
 800d08a:	3b01      	subs	r3, #1
 800d08c:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	3301      	adds	r3, #1
 800d092:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d094:	e026      	b.n	800d0e4 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4413      	add	r3, r2
 800d0a0:	7818      	ldrb	r0, [r3, #0]
 800d0a2:	f107 030e 	add.w	r3, r7, #14
 800d0a6:	8afa      	ldrh	r2, [r7, #22]
 800d0a8:	69fc      	ldr	r4, [r7, #28]
 800d0aa:	69b9      	ldr	r1, [r7, #24]
 800d0ac:	47a0      	blx	r4
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b4:	881a      	ldrh	r2, [r3, #0]
 800d0b6:	89fb      	ldrh	r3, [r7, #14]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0be:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d0c0:	89fb      	ldrh	r3, [r7, #14]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d0ca:	89fb      	ldrh	r3, [r7, #14]
 800d0cc:	8afa      	ldrh	r2, [r7, #22]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d0d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d105      	bne.n	800d0e4 <iso15693VCDCode+0x184>
            (*offset)++;
 800d0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e2:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e6:	881b      	ldrh	r3, [r3, #0]
 800d0e8:	887a      	ldrh	r2, [r7, #2]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d902      	bls.n	800d0f4 <iso15693VCDCode+0x194>
 800d0ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0d0      	beq.n	800d096 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d0f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d063      	beq.n	800d1c2 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800d0fa:	230d      	movs	r3, #13
 800d0fc:	e0a2      	b.n	800d244 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d0fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d100:	2b00      	cmp	r3, #0
 800d102:	d12b      	bne.n	800d15c <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d104:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <iso15693VCDCode+0x1b2>
 800d10c:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d110:	e001      	b.n	800d116 <iso15693VCDCode+0x1b6>
 800d112:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d116:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d002      	beq.n	800d124 <iso15693VCDCode+0x1c4>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3301      	adds	r3, #1
 800d122:	e000      	b.n	800d126 <iso15693VCDCode+0x1c6>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	d003      	beq.n	800d136 <iso15693VCDCode+0x1d6>
 800d12e:	887a      	ldrh	r2, [r7, #2]
 800d130:	3a01      	subs	r2, #1
 800d132:	b292      	uxth	r2, r2
 800d134:	e000      	b.n	800d138 <iso15693VCDCode+0x1d8>
 800d136:	887a      	ldrh	r2, [r7, #2]
 800d138:	4619      	mov	r1, r3
 800d13a:	f7ff fe91 	bl	800ce60 <rfalCrcCalculateCcitt>
 800d13e:	4603      	mov	r3, r0
 800d140:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d142:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d146:	f083 0301 	eor.w	r3, r3, #1
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <iso15693VCDCode+0x1f8>
 800d150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d152:	43db      	mvns	r3, r3
 800d154:	b29b      	uxth	r3, r3
 800d156:	e000      	b.n	800d15a <iso15693VCDCode+0x1fa>
 800d158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d15a:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d164:	0a1b      	lsrs	r3, r3, #8
 800d166:	b29b      	uxth	r3, r3
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	887b      	ldrh	r3, [r7, #2]
 800d174:	1ad3      	subs	r3, r2, r3
 800d176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d17a:	4413      	add	r3, r2
 800d17c:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d180:	f107 030c 	add.w	r3, r7, #12
 800d184:	8afa      	ldrh	r2, [r7, #22]
 800d186:	69fc      	ldr	r4, [r7, #28]
 800d188:	69b9      	ldr	r1, [r7, #24]
 800d18a:	47a0      	blx	r4
 800d18c:	4603      	mov	r3, r0
 800d18e:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d192:	881a      	ldrh	r2, [r3, #0]
 800d194:	89bb      	ldrh	r3, [r7, #12]
 800d196:	4413      	add	r3, r2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19c:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d19e:	89bb      	ldrh	r3, [r7, #12]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d1a8:	89bb      	ldrh	r3, [r7, #12]
 800d1aa:	8afa      	ldrh	r2, [r7, #22]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d1b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d105      	bne.n	800d1c2 <iso15693VCDCode+0x262>
            (*offset)++;
 800d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c0:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d1c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <iso15693VCDCode+0x27c>
 800d1c8:	787b      	ldrb	r3, [r7, #1]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d006      	beq.n	800d1dc <iso15693VCDCode+0x27c>
 800d1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	887b      	ldrh	r3, [r7, #2]
 800d1d6:	3302      	adds	r3, #2
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d390      	bcc.n	800d0fe <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d1dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800d1e2:	230d      	movs	r3, #13
 800d1e4:	e02e      	b.n	800d244 <iso15693VCDCode+0x2e4>
 800d1e6:	bf00      	nop
 800d1e8:	2000074c 	.word	0x2000074c
 800d1ec:	0800d489 	.word	0x0800d489
 800d1f0:	0800d531 	.word	0x0800d531
    }

    if ((!sendCrc && (*offset == length))
 800d1f4:	787b      	ldrb	r3, [r7, #1]
 800d1f6:	f083 0301 	eor.w	r3, r3, #1
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <iso15693VCDCode+0x2aa>
 800d200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	887a      	ldrh	r2, [r7, #2]
 800d206:	429a      	cmp	r2, r3
 800d208:	d009      	beq.n	800d21e <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800d20a:	787b      	ldrb	r3, [r7, #1]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d018      	beq.n	800d242 <iso15693VCDCode+0x2e2>
 800d210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d212:	881b      	ldrh	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	887b      	ldrh	r3, [r7, #2]
 800d218:	3302      	adds	r3, #2
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d111      	bne.n	800d242 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d224:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	3301      	adds	r3, #1
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d230:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d232:	8afb      	ldrh	r3, [r7, #22]
 800d234:	3b01      	subs	r3, #1
 800d236:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	3301      	adds	r3, #1
 800d23c:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d23e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d240:	e000      	b.n	800d244 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800d242:	230d      	movs	r3, #13
}
 800d244:	4618      	mov	r0, r3
 800d246:	372c      	adds	r7, #44	; 0x2c
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd90      	pop	{r4, r7, pc}

0800d24c <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	461a      	mov	r2, r3
 800d258:	460b      	mov	r3, r1
 800d25a:	817b      	strh	r3, [r7, #10]
 800d25c:	4613      	mov	r3, r2
 800d25e:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d260:	2300      	movs	r3, #0
 800d262:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	2200      	movs	r2, #0
 800d268:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	2200      	movs	r2, #0
 800d26e:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f003 031f 	and.w	r3, r3, #31
 800d278:	2b17      	cmp	r3, #23
 800d27a:	d001      	beq.n	800d280 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d27c:	2309      	movs	r3, #9
 800d27e:	e0ff      	b.n	800d480 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d280:	893b      	ldrh	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d286:	2300      	movs	r3, #0
 800d288:	e0fa      	b.n	800d480 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d28a:	2305      	movs	r3, #5
 800d28c:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d292:	893b      	ldrh	r3, [r7, #8]
 800d294:	461a      	mov	r2, r3
 800d296:	2100      	movs	r1, #0
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f009 f883 	bl	80163a4 <memset>

    if (inBufLen == 0U)
 800d29e:	897b      	ldrh	r3, [r7, #10]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f040 808e 	bne.w	800d3c2 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d2a6:	2315      	movs	r3, #21
 800d2a8:	e0ea      	b.n	800d480 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d2ae:	8bbb      	ldrh	r3, [r7, #28]
 800d2b0:	08db      	lsrs	r3, r3, #3
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	8bbb      	ldrh	r3, [r7, #28]
 800d2c0:	f003 0307 	and.w	r3, r3, #7
 800d2c4:	fa42 f303 	asr.w	r3, r2, r3
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d2d0:	8bbb      	ldrh	r3, [r7, #28]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	08db      	lsrs	r3, r3, #3
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4413      	add	r3, r2
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	8bbb      	ldrh	r3, [r7, #28]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	fa42 f303 	asr.w	r3, r2, r3
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	7e3b      	ldrb	r3, [r7, #24]
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d2fc:	7e3b      	ldrb	r3, [r7, #24]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d102      	bne.n	800d308 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d302:	8b7b      	ldrh	r3, [r7, #26]
 800d304:	3301      	adds	r3, #1
 800d306:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d308:	7e3b      	ldrb	r3, [r7, #24]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d119      	bne.n	800d342 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d30e:	8b7b      	ldrh	r3, [r7, #26]
 800d310:	08db      	lsrs	r3, r3, #3
 800d312:	b29b      	uxth	r3, r3
 800d314:	461a      	mov	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4413      	add	r3, r2
 800d31a:	7819      	ldrb	r1, [r3, #0]
 800d31c:	8b7b      	ldrh	r3, [r7, #26]
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	2201      	movs	r2, #1
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	8b7b      	ldrh	r3, [r7, #26]
 800d32c:	08db      	lsrs	r3, r3, #3
 800d32e:	b29b      	uxth	r3, r3
 800d330:	4618      	mov	r0, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4403      	add	r3, r0
 800d336:	430a      	orrs	r2, r1
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	701a      	strb	r2, [r3, #0]
            bp++;
 800d33c:	8b7b      	ldrh	r3, [r7, #26]
 800d33e:	3301      	adds	r3, #1
 800d340:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d342:	8b7b      	ldrh	r3, [r7, #26]
 800d344:	f003 0307 	and.w	r3, r3, #7
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d115      	bne.n	800d37a <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d34e:	8bbb      	ldrh	r3, [r7, #28]
 800d350:	08db      	lsrs	r3, r3, #3
 800d352:	b29b      	uxth	r3, r3
 800d354:	461a      	mov	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	4413      	add	r3, r2
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d360:	2ba0      	cmp	r3, #160	; 0xa0
 800d362:	d10a      	bne.n	800d37a <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d364:	8bbb      	ldrh	r3, [r7, #28]
 800d366:	08db      	lsrs	r3, r3, #3
 800d368:	b29b      	uxth	r3, r3
 800d36a:	3301      	adds	r3, #1
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b03      	cmp	r3, #3
 800d374:	d101      	bne.n	800d37a <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d376:	2301      	movs	r3, #1
 800d378:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d37a:	7e3b      	ldrb	r3, [r7, #24]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <iso15693VICCDecode+0x13a>
 800d380:	7e3b      	ldrb	r3, [r7, #24]
 800d382:	2b03      	cmp	r3, #3
 800d384:	d10f      	bne.n	800d3a6 <iso15693VICCDecode+0x15a>
 800d386:	7e7b      	ldrb	r3, [r7, #25]
 800d388:	f083 0301 	eor.w	r3, r3, #1
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d009      	beq.n	800d3a6 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d392:	8b7a      	ldrh	r2, [r7, #26]
 800d394:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d396:	429a      	cmp	r2, r3
 800d398:	d302      	bcc.n	800d3a0 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d39a:	231d      	movs	r3, #29
 800d39c:	83fb      	strh	r3, [r7, #30]
 800d39e:	e002      	b.n	800d3a6 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d3a0:	8b7b      	ldrh	r3, [r7, #26]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d3a6:	8b7a      	ldrh	r2, [r7, #26]
 800d3a8:	893b      	ldrh	r3, [r7, #8]
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d20f      	bcs.n	800d3d0 <iso15693VICCDecode+0x184>
 800d3b0:	8bfb      	ldrh	r3, [r7, #30]
 800d3b2:	2b1d      	cmp	r3, #29
 800d3b4:	d00c      	beq.n	800d3d0 <iso15693VICCDecode+0x184>
 800d3b6:	7e7b      	ldrb	r3, [r7, #25]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d109      	bne.n	800d3d0 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d3bc:	8bbb      	ldrh	r3, [r7, #28]
 800d3be:	3302      	adds	r3, #2
 800d3c0:	83bb      	strh	r3, [r7, #28]
 800d3c2:	8bba      	ldrh	r2, [r7, #28]
 800d3c4:	897b      	ldrh	r3, [r7, #10]
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	3b02      	subs	r3, #2
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	f4ff af6d 	bcc.w	800d2aa <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d3d0:	8b7b      	ldrh	r3, [r7, #26]
 800d3d2:	08db      	lsrs	r3, r3, #3
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	8b7a      	ldrh	r2, [r7, #26]
 800d3de:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d3e0:	8bfb      	ldrh	r3, [r7, #30]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <iso15693VICCDecode+0x19e>
    {
        return err;
 800d3e6:	8bfb      	ldrh	r3, [r7, #30]
 800d3e8:	e04a      	b.n	800d480 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d3ea:	8b7b      	ldrh	r3, [r7, #26]
 800d3ec:	f003 0307 	and.w	r3, r3, #7
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d001      	beq.n	800d3fa <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d3f6:	2315      	movs	r3, #21
 800d3f8:	e042      	b.n	800d480 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d93b      	bls.n	800d47a <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d402:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <iso15693VICCDecode+0x1c4>
 800d40a:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d40e:	e001      	b.n	800d414 <iso15693VICCDecode+0x1c8>
 800d410:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	3b02      	subs	r3, #2
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	461a      	mov	r2, r3
 800d41e:	6879      	ldr	r1, [r7, #4]
 800d420:	f7ff fd1e 	bl	800ce60 <rfalCrcCalculateCcitt>
 800d424:	4603      	mov	r3, r0
 800d426:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d428:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d42c:	f083 0301 	eor.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <iso15693VICCDecode+0x1f2>
 800d436:	8afb      	ldrh	r3, [r7, #22]
 800d438:	43db      	mvns	r3, r3
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	e000      	b.n	800d440 <iso15693VICCDecode+0x1f4>
 800d43e:	8afb      	ldrh	r3, [r7, #22]
 800d440:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d442:	8afb      	ldrh	r3, [r7, #22]
 800d444:	b2db      	uxtb	r3, r3
 800d446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d448:	8812      	ldrh	r2, [r2, #0]
 800d44a:	3a02      	subs	r2, #2
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	440a      	add	r2, r1
 800d450:	7812      	ldrb	r2, [r2, #0]
 800d452:	4293      	cmp	r3, r2
 800d454:	d10e      	bne.n	800d474 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d456:	8afb      	ldrh	r3, [r7, #22]
 800d458:	0a1b      	lsrs	r3, r3, #8
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d460:	8812      	ldrh	r2, [r2, #0]
 800d462:	3a01      	subs	r2, #1
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	440a      	add	r2, r1
 800d468:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d102      	bne.n	800d474 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d46e:	2300      	movs	r3, #0
 800d470:	83fb      	strh	r3, [r7, #30]
 800d472:	e004      	b.n	800d47e <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d474:	2315      	movs	r3, #21
 800d476:	83fb      	strh	r3, [r7, #30]
 800d478:	e001      	b.n	800d47e <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d47a:	2315      	movs	r3, #21
 800d47c:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d47e:	8bfb      	ldrh	r3, [r7, #30]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d488:	b480      	push	{r7}
 800d48a:	b089      	sub	sp, #36	; 0x24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607b      	str	r3, [r7, #4]
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]
 800d496:	4613      	mov	r3, r2
 800d498:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d49a:	2300      	movs	r3, #0
 800d49c:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d4a8:	89bb      	ldrh	r3, [r7, #12]
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d801      	bhi.n	800d4b2 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e038      	b.n	800d524 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	83bb      	strh	r3, [r7, #28]
 800d4ba:	e02f      	b.n	800d51c <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d4bc:	7ffb      	ldrb	r3, [r7, #31]
 800d4be:	f003 0303 	and.w	r3, r3, #3
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d81a      	bhi.n	800d4fc <iso15693PhyVCDCode1Of4+0x74>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <iso15693PhyVCDCode1Of4+0x44>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d4dd 	.word	0x0800d4dd
 800d4d0:	0800d4e5 	.word	0x0800d4e5
 800d4d4:	0800d4ed 	.word	0x0800d4ed
 800d4d8:	0800d4f5 	.word	0x0800d4f5
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	701a      	strb	r2, [r3, #0]
                break;
 800d4e2:	e00c      	b.n	800d4fe <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	2208      	movs	r2, #8
 800d4e8:	701a      	strb	r2, [r3, #0]
                break;
 800d4ea:	e008      	b.n	800d4fe <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	701a      	strb	r2, [r3, #0]
                break;
 800d4f2:	e004      	b.n	800d4fe <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	2280      	movs	r2, #128	; 0x80
 800d4f8:	701a      	strb	r2, [r3, #0]
                break;
 800d4fa:	e000      	b.n	800d4fe <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d4fc:	bf00      	nop
        }
        outbuf++;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	3301      	adds	r3, #1
 800d502:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	3301      	adds	r3, #1
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d510:	7ffb      	ldrb	r3, [r7, #31]
 800d512:	089b      	lsrs	r3, r3, #2
 800d514:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d516:	8bbb      	ldrh	r3, [r7, #28]
 800d518:	3301      	adds	r3, #1
 800d51a:	83bb      	strh	r3, [r7, #28]
 800d51c:	8bbb      	ldrh	r3, [r7, #28]
 800d51e:	2b03      	cmp	r3, #3
 800d520:	d9cc      	bls.n	800d4bc <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d522:	8afb      	ldrh	r3, [r7, #22]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3724      	adds	r7, #36	; 0x24
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d530:	b480      	push	{r7}
 800d532:	b089      	sub	sp, #36	; 0x24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60b9      	str	r1, [r7, #8]
 800d538:	607b      	str	r3, [r7, #4]
 800d53a:	4603      	mov	r3, r0
 800d53c:	73fb      	strb	r3, [r7, #15]
 800d53e:	4613      	mov	r3, r2
 800d540:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d542:	2300      	movs	r3, #0
 800d544:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d550:	89bb      	ldrh	r3, [r7, #12]
 800d552:	2b3f      	cmp	r3, #63	; 0x3f
 800d554:	d801      	bhi.n	800d55a <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d556:	2301      	movs	r3, #1
 800d558:	e039      	b.n	800d5ce <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d55e:	2300      	movs	r3, #0
 800d560:	83bb      	strh	r3, [r7, #28]
 800d562:	e030      	b.n	800d5c6 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d564:	7ffb      	ldrb	r3, [r7, #31]
 800d566:	2b03      	cmp	r3, #3
 800d568:	d81a      	bhi.n	800d5a0 <iso15693PhyVCDCode1Of256+0x70>
 800d56a:	a201      	add	r2, pc, #4	; (adr r2, 800d570 <iso15693PhyVCDCode1Of256+0x40>)
 800d56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d570:	0800d581 	.word	0x0800d581
 800d574:	0800d589 	.word	0x0800d589
 800d578:	0800d591 	.word	0x0800d591
 800d57c:	0800d599 	.word	0x0800d599
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	2202      	movs	r2, #2
 800d584:	701a      	strb	r2, [r3, #0]
                break;
 800d586:	e00f      	b.n	800d5a8 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2208      	movs	r2, #8
 800d58c:	701a      	strb	r2, [r3, #0]
                break;
 800d58e:	e00b      	b.n	800d5a8 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2220      	movs	r2, #32
 800d594:	701a      	strb	r2, [r3, #0]
                break;
 800d596:	e007      	b.n	800d5a8 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2280      	movs	r2, #128	; 0x80
 800d59c:	701a      	strb	r2, [r3, #0]
                break;
 800d59e:	e003      	b.n	800d5a8 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
                break;               
 800d5a6:	bf00      	nop
        }
        outbuf++;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d5ba:	7ffb      	ldrb	r3, [r7, #31]
 800d5bc:	3b04      	subs	r3, #4
 800d5be:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d5c0:	8bbb      	ldrh	r3, [r7, #28]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	83bb      	strh	r3, [r7, #28]
 800d5c6:	8bbb      	ldrh	r3, [r7, #28]
 800d5c8:	2b3f      	cmp	r3, #63	; 0x3f
 800d5ca:	d9cb      	bls.n	800d564 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d5cc:	8afb      	ldrh	r3, [r7, #22]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3724      	adds	r7, #36	; 0x24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop

0800d5dc <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800d5e2:	f002 f85b 	bl	800f69c <st25r3916Initialize>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	80fb      	strh	r3, [r7, #6]
 800d5ea:	88fb      	ldrh	r3, [r7, #6]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <rfalInitialize+0x18>
 800d5f0:	88fb      	ldrh	r3, [r7, #6]
 800d5f2:	e043      	b.n	800d67c <rfalInitialize+0xa0>
    
    st25r3916ClearInterrupts();
 800d5f4:	f003 f822 	bl	801063c <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800d5f8:	2140      	movs	r1, #64	; 0x40
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f002 fd37 	bl	801006e <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d600:	2000      	movs	r0, #0
 800d602:	f7ff fb1f 	bl	800cc44 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800d606:	2203      	movs	r2, #3
 800d608:	2103      	movs	r1, #3
 800d60a:	2002      	movs	r0, #2
 800d60c:	f002 fdb8 	bl	8010180 <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d610:	f001 fea8 	bl	800f364 <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d614:	4b1b      	ldr	r3, [pc, #108]	; (800d684 <rfalInitialize+0xa8>)
 800d616:	2201      	movs	r2, #1
 800d618:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d61a:	4b1a      	ldr	r3, [pc, #104]	; (800d684 <rfalInitialize+0xa8>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d620:	4b18      	ldr	r3, [pc, #96]	; (800d684 <rfalInitialize+0xa8>)
 800d622:	2200      	movs	r2, #0
 800d624:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d626:	4b17      	ldr	r3, [pc, #92]	; (800d684 <rfalInitialize+0xa8>)
 800d628:	2200      	movs	r2, #0
 800d62a:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d62c:	4b15      	ldr	r3, [pc, #84]	; (800d684 <rfalInitialize+0xa8>)
 800d62e:	2200      	movs	r2, #0
 800d630:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d632:	4b14      	ldr	r3, [pc, #80]	; (800d684 <rfalInitialize+0xa8>)
 800d634:	2200      	movs	r2, #0
 800d636:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d638:	4b12      	ldr	r3, [pc, #72]	; (800d684 <rfalInitialize+0xa8>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d63e:	4b11      	ldr	r3, [pc, #68]	; (800d684 <rfalInitialize+0xa8>)
 800d640:	2200      	movs	r2, #0
 800d642:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d644:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <rfalInitialize+0xa8>)
 800d646:	2200      	movs	r2, #0
 800d648:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d64a:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <rfalInitialize+0xa8>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d650:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <rfalInitialize+0xa8>)
 800d652:	2200      	movs	r2, #0
 800d654:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d656:	4b0b      	ldr	r3, [pc, #44]	; (800d684 <rfalInitialize+0xa8>)
 800d658:	2200      	movs	r2, #0
 800d65a:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <rfalInitialize+0xa8>)
 800d65e:	2200      	movs	r2, #0
 800d660:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d662:	4b08      	ldr	r3, [pc, #32]	; (800d684 <rfalInitialize+0xa8>)
 800d664:	2200      	movs	r2, #0
 800d666:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800d668:	4b06      	ldr	r3, [pc, #24]	; (800d684 <rfalInitialize+0xa8>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <rfalInitialize+0xa8>)
 800d670:	2200      	movs	r2, #0
 800d672:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d676:	f000 f807 	bl	800d688 <rfalCalibrate>
    
    return ERR_NONE;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20000754 	.word	0x20000754

0800d688 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d68e:	4b0b      	ldr	r3, [pc, #44]	; (800d6bc <rfalCalibrate+0x34>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d696:	2321      	movs	r3, #33	; 0x21
 800d698:	e00c      	b.n	800d6b4 <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d69a:	2200      	movs	r2, #0
 800d69c:	2180      	movs	r1, #128	; 0x80
 800d69e:	202c      	movs	r0, #44	; 0x2c
 800d6a0:	f002 fdf2 	bl	8010288 <st25r3916CheckReg>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800d6aa:	1dbb      	adds	r3, r7, #6
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f002 f899 	bl	800f7e4 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20000754 	.word	0x20000754

0800d6c0 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	71fb      	strb	r3, [r7, #7]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	71bb      	strb	r3, [r7, #6]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d6d2:	4b99      	ldr	r3, [pc, #612]	; (800d938 <rfalSetMode+0x278>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d6da:	2321      	movs	r3, #33	; 0x21
 800d6dc:	e127      	b.n	800d92e <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d6de:	79bb      	ldrb	r3, [r7, #6]
 800d6e0:	2bff      	cmp	r3, #255	; 0xff
 800d6e2:	d002      	beq.n	800d6ea <rfalSetMode+0x2a>
 800d6e4:	797b      	ldrb	r3, [r7, #5]
 800d6e6:	2bff      	cmp	r3, #255	; 0xff
 800d6e8:	d101      	bne.n	800d6ee <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d6ea:	2307      	movs	r3, #7
 800d6ec:	e11f      	b.n	800d92e <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800d6ee:	79fb      	ldrb	r3, [r7, #7]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	2b0c      	cmp	r3, #12
 800d6f4:	f200 8107 	bhi.w	800d906 <rfalSetMode+0x246>
 800d6f8:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <rfalSetMode+0x40>)
 800d6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fe:	bf00      	nop
 800d700:	0800d735 	.word	0x0800d735
 800d704:	0800d757 	.word	0x0800d757
 800d708:	0800d779 	.word	0x0800d779
 800d70c:	0800d7af 	.word	0x0800d7af
 800d710:	0800d7e5 	.word	0x0800d7e5
 800d714:	0800d81b 	.word	0x0800d81b
 800d718:	0800d83d 	.word	0x0800d83d
 800d71c:	0800d83d 	.word	0x0800d83d
 800d720:	0800d857 	.word	0x0800d857
 800d724:	0800d8bf 	.word	0x0800d8bf
 800d728:	0800d903 	.word	0x0800d903
 800d72c:	0800d8e1 	.word	0x0800d8e1
 800d730:	0800d88b 	.word	0x0800d88b
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d734:	2104      	movs	r1, #4
 800d736:	2002      	movs	r0, #2
 800d738:	f002 fcbe 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800d73c:	2108      	movs	r1, #8
 800d73e:	2003      	movs	r0, #3
 800d740:	f002 fbd0 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d744:	f240 1001 	movw	r0, #257	; 0x101
 800d748:	f7ff fa7c 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d74c:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d750:	f7ff fa78 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d754:	e0d9      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d756:	2104      	movs	r1, #4
 800d758:	2002      	movs	r0, #2
 800d75a:	f002 fcad 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800d75e:	2120      	movs	r1, #32
 800d760:	2003      	movs	r0, #3
 800d762:	f002 fbbf 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d766:	f240 1001 	movw	r0, #257	; 0x101
 800d76a:	f7ff fa6b 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d76e:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d772:	f7ff fa67 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d776:	e0c8      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d778:	2104      	movs	r1, #4
 800d77a:	2002      	movs	r0, #2
 800d77c:	f002 fc9c 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d780:	2110      	movs	r1, #16
 800d782:	2003      	movs	r0, #3
 800d784:	f002 fbae 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d788:	2200      	movs	r2, #0
 800d78a:	21fc      	movs	r1, #252	; 0xfc
 800d78c:	2006      	movs	r0, #6
 800d78e:	f002 fcf7 	bl	8010180 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d792:	2200      	movs	r2, #0
 800d794:	21f0      	movs	r1, #240	; 0xf0
 800d796:	2007      	movs	r0, #7
 800d798:	f002 fcf2 	bl	8010180 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d79c:	f240 2001 	movw	r0, #513	; 0x201
 800d7a0:	f7ff fa50 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d7a4:	f240 2002 	movw	r0, #514	; 0x202
 800d7a8:	f7ff fa4c 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d7ac:	e0ad      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d7ae:	2104      	movs	r1, #4
 800d7b0:	2002      	movs	r0, #2
 800d7b2:	f002 fc81 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d7b6:	2110      	movs	r1, #16
 800d7b8:	2003      	movs	r0, #3
 800d7ba:	f002 fb93 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d7be:	2200      	movs	r2, #0
 800d7c0:	21fc      	movs	r1, #252	; 0xfc
 800d7c2:	2006      	movs	r0, #6
 800d7c4:	f002 fcdc 	bl	8010180 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d7c8:	2220      	movs	r2, #32
 800d7ca:	21f0      	movs	r1, #240	; 0xf0
 800d7cc:	2007      	movs	r0, #7
 800d7ce:	f002 fcd7 	bl	8010180 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d7d2:	f240 2001 	movw	r0, #513	; 0x201
 800d7d6:	f7ff fa35 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d7da:	f240 2002 	movw	r0, #514	; 0x202
 800d7de:	f7ff fa31 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d7e2:	e092      	b.n	800d90a <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d7e4:	2104      	movs	r1, #4
 800d7e6:	2002      	movs	r0, #2
 800d7e8:	f002 fc66 	bl	80100b8 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d7ec:	2110      	movs	r1, #16
 800d7ee:	2003      	movs	r0, #3
 800d7f0:	f002 fb78 	bl	800fee4 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	21fc      	movs	r1, #252	; 0xfc
 800d7f8:	2006      	movs	r0, #6
 800d7fa:	f002 fcc1 	bl	8010180 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d7fe:	2230      	movs	r2, #48	; 0x30
 800d800:	21f0      	movs	r1, #240	; 0xf0
 800d802:	2007      	movs	r0, #7
 800d804:	f002 fcbc 	bl	8010180 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d808:	f240 2001 	movw	r0, #513	; 0x201
 800d80c:	f7ff fa1a 	bl	800cc44 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d810:	f240 2002 	movw	r0, #514	; 0x202
 800d814:	f7ff fa16 	bl	800cc44 <rfalSetAnalogConfig>
                break;
 800d818:	e077      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d81a:	2104      	movs	r1, #4
 800d81c:	2002      	movs	r0, #2
 800d81e:	f002 fc4b 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800d822:	2118      	movs	r1, #24
 800d824:	2003      	movs	r0, #3
 800d826:	f002 fb5d 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d82a:	f240 4001 	movw	r0, #1025	; 0x401
 800d82e:	f7ff fa09 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d832:	f240 4002 	movw	r0, #1026	; 0x402
 800d836:	f7ff fa05 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d83a:	e066      	b.n	800d90a <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d83c:	2104      	movs	r1, #4
 800d83e:	2002      	movs	r0, #2
 800d840:	f002 fc3a 	bl	80100b8 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d844:	f241 0001 	movw	r0, #4097	; 0x1001
 800d848:	f7ff f9fc 	bl	800cc44 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d84c:	f241 0002 	movw	r0, #4098	; 0x1002
 800d850:	f7ff f9f8 	bl	800cc44 <rfalSetAnalogConfig>
                break;
 800d854:	e059      	b.n	800d90a <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d856:	2102      	movs	r1, #2
 800d858:	2003      	movs	r0, #3
 800d85a:	f002 fb43 	bl	800fee4 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d85e:	2200      	movs	r2, #0
 800d860:	2104      	movs	r1, #4
 800d862:	2012      	movs	r0, #18
 800d864:	f002 fc8c 	bl	8010180 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d868:	2160      	movs	r1, #96	; 0x60
 800d86a:	2040      	movs	r0, #64	; 0x40
 800d86c:	f002 f931 	bl	800fad2 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d870:	2180      	movs	r1, #128	; 0x80
 800d872:	2015      	movs	r0, #21
 800d874:	f002 fb36 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d878:	f640 0001 	movw	r0, #2049	; 0x801
 800d87c:	f7ff f9e2 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d880:	f640 0002 	movw	r0, #2050	; 0x802
 800d884:	f7ff f9de 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d888:	e03f      	b.n	800d90a <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d88a:	21ba      	movs	r1, #186	; 0xba
 800d88c:	2003      	movs	r0, #3
 800d88e:	f002 fb29 	bl	800fee4 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d892:	2200      	movs	r2, #0
 800d894:	2104      	movs	r1, #4
 800d896:	2012      	movs	r0, #18
 800d898:	f002 fc72 	bl	8010180 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d89c:	2160      	movs	r1, #96	; 0x60
 800d89e:	2040      	movs	r0, #64	; 0x40
 800d8a0:	f002 f917 	bl	800fad2 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d8a4:	2180      	movs	r1, #128	; 0x80
 800d8a6:	2015      	movs	r0, #21
 800d8a8:	f002 fb1c 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d8ac:	f648 0001 	movw	r0, #34817	; 0x8801
 800d8b0:	f7ff f9c8 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d8b4:	f648 0002 	movw	r0, #34818	; 0x8802
 800d8b8:	f7ff f9c4 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d8bc:	e025      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d8be:	2104      	movs	r1, #4
 800d8c0:	2002      	movs	r0, #2
 800d8c2:	f002 fbf9 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800d8c6:	2188      	movs	r1, #136	; 0x88
 800d8c8:	2003      	movs	r0, #3
 800d8ca:	f002 fb0b 	bl	800fee4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d8ce:	f248 1001 	movw	r0, #33025	; 0x8101
 800d8d2:	f7ff f9b7 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d8d6:	f248 1002 	movw	r0, #33026	; 0x8102
 800d8da:	f7ff f9b3 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d8de:	e014      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d8e0:	2104      	movs	r1, #4
 800d8e2:	2002      	movs	r0, #2
 800d8e4:	f002 fbe8 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800d8e8:	21a0      	movs	r1, #160	; 0xa0
 800d8ea:	2003      	movs	r0, #3
 800d8ec:	f002 fafa 	bl	800fee4 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d8f0:	f248 4001 	movw	r0, #33793	; 0x8401
 800d8f4:	f7ff f9a6 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d8f8:	f248 4002 	movw	r0, #33794	; 0x8402
 800d8fc:	f7ff f9a2 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800d900:	e003      	b.n	800d90a <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800d902:	2318      	movs	r3, #24
 800d904:	e013      	b.n	800d92e <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800d906:	230f      	movs	r3, #15
 800d908:	e011      	b.n	800d92e <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800d90a:	4b0b      	ldr	r3, [pc, #44]	; (800d938 <rfalSetMode+0x278>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b02      	cmp	r3, #2
 800d910:	bf38      	it	cc
 800d912:	2302      	movcc	r3, #2
 800d914:	b2da      	uxtb	r2, r3
 800d916:	4b08      	ldr	r3, [pc, #32]	; (800d938 <rfalSetMode+0x278>)
 800d918:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800d91a:	4a07      	ldr	r2, [pc, #28]	; (800d938 <rfalSetMode+0x278>)
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800d920:	797a      	ldrb	r2, [r7, #5]
 800d922:	79bb      	ldrb	r3, [r7, #6]
 800d924:	4611      	mov	r1, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f000 f808 	bl	800d93c <rfalSetBitRate>
 800d92c:	4603      	mov	r3, r0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20000754 	.word	0x20000754

0800d93c <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	460a      	mov	r2, r1
 800d946:	71fb      	strb	r3, [r7, #7]
 800d948:	4613      	mov	r3, r2
 800d94a:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d94c:	4ba0      	ldr	r3, [pc, #640]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800d954:	2321      	movs	r3, #33	; 0x21
 800d956:	e2d2      	b.n	800defe <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	2bff      	cmp	r3, #255	; 0xff
 800d95c:	d102      	bne.n	800d964 <rfalSetBitRate+0x28>
 800d95e:	4b9c      	ldr	r3, [pc, #624]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d960:	789b      	ldrb	r3, [r3, #2]
 800d962:	e000      	b.n	800d966 <rfalSetBitRate+0x2a>
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	4a9a      	ldr	r2, [pc, #616]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d968:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800d96a:	79bb      	ldrb	r3, [r7, #6]
 800d96c:	2bff      	cmp	r3, #255	; 0xff
 800d96e:	d102      	bne.n	800d976 <rfalSetBitRate+0x3a>
 800d970:	4b97      	ldr	r3, [pc, #604]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d972:	78db      	ldrb	r3, [r3, #3]
 800d974:	e000      	b.n	800d978 <rfalSetBitRate+0x3c>
 800d976:	79bb      	ldrb	r3, [r7, #6]
 800d978:	4a95      	ldr	r2, [pc, #596]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d97a:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800d97c:	4b94      	ldr	r3, [pc, #592]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d97e:	785b      	ldrb	r3, [r3, #1]
 800d980:	2b07      	cmp	r3, #7
 800d982:	d012      	beq.n	800d9aa <rfalSetBitRate+0x6e>
 800d984:	4b92      	ldr	r3, [pc, #584]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d986:	785b      	ldrb	r3, [r3, #1]
 800d988:	2b08      	cmp	r3, #8
 800d98a:	d00e      	beq.n	800d9aa <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800d98c:	4b90      	ldr	r3, [pc, #576]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d98e:	789a      	ldrb	r2, [r3, #2]
 800d990:	4b8f      	ldr	r3, [pc, #572]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d992:	78db      	ldrb	r3, [r3, #3]
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f001 ff6f 	bl	800f87a <st25r3916SetBitrate>
 800d99c:	4603      	mov	r3, r0
 800d99e:	83fb      	strh	r3, [r7, #30]
 800d9a0:	8bfb      	ldrh	r3, [r7, #30]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <rfalSetBitRate+0x6e>
 800d9a6:	8bfb      	ldrh	r3, [r7, #30]
 800d9a8:	e2a9      	b.n	800defe <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800d9aa:	4b89      	ldr	r3, [pc, #548]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	2b0d      	cmp	r3, #13
 800d9b0:	f200 82a2 	bhi.w	800def8 <rfalSetBitRate+0x5bc>
 800d9b4:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <rfalSetBitRate+0x80>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800def5 	.word	0x0800def5
 800d9c0:	0800d9f5 	.word	0x0800d9f5
 800d9c4:	0800d9f5 	.word	0x0800d9f5
 800d9c8:	0800da7d 	.word	0x0800da7d
 800d9cc:	0800da7d 	.word	0x0800da7d
 800d9d0:	0800da7d 	.word	0x0800da7d
 800d9d4:	0800db0d 	.word	0x0800db0d
 800d9d8:	0800db9d 	.word	0x0800db9d
 800d9dc:	0800db9d 	.word	0x0800db9d
 800d9e0:	0800dcd1 	.word	0x0800dcd1
 800d9e4:	0800dde1 	.word	0x0800dde1
 800d9e8:	0800def5 	.word	0x0800def5
 800d9ec:	0800de75 	.word	0x0800de75
 800d9f0:	0800dd61 	.word	0x0800dd61
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d9f4:	2008      	movs	r0, #8
 800d9f6:	f7ff f925 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d9fa:	4b75      	ldr	r3, [pc, #468]	; (800dbd0 <rfalSetBitRate+0x294>)
 800d9fc:	789b      	ldrb	r3, [r3, #2]
 800d9fe:	2bea      	cmp	r3, #234	; 0xea
 800da00:	d90c      	bls.n	800da1c <rfalSetBitRate+0xe0>
 800da02:	4b73      	ldr	r3, [pc, #460]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da04:	789b      	ldrb	r3, [r3, #2]
 800da06:	b29b      	uxth	r3, r3
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	b29b      	uxth	r3, r3
 800da10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da14:	f043 0301 	orr.w	r3, r3, #1
 800da18:	b29b      	uxth	r3, r3
 800da1a:	e00d      	b.n	800da38 <rfalSetBitRate+0xfc>
 800da1c:	4b6c      	ldr	r3, [pc, #432]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da1e:	789b      	ldrb	r3, [r3, #2]
 800da20:	b29b      	uxth	r3, r3
 800da22:	3301      	adds	r3, #1
 800da24:	b29b      	uxth	r3, r3
 800da26:	011b      	lsls	r3, r3, #4
 800da28:	b29b      	uxth	r3, r3
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da32:	f043 0301 	orr.w	r3, r3, #1
 800da36:	b29b      	uxth	r3, r3
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff f903 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800da3e:	4b64      	ldr	r3, [pc, #400]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da40:	78db      	ldrb	r3, [r3, #3]
 800da42:	2bea      	cmp	r3, #234	; 0xea
 800da44:	d90a      	bls.n	800da5c <rfalSetBitRate+0x120>
 800da46:	4b62      	ldr	r3, [pc, #392]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da48:	78db      	ldrb	r3, [r3, #3]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	011b      	lsls	r3, r3, #4
 800da4e:	b29b      	uxth	r3, r3
 800da50:	b2db      	uxtb	r3, r3
 800da52:	b29b      	uxth	r3, r3
 800da54:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800da58:	b29b      	uxth	r3, r3
 800da5a:	e00b      	b.n	800da74 <rfalSetBitRate+0x138>
 800da5c:	4b5c      	ldr	r3, [pc, #368]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da5e:	78db      	ldrb	r3, [r3, #3]
 800da60:	b29b      	uxth	r3, r3
 800da62:	3301      	adds	r3, #1
 800da64:	b29b      	uxth	r3, r3
 800da66:	011b      	lsls	r3, r3, #4
 800da68:	b29b      	uxth	r3, r3
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800da72:	b29b      	uxth	r3, r3
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff f8e5 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800da7a:	e23f      	b.n	800defc <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800da7c:	2008      	movs	r0, #8
 800da7e:	f7ff f8e1 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800da82:	4b53      	ldr	r3, [pc, #332]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da84:	789b      	ldrb	r3, [r3, #2]
 800da86:	2bea      	cmp	r3, #234	; 0xea
 800da88:	d90c      	bls.n	800daa4 <rfalSetBitRate+0x168>
 800da8a:	4b51      	ldr	r3, [pc, #324]	; (800dbd0 <rfalSetBitRate+0x294>)
 800da8c:	789b      	ldrb	r3, [r3, #2]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	011b      	lsls	r3, r3, #4
 800da92:	b29b      	uxth	r3, r3
 800da94:	b2db      	uxtb	r3, r3
 800da96:	b29b      	uxth	r3, r3
 800da98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da9c:	f043 0301 	orr.w	r3, r3, #1
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	e00d      	b.n	800dac0 <rfalSetBitRate+0x184>
 800daa4:	4b4a      	ldr	r3, [pc, #296]	; (800dbd0 <rfalSetBitRate+0x294>)
 800daa6:	789b      	ldrb	r3, [r3, #2]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	3301      	adds	r3, #1
 800daac:	b29b      	uxth	r3, r3
 800daae:	011b      	lsls	r3, r3, #4
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800daba:	f043 0301 	orr.w	r3, r3, #1
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff f8bf 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dac6:	4b42      	ldr	r3, [pc, #264]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dac8:	78db      	ldrb	r3, [r3, #3]
 800daca:	2bea      	cmp	r3, #234	; 0xea
 800dacc:	d90c      	bls.n	800dae8 <rfalSetBitRate+0x1ac>
 800dace:	4b40      	ldr	r3, [pc, #256]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dad0:	78db      	ldrb	r3, [r3, #3]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	011b      	lsls	r3, r3, #4
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dae0:	f043 0302 	orr.w	r3, r3, #2
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	e00d      	b.n	800db04 <rfalSetBitRate+0x1c8>
 800dae8:	4b39      	ldr	r3, [pc, #228]	; (800dbd0 <rfalSetBitRate+0x294>)
 800daea:	78db      	ldrb	r3, [r3, #3]
 800daec:	b29b      	uxth	r3, r3
 800daee:	3301      	adds	r3, #1
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	011b      	lsls	r3, r3, #4
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dafe:	f043 0302 	orr.w	r3, r3, #2
 800db02:	b29b      	uxth	r3, r3
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff f89d 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800db0a:	e1f7      	b.n	800defc <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800db0c:	2008      	movs	r0, #8
 800db0e:	f7ff f899 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800db12:	4b2f      	ldr	r3, [pc, #188]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db14:	789b      	ldrb	r3, [r3, #2]
 800db16:	2bea      	cmp	r3, #234	; 0xea
 800db18:	d90c      	bls.n	800db34 <rfalSetBitRate+0x1f8>
 800db1a:	4b2d      	ldr	r3, [pc, #180]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db1c:	789b      	ldrb	r3, [r3, #2]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	011b      	lsls	r3, r3, #4
 800db22:	b29b      	uxth	r3, r3
 800db24:	b2db      	uxtb	r3, r3
 800db26:	b29b      	uxth	r3, r3
 800db28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db2c:	f043 0301 	orr.w	r3, r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	e00d      	b.n	800db50 <rfalSetBitRate+0x214>
 800db34:	4b26      	ldr	r3, [pc, #152]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db36:	789b      	ldrb	r3, [r3, #2]
 800db38:	b29b      	uxth	r3, r3
 800db3a:	3301      	adds	r3, #1
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	011b      	lsls	r3, r3, #4
 800db40:	b29b      	uxth	r3, r3
 800db42:	b2db      	uxtb	r3, r3
 800db44:	b29b      	uxth	r3, r3
 800db46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	b29b      	uxth	r3, r3
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff f877 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800db56:	4b1e      	ldr	r3, [pc, #120]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db58:	78db      	ldrb	r3, [r3, #3]
 800db5a:	2bea      	cmp	r3, #234	; 0xea
 800db5c:	d90c      	bls.n	800db78 <rfalSetBitRate+0x23c>
 800db5e:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db60:	78db      	ldrb	r3, [r3, #3]
 800db62:	b29b      	uxth	r3, r3
 800db64:	011b      	lsls	r3, r3, #4
 800db66:	b29b      	uxth	r3, r3
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db70:	f043 0302 	orr.w	r3, r3, #2
 800db74:	b29b      	uxth	r3, r3
 800db76:	e00d      	b.n	800db94 <rfalSetBitRate+0x258>
 800db78:	4b15      	ldr	r3, [pc, #84]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db7a:	78db      	ldrb	r3, [r3, #3]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	3301      	adds	r3, #1
 800db80:	b29b      	uxth	r3, r3
 800db82:	011b      	lsls	r3, r3, #4
 800db84:	b29b      	uxth	r3, r3
 800db86:	b2db      	uxtb	r3, r3
 800db88:	b29b      	uxth	r3, r3
 800db8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db8e:	f043 0302 	orr.w	r3, r3, #2
 800db92:	b29b      	uxth	r3, r3
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff f855 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800db9a:	e1af      	b.n	800defc <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800db9c:	4b0c      	ldr	r3, [pc, #48]	; (800dbd0 <rfalSetBitRate+0x294>)
 800db9e:	78db      	ldrb	r3, [r3, #3]
 800dba0:	2bec      	cmp	r3, #236	; 0xec
 800dba2:	d00b      	beq.n	800dbbc <rfalSetBitRate+0x280>
 800dba4:	4b0a      	ldr	r3, [pc, #40]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dba6:	78db      	ldrb	r3, [r3, #3]
 800dba8:	2beb      	cmp	r3, #235	; 0xeb
 800dbaa:	d007      	beq.n	800dbbc <rfalSetBitRate+0x280>
 800dbac:	4b08      	ldr	r3, [pc, #32]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dbae:	78db      	ldrb	r3, [r3, #3]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d003      	beq.n	800dbbc <rfalSetBitRate+0x280>
 800dbb4:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dbb6:	78db      	ldrb	r3, [r3, #3]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d107      	bne.n	800dbcc <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800dbbc:	4b04      	ldr	r3, [pc, #16]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dbbe:	789b      	ldrb	r3, [r3, #2]
 800dbc0:	2bed      	cmp	r3, #237	; 0xed
 800dbc2:	d007      	beq.n	800dbd4 <rfalSetBitRate+0x298>
 800dbc4:	4b02      	ldr	r3, [pc, #8]	; (800dbd0 <rfalSetBitRate+0x294>)
 800dbc6:	789b      	ldrb	r3, [r3, #2]
 800dbc8:	2bec      	cmp	r3, #236	; 0xec
 800dbca:	d003      	beq.n	800dbd4 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800dbcc:	2307      	movs	r3, #7
 800dbce:	e196      	b.n	800defe <rfalSetBitRate+0x5c2>
 800dbd0:	20000754 	.word	0x20000754
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800dbd4:	4b9a      	ldr	r3, [pc, #616]	; (800de40 <rfalSetBitRate+0x504>)
 800dbd6:	789b      	ldrb	r3, [r3, #2]
 800dbd8:	2bed      	cmp	r3, #237	; 0xed
 800dbda:	bf0c      	ite	eq
 800dbdc:	2301      	moveq	r3, #1
 800dbde:	2300      	movne	r3, #0
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800dbe4:	4b96      	ldr	r3, [pc, #600]	; (800de40 <rfalSetBitRate+0x504>)
 800dbe6:	78db      	ldrb	r3, [r3, #3]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d00a      	beq.n	800dc02 <rfalSetBitRate+0x2c6>
 800dbec:	2beb      	cmp	r3, #235	; 0xeb
 800dbee:	d002      	beq.n	800dbf6 <rfalSetBitRate+0x2ba>
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d003      	beq.n	800dbfc <rfalSetBitRate+0x2c0>
 800dbf4:	e008      	b.n	800dc08 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	613b      	str	r3, [r7, #16]
                            break;
 800dbfa:	e008      	b.n	800dc0e <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	613b      	str	r3, [r7, #16]
                            break;
 800dc00:	e005      	b.n	800dc0e <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800dc02:	2303      	movs	r3, #3
 800dc04:	613b      	str	r3, [r7, #16]
                            break;
 800dc06:	e002      	b.n	800dc0e <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	613b      	str	r3, [r7, #16]
                            break;
 800dc0c:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800dc0e:	f107 0218 	add.w	r2, r7, #24
 800dc12:	f107 030c 	add.w	r3, r7, #12
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff f97b 	bl	800cf14 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	785b      	ldrb	r3, [r3, #1]
 800dc22:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	789b      	ldrb	r3, [r3, #2]
 800dc28:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	78db      	ldrb	r3, [r3, #3]
 800dc2e:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800dc36:	f107 0314 	add.w	r3, r7, #20
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f001 ff87 	bl	800fb4e <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dc40:	2008      	movs	r0, #8
 800dc42:	f7fe ffff 	bl	800cc44 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dc46:	4b7e      	ldr	r3, [pc, #504]	; (800de40 <rfalSetBitRate+0x504>)
 800dc48:	789b      	ldrb	r3, [r3, #2]
 800dc4a:	2bea      	cmp	r3, #234	; 0xea
 800dc4c:	d90c      	bls.n	800dc68 <rfalSetBitRate+0x32c>
 800dc4e:	4b7c      	ldr	r3, [pc, #496]	; (800de40 <rfalSetBitRate+0x504>)
 800dc50:	789b      	ldrb	r3, [r3, #2]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	011b      	lsls	r3, r3, #4
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc60:	f043 0301 	orr.w	r3, r3, #1
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	e00d      	b.n	800dc84 <rfalSetBitRate+0x348>
 800dc68:	4b75      	ldr	r3, [pc, #468]	; (800de40 <rfalSetBitRate+0x504>)
 800dc6a:	789b      	ldrb	r3, [r3, #2]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	3301      	adds	r3, #1
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	011b      	lsls	r3, r3, #4
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc7e:	f043 0301 	orr.w	r3, r3, #1
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe ffdd 	bl	800cc44 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc8a:	4b6d      	ldr	r3, [pc, #436]	; (800de40 <rfalSetBitRate+0x504>)
 800dc8c:	78db      	ldrb	r3, [r3, #3]
 800dc8e:	2bea      	cmp	r3, #234	; 0xea
 800dc90:	d90c      	bls.n	800dcac <rfalSetBitRate+0x370>
 800dc92:	4b6b      	ldr	r3, [pc, #428]	; (800de40 <rfalSetBitRate+0x504>)
 800dc94:	78db      	ldrb	r3, [r3, #3]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	011b      	lsls	r3, r3, #4
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dca4:	f043 0302 	orr.w	r3, r3, #2
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	e00d      	b.n	800dcc8 <rfalSetBitRate+0x38c>
 800dcac:	4b64      	ldr	r3, [pc, #400]	; (800de40 <rfalSetBitRate+0x504>)
 800dcae:	78db      	ldrb	r3, [r3, #3]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	011b      	lsls	r3, r3, #4
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcc2:	f043 0302 	orr.w	r3, r3, #2
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe ffbb 	bl	800cc44 <rfalSetAnalogConfig>
                break;
 800dcce:	e115      	b.n	800defc <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dcd0:	2008      	movs	r0, #8
 800dcd2:	f7fe ffb7 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dcd6:	4b5a      	ldr	r3, [pc, #360]	; (800de40 <rfalSetBitRate+0x504>)
 800dcd8:	789b      	ldrb	r3, [r3, #2]
 800dcda:	2bea      	cmp	r3, #234	; 0xea
 800dcdc:	d90c      	bls.n	800dcf8 <rfalSetBitRate+0x3bc>
 800dcde:	4b58      	ldr	r3, [pc, #352]	; (800de40 <rfalSetBitRate+0x504>)
 800dce0:	789b      	ldrb	r3, [r3, #2]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	011b      	lsls	r3, r3, #4
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dcf0:	f043 0301 	orr.w	r3, r3, #1
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	e00d      	b.n	800dd14 <rfalSetBitRate+0x3d8>
 800dcf8:	4b51      	ldr	r3, [pc, #324]	; (800de40 <rfalSetBitRate+0x504>)
 800dcfa:	789b      	ldrb	r3, [r3, #2]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	3301      	adds	r3, #1
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	011b      	lsls	r3, r3, #4
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd0e:	f043 0301 	orr.w	r3, r3, #1
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe ff95 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dd1a:	4b49      	ldr	r3, [pc, #292]	; (800de40 <rfalSetBitRate+0x504>)
 800dd1c:	78db      	ldrb	r3, [r3, #3]
 800dd1e:	2bea      	cmp	r3, #234	; 0xea
 800dd20:	d90c      	bls.n	800dd3c <rfalSetBitRate+0x400>
 800dd22:	4b47      	ldr	r3, [pc, #284]	; (800de40 <rfalSetBitRate+0x504>)
 800dd24:	78db      	ldrb	r3, [r3, #3]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	011b      	lsls	r3, r3, #4
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd34:	f043 0302 	orr.w	r3, r3, #2
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	e00d      	b.n	800dd58 <rfalSetBitRate+0x41c>
 800dd3c:	4b40      	ldr	r3, [pc, #256]	; (800de40 <rfalSetBitRate+0x504>)
 800dd3e:	78db      	ldrb	r3, [r3, #3]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	3301      	adds	r3, #1
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	011b      	lsls	r3, r3, #4
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd52:	f043 0302 	orr.w	r3, r3, #2
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe ff73 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800dd5e:	e0cd      	b.n	800defc <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800dd60:	2009      	movs	r0, #9
 800dd62:	f7fe ff6f 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dd66:	4b36      	ldr	r3, [pc, #216]	; (800de40 <rfalSetBitRate+0x504>)
 800dd68:	789b      	ldrb	r3, [r3, #2]
 800dd6a:	2bea      	cmp	r3, #234	; 0xea
 800dd6c:	d90a      	bls.n	800dd84 <rfalSetBitRate+0x448>
 800dd6e:	4b34      	ldr	r3, [pc, #208]	; (800de40 <rfalSetBitRate+0x504>)
 800dd70:	789b      	ldrb	r3, [r3, #2]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	4b31      	ldr	r3, [pc, #196]	; (800de44 <rfalSetBitRate+0x508>)
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	e00b      	b.n	800dd9c <rfalSetBitRate+0x460>
 800dd84:	4b2e      	ldr	r3, [pc, #184]	; (800de40 <rfalSetBitRate+0x504>)
 800dd86:	789b      	ldrb	r3, [r3, #2]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	011b      	lsls	r3, r3, #4
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	4b2b      	ldr	r3, [pc, #172]	; (800de44 <rfalSetBitRate+0x508>)
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe ff51 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dda2:	4b27      	ldr	r3, [pc, #156]	; (800de40 <rfalSetBitRate+0x504>)
 800dda4:	78db      	ldrb	r3, [r3, #3]
 800dda6:	2bea      	cmp	r3, #234	; 0xea
 800dda8:	d90a      	bls.n	800ddc0 <rfalSetBitRate+0x484>
 800ddaa:	4b25      	ldr	r3, [pc, #148]	; (800de40 <rfalSetBitRate+0x504>)
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	4b23      	ldr	r3, [pc, #140]	; (800de48 <rfalSetBitRate+0x50c>)
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	e00b      	b.n	800ddd8 <rfalSetBitRate+0x49c>
 800ddc0:	4b1f      	ldr	r3, [pc, #124]	; (800de40 <rfalSetBitRate+0x504>)
 800ddc2:	78db      	ldrb	r3, [r3, #3]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	011b      	lsls	r3, r3, #4
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	4b1d      	ldr	r3, [pc, #116]	; (800de48 <rfalSetBitRate+0x50c>)
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe ff33 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800ddde:	e08d      	b.n	800defc <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800dde0:	2009      	movs	r0, #9
 800dde2:	f7fe ff2f 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dde6:	4b16      	ldr	r3, [pc, #88]	; (800de40 <rfalSetBitRate+0x504>)
 800dde8:	789b      	ldrb	r3, [r3, #2]
 800ddea:	2bea      	cmp	r3, #234	; 0xea
 800ddec:	d90a      	bls.n	800de04 <rfalSetBitRate+0x4c8>
 800ddee:	4b14      	ldr	r3, [pc, #80]	; (800de40 <rfalSetBitRate+0x504>)
 800ddf0:	789b      	ldrb	r3, [r3, #2]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	011b      	lsls	r3, r3, #4
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	4b13      	ldr	r3, [pc, #76]	; (800de4c <rfalSetBitRate+0x510>)
 800ddfe:	4313      	orrs	r3, r2
 800de00:	b29b      	uxth	r3, r3
 800de02:	e00b      	b.n	800de1c <rfalSetBitRate+0x4e0>
 800de04:	4b0e      	ldr	r3, [pc, #56]	; (800de40 <rfalSetBitRate+0x504>)
 800de06:	789b      	ldrb	r3, [r3, #2]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	3301      	adds	r3, #1
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	011b      	lsls	r3, r3, #4
 800de10:	b29b      	uxth	r3, r3
 800de12:	b2db      	uxtb	r3, r3
 800de14:	b29a      	uxth	r2, r3
 800de16:	4b0d      	ldr	r3, [pc, #52]	; (800de4c <rfalSetBitRate+0x510>)
 800de18:	4313      	orrs	r3, r2
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fe ff11 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800de22:	4b07      	ldr	r3, [pc, #28]	; (800de40 <rfalSetBitRate+0x504>)
 800de24:	78db      	ldrb	r3, [r3, #3]
 800de26:	2bea      	cmp	r3, #234	; 0xea
 800de28:	d914      	bls.n	800de54 <rfalSetBitRate+0x518>
 800de2a:	4b05      	ldr	r3, [pc, #20]	; (800de40 <rfalSetBitRate+0x504>)
 800de2c:	78db      	ldrb	r3, [r3, #3]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	011b      	lsls	r3, r3, #4
 800de32:	b29b      	uxth	r3, r3
 800de34:	b2db      	uxtb	r3, r3
 800de36:	b29a      	uxth	r2, r3
 800de38:	4b05      	ldr	r3, [pc, #20]	; (800de50 <rfalSetBitRate+0x514>)
 800de3a:	4313      	orrs	r3, r2
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	e015      	b.n	800de6c <rfalSetBitRate+0x530>
 800de40:	20000754 	.word	0x20000754
 800de44:	ffff8801 	.word	0xffff8801
 800de48:	ffff8802 	.word	0xffff8802
 800de4c:	ffff8101 	.word	0xffff8101
 800de50:	ffff8102 	.word	0xffff8102
 800de54:	4b2c      	ldr	r3, [pc, #176]	; (800df08 <rfalSetBitRate+0x5cc>)
 800de56:	78db      	ldrb	r3, [r3, #3]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3301      	adds	r3, #1
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	b29b      	uxth	r3, r3
 800de62:	b2db      	uxtb	r3, r3
 800de64:	b29a      	uxth	r2, r3
 800de66:	4b29      	ldr	r3, [pc, #164]	; (800df0c <rfalSetBitRate+0x5d0>)
 800de68:	4313      	orrs	r3, r2
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe fee9 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800de72:	e043      	b.n	800defc <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800de74:	2009      	movs	r0, #9
 800de76:	f7fe fee5 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800de7a:	4b23      	ldr	r3, [pc, #140]	; (800df08 <rfalSetBitRate+0x5cc>)
 800de7c:	789b      	ldrb	r3, [r3, #2]
 800de7e:	2bea      	cmp	r3, #234	; 0xea
 800de80:	d90a      	bls.n	800de98 <rfalSetBitRate+0x55c>
 800de82:	4b21      	ldr	r3, [pc, #132]	; (800df08 <rfalSetBitRate+0x5cc>)
 800de84:	789b      	ldrb	r3, [r3, #2]
 800de86:	b29b      	uxth	r3, r3
 800de88:	011b      	lsls	r3, r3, #4
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	b29a      	uxth	r2, r3
 800de90:	4b1f      	ldr	r3, [pc, #124]	; (800df10 <rfalSetBitRate+0x5d4>)
 800de92:	4313      	orrs	r3, r2
 800de94:	b29b      	uxth	r3, r3
 800de96:	e00b      	b.n	800deb0 <rfalSetBitRate+0x574>
 800de98:	4b1b      	ldr	r3, [pc, #108]	; (800df08 <rfalSetBitRate+0x5cc>)
 800de9a:	789b      	ldrb	r3, [r3, #2]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3301      	adds	r3, #1
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	4b19      	ldr	r3, [pc, #100]	; (800df10 <rfalSetBitRate+0x5d4>)
 800deac:	4313      	orrs	r3, r2
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fe fec7 	bl	800cc44 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800deb6:	4b14      	ldr	r3, [pc, #80]	; (800df08 <rfalSetBitRate+0x5cc>)
 800deb8:	78db      	ldrb	r3, [r3, #3]
 800deba:	2bea      	cmp	r3, #234	; 0xea
 800debc:	d90a      	bls.n	800ded4 <rfalSetBitRate+0x598>
 800debe:	4b12      	ldr	r3, [pc, #72]	; (800df08 <rfalSetBitRate+0x5cc>)
 800dec0:	78db      	ldrb	r3, [r3, #3]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	b29a      	uxth	r2, r3
 800decc:	4b11      	ldr	r3, [pc, #68]	; (800df14 <rfalSetBitRate+0x5d8>)
 800dece:	4313      	orrs	r3, r2
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	e00b      	b.n	800deec <rfalSetBitRate+0x5b0>
 800ded4:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <rfalSetBitRate+0x5cc>)
 800ded6:	78db      	ldrb	r3, [r3, #3]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	3301      	adds	r3, #1
 800dedc:	b29b      	uxth	r3, r3
 800dede:	011b      	lsls	r3, r3, #4
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	4b0b      	ldr	r3, [pc, #44]	; (800df14 <rfalSetBitRate+0x5d8>)
 800dee8:	4313      	orrs	r3, r2
 800deea:	b29b      	uxth	r3, r3
 800deec:	4618      	mov	r0, r3
 800deee:	f7fe fea9 	bl	800cc44 <rfalSetAnalogConfig>
            break;
 800def2:	e003      	b.n	800defc <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800def4:	2321      	movs	r3, #33	; 0x21
 800def6:	e002      	b.n	800defe <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800def8:	230f      	movs	r3, #15
 800defa:	e000      	b.n	800defe <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20000754 	.word	0x20000754
 800df0c:	ffff8102 	.word	0xffff8102
 800df10:	ffff8401 	.word	0xffff8401
 800df14:	ffff8402 	.word	0xffff8402

0800df18 <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4603      	mov	r3, r0
 800df20:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800df22:	79fb      	ldrb	r3, [r7, #7]
 800df24:	2b00      	cmp	r3, #0
 800df26:	db0f      	blt.n	800df48 <rfalSetErrorHandling+0x30>
 800df28:	2b01      	cmp	r3, #1
 800df2a:	dd02      	ble.n	800df32 <rfalSetErrorHandling+0x1a>
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d005      	beq.n	800df3c <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800df30:	e00a      	b.n	800df48 <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800df32:	2180      	movs	r1, #128	; 0x80
 800df34:	2045      	movs	r0, #69	; 0x45
 800df36:	f002 f8bf 	bl	80100b8 <st25r3916ClrRegisterBits>
            break;
 800df3a:	e006      	b.n	800df4a <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800df3c:	2284      	movs	r2, #132	; 0x84
 800df3e:	21bf      	movs	r1, #191	; 0xbf
 800df40:	2045      	movs	r0, #69	; 0x45
 800df42:	f002 f934 	bl	80101ae <st25r3916ModifyRegister>
            break;
 800df46:	e000      	b.n	800df4a <rfalSetErrorHandling+0x32>
            break;
 800df48:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800df4a:	4a03      	ldr	r2, [pc, #12]	; (800df58 <rfalSetErrorHandling+0x40>)
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	71d3      	strb	r3, [r2, #7]
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	20000754 	.word	0x20000754

0800df5c <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a06      	ldr	r2, [pc, #24]	; (800df80 <rfalSetFDTPoll+0x24>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	bf28      	it	cs
 800df6c:	4613      	movcs	r3, r2
 800df6e:	4a05      	ldr	r2, [pc, #20]	; (800df84 <rfalSetFDTPoll+0x28>)
 800df70:	6113      	str	r3, [r2, #16]
}
 800df72:	bf00      	nop
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	0007fff8 	.word	0x0007fff8
 800df84:	20000754 	.word	0x20000754

0800df88 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800df96:	bf28      	it	cs
 800df98:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800df9c:	4a03      	ldr	r2, [pc, #12]	; (800dfac <rfalSetFDTListen+0x24>)
 800df9e:	60d3      	str	r3, [r2, #12]
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20000754 	.word	0x20000754

0800dfb0 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a06      	ldr	r2, [pc, #24]	; (800dfd4 <rfalSetGT+0x24>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bf28      	it	cs
 800dfc0:	4613      	movcs	r3, r2
 800dfc2:	4a05      	ldr	r2, [pc, #20]	; (800dfd8 <rfalSetGT+0x28>)
 800dfc4:	6093      	str	r3, [r2, #8]
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	040a8bc0 	.word	0x040a8bc0
 800dfd8:	20000754 	.word	0x20000754

0800dfdc <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800dfe0:	4b09      	ldr	r3, [pc, #36]	; (800e008 <rfalIsGTExpired+0x2c>)
 800dfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00c      	beq.n	800e002 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800dfe8:	4b07      	ldr	r3, [pc, #28]	; (800e008 <rfalIsGTExpired+0x2c>)
 800dfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7f6 fa95 	bl	800451c <timerIsExpired>
 800dff2:	4603      	mov	r3, r0
 800dff4:	f083 0301 	eor.w	r3, r3, #1
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <rfalIsGTExpired+0x26>
        {
            return false;
 800dffe:	2300      	movs	r3, #0
 800e000:	e000      	b.n	800e004 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800e002:	2301      	movs	r3, #1
}
 800e004:	4618      	mov	r0, r3
 800e006:	bd80      	pop	{r7, pc}
 800e008:	20000754 	.word	0x20000754

0800e00c <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800e012:	2280      	movs	r2, #128	; 0x80
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	2002      	movs	r0, #2
 800e018:	f002 f936 	bl	8010288 <st25r3916CheckReg>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f083 0301 	eor.w	r3, r3, #1
 800e022:	b2db      	uxtb	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d103      	bne.n	800e030 <rfalFieldOnAndStartGT+0x24>
 800e028:	4b2a      	ldr	r3, [pc, #168]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800e030:	2321      	movs	r3, #33	; 0x21
 800e032:	e04a      	b.n	800e0ca <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800e034:	2300      	movs	r3, #0
 800e036:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800e038:	2002      	movs	r0, #2
 800e03a:	f7fe fe03 	bl	800cc44 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800e03e:	2208      	movs	r2, #8
 800e040:	2108      	movs	r1, #8
 800e042:	2002      	movs	r0, #2
 800e044:	f002 f920 	bl	8010288 <st25r3916CheckReg>
 800e048:	4603      	mov	r3, r0
 800e04a:	f083 0301 	eor.w	r3, r3, #1
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d106      	bne.n	800e062 <rfalFieldOnAndStartGT+0x56>
 800e054:	4b1f      	ldr	r3, [pc, #124]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e056:	791b      	ldrb	r3, [r3, #4]
 800e058:	f083 0301 	eor.w	r3, r3, #1
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d01c      	beq.n	800e09c <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800e062:	2100      	movs	r1, #0
 800e064:	2055      	movs	r0, #85	; 0x55
 800e066:	f001 ff3d 	bl	800fee4 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800e06a:	2300      	movs	r3, #0
 800e06c:	22ff      	movs	r2, #255	; 0xff
 800e06e:	21ff      	movs	r1, #255	; 0xff
 800e070:	20c8      	movs	r0, #200	; 0xc8
 800e072:	f001 fc43 	bl	800f8fc <st25r3916PerformCollisionAvoidance>
 800e076:	4603      	mov	r3, r0
 800e078:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800e07a:	2208      	movs	r2, #8
 800e07c:	2108      	movs	r1, #8
 800e07e:	2002      	movs	r0, #2
 800e080:	f002 f902 	bl	8010288 <st25r3916CheckReg>
 800e084:	4603      	mov	r3, r0
 800e086:	461a      	mov	r2, r3
 800e088:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e08a:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800e08c:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e08e:	791b      	ldrb	r3, [r3, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d003      	beq.n	800e09c <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800e094:	2148      	movs	r1, #72	; 0x48
 800e096:	2002      	movs	r0, #2
 800e098:	f002 f845 	bl	8010126 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800e09c:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d011      	beq.n	800e0c8 <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800e0a4:	4b0b      	ldr	r3, [pc, #44]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	bf38      	it	cc
 800e0b0:	4613      	movcc	r3, r2
 800e0b2:	4a09      	ldr	r2, [pc, #36]	; (800e0d8 <rfalFieldOnAndStartGT+0xcc>)
 800e0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b8:	0b1b      	lsrs	r3, r3, #12
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f6 fa1f 	bl	8004500 <timerCalculateTimer>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	4b03      	ldr	r3, [pc, #12]	; (800e0d4 <rfalFieldOnAndStartGT+0xc8>)
 800e0c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800e0c8:	88fb      	ldrh	r3, [r7, #6]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20000754 	.word	0x20000754
 800e0d8:	4d542005 	.word	0x4d542005

0800e0dc <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800e0e0:	4b09      	ldr	r3, [pc, #36]	; (800e108 <rfalFieldOff+0x2c>)
 800e0e2:	7d1b      	ldrb	r3, [r3, #20]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800e0e8:	f000 fa94 	bl	800e614 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800e0ec:	2148      	movs	r1, #72	; 0x48
 800e0ee:	2002      	movs	r0, #2
 800e0f0:	f001 ffe2 	bl	80100b8 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800e0f4:	2003      	movs	r0, #3
 800e0f6:	f7fe fda5 	bl	800cc44 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800e0fa:	4b03      	ldr	r3, [pc, #12]	; (800e108 <rfalFieldOff+0x2c>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20000754 	.word	0x20000754

0800e10c <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800e10c:	b5b0      	push	{r4, r5, r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d101      	bne.n	800e11e <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800e11a:	2307      	movs	r3, #7
 800e11c:	e127      	b.n	800e36e <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800e11e:	4b96      	ldr	r3, [pc, #600]	; (800e378 <rfalStartTransceive+0x26c>)
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b01      	cmp	r3, #1
 800e124:	f240 8122 	bls.w	800e36c <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800e128:	2208      	movs	r2, #8
 800e12a:	2108      	movs	r1, #8
 800e12c:	2002      	movs	r0, #2
 800e12e:	f002 f8ab 	bl	8010288 <st25r3916CheckReg>
 800e132:	4603      	mov	r3, r0
 800e134:	f083 0301 	eor.w	r3, r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d011      	beq.n	800e162 <rfalStartTransceive+0x56>
 800e13e:	4b8e      	ldr	r3, [pc, #568]	; (800e378 <rfalStartTransceive+0x26c>)
 800e140:	785b      	ldrb	r3, [r3, #1]
 800e142:	2b0a      	cmp	r3, #10
 800e144:	d00d      	beq.n	800e162 <rfalStartTransceive+0x56>
 800e146:	4b8c      	ldr	r3, [pc, #560]	; (800e378 <rfalStartTransceive+0x26c>)
 800e148:	785b      	ldrb	r3, [r3, #1]
 800e14a:	2b0b      	cmp	r3, #11
 800e14c:	d009      	beq.n	800e162 <rfalStartTransceive+0x56>
 800e14e:	4b8a      	ldr	r3, [pc, #552]	; (800e378 <rfalStartTransceive+0x26c>)
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b0c      	cmp	r3, #12
 800e154:	d005      	beq.n	800e162 <rfalStartTransceive+0x56>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800e15e:	2321      	movs	r3, #33	; 0x21
 800e160:	e105      	b.n	800e36e <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800e162:	4b85      	ldr	r3, [pc, #532]	; (800e378 <rfalStartTransceive+0x26c>)
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	f103 0418 	add.w	r4, r3, #24
 800e16a:	4615      	mov	r5, r2
 800e16c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e16e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800e178:	4b7f      	ldr	r3, [pc, #508]	; (800e378 <rfalStartTransceive+0x26c>)
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d04b      	beq.n	800e218 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e184:	4b7c      	ldr	r3, [pc, #496]	; (800e378 <rfalStartTransceive+0x26c>)
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d102      	bne.n	800e192 <rfalStartTransceive+0x86>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	33d4      	adds	r3, #212	; 0xd4
 800e190:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e192:	4b79      	ldr	r3, [pc, #484]	; (800e378 <rfalStartTransceive+0x26c>)
 800e194:	785b      	ldrb	r3, [r3, #1]
 800e196:	2b02      	cmp	r3, #2
 800e198:	d102      	bne.n	800e1a0 <rfalStartTransceive+0x94>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	33d4      	adds	r3, #212	; 0xd4
 800e19e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800e1a0:	4b75      	ldr	r3, [pc, #468]	; (800e378 <rfalStartTransceive+0x26c>)
 800e1a2:	785b      	ldrb	r3, [r3, #1]
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d103      	bne.n	800e1b0 <rfalStartTransceive+0xa4>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e1ae:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800e1b0:	4b71      	ldr	r3, [pc, #452]	; (800e378 <rfalStartTransceive+0x26c>)
 800e1b2:	785b      	ldrb	r3, [r3, #1]
 800e1b4:	2b07      	cmp	r3, #7
 800e1b6:	d102      	bne.n	800e1be <rfalStartTransceive+0xb2>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	3340      	adds	r3, #64	; 0x40
 800e1bc:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800e1be:	2108      	movs	r1, #8
 800e1c0:	2012      	movs	r0, #18
 800e1c2:	f001 ff79 	bl	80100b8 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2104      	movs	r1, #4
 800e1ca:	200a      	movs	r0, #10
 800e1cc:	f002 f85c 	bl	8010288 <st25r3916CheckReg>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00f      	beq.n	800e1f6 <rfalStartTransceive+0xea>
 800e1d6:	4b68      	ldr	r3, [pc, #416]	; (800e378 <rfalStartTransceive+0x26c>)
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b03      	cmp	r3, #3
 800e1dc:	d10b      	bne.n	800e1f6 <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3380      	adds	r3, #128	; 0x80
 800e1e2:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800e1e4:	2108      	movs	r1, #8
 800e1e6:	204c      	movs	r0, #76	; 0x4c
 800e1e8:	f001 ff9d 	bl	8010126 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800e1ec:	2214      	movs	r2, #20
 800e1ee:	211f      	movs	r1, #31
 800e1f0:	2046      	movs	r0, #70	; 0x46
 800e1f2:	f001 ffc5 	bl	8010180 <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800e1f6:	4b60      	ldr	r3, [pc, #384]	; (800e378 <rfalStartTransceive+0x26c>)
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d806      	bhi.n	800e20e <rfalStartTransceive+0x102>
 800e200:	4b5d      	ldr	r3, [pc, #372]	; (800e378 <rfalStartTransceive+0x26c>)
 800e202:	68da      	ldr	r2, [r3, #12]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	099b      	lsrs	r3, r3, #6
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	e000      	b.n	800e210 <rfalStartTransceive+0x104>
 800e20e:	2304      	movs	r3, #4
 800e210:	4619      	mov	r1, r3
 800e212:	200f      	movs	r0, #15
 800e214:	f001 fe66 	bl	800fee4 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e218:	4b57      	ldr	r3, [pc, #348]	; (800e378 <rfalStartTransceive+0x26c>)
 800e21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e220:	d046      	beq.n	800e2b0 <rfalStartTransceive+0x1a4>
 800e222:	4b55      	ldr	r3, [pc, #340]	; (800e378 <rfalStartTransceive+0x26c>)
 800e224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e226:	2b00      	cmp	r3, #0
 800e228:	d042      	beq.n	800e2b0 <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800e22a:	4b53      	ldr	r3, [pc, #332]	; (800e378 <rfalStartTransceive+0x26c>)
 800e22c:	68da      	ldr	r2, [r3, #12]
 800e22e:	4b52      	ldr	r3, [pc, #328]	; (800e378 <rfalStartTransceive+0x26c>)
 800e230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e232:	429a      	cmp	r2, r3
 800e234:	d301      	bcc.n	800e23a <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800e236:	2307      	movs	r3, #7
 800e238:	e099      	b.n	800e36e <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800e23a:	2340      	movs	r3, #64	; 0x40
 800e23c:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e23e:	4b4e      	ldr	r3, [pc, #312]	; (800e378 <rfalStartTransceive+0x26c>)
 800e240:	785b      	ldrb	r3, [r3, #1]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d103      	bne.n	800e24e <rfalStartTransceive+0x142>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e24c:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e24e:	4b4a      	ldr	r3, [pc, #296]	; (800e378 <rfalStartTransceive+0x26c>)
 800e250:	785b      	ldrb	r3, [r3, #1]
 800e252:	2b02      	cmp	r3, #2
 800e254:	d103      	bne.n	800e25e <rfalStartTransceive+0x152>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e25c:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800e25e:	4b46      	ldr	r3, [pc, #280]	; (800e378 <rfalStartTransceive+0x26c>)
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	2b03      	cmp	r3, #3
 800e264:	d103      	bne.n	800e26e <rfalStartTransceive+0x162>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26c:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800e26e:	4b42      	ldr	r3, [pc, #264]	; (800e378 <rfalStartTransceive+0x26c>)
 800e270:	785b      	ldrb	r3, [r3, #1]
 800e272:	2b06      	cmp	r3, #6
 800e274:	d10b      	bne.n	800e28e <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800e276:	4b40      	ldr	r3, [pc, #256]	; (800e378 <rfalStartTransceive+0x26c>)
 800e278:	789b      	ldrb	r3, [r3, #2]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d102      	bne.n	800e284 <rfalStartTransceive+0x178>
 800e27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e282:	e001      	b.n	800e288 <rfalStartTransceive+0x17c>
 800e284:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	4413      	add	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800e28e:	4b3a      	ldr	r3, [pc, #232]	; (800e378 <rfalStartTransceive+0x26c>)
 800e290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	4413      	add	r3, r2
 800e296:	4a39      	ldr	r2, [pc, #228]	; (800e37c <rfalStartTransceive+0x270>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	bf28      	it	cs
 800e29c:	4613      	movcs	r3, r2
 800e29e:	4a36      	ldr	r2, [pc, #216]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2a0:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800e2a2:	4b35      	ldr	r3, [pc, #212]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a6:	099b      	lsrs	r3, r3, #6
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f001 fbbd 	bl	800fa28 <st25r3916SetNoResponseTime>
 800e2ae:	e002      	b.n	800e2b6 <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	f001 fbb9 	bl	800fa28 <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800e2b6:	4b30      	ldr	r3, [pc, #192]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2b8:	2203      	movs	r2, #3
 800e2ba:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800e2bc:	4b2e      	ldr	r3, [pc, #184]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2be:	220b      	movs	r2, #11
 800e2c0:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800e2c2:	4b2d      	ldr	r3, [pc, #180]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e2c8:	4b2b      	ldr	r3, [pc, #172]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2ca:	785b      	ldrb	r3, [r3, #1]
 800e2cc:	2b07      	cmp	r3, #7
 800e2ce:	d003      	beq.n	800e2d8 <rfalStartTransceive+0x1cc>
 800e2d0:	4b29      	ldr	r3, [pc, #164]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2d2:	785b      	ldrb	r3, [r3, #1]
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d128      	bne.n	800e32a <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800e2d8:	4a27      	ldr	r2, [pc, #156]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2da:	4b27      	ldr	r3, [pc, #156]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2dc:	f502 7417 	add.w	r4, r2, #604	; 0x25c
 800e2e0:	f103 0518 	add.w	r5, r3, #24
 800e2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e2ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800e2f0:	4b21      	ldr	r3, [pc, #132]	; (800e378 <rfalStartTransceive+0x26c>)
 800e2f2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <rfalStartTransceive+0x1f2>
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <rfalStartTransceive+0x274>)
 800e2fc:	e000      	b.n	800e300 <rfalStartTransceive+0x1f4>
 800e2fe:	2300      	movs	r3, #0
 800e300:	4a1d      	ldr	r2, [pc, #116]	; (800e378 <rfalStartTransceive+0x26c>)
 800e302:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800e304:	4b1c      	ldr	r3, [pc, #112]	; (800e378 <rfalStartTransceive+0x26c>)
 800e306:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800e30a:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800e30c:	4b1a      	ldr	r3, [pc, #104]	; (800e378 <rfalStartTransceive+0x26c>)
 800e30e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e312:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800e316:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800e31a:	4a17      	ldr	r2, [pc, #92]	; (800e378 <rfalStartTransceive+0x26c>)
 800e31c:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800e31e:	4b16      	ldr	r3, [pc, #88]	; (800e378 <rfalStartTransceive+0x26c>)
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800e326:	2300      	movs	r3, #0
 800e328:	e021      	b.n	800e36e <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800e32a:	4b13      	ldr	r3, [pc, #76]	; (800e378 <rfalStartTransceive+0x26c>)
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d003      	beq.n	800e33a <rfalStartTransceive+0x22e>
 800e332:	4b11      	ldr	r3, [pc, #68]	; (800e378 <rfalStartTransceive+0x26c>)
 800e334:	8b9b      	ldrh	r3, [r3, #28]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d116      	bne.n	800e368 <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e33a:	f000 f983 	bl	800e644 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800e33e:	4b0e      	ldr	r3, [pc, #56]	; (800e378 <rfalStartTransceive+0x26c>)
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	2b09      	cmp	r3, #9
 800e344:	d003      	beq.n	800e34e <rfalStartTransceive+0x242>
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <rfalStartTransceive+0x26c>)
 800e348:	785b      	ldrb	r3, [r3, #1]
 800e34a:	2b0d      	cmp	r3, #13
 800e34c:	d103      	bne.n	800e356 <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800e34e:	2108      	movs	r1, #8
 800e350:	2002      	movs	r0, #2
 800e352:	f001 feb1 	bl	80100b8 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800e356:	20d1      	movs	r0, #209	; 0xd1
 800e358:	f001 fe4d 	bl	800fff6 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800e35c:	20e3      	movs	r0, #227	; 0xe3
 800e35e:	f001 fe4a 	bl	800fff6 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800e362:	4b05      	ldr	r3, [pc, #20]	; (800e378 <rfalStartTransceive+0x26c>)
 800e364:	2251      	movs	r2, #81	; 0x51
 800e366:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800e368:	2300      	movs	r3, #0
 800e36a:	e000      	b.n	800e36e <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800e36c:	2321      	movs	r3, #33	; 0x21
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bdb0      	pop	{r4, r5, r7, pc}
 800e376:	bf00      	nop
 800e378:	20000754 	.word	0x20000754
 800e37c:	0ffff000 	.word	0x0ffff000
 800e380:	200007a4 	.word	0x200007a4

0800e384 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800e388:	4b09      	ldr	r3, [pc, #36]	; (800e3b0 <rfalIsTransceiveInTx+0x2c>)
 800e38a:	7d1b      	ldrb	r3, [r3, #20]
 800e38c:	2b0a      	cmp	r3, #10
 800e38e:	d905      	bls.n	800e39c <rfalIsTransceiveInTx+0x18>
 800e390:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <rfalIsTransceiveInTx+0x2c>)
 800e392:	7d1b      	ldrb	r3, [r3, #20]
 800e394:	2b50      	cmp	r3, #80	; 0x50
 800e396:	d801      	bhi.n	800e39c <rfalIsTransceiveInTx+0x18>
 800e398:	2301      	movs	r3, #1
 800e39a:	e000      	b.n	800e39e <rfalIsTransceiveInTx+0x1a>
 800e39c:	2300      	movs	r3, #0
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	b2db      	uxtb	r3, r3
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20000754 	.word	0x20000754

0800e3b4 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800e3b8:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <rfalIsTransceiveInRx+0x1c>)
 800e3ba:	7d1b      	ldrb	r3, [r3, #20]
 800e3bc:	2b50      	cmp	r3, #80	; 0x50
 800e3be:	bf8c      	ite	hi
 800e3c0:	2301      	movhi	r3, #1
 800e3c2:	2300      	movls	r3, #0
 800e3c4:	b2db      	uxtb	r3, r3
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	20000754 	.word	0x20000754

0800e3d4 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08c      	sub	sp, #48	; 0x30
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	607a      	str	r2, [r7, #4]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	817b      	strh	r3, [r7, #10]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	897b      	ldrh	r3, [r7, #10]
 800e3ee:	00db      	lsls	r3, r3, #3
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	82bb      	strh	r3, [r7, #20]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	61bb      	str	r3, [r7, #24]
 800e3f8:	893b      	ldrh	r3, [r7, #8]
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	83bb      	strh	r3, [r7, #28]
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	623b      	str	r3, [r7, #32]
 800e404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
 800e408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e40a:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800e40c:	f107 0310 	add.w	r3, r7, #16
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff fe7b 	bl	800e10c <rfalStartTransceive>
 800e416:	4603      	mov	r3, r0
 800e418:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e41a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <rfalTransceiveBlockingTx+0x50>
 800e420:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e422:	e002      	b.n	800e42a <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800e424:	f000 f805 	bl	800e432 <rfalTransceiveRunBlockingTx>
 800e428:	4603      	mov	r3, r0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3730      	adds	r7, #48	; 0x30
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800e438:	f000 f8a6 	bl	800e588 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e43c:	f000 f892 	bl	800e564 <rfalGetTransceiveStatus>
 800e440:	4603      	mov	r3, r0
 800e442:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800e444:	f7ff ff9e 	bl	800e384 <rfalIsTransceiveInTx>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <rfalTransceiveRunBlockingTx+0x22>
 800e44e:	88fb      	ldrh	r3, [r7, #6]
 800e450:	2b02      	cmp	r3, #2
 800e452:	d0f1      	beq.n	800e438 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800e454:	f7ff ffae 	bl	800e3b4 <rfalIsTransceiveInRx>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800e45e:	2300      	movs	r3, #0
 800e460:	e000      	b.n	800e464 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800e462:	88fb      	ldrh	r3, [r7, #6]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800e472:	f000 f889 	bl	800e588 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e476:	f000 f875 	bl	800e564 <rfalGetTransceiveStatus>
 800e47a:	4603      	mov	r3, r0
 800e47c:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800e47e:	f7ff ff99 	bl	800e3b4 <rfalIsTransceiveInRx>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <rfalTransceiveBlockingRx+0x22>
 800e488:	88fb      	ldrh	r3, [r7, #6]
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d0f1      	beq.n	800e472 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800e48e:	88fb      	ldrh	r3, [r7, #6]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	; 0x28
 800e49c:	af04      	add	r7, sp, #16
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	817b      	strh	r3, [r7, #10]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800e4ac:	893a      	ldrh	r2, [r7, #8]
 800e4ae:	8979      	ldrh	r1, [r7, #10]
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	9302      	str	r3, [sp, #8]
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	9301      	str	r3, [sp, #4]
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f7ff ff87 	bl	800e3d4 <rfalTransceiveBlockingTx>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	82fb      	strh	r3, [r7, #22]
 800e4ca:	8afb      	ldrh	r3, [r7, #22]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <rfalTransceiveBlockingTxRx+0x3c>
 800e4d0:	8afb      	ldrh	r3, [r7, #22]
 800e4d2:	e00e      	b.n	800e4f2 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800e4d4:	f7ff ffca 	bl	800e46c <rfalTransceiveBlockingRx>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d006      	beq.n	800e4f0 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	3307      	adds	r3, #7
 800e4e8:	08db      	lsrs	r3, r3, #3
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800e4f0:	8afb      	ldrh	r3, [r7, #22]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3718      	adds	r7, #24
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
	...

0800e4fc <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800e500:	4b17      	ldr	r3, [pc, #92]	; (800e560 <rfalRunTransceiveWorker+0x64>)
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b03      	cmp	r3, #3
 800e506:	d127      	bne.n	800e558 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800e508:	4b15      	ldr	r3, [pc, #84]	; (800e560 <rfalRunTransceiveWorker+0x64>)
 800e50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00d      	beq.n	800e52c <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800e510:	4b13      	ldr	r3, [pc, #76]	; (800e560 <rfalRunTransceiveWorker+0x64>)
 800e512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e514:	4618      	mov	r0, r3
 800e516:	f7f6 f801 	bl	800451c <timerIsExpired>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d005      	beq.n	800e52c <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800e520:	4b0f      	ldr	r3, [pc, #60]	; (800e560 <rfalRunTransceiveWorker+0x64>)
 800e522:	2203      	movs	r2, #3
 800e524:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e526:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <rfalRunTransceiveWorker+0x64>)
 800e528:	225a      	movs	r2, #90	; 0x5a
 800e52a:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e52c:	f7ff ff2a 	bl	800e384 <rfalIsTransceiveInTx>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d005      	beq.n	800e542 <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800e536:	f000 f957 	bl	800e7e8 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e53a:	f000 f813 	bl	800e564 <rfalGetTransceiveStatus>
 800e53e:	4603      	mov	r3, r0
 800e540:	e00b      	b.n	800e55a <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800e542:	f7ff ff37 	bl	800e3b4 <rfalIsTransceiveInRx>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800e54c:	f000 fb92 	bl	800ec74 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e550:	f000 f808 	bl	800e564 <rfalGetTransceiveStatus>
 800e554:	4603      	mov	r3, r0
 800e556:	e000      	b.n	800e55a <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800e558:	2321      	movs	r3, #33	; 0x21
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	20000754 	.word	0x20000754

0800e564 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e568:	4b06      	ldr	r3, [pc, #24]	; (800e584 <rfalGetTransceiveStatus+0x20>)
 800e56a:	7d1b      	ldrb	r3, [r3, #20]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d102      	bne.n	800e576 <rfalGetTransceiveStatus+0x12>
 800e570:	4b04      	ldr	r3, [pc, #16]	; (800e584 <rfalGetTransceiveStatus+0x20>)
 800e572:	8adb      	ldrh	r3, [r3, #22]
 800e574:	e000      	b.n	800e578 <rfalGetTransceiveStatus+0x14>
 800e576:	2302      	movs	r3, #2
}
 800e578:	4618      	mov	r0, r3
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	20000754 	.word	0x20000754

0800e588 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e58c:	4b04      	ldr	r3, [pc, #16]	; (800e5a0 <rfalWorker+0x18>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	2b03      	cmp	r3, #3
 800e592:	d000      	beq.n	800e596 <rfalWorker+0xe>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e594:	e002      	b.n	800e59c <rfalWorker+0x14>
            rfalRunTransceiveWorker();
 800e596:	f7ff ffb1 	bl	800e4fc <rfalRunTransceiveWorker>
            break;
 800e59a:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e59c:	bf00      	nop
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000754 	.word	0x20000754

0800e5a4 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e5aa:	f000 fee9 	bl	800f380 <rfalFIFOStatusGetNumBytes>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e5b2:	4b17      	ldr	r3, [pc, #92]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d125      	bne.n	800e606 <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e5ba:	4b15      	ldr	r3, [pc, #84]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5bc:	8adb      	ldrh	r3, [r3, #22]
 800e5be:	2b1b      	cmp	r3, #27
 800e5c0:	d003      	beq.n	800e5ca <rfalErrorHandling+0x26>
 800e5c2:	4b13      	ldr	r3, [pc, #76]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5c4:	8adb      	ldrh	r3, [r3, #22]
 800e5c6:	2b15      	cmp	r3, #21
 800e5c8:	d11d      	bne.n	800e606 <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800e5ca:	f000 fef5 	bl	800f3b8 <rfalFIFOStatusIsIncompleteByte>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d018      	beq.n	800e606 <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e5d4:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5d6:	6a1b      	ldr	r3, [r3, #32]
 800e5d8:	88fa      	ldrh	r2, [r7, #6]
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f001 fcee 	bl	800ffbe <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e5e2:	4b0b      	ldr	r3, [pc, #44]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d007      	beq.n	800e5fa <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e5ea:	f000 ff09 	bl	800f400 <rfalFIFOGetNumIncompleteBits>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b07      	ldr	r3, [pc, #28]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f6:	b292      	uxth	r2, r2
 800e5f8:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <rfalErrorHandling+0x6c>)
 800e5fc:	2228      	movs	r2, #40	; 0x28
 800e5fe:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e600:	4b03      	ldr	r3, [pc, #12]	; (800e610 <rfalErrorHandling+0x6c>)
 800e602:	225a      	movs	r2, #90	; 0x5a
 800e604:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800e606:	bf00      	nop
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20000754 	.word	0x20000754

0800e614 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800e618:	21e0      	movs	r1, #224	; 0xe0
 800e61a:	2005      	movs	r0, #5
 800e61c:	f001 fd4c 	bl	80100b8 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e620:	2108      	movs	r1, #8
 800e622:	200c      	movs	r0, #12
 800e624:	f001 fd7f 	bl	8010126 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800e628:	4b05      	ldr	r3, [pc, #20]	; (800e640 <rfalCleanupTransceive+0x2c>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e62e:	4b04      	ldr	r3, [pc, #16]	; (800e640 <rfalCleanupTransceive+0x2c>)
 800e630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800e636:	4b02      	ldr	r3, [pc, #8]	; (800e640 <rfalCleanupTransceive+0x2c>)
 800e638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e63a:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e63c:	bf00      	nop
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	20000754 	.word	0x20000754

0800e644 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800e64a:	4b64      	ldr	r3, [pc, #400]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e64c:	785b      	ldrb	r3, [r3, #1]
 800e64e:	2b0a      	cmp	r3, #10
 800e650:	d00e      	beq.n	800e670 <rfalPrepareTransceive+0x2c>
 800e652:	4b62      	ldr	r3, [pc, #392]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e654:	785b      	ldrb	r3, [r3, #1]
 800e656:	2b0b      	cmp	r3, #11
 800e658:	d00a      	beq.n	800e670 <rfalPrepareTransceive+0x2c>
 800e65a:	4b60      	ldr	r3, [pc, #384]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e65c:	785b      	ldrb	r3, [r3, #1]
 800e65e:	2b0c      	cmp	r3, #12
 800e660:	d006      	beq.n	800e670 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800e662:	20c2      	movs	r0, #194	; 0xc2
 800e664:	f001 fcc7 	bl	800fff6 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800e668:	20d5      	movs	r0, #213	; 0xd5
 800e66a:	f001 fcc4 	bl	800fff6 <st25r3916ExecuteCommand>
 800e66e:	e002      	b.n	800e676 <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800e670:	20db      	movs	r0, #219	; 0xdb
 800e672:	f001 fcc0 	bl	800fff6 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e676:	4b59      	ldr	r3, [pc, #356]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e678:	785b      	ldrb	r3, [r3, #1]
 800e67a:	2b09      	cmp	r3, #9
 800e67c:	d01c      	beq.n	800e6b8 <rfalPrepareTransceive+0x74>
 800e67e:	4b57      	ldr	r3, [pc, #348]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e680:	785b      	ldrb	r3, [r3, #1]
 800e682:	2b0d      	cmp	r3, #13
 800e684:	d018      	beq.n	800e6b8 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e686:	4b55      	ldr	r3, [pc, #340]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d014      	beq.n	800e6b8 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800e68e:	4b53      	ldr	r3, [pc, #332]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	f240 423b 	movw	r2, #1083	; 0x43b
 800e696:	4293      	cmp	r3, r2
 800e698:	d804      	bhi.n	800e6a4 <rfalPrepareTransceive+0x60>
 800e69a:	4b50      	ldr	r3, [pc, #320]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	08db      	lsrs	r3, r3, #3
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	e005      	b.n	800e6b0 <rfalPrepareTransceive+0x6c>
 800e6a4:	4b4d      	ldr	r3, [pc, #308]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e6ac:	08db      	lsrs	r3, r3, #3
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2120      	movs	r1, #32
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f001 fa0d 	bl	800fad2 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e6b8:	4b48      	ldr	r3, [pc, #288]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800e6c0:	4b46      	ldr	r3, [pc, #280]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c4:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800e6c6:	4b46      	ldr	r3, [pc, #280]	; (800e7e0 <rfalPrepareTransceive+0x19c>)
 800e6c8:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e6ce:	4b43      	ldr	r3, [pc, #268]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d2:	f003 0304 	and.w	r3, r3, #4
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d003      	beq.n	800e6e2 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800e6da:	78fb      	ldrb	r3, [r7, #3]
 800e6dc:	f043 0320 	orr.w	r3, r3, #32
 800e6e0:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e6e2:	4b3e      	ldr	r3, [pc, #248]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e6:	f003 0310 	and.w	r3, r3, #16
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d003      	beq.n	800e6f6 <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800e6ee:	78fb      	ldrb	r3, [r7, #3]
 800e6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f4:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e6f6:	4b39      	ldr	r3, [pc, #228]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	f003 0320 	and.w	r3, r3, #32
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800e702:	78fb      	ldrb	r3, [r7, #3]
 800e704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e708:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800e70a:	78fb      	ldrb	r3, [r7, #3]
 800e70c:	461a      	mov	r2, r3
 800e70e:	21e0      	movs	r1, #224	; 0xe0
 800e710:	2005      	movs	r0, #5
 800e712:	f001 fd35 	bl	8010180 <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e716:	4b31      	ldr	r3, [pc, #196]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71a:	f003 0308 	and.w	r3, r3, #8
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d004      	beq.n	800e72c <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e722:	2108      	movs	r1, #8
 800e724:	200c      	movs	r0, #12
 800e726:	f001 fcc7 	bl	80100b8 <st25r3916ClrRegisterBits>
 800e72a:	e003      	b.n	800e734 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e72c:	2108      	movs	r1, #8
 800e72e:	200c      	movs	r0, #12
 800e730:	f001 fcf9 	bl	8010126 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e734:	4b29      	ldr	r3, [pc, #164]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e736:	79db      	ldrb	r3, [r3, #7]
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d108      	bne.n	800e74e <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e73c:	2102      	movs	r1, #2
 800e73e:	2012      	movs	r0, #18
 800e740:	f001 fcf1 	bl	8010126 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f043 0302 	orr.w	r3, r3, #2
 800e74a:	607b      	str	r3, [r7, #4]
 800e74c:	e003      	b.n	800e756 <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e74e:	2102      	movs	r1, #2
 800e750:	2012      	movs	r0, #18
 800e752:	f001 fcb1 	bl	80100b8 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800e756:	4b21      	ldr	r3, [pc, #132]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	2b0a      	cmp	r3, #10
 800e75c:	d007      	beq.n	800e76e <rfalPrepareTransceive+0x12a>
 800e75e:	4b1f      	ldr	r3, [pc, #124]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e760:	785b      	ldrb	r3, [r3, #1]
 800e762:	2b0b      	cmp	r3, #11
 800e764:	d003      	beq.n	800e76e <rfalPrepareTransceive+0x12a>
 800e766:	4b1d      	ldr	r3, [pc, #116]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e768:	785b      	ldrb	r3, [r3, #1]
 800e76a:	2b0c      	cmp	r3, #12
 800e76c:	d103      	bne.n	800e776 <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800e774:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e776:	4b19      	ldr	r3, [pc, #100]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e778:	785b      	ldrb	r3, [r3, #1]
 800e77a:	2b09      	cmp	r3, #9
 800e77c:	d003      	beq.n	800e786 <rfalPrepareTransceive+0x142>
 800e77e:	4b17      	ldr	r3, [pc, #92]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e780:	785b      	ldrb	r3, [r3, #1]
 800e782:	2b0d      	cmp	r3, #13
 800e784:	d105      	bne.n	800e792 <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e78c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e790:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e792:	4b12      	ldr	r3, [pc, #72]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d013      	beq.n	800e7c4 <rfalPrepareTransceive+0x180>
 800e79c:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00f      	beq.n	800e7c4 <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800e7a4:	4b0d      	ldr	r3, [pc, #52]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a8:	4a0e      	ldr	r2, [pc, #56]	; (800e7e4 <rfalPrepareTransceive+0x1a0>)
 800e7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ae:	0b1b      	lsrs	r3, r3, #12
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7f5 fea1 	bl	8004500 <timerCalculateTimer>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	4b06      	ldr	r3, [pc, #24]	; (800e7dc <rfalPrepareTransceive+0x198>)
 800e7c2:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f001 fee9 	bl	801059c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f001 ff1e 	bl	801060c <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e7d0:	f000 fdc8 	bl	800f364 <rfalFIFOStatusClear>
}
 800e7d4:	bf00      	nop
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000754 	.word	0x20000754
 800e7e0:	00f04078 	.word	0x00f04078
 800e7e4:	4d542005 	.word	0x4d542005

0800e7e8 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800e7e8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ea:	b08a      	sub	sp, #40	; 0x28
 800e7ec:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e7f6:	4ba1      	ldr	r3, [pc, #644]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e7f8:	7d1a      	ldrb	r2, [r3, #20]
 800e7fa:	4ba0      	ldr	r3, [pc, #640]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e7fc:	7d5b      	ldrb	r3, [r3, #21]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d003      	beq.n	800e80a <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e802:	4b9e      	ldr	r3, [pc, #632]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e804:	7d1a      	ldrb	r2, [r3, #20]
 800e806:	4b9d      	ldr	r3, [pc, #628]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e808:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e80a:	4b9c      	ldr	r3, [pc, #624]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e80c:	7d1b      	ldrb	r3, [r3, #20]
 800e80e:	3b0b      	subs	r3, #11
 800e810:	2b08      	cmp	r3, #8
 800e812:	f200 8212 	bhi.w	800ec3a <rfalTransceiveTx+0x452>
 800e816:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <rfalTransceiveTx+0x34>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e841 	.word	0x0800e841
 800e820:	0800e847 	.word	0x0800e847
 800e824:	0800e865 	.word	0x0800e865
 800e828:	0800e88d 	.word	0x0800e88d
 800e82c:	0800ea0d 	.word	0x0800ea0d
 800e830:	0800ea49 	.word	0x0800ea49
 800e834:	0800eb8b 	.word	0x0800eb8b
 800e838:	0800ebc5 	.word	0x0800ebc5
 800e83c:	0800ec11 	.word	0x0800ec11
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800e840:	4b8e      	ldr	r3, [pc, #568]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e842:	220c      	movs	r2, #12
 800e844:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800e846:	f7ff fbc9 	bl	800dfdc <rfalIsGTExpired>
 800e84a:	4603      	mov	r3, r0
 800e84c:	f083 0301 	eor.w	r3, r3, #1
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	f040 81f8 	bne.w	800ec48 <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800e858:	4b88      	ldr	r3, [pc, #544]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800e85e:	4b87      	ldr	r3, [pc, #540]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e860:	220d      	movs	r2, #13
 800e862:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800e864:	4b85      	ldr	r3, [pc, #532]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e866:	785b      	ldrb	r3, [r3, #1]
 800e868:	2b09      	cmp	r3, #9
 800e86a:	d00c      	beq.n	800e886 <rfalTransceiveTx+0x9e>
 800e86c:	4b83      	ldr	r3, [pc, #524]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e86e:	785b      	ldrb	r3, [r3, #1]
 800e870:	2b0d      	cmp	r3, #13
 800e872:	d008      	beq.n	800e886 <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800e874:	2204      	movs	r2, #4
 800e876:	2104      	movs	r1, #4
 800e878:	2024      	movs	r0, #36	; 0x24
 800e87a:	f001 fd05 	bl	8010288 <st25r3916CheckReg>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	f040 81e3 	bne.w	800ec4c <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800e886:	4b7d      	ldr	r3, [pc, #500]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e888:	220e      	movs	r2, #14
 800e88a:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e88c:	f7ff feda 	bl	800e644 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800e890:	4b7a      	ldr	r3, [pc, #488]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e892:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e896:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e898:	4b78      	ldr	r3, [pc, #480]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e89a:	785b      	ldrb	r3, [r3, #1]
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	d003      	beq.n	800e8a8 <rfalTransceiveTx+0xc0>
 800e8a0:	4b76      	ldr	r3, [pc, #472]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8a2:	785b      	ldrb	r3, [r3, #1]
 800e8a4:	2b08      	cmp	r3, #8
 800e8a6:	d152      	bne.n	800e94e <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800e8a8:	4b74      	ldr	r3, [pc, #464]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e8b0:	4b72      	ldr	r3, [pc, #456]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8b2:	6998      	ldr	r0, [r3, #24]
 800e8b4:	4b71      	ldr	r3, [pc, #452]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8b6:	8b9b      	ldrh	r3, [r3, #28]
 800e8b8:	3307      	adds	r3, #7
 800e8ba:	08db      	lsrs	r3, r3, #3
 800e8bc:	b299      	uxth	r1, r3
 800e8be:	4b6f      	ldr	r3, [pc, #444]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bf0c      	ite	eq
 800e8cc:	2301      	moveq	r3, #1
 800e8ce:	2300      	movne	r3, #0
 800e8d0:	b2dc      	uxtb	r4, r3
 800e8d2:	4b6a      	ldr	r3, [pc, #424]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf0c      	ite	eq
 800e8e0:	2301      	moveq	r3, #1
 800e8e2:	2300      	movne	r3, #0
 800e8e4:	b2dd      	uxtb	r5, r3
 800e8e6:	4b65      	ldr	r3, [pc, #404]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e8e8:	785b      	ldrb	r3, [r3, #1]
 800e8ea:	2b08      	cmp	r3, #8
 800e8ec:	bf0c      	ite	eq
 800e8ee:	2301      	moveq	r3, #1
 800e8f0:	2300      	movne	r3, #0
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	4a62      	ldr	r2, [pc, #392]	; (800ea80 <rfalTransceiveTx+0x298>)
 800e8f6:	9205      	str	r2, [sp, #20]
 800e8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8fc:	9204      	str	r2, [sp, #16]
 800e8fe:	4a61      	ldr	r2, [pc, #388]	; (800ea84 <rfalTransceiveTx+0x29c>)
 800e900:	9203      	str	r2, [sp, #12]
 800e902:	4a61      	ldr	r2, [pc, #388]	; (800ea88 <rfalTransceiveTx+0x2a0>)
 800e904:	9202      	str	r2, [sp, #8]
 800e906:	4a61      	ldr	r2, [pc, #388]	; (800ea8c <rfalTransceiveTx+0x2a4>)
 800e908:	9201      	str	r2, [sp, #4]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	462b      	mov	r3, r5
 800e90e:	4622      	mov	r2, r4
 800e910:	f7fe fb26 	bl	800cf60 <iso15693VCDCode>
 800e914:	4603      	mov	r3, r0
 800e916:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e918:	89fb      	ldrh	r3, [r7, #14]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d009      	beq.n	800e932 <rfalTransceiveTx+0x14a>
 800e91e:	89fb      	ldrh	r3, [r7, #14]
 800e920:	2b0d      	cmp	r3, #13
 800e922:	d006      	beq.n	800e932 <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800e924:	4a55      	ldr	r2, [pc, #340]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e926:	89fb      	ldrh	r3, [r7, #14]
 800e928:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e92a:	4b54      	ldr	r3, [pc, #336]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e92c:	2213      	movs	r2, #19
 800e92e:	751a      	strb	r2, [r3, #20]
                    break;
 800e930:	e193      	b.n	800ec5a <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800e932:	4b52      	ldr	r3, [pc, #328]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	b29b      	uxth	r3, r3
 800e93a:	4618      	mov	r0, r3
 800e93c:	f001 f85c 	bl	800f9f8 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800e940:	4b4e      	ldr	r3, [pc, #312]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e942:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e944:	4619      	mov	r1, r3
 800e946:	484f      	ldr	r0, [pc, #316]	; (800ea84 <rfalTransceiveTx+0x29c>)
 800e948:	f001 fb16 	bl	800ff78 <st25r3916WriteFifo>
 800e94c:	e01d      	b.n	800e98a <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800e94e:	4b4b      	ldr	r3, [pc, #300]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e950:	8b9b      	ldrh	r3, [r3, #28]
 800e952:	3307      	adds	r3, #7
 800e954:	08db      	lsrs	r3, r3, #3
 800e956:	b29a      	uxth	r2, r3
 800e958:	4b48      	ldr	r3, [pc, #288]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e95a:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800e95c:	4b47      	ldr	r3, [pc, #284]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e95e:	8b9b      	ldrh	r3, [r3, #28]
 800e960:	4618      	mov	r0, r3
 800e962:	f001 f849 	bl	800f9f8 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800e966:	4b45      	ldr	r3, [pc, #276]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e96a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e96e:	bf28      	it	cs
 800e970:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e974:	b29a      	uxth	r2, r3
 800e976:	4b41      	ldr	r3, [pc, #260]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e978:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800e97a:	4b40      	ldr	r3, [pc, #256]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e97c:	699a      	ldr	r2, [r3, #24]
 800e97e:	4b3f      	ldr	r3, [pc, #252]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e980:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f001 faf7 	bl	800ff78 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800e98a:	4b3c      	ldr	r3, [pc, #240]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e98c:	795b      	ldrb	r3, [r3, #5]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d008      	beq.n	800e9a4 <rfalTransceiveTx+0x1bc>
 800e992:	4b3a      	ldr	r3, [pc, #232]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e994:	795b      	ldrb	r3, [r3, #5]
 800e996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	4619      	mov	r1, r3
 800e99e:	2001      	movs	r0, #1
 800e9a0:	f001 fb65 	bl	801006e <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800e9a4:	4b35      	ldr	r3, [pc, #212]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	2b0a      	cmp	r3, #10
 800e9aa:	d007      	beq.n	800e9bc <rfalTransceiveTx+0x1d4>
 800e9ac:	4b33      	ldr	r3, [pc, #204]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	2b0b      	cmp	r3, #11
 800e9b2:	d003      	beq.n	800e9bc <rfalTransceiveTx+0x1d4>
 800e9b4:	4b31      	ldr	r3, [pc, #196]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9b6:	785b      	ldrb	r3, [r3, #1]
 800e9b8:	2b0c      	cmp	r3, #12
 800e9ba:	d10e      	bne.n	800e9da <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800e9bc:	f000 fdfe 	bl	800f5bc <rfalIsExtFieldOn>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	f083 0301 	eor.w	r3, r3, #1
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d006      	beq.n	800e9da <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800e9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9ce:	2225      	movs	r2, #37	; 0x25
 800e9d0:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e9d2:	4b2a      	ldr	r3, [pc, #168]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9d4:	2213      	movs	r2, #19
 800e9d6:	751a      	strb	r2, [r3, #20]
                    break;
 800e9d8:	e13f      	b.n	800ec5a <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800e9da:	4b28      	ldr	r3, [pc, #160]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800e9e6:	20c5      	movs	r0, #197	; 0xc5
 800e9e8:	f001 fb05 	bl	800fff6 <st25r3916ExecuteCommand>
 800e9ec:	e002      	b.n	800e9f4 <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800e9ee:	20c4      	movs	r0, #196	; 0xc4
 800e9f0:	f001 fb01 	bl	800fff6 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e9f4:	4b21      	ldr	r3, [pc, #132]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9f6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e9f8:	4b20      	ldr	r3, [pc, #128]	; (800ea7c <rfalTransceiveTx+0x294>)
 800e9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d201      	bcs.n	800ea04 <rfalTransceiveTx+0x21c>
 800ea00:	220f      	movs	r2, #15
 800ea02:	e000      	b.n	800ea06 <rfalTransceiveTx+0x21e>
 800ea04:	2211      	movs	r2, #17
 800ea06:	4b1d      	ldr	r3, [pc, #116]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea08:	751a      	strb	r2, [r3, #20]
            break;
 800ea0a:	e126      	b.n	800ec5a <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800ea0c:	2048      	movs	r0, #72	; 0x48
 800ea0e:	f001 fdc5 	bl	801059c <st25r3916GetInterrupt>
 800ea12:	4603      	mov	r3, r0
 800ea14:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 8119 	beq.w	800ec50 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d008      	beq.n	800ea3a <rfalTransceiveTx+0x252>
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	f003 0308 	and.w	r3, r3, #8
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d103      	bne.n	800ea3a <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea34:	2210      	movs	r2, #16
 800ea36:	751a      	strb	r2, [r3, #20]
 800ea38:	e006      	b.n	800ea48 <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800ea3a:	4b10      	ldr	r3, [pc, #64]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea3c:	2203      	movs	r2, #3
 800ea3e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ea40:	4b0e      	ldr	r3, [pc, #56]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea42:	2213      	movs	r2, #19
 800ea44:	751a      	strb	r2, [r3, #20]
                break;
 800ea46:	e108      	b.n	800ec5a <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ea48:	4b0c      	ldr	r3, [pc, #48]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea4a:	785b      	ldrb	r3, [r3, #1]
 800ea4c:	2b07      	cmp	r3, #7
 800ea4e:	d003      	beq.n	800ea58 <rfalTransceiveTx+0x270>
 800ea50:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea52:	785b      	ldrb	r3, [r3, #1]
 800ea54:	2b08      	cmp	r3, #8
 800ea56:	d16d      	bne.n	800eb34 <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800ea58:	4b08      	ldr	r3, [pc, #32]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea60:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ea62:	1ad3      	subs	r3, r2, r3
 800ea64:	4a05      	ldr	r2, [pc, #20]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea66:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	da11      	bge.n	800ea90 <rfalTransceiveTx+0x2a8>
 800ea6c:	4b03      	ldr	r3, [pc, #12]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea6e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ea70:	4b02      	ldr	r3, [pc, #8]	; (800ea7c <rfalTransceiveTx+0x294>)
 800ea72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	e00c      	b.n	800ea94 <rfalTransceiveTx+0x2ac>
 800ea7a:	bf00      	nop
 800ea7c:	20000754 	.word	0x20000754
 800ea80:	2000078c 	.word	0x2000078c
 800ea84:	200007a4 	.word	0x200007a4
 800ea88:	200009ac 	.word	0x200009ac
 800ea8c:	2000078a 	.word	0x2000078a
 800ea90:	4b74      	ldr	r3, [pc, #464]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ea92:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ea94:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800ea96:	89bb      	ldrh	r3, [r7, #12]
 800ea98:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ea9c:	bf28      	it	cs
 800ea9e:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800eaa2:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800eaa8:	4b6e      	ldr	r3, [pc, #440]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eaaa:	6998      	ldr	r0, [r3, #24]
 800eaac:	4b6d      	ldr	r3, [pc, #436]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eaae:	8b9b      	ldrh	r3, [r3, #28]
 800eab0:	3307      	adds	r3, #7
 800eab2:	08db      	lsrs	r3, r3, #3
 800eab4:	b299      	uxth	r1, r3
 800eab6:	4b6b      	ldr	r3, [pc, #428]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eab8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	bf0c      	ite	eq
 800eac4:	2301      	moveq	r3, #1
 800eac6:	2300      	movne	r3, #0
 800eac8:	b2dc      	uxtb	r4, r3
 800eaca:	4b66      	ldr	r3, [pc, #408]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eacc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ead0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	bf0c      	ite	eq
 800ead8:	2301      	moveq	r3, #1
 800eada:	2300      	movne	r3, #0
 800eadc:	b2dd      	uxtb	r5, r3
 800eade:	4b61      	ldr	r3, [pc, #388]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eae0:	785b      	ldrb	r3, [r3, #1]
 800eae2:	2b08      	cmp	r3, #8
 800eae4:	bf0c      	ite	eq
 800eae6:	2301      	moveq	r3, #1
 800eae8:	2300      	movne	r3, #0
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	1dba      	adds	r2, r7, #6
 800eaee:	9205      	str	r2, [sp, #20]
 800eaf0:	89ba      	ldrh	r2, [r7, #12]
 800eaf2:	9204      	str	r2, [sp, #16]
 800eaf4:	4a5c      	ldr	r2, [pc, #368]	; (800ec68 <rfalTransceiveTx+0x480>)
 800eaf6:	9203      	str	r2, [sp, #12]
 800eaf8:	4a5c      	ldr	r2, [pc, #368]	; (800ec6c <rfalTransceiveTx+0x484>)
 800eafa:	9202      	str	r2, [sp, #8]
 800eafc:	4a5c      	ldr	r2, [pc, #368]	; (800ec70 <rfalTransceiveTx+0x488>)
 800eafe:	9201      	str	r2, [sp, #4]
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	462b      	mov	r3, r5
 800eb04:	4622      	mov	r2, r4
 800eb06:	f7fe fa2b 	bl	800cf60 <iso15693VCDCode>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800eb0e:	89fb      	ldrh	r3, [r7, #14]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d009      	beq.n	800eb28 <rfalTransceiveTx+0x340>
 800eb14:	89fb      	ldrh	r3, [r7, #14]
 800eb16:	2b0d      	cmp	r3, #13
 800eb18:	d006      	beq.n	800eb28 <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800eb1a:	4a52      	ldr	r2, [pc, #328]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb1c:	89fb      	ldrh	r3, [r7, #14]
 800eb1e:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eb20:	4b50      	ldr	r3, [pc, #320]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb22:	2213      	movs	r2, #19
 800eb24:	751a      	strb	r2, [r3, #20]
                    break;
 800eb26:	e098      	b.n	800ec5a <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800eb28:	88fb      	ldrh	r3, [r7, #6]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	484e      	ldr	r0, [pc, #312]	; (800ec68 <rfalTransceiveTx+0x480>)
 800eb2e:	f001 fa23 	bl	800ff78 <st25r3916WriteFifo>
            {
 800eb32:	e017      	b.n	800eb64 <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800eb34:	4b4b      	ldr	r3, [pc, #300]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb36:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4b4a      	ldr	r3, [pc, #296]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4b48      	ldr	r3, [pc, #288]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb44:	1acb      	subs	r3, r1, r3
 800eb46:	4293      	cmp	r3, r2
 800eb48:	bfa8      	it	ge
 800eb4a:	4613      	movge	r3, r2
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800eb50:	4b44      	ldr	r3, [pc, #272]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	4a43      	ldr	r2, [pc, #268]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb56:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800eb58:	4413      	add	r3, r2
 800eb5a:	88fa      	ldrh	r2, [r7, #6]
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f001 fa0a 	bl	800ff78 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800eb64:	4b3f      	ldr	r3, [pc, #252]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb66:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800eb68:	88fb      	ldrh	r3, [r7, #6]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	4b3d      	ldr	r3, [pc, #244]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb70:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800eb72:	4b3c      	ldr	r3, [pc, #240]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb74:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800eb76:	4b3b      	ldr	r3, [pc, #236]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d201      	bcs.n	800eb82 <rfalTransceiveTx+0x39a>
 800eb7e:	220f      	movs	r2, #15
 800eb80:	e000      	b.n	800eb84 <rfalTransceiveTx+0x39c>
 800eb82:	2211      	movs	r2, #17
 800eb84:	4b37      	ldr	r3, [pc, #220]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eb86:	751a      	strb	r2, [r3, #20]
            break;
 800eb88:	e067      	b.n	800ec5a <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800eb8a:	2048      	movs	r0, #72	; 0x48
 800eb8c:	f001 fd06 	bl	801059c <st25r3916GetInterrupt>
 800eb90:	4603      	mov	r3, r0
 800eb92:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d05c      	beq.n	800ec54 <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f003 0308 	and.w	r3, r3, #8
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d003      	beq.n	800ebac <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800eba4:	4b2f      	ldr	r3, [pc, #188]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800eba6:	2212      	movs	r2, #18
 800eba8:	751a      	strb	r2, [r3, #20]
 800ebaa:	e00b      	b.n	800ebc4 <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d150      	bne.n	800ec58 <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800ebb6:	4b2b      	ldr	r3, [pc, #172]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebb8:	2203      	movs	r2, #3
 800ebba:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ebbc:	4b29      	ldr	r3, [pc, #164]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebbe:	2213      	movs	r2, #19
 800ebc0:	751a      	strb	r2, [r3, #20]
               break;
 800ebc2:	e04a      	b.n	800ec5a <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800ebc4:	4b27      	ldr	r3, [pc, #156]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebc6:	6a1b      	ldr	r3, [r3, #32]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d110      	bne.n	800ebee <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800ebcc:	4b25      	ldr	r3, [pc, #148]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebce:	799b      	ldrb	r3, [r3, #6]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d003      	beq.n	800ebdc <rfalTransceiveTx+0x3f4>
 800ebd4:	2140      	movs	r1, #64	; 0x40
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	f001 fa49 	bl	801006e <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800ebdc:	f7ff fd1a 	bl	800e614 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800ebe0:	4b20      	ldr	r3, [pc, #128]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800ebe6:	4b1f      	ldr	r3, [pc, #124]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	751a      	strb	r2, [r3, #20]
                break;
 800ebec:	e035      	b.n	800ec5a <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800ebee:	4b1d      	ldr	r3, [pc, #116]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebf0:	799b      	ldrb	r3, [r3, #6]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d008      	beq.n	800ec08 <rfalTransceiveTx+0x420>
 800ebf6:	4b1b      	ldr	r3, [pc, #108]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ebf8:	799b      	ldrb	r3, [r3, #6]
 800ebfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	4619      	mov	r1, r3
 800ec02:	2001      	movs	r0, #1
 800ec04:	f001 fa33 	bl	801006e <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800ec08:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec0a:	2251      	movs	r2, #81	; 0x51
 800ec0c:	751a      	strb	r2, [r3, #20]
            break;
 800ec0e:	e024      	b.n	800ec5a <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec12:	8adb      	ldrh	r3, [r3, #22]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d102      	bne.n	800ec1e <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800ec18:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec1a:	2208      	movs	r2, #8
 800ec1c:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ec1e:	4b11      	ldr	r3, [pc, #68]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec20:	799b      	ldrb	r3, [r3, #6]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <rfalTransceiveTx+0x446>
 800ec26:	2140      	movs	r1, #64	; 0x40
 800ec28:	2001      	movs	r0, #1
 800ec2a:	f001 fa20 	bl	801006e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ec2e:	f7ff fcf1 	bl	800e614 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ec32:	4b0c      	ldr	r3, [pc, #48]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	751a      	strb	r2, [r3, #20]
            break;
 800ec38:	e00f      	b.n	800ec5a <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ec3a:	4b0a      	ldr	r3, [pc, #40]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec3c:	2208      	movs	r2, #8
 800ec3e:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ec40:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <rfalTransceiveTx+0x47c>)
 800ec42:	2213      	movs	r2, #19
 800ec44:	751a      	strb	r2, [r3, #20]
            break;
 800ec46:	e008      	b.n	800ec5a <rfalTransceiveTx+0x472>
                break;
 800ec48:	bf00      	nop
 800ec4a:	e006      	b.n	800ec5a <rfalTransceiveTx+0x472>
                   break;
 800ec4c:	bf00      	nop
 800ec4e:	e004      	b.n	800ec5a <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ec50:	bf00      	nop
 800ec52:	e002      	b.n	800ec5a <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ec54:	bf00      	nop
 800ec56:	e000      	b.n	800ec5a <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800ec58:	bf00      	nop
    }
}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bdb0      	pop	{r4, r5, r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20000754 	.word	0x20000754
 800ec68:	200007a4 	.word	0x200007a4
 800ec6c:	200009ac 	.word	0x200009ac
 800ec70:	2000078a 	.word	0x2000078a

0800ec74 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec76:	b089      	sub	sp, #36	; 0x24
 800ec78:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800ec7e:	4baf      	ldr	r3, [pc, #700]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ec80:	7d1a      	ldrb	r2, [r3, #20]
 800ec82:	4bae      	ldr	r3, [pc, #696]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ec84:	7d5b      	ldrb	r3, [r3, #21]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d003      	beq.n	800ec92 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800ec8a:	4bac      	ldr	r3, [pc, #688]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ec8c:	7d1a      	ldrb	r2, [r3, #20]
 800ec8e:	4bab      	ldr	r3, [pc, #684]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ec90:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800ec92:	4baa      	ldr	r3, [pc, #680]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ec94:	7d1b      	ldrb	r3, [r3, #20]
 800ec96:	3b51      	subs	r3, #81	; 0x51
 800ec98:	2b09      	cmp	r3, #9
 800ec9a:	f200 8339 	bhi.w	800f310 <rfalTransceiveRx+0x69c>
 800ec9e:	a201      	add	r2, pc, #4	; (adr r2, 800eca4 <rfalTransceiveRx+0x30>)
 800eca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca4:	0800eccd 	.word	0x0800eccd
 800eca8:	0800f27d 	.word	0x0800f27d
 800ecac:	0800ed05 	.word	0x0800ed05
 800ecb0:	0800eda9 	.word	0x0800eda9
 800ecb4:	0800f1c1 	.word	0x0800f1c1
 800ecb8:	0800ee87 	.word	0x0800ee87
 800ecbc:	0800efbb 	.word	0x0800efbb
 800ecc0:	0800f2c7 	.word	0x0800f2c7
 800ecc4:	0800f199 	.word	0x0800f199
 800ecc8:	0800f253 	.word	0x0800f253
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800eccc:	4b9b      	ldr	r3, [pc, #620]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800ecd2:	4b9a      	ldr	r3, [pc, #616]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800ecd8:	4b98      	ldr	r3, [pc, #608]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d003      	beq.n	800ece8 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800ece0:	4b96      	ldr	r3, [pc, #600]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ece2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece4:	2200      	movs	r2, #0
 800ece6:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800ece8:	4b94      	ldr	r3, [pc, #592]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ecea:	785b      	ldrb	r3, [r3, #1]
 800ecec:	2b09      	cmp	r3, #9
 800ecee:	d003      	beq.n	800ecf8 <rfalTransceiveRx+0x84>
 800ecf0:	4b92      	ldr	r3, [pc, #584]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	2b0d      	cmp	r3, #13
 800ecf6:	d101      	bne.n	800ecfc <rfalTransceiveRx+0x88>
 800ecf8:	2252      	movs	r2, #82	; 0x52
 800ecfa:	e000      	b.n	800ecfe <rfalTransceiveRx+0x8a>
 800ecfc:	2253      	movs	r2, #83	; 0x53
 800ecfe:	4b8f      	ldr	r3, [pc, #572]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed00:	751a      	strb	r2, [r3, #20]
            break;
 800ed02:	e315      	b.n	800f330 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800ed04:	f644 0020 	movw	r0, #18464	; 0x4820
 800ed08:	f001 fc48 	bl	801059c <st25r3916GetInterrupt>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f000 8303 	beq.w	800f31e <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00b      	beq.n	800ed3a <rfalTransceiveRx+0xc6>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f003 0320 	and.w	r3, r3, #32
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d106      	bne.n	800ed3a <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800ed2c:	4b83      	ldr	r3, [pc, #524]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed2e:	2204      	movs	r2, #4
 800ed30:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ed32:	4b82      	ldr	r3, [pc, #520]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed34:	225a      	movs	r2, #90	; 0x5a
 800ed36:	751a      	strb	r2, [r3, #20]
                break;
 800ed38:	e2fa      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d015      	beq.n	800ed70 <rfalTransceiveRx+0xfc>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f003 0320 	and.w	r3, r3, #32
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d110      	bne.n	800ed70 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800ed4e:	4b7b      	ldr	r3, [pc, #492]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed50:	785b      	ldrb	r3, [r3, #1]
 800ed52:	2b09      	cmp	r3, #9
 800ed54:	d003      	beq.n	800ed5e <rfalTransceiveRx+0xea>
 800ed56:	4b79      	ldr	r3, [pc, #484]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed58:	785b      	ldrb	r3, [r3, #1]
 800ed5a:	2b0d      	cmp	r3, #13
 800ed5c:	d101      	bne.n	800ed62 <rfalTransceiveRx+0xee>
 800ed5e:	2204      	movs	r2, #4
 800ed60:	e000      	b.n	800ed64 <rfalTransceiveRx+0xf0>
 800ed62:	2225      	movs	r2, #37	; 0x25
 800ed64:	4b75      	ldr	r3, [pc, #468]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed66:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ed68:	4b74      	ldr	r3, [pc, #464]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed6a:	225a      	movs	r2, #90	; 0x5a
 800ed6c:	751a      	strb	r2, [r3, #20]
                break;
 800ed6e:	e2df      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00f      	beq.n	800ed9a <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800ed7a:	2032      	movs	r0, #50	; 0x32
 800ed7c:	f7f5 fbc0 	bl	8004500 <timerCalculateTimer>
 800ed80:	4602      	mov	r2, r0
 800ed82:	4b6e      	ldr	r3, [pc, #440]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed84:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ed86:	4b6d      	ldr	r3, [pc, #436]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed88:	2254      	movs	r2, #84	; 0x54
 800ed8a:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed92:	f023 0320 	bic.w	r3, r3, #32
 800ed96:	607b      	str	r3, [r7, #4]
 800ed98:	e006      	b.n	800eda8 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800ed9a:	4b68      	ldr	r3, [pc, #416]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ed9c:	2203      	movs	r2, #3
 800ed9e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eda0:	4b66      	ldr	r3, [pc, #408]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eda2:	225a      	movs	r2, #90	; 0x5a
 800eda4:	751a      	strb	r2, [r3, #20]
                break;
 800eda6:	e2c3      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800eda8:	4b64      	ldr	r3, [pc, #400]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800edaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edac:	4618      	mov	r0, r3
 800edae:	f7f5 fbb5 	bl	800451c <timerIsExpired>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d005      	beq.n	800edc4 <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800edb8:	4b60      	ldr	r3, [pc, #384]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800edba:	2209      	movs	r2, #9
 800edbc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800edbe:	4b5f      	ldr	r3, [pc, #380]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800edc0:	225a      	movs	r2, #90	; 0x5a
 800edc2:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800edc4:	485e      	ldr	r0, [pc, #376]	; (800ef40 <rfalTransceiveRx+0x2cc>)
 800edc6:	f001 fbe9 	bl	801059c <st25r3916GetInterrupt>
 800edca:	4602      	mov	r2, r0
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4313      	orrs	r3, r2
 800edd0:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 82a4 	beq.w	800f322 <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f003 0302 	and.w	r3, r3, #2
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d02f      	beq.n	800ee44 <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800ede4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ede8:	f001 fbd8 	bl	801059c <st25r3916GetInterrupt>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d006      	beq.n	800ee00 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800edf2:	4b52      	ldr	r3, [pc, #328]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800edf4:	2204      	movs	r2, #4
 800edf6:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800edf8:	4b50      	ldr	r3, [pc, #320]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800edfa:	225a      	movs	r2, #90	; 0x5a
 800edfc:	751a      	strb	r2, [r3, #20]
                    break;
 800edfe:	e297      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800ee00:	2200      	movs	r2, #0
 800ee02:	2102      	movs	r1, #2
 800ee04:	2024      	movs	r0, #36	; 0x24
 800ee06:	f001 fa3f 	bl	8010288 <st25r3916CheckReg>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800ee10:	4b4a      	ldr	r3, [pc, #296]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee12:	2204      	movs	r2, #4
 800ee14:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ee16:	4b49      	ldr	r3, [pc, #292]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee18:	225a      	movs	r2, #90	; 0x5a
 800ee1a:	751a      	strb	r2, [r3, #20]
                    break;
 800ee1c:	e288      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800ee1e:	2020      	movs	r0, #32
 800ee20:	f001 fbbc 	bl	801059c <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800ee24:	2204      	movs	r2, #4
 800ee26:	2104      	movs	r1, #4
 800ee28:	2031      	movs	r0, #49	; 0x31
 800ee2a:	f001 fa2d 	bl	8010288 <st25r3916CheckReg>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d003      	beq.n	800ee3c <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ee34:	4b41      	ldr	r3, [pc, #260]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee36:	2254      	movs	r2, #84	; 0x54
 800ee38:	751a      	strb	r2, [r3, #20]
                    break;
 800ee3a:	e279      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800ee3c:	4b3f      	ldr	r3, [pc, #252]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee3e:	2253      	movs	r2, #83	; 0x53
 800ee40:	751a      	strb	r2, [r3, #20]
                break;
 800ee42:	e275      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d008      	beq.n	800ee60 <rfalTransceiveRx+0x1ec>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f003 0310 	and.w	r3, r3, #16
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d103      	bne.n	800ee60 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800ee58:	4b38      	ldr	r3, [pc, #224]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee5a:	2255      	movs	r2, #85	; 0x55
 800ee5c:	751a      	strb	r2, [r3, #20]
                break;
 800ee5e:	e267      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d003      	beq.n	800ee72 <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800ee6a:	4b34      	ldr	r3, [pc, #208]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee6c:	2253      	movs	r2, #83	; 0x53
 800ee6e:	751a      	strb	r2, [r3, #20]
                break;
 800ee70:	e25e      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800ee72:	4834      	ldr	r0, [pc, #208]	; (800ef44 <rfalTransceiveRx+0x2d0>)
 800ee74:	f001 fb92 	bl	801059c <st25r3916GetInterrupt>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800ee80:	4b2e      	ldr	r3, [pc, #184]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee82:	2256      	movs	r2, #86	; 0x56
 800ee84:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d008      	beq.n	800eea2 <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800ee90:	4b2a      	ldr	r3, [pc, #168]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee92:	2209      	movs	r2, #9
 800ee94:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ee96:	4b29      	ldr	r3, [pc, #164]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ee98:	2257      	movs	r2, #87	; 0x57
 800ee9a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ee9c:	f7ff fb82 	bl	800e5a4 <rfalErrorHandling>
                break;
 800eea0:	e246      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800eea2:	4b26      	ldr	r3, [pc, #152]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eea4:	785b      	ldrb	r3, [r3, #1]
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d01d      	beq.n	800eee6 <rfalTransceiveRx+0x272>
 800eeaa:	4b24      	ldr	r3, [pc, #144]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eeac:	785b      	ldrb	r3, [r3, #1]
 800eeae:	2b0d      	cmp	r3, #13
 800eeb0:	d019      	beq.n	800eee6 <rfalTransceiveRx+0x272>
 800eeb2:	4b22      	ldr	r3, [pc, #136]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eeb4:	785b      	ldrb	r3, [r3, #1]
 800eeb6:	2b0a      	cmp	r3, #10
 800eeb8:	d015      	beq.n	800eee6 <rfalTransceiveRx+0x272>
 800eeba:	4b20      	ldr	r3, [pc, #128]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eebc:	785b      	ldrb	r3, [r3, #1]
 800eebe:	2b0b      	cmp	r3, #11
 800eec0:	d011      	beq.n	800eee6 <rfalTransceiveRx+0x272>
 800eec2:	4b1e      	ldr	r3, [pc, #120]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eec4:	785b      	ldrb	r3, [r3, #1]
 800eec6:	2b0c      	cmp	r3, #12
 800eec8:	d00d      	beq.n	800eee6 <rfalTransceiveRx+0x272>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d008      	beq.n	800eee6 <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800eed4:	4b19      	ldr	r3, [pc, #100]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eed6:	2209      	movs	r2, #9
 800eed8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800eeda:	4b18      	ldr	r3, [pc, #96]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eedc:	2257      	movs	r2, #87	; 0x57
 800eede:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800eee0:	f7ff fb60 	bl	800e5a4 <rfalErrorHandling>
                break;
 800eee4:	e224      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d008      	beq.n	800ef02 <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800eef0:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eef2:	221b      	movs	r2, #27
 800eef4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800eef6:	4b11      	ldr	r3, [pc, #68]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800eef8:	2257      	movs	r2, #87	; 0x57
 800eefa:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800eefc:	f7ff fb52 	bl	800e5a4 <rfalErrorHandling>
                break;
 800ef00:	e216      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d008      	beq.n	800ef1e <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800ef0c:	4b0b      	ldr	r3, [pc, #44]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ef0e:	2215      	movs	r2, #21
 800ef10:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ef12:	4b0a      	ldr	r3, [pc, #40]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ef14:	2257      	movs	r2, #87	; 0x57
 800ef16:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ef18:	f7ff fb44 	bl	800e5a4 <rfalErrorHandling>
                break;
 800ef1c:	e208      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00f      	beq.n	800ef48 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800ef28:	4b04      	ldr	r3, [pc, #16]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ef2a:	221d      	movs	r2, #29
 800ef2c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ef2e:	4b03      	ldr	r3, [pc, #12]	; (800ef3c <rfalTransceiveRx+0x2c8>)
 800ef30:	2257      	movs	r2, #87	; 0x57
 800ef32:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ef34:	f7ff fb36 	bl	800e5a4 <rfalErrorHandling>
                break;
 800ef38:	e1fa      	b.n	800f330 <rfalTransceiveRx+0x6bc>
 800ef3a:	bf00      	nop
 800ef3c:	20000754 	.word	0x20000754
 800ef40:	08000852 	.word	0x08000852
 800ef44:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800ef48:	4b9c      	ldr	r3, [pc, #624]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	2b0a      	cmp	r3, #10
 800ef4e:	d007      	beq.n	800ef60 <rfalTransceiveRx+0x2ec>
 800ef50:	4b9a      	ldr	r3, [pc, #616]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	2b0b      	cmp	r3, #11
 800ef56:	d003      	beq.n	800ef60 <rfalTransceiveRx+0x2ec>
 800ef58:	4b98      	ldr	r3, [pc, #608]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef5a:	785b      	ldrb	r3, [r3, #1]
 800ef5c:	2b0c      	cmp	r3, #12
 800ef5e:	d10b      	bne.n	800ef78 <rfalTransceiveRx+0x304>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d006      	beq.n	800ef78 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800ef6a:	4b94      	ldr	r3, [pc, #592]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef6c:	2225      	movs	r2, #37	; 0x25
 800ef6e:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef70:	4b92      	ldr	r3, [pc, #584]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef72:	225a      	movs	r2, #90	; 0x5a
 800ef74:	751a      	strb	r2, [r3, #20]
                 break;
 800ef76:	e1db      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f003 0310 	and.w	r3, r3, #16
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d014      	beq.n	800efac <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800ef82:	f000 fa19 	bl	800f3b8 <rfalFIFOStatusIsIncompleteByte>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d003      	beq.n	800ef94 <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800ef8c:	4b8b      	ldr	r3, [pc, #556]	; (800f1bc <rfalTransceiveRx+0x548>)
 800ef8e:	2228      	movs	r2, #40	; 0x28
 800ef90:	82da      	strh	r2, [r3, #22]
 800ef92:	e007      	b.n	800efa4 <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800ef94:	f000 fa22 	bl	800f3dc <rfalFIFOStatusIsMissingPar>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800ef9e:	4b87      	ldr	r3, [pc, #540]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efa0:	2209      	movs	r2, #9
 800efa2:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800efa4:	4b85      	ldr	r3, [pc, #532]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efa6:	2257      	movs	r2, #87	; 0x57
 800efa8:	751a      	strb	r2, [r3, #20]
 800efaa:	e006      	b.n	800efba <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800efac:	4b83      	ldr	r3, [pc, #524]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efae:	2203      	movs	r2, #3
 800efb0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800efb2:	4b82      	ldr	r3, [pc, #520]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efb4:	225a      	movs	r2, #90	; 0x5a
 800efb6:	751a      	strb	r2, [r3, #20]
                break;
 800efb8:	e1ba      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800efba:	f000 f9e1 	bl	800f380 <rfalFIFOStatusGetNumBytes>
 800efbe:	4603      	mov	r3, r0
 800efc0:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800efc2:	4b7e      	ldr	r3, [pc, #504]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d117      	bne.n	800effe <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800efce:	4b7b      	ldr	r3, [pc, #492]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efd0:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800efd2:	89fb      	ldrh	r3, [r7, #14]
 800efd4:	4413      	add	r3, r2
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d010      	beq.n	800effe <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800efdc:	89fb      	ldrh	r3, [r7, #14]
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d903      	bls.n	800efea <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800efe2:	89fb      	ldrh	r3, [r7, #14]
 800efe4:	3b02      	subs	r3, #2
 800efe6:	81fb      	strh	r3, [r7, #14]
 800efe8:	e009      	b.n	800effe <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800efea:	4b74      	ldr	r3, [pc, #464]	; (800f1bc <rfalTransceiveRx+0x548>)
 800efec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d905      	bls.n	800effe <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800eff2:	4b72      	ldr	r3, [pc, #456]	; (800f1bc <rfalTransceiveRx+0x548>)
 800eff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eff6:	3b02      	subs	r3, #2
 800eff8:	b29a      	uxth	r2, r3
 800effa:	4b70      	ldr	r3, [pc, #448]	; (800f1bc <rfalTransceiveRx+0x548>)
 800effc:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800effe:	4b6f      	ldr	r3, [pc, #444]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f000:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f002:	89fb      	ldrh	r3, [r7, #14]
 800f004:	4413      	add	r3, r2
 800f006:	b29a      	uxth	r2, r3
 800f008:	4b6c      	ldr	r3, [pc, #432]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f00a:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800f00c:	4b6b      	ldr	r3, [pc, #428]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f00e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f010:	4b6a      	ldr	r3, [pc, #424]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f014:	3307      	adds	r3, #7
 800f016:	08db      	lsrs	r3, r3, #3
 800f018:	b29b      	uxth	r3, r3
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d90f      	bls.n	800f03e <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800f01e:	4b67      	ldr	r3, [pc, #412]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f020:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f022:	3307      	adds	r3, #7
 800f024:	08db      	lsrs	r3, r3, #3
 800f026:	b29a      	uxth	r2, r3
 800f028:	4b64      	ldr	r3, [pc, #400]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f02a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800f030:	4b62      	ldr	r3, [pc, #392]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f032:	8adb      	ldrh	r3, [r3, #22]
 800f034:	2b02      	cmp	r3, #2
 800f036:	d102      	bne.n	800f03e <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800f038:	4b60      	ldr	r3, [pc, #384]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f03a:	2201      	movs	r2, #1
 800f03c:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800f03e:	4b5f      	ldr	r3, [pc, #380]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	4a5e      	ldr	r2, [pc, #376]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f044:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f046:	4413      	add	r3, r2
 800f048:	89fa      	ldrh	r2, [r7, #14]
 800f04a:	4611      	mov	r1, r2
 800f04c:	4618      	mov	r0, r3
 800f04e:	f000 ffb6 	bl	800ffbe <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800f052:	4b5a      	ldr	r3, [pc, #360]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f056:	2b00      	cmp	r3, #0
 800f058:	d019      	beq.n	800f08e <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800f05a:	4b58      	ldr	r3, [pc, #352]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f05c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f05e:	4b57      	ldr	r3, [pc, #348]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	00d2      	lsls	r2, r2, #3
 800f064:	b292      	uxth	r2, r2
 800f066:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800f068:	f000 f9a6 	bl	800f3b8 <rfalFIFOStatusIsIncompleteByte>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00d      	beq.n	800f08e <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800f072:	f000 f9c5 	bl	800f400 <rfalFIFOGetNumIncompleteBits>
 800f076:	4603      	mov	r3, r0
 800f078:	f1c3 0208 	rsb	r2, r3, #8
 800f07c:	4b4f      	ldr	r3, [pc, #316]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f080:	8819      	ldrh	r1, [r3, #0]
 800f082:	b292      	uxth	r2, r2
 800f084:	4b4d      	ldr	r3, [pc, #308]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f088:	1a8a      	subs	r2, r1, r2
 800f08a:	b292      	uxth	r2, r2
 800f08c:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800f08e:	4b4b      	ldr	r3, [pc, #300]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f090:	785b      	ldrb	r3, [r3, #1]
 800f092:	2b07      	cmp	r3, #7
 800f094:	d003      	beq.n	800f09e <rfalTransceiveRx+0x42a>
 800f096:	4b49      	ldr	r3, [pc, #292]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f098:	785b      	ldrb	r3, [r3, #1]
 800f09a:	2b08      	cmp	r3, #8
 800f09c:	d165      	bne.n	800f16a <rfalTransceiveRx+0x4f6>
 800f09e:	4b47      	ldr	r3, [pc, #284]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0a0:	8adb      	ldrh	r3, [r3, #22]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d161      	bne.n	800f16a <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f0aa:	4b44      	ldr	r3, [pc, #272]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0ac:	6a18      	ldr	r0, [r3, #32]
 800f0ae:	4b43      	ldr	r3, [pc, #268]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0b0:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800f0b2:	4b42      	ldr	r3, [pc, #264]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0b4:	f8d3 5264 	ldr.w	r5, [r3, #612]	; 0x264
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f0b8:	4b40      	ldr	r3, [pc, #256]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0ba:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800f0be:	3307      	adds	r3, #7
 800f0c0:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f0c2:	b29e      	uxth	r6, r3
 800f0c4:	4b3d      	ldr	r3, [pc, #244]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f0ca:	4a3c      	ldr	r2, [pc, #240]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0cc:	f8b2 2278 	ldrh.w	r2, [r2, #632]	; 0x278
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f0d0:	493a      	ldr	r1, [pc, #232]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f0d2:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f0d4:	2908      	cmp	r1, #8
 800f0d6:	bf0c      	ite	eq
 800f0d8:	2101      	moveq	r1, #1
 800f0da:	2100      	movne	r1, #0
 800f0dc:	b2c9      	uxtb	r1, r1
 800f0de:	9103      	str	r1, [sp, #12]
 800f0e0:	9202      	str	r2, [sp, #8]
 800f0e2:	9301      	str	r3, [sp, #4]
 800f0e4:	1cbb      	adds	r3, r7, #2
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4633      	mov	r3, r6
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	f7fe f8ad 	bl	800d24c <iso15693VICCDecode>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800f0f6:	897b      	ldrh	r3, [r7, #10]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <rfalTransceiveRx+0x48e>
 800f0fc:	897b      	ldrh	r3, [r7, #10]
 800f0fe:	2b15      	cmp	r3, #21
 800f100:	d11f      	bne.n	800f142 <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800f102:	4b2e      	ldr	r3, [pc, #184]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f104:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d118      	bne.n	800f142 <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800f110:	4b2a      	ldr	r3, [pc, #168]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f112:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10f      	bne.n	800f142 <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800f122:	4b26      	ldr	r3, [pc, #152]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f124:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	2b0f      	cmp	r3, #15
 800f12c:	d909      	bls.n	800f142 <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800f12e:	4b23      	ldr	r3, [pc, #140]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f130:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f134:	881a      	ldrh	r2, [r3, #0]
 800f136:	4b21      	ldr	r3, [pc, #132]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f138:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f13c:	3a10      	subs	r2, #16
 800f13e:	b292      	uxth	r2, r2
 800f140:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800f142:	4a1e      	ldr	r2, [pc, #120]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f144:	4b1d      	ldr	r3, [pc, #116]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f146:	f102 0418 	add.w	r4, r2, #24
 800f14a:	f503 7517 	add.w	r5, r3, #604	; 0x25c
 800f14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800f15a:	897b      	ldrh	r3, [r7, #10]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <rfalTransceiveRx+0x4f0>
 800f160:	897b      	ldrh	r3, [r7, #10]
 800f162:	e000      	b.n	800f166 <rfalTransceiveRx+0x4f2>
 800f164:	2302      	movs	r3, #2
 800f166:	4a15      	ldr	r2, [pc, #84]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f168:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800f16a:	4b14      	ldr	r3, [pc, #80]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f16c:	8adb      	ldrh	r3, [r3, #22]
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d003      	beq.n	800f17a <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800f172:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f174:	225a      	movs	r2, #90	; 0x5a
 800f176:	751a      	strb	r2, [r3, #20]
                break;
 800f178:	e0da      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800f17a:	4b10      	ldr	r3, [pc, #64]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f17c:	785b      	ldrb	r3, [r3, #1]
 800f17e:	2b09      	cmp	r3, #9
 800f180:	d003      	beq.n	800f18a <rfalTransceiveRx+0x516>
 800f182:	4b0e      	ldr	r3, [pc, #56]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f184:	785b      	ldrb	r3, [r3, #1]
 800f186:	2b0d      	cmp	r3, #13
 800f188:	d103      	bne.n	800f192 <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800f18a:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f18c:	2258      	movs	r2, #88	; 0x58
 800f18e:	751a      	strb	r2, [r3, #20]
                break;
 800f190:	e0ce      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f192:	4b0a      	ldr	r3, [pc, #40]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f194:	2259      	movs	r2, #89	; 0x59
 800f196:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f198:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f19a:	799b      	ldrb	r3, [r3, #6]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d003      	beq.n	800f1a8 <rfalTransceiveRx+0x534>
 800f1a0:	2140      	movs	r1, #64	; 0x40
 800f1a2:	2001      	movs	r0, #1
 800f1a4:	f000 ff63 	bl	801006e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f1a8:	f7ff fa34 	bl	800e614 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800f1ac:	4b03      	ldr	r3, [pc, #12]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800f1b2:	4b02      	ldr	r3, [pc, #8]	; (800f1bc <rfalTransceiveRx+0x548>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	751a      	strb	r2, [r3, #20]
            break;
 800f1b8:	e0ba      	b.n	800f330 <rfalTransceiveRx+0x6bc>
 800f1ba:	bf00      	nop
 800f1bc:	20000754 	.word	0x20000754
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800f1c0:	2032      	movs	r0, #50	; 0x32
 800f1c2:	f7f5 f99d 	bl	8004500 <timerCalculateTimer>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	4b5b      	ldr	r3, [pc, #364]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1ca:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800f1cc:	f000 f8d8 	bl	800f380 <rfalFIFOStatusGetNumBytes>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800f1d4:	4b58      	ldr	r3, [pc, #352]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1d6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f1d8:	89fb      	ldrh	r3, [r7, #14]
 800f1da:	4413      	add	r3, r2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	4b56      	ldr	r3, [pc, #344]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1e0:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800f1e2:	4b55      	ldr	r3, [pc, #340]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1e4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f1e6:	4b54      	ldr	r3, [pc, #336]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1ea:	3307      	adds	r3, #7
 800f1ec:	08db      	lsrs	r3, r3, #3
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d909      	bls.n	800f208 <rfalTransceiveRx+0x594>
 800f1f4:	4b50      	ldr	r3, [pc, #320]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f1f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1f8:	3307      	adds	r3, #7
 800f1fa:	08db      	lsrs	r3, r3, #3
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	4b4e      	ldr	r3, [pc, #312]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f200:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f202:	1ad3      	subs	r3, r2, r3
 800f204:	b29b      	uxth	r3, r3
 800f206:	e000      	b.n	800f20a <rfalTransceiveRx+0x596>
 800f208:	89fb      	ldrh	r3, [r7, #14]
 800f20a:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800f20c:	4b4a      	ldr	r3, [pc, #296]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	4a49      	ldr	r2, [pc, #292]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f212:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f214:	4413      	add	r3, r2
 800f216:	89ba      	ldrh	r2, [r7, #12]
 800f218:	4611      	mov	r1, r2
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 fecf 	bl	800ffbe <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800f220:	4b45      	ldr	r3, [pc, #276]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f222:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800f224:	89bb      	ldrh	r3, [r7, #12]
 800f226:	4413      	add	r3, r2
 800f228:	b29a      	uxth	r2, r3
 800f22a:	4b43      	ldr	r3, [pc, #268]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f22c:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800f22e:	89ba      	ldrh	r2, [r7, #12]
 800f230:	89fb      	ldrh	r3, [r7, #14]
 800f232:	429a      	cmp	r2, r3
 800f234:	d207      	bcs.n	800f246 <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800f236:	89fa      	ldrh	r2, [r7, #14]
 800f238:	89bb      	ldrh	r3, [r7, #12]
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4619      	mov	r1, r3
 800f240:	2000      	movs	r0, #0
 800f242:	f000 febc 	bl	800ffbe <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800f246:	f000 f88d 	bl	800f364 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f24a:	4b3b      	ldr	r3, [pc, #236]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f24c:	2254      	movs	r2, #84	; 0x54
 800f24e:	751a      	strb	r2, [r3, #20]
            break;
 800f250:	e06e      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f252:	4b39      	ldr	r3, [pc, #228]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f254:	799b      	ldrb	r3, [r3, #6]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d003      	beq.n	800f262 <rfalTransceiveRx+0x5ee>
 800f25a:	2140      	movs	r1, #64	; 0x40
 800f25c:	2001      	movs	r0, #1
 800f25e:	f000 ff06 	bl	801006e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f262:	f7ff f9d7 	bl	800e614 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f266:	4b34      	ldr	r3, [pc, #208]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f268:	8adb      	ldrh	r3, [r3, #22]
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d102      	bne.n	800f274 <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f26e:	4b32      	ldr	r3, [pc, #200]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f270:	2208      	movs	r2, #8
 800f272:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f274:	4b30      	ldr	r3, [pc, #192]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f276:	2200      	movs	r2, #0
 800f278:	751a      	strb	r2, [r3, #20]
            break;
 800f27a:	e059      	b.n	800f330 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800f27c:	482f      	ldr	r0, [pc, #188]	; (800f33c <rfalTransceiveRx+0x6c8>)
 800f27e:	f001 f98d 	bl	801059c <st25r3916GetInterrupt>
 800f282:	4603      	mov	r3, r0
 800f284:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d04c      	beq.n	800f326 <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f296:	4b28      	ldr	r3, [pc, #160]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f298:	2253      	movs	r2, #83	; 0x53
 800f29a:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d005      	beq.n	800f2b2 <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800f2a6:	4b24      	ldr	r3, [pc, #144]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f2ac:	4b22      	ldr	r3, [pc, #136]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2ae:	225a      	movs	r2, #90	; 0x5a
 800f2b0:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da38      	bge.n	800f32a <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f2b8:	4b1f      	ldr	r3, [pc, #124]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2ba:	2225      	movs	r2, #37	; 0x25
 800f2bc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f2be:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2c0:	225a      	movs	r2, #90	; 0x5a
 800f2c2:	751a      	strb	r2, [r3, #20]
            }
            break;
 800f2c4:	e031      	b.n	800f32a <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800f2c6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800f2ca:	f001 f967 	bl	801059c <st25r3916GetInterrupt>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d02a      	beq.n	800f32e <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d003      	beq.n	800f2ea <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f2e2:	4b15      	ldr	r3, [pc, #84]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2e4:	2259      	movs	r2, #89	; 0x59
 800f2e6:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800f2e8:	e022      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d006      	beq.n	800f302 <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2f6:	221d      	movs	r2, #29
 800f2f8:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f2fa:	4b0f      	ldr	r3, [pc, #60]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f2fc:	225a      	movs	r2, #90	; 0x5a
 800f2fe:	751a      	strb	r2, [r3, #20]
            break;
 800f300:	e016      	b.n	800f330 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800f302:	4b0d      	ldr	r3, [pc, #52]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f304:	2203      	movs	r2, #3
 800f306:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f308:	4b0b      	ldr	r3, [pc, #44]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f30a:	225a      	movs	r2, #90	; 0x5a
 800f30c:	751a      	strb	r2, [r3, #20]
            break;
 800f30e:	e00f      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f310:	4b09      	ldr	r3, [pc, #36]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f312:	2208      	movs	r2, #8
 800f314:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f316:	4b08      	ldr	r3, [pc, #32]	; (800f338 <rfalTransceiveRx+0x6c4>)
 800f318:	225a      	movs	r2, #90	; 0x5a
 800f31a:	751a      	strb	r2, [r3, #20]
            break;           
 800f31c:	e008      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f31e:	bf00      	nop
 800f320:	e006      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f322:	bf00      	nop
 800f324:	e004      	b.n	800f330 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f326:	bf00      	nop
 800f328:	e002      	b.n	800f330 <rfalTransceiveRx+0x6bc>
            break;
 800f32a:	bf00      	nop
 800f32c:	e000      	b.n	800f330 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800f32e:	bf00      	nop
    }    
}
 800f330:	bf00      	nop
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	20000754 	.word	0x20000754
 800f33c:	80005000 	.word	0x80005000

0800f340 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800f344:	4b05      	ldr	r3, [pc, #20]	; (800f35c <rfalFIFOStatusUpdate+0x1c>)
 800f346:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f34a:	2bff      	cmp	r3, #255	; 0xff
 800f34c:	d104      	bne.n	800f358 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800f34e:	2202      	movs	r2, #2
 800f350:	4903      	ldr	r1, [pc, #12]	; (800f360 <rfalFIFOStatusUpdate+0x20>)
 800f352:	201e      	movs	r0, #30
 800f354:	f000 fd99 	bl	800fe8a <st25r3916ReadMultipleRegisters>
    }
}
 800f358:	bf00      	nop
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	20000754 	.word	0x20000754
 800f360:	2000078e 	.word	0x2000078e

0800f364 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800f364:	b480      	push	{r7}
 800f366:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800f368:	4b04      	ldr	r3, [pc, #16]	; (800f37c <rfalFIFOStatusClear+0x18>)
 800f36a:	22ff      	movs	r2, #255	; 0xff
 800f36c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800f370:	bf00      	nop
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	20000754 	.word	0x20000754

0800f380 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800f386:	f7ff ffdb 	bl	800f340 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800f38a:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <rfalFIFOStatusGetNumBytes+0x34>)
 800f38c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f390:	099b      	lsrs	r3, r3, #6
 800f392:	b2db      	uxtb	r3, r3
 800f394:	b29b      	uxth	r3, r3
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800f39a:	4b06      	ldr	r3, [pc, #24]	; (800f3b4 <rfalFIFOStatusGetNumBytes+0x34>)
 800f39c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	88fb      	ldrh	r3, [r7, #6]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	80fb      	strh	r3, [r7, #6]
    return result;
 800f3a8:	88fb      	ldrh	r3, [r7, #6]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	20000754 	.word	0x20000754

0800f3b8 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f3bc:	f7ff ffc0 	bl	800f340 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800f3c0:	4b05      	ldr	r3, [pc, #20]	; (800f3d8 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800f3c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f3c6:	f003 030e 	and.w	r3, r3, #14
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bf14      	ite	ne
 800f3ce:	2301      	movne	r3, #1
 800f3d0:	2300      	moveq	r3, #0
 800f3d2:	b2db      	uxtb	r3, r3
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	20000754 	.word	0x20000754

0800f3dc <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f3e0:	f7ff ffae 	bl	800f340 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800f3e4:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <rfalFIFOStatusIsMissingPar+0x20>)
 800f3e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bf14      	ite	ne
 800f3f2:	2301      	movne	r3, #1
 800f3f4:	2300      	moveq	r3, #0
 800f3f6:	b2db      	uxtb	r3, r3
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	20000754 	.word	0x20000754

0800f400 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f404:	f7ff ff9c 	bl	800f340 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800f408:	4b04      	ldr	r3, [pc, #16]	; (800f41c <rfalFIFOGetNumIncompleteBits+0x1c>)
 800f40a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f40e:	085b      	lsrs	r3, r3, #1
 800f410:	b2db      	uxtb	r3, r3
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	b2db      	uxtb	r3, r3
}
 800f418:	4618      	mov	r0, r3
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	20000754 	.word	0x20000754

0800f420 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08c      	sub	sp, #48	; 0x30
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	607a      	str	r2, [r7, #4]
 800f42a:	461a      	mov	r2, r3
 800f42c:	460b      	mov	r3, r1
 800f42e:	72fb      	strb	r3, [r7, #11]
 800f430:	4613      	mov	r3, r2
 800f432:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800f434:	4b55      	ldr	r3, [pc, #340]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d903      	bls.n	800f444 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800f43c:	4b53      	ldr	r3, [pc, #332]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f43e:	785b      	ldrb	r3, [r3, #1]
 800f440:	2b07      	cmp	r3, #7
 800f442:	d001      	beq.n	800f448 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800f444:	2321      	movs	r3, #33	; 0x21
 800f446:	e09d      	b.n	800f584 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f448:	f241 0003 	movw	r0, #4099	; 0x1003
 800f44c:	f7fd fbfa 	bl	800cc44 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800f450:	4b4e      	ldr	r3, [pc, #312]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f452:	2210      	movs	r2, #16
 800f454:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f458:	7afb      	ldrb	r3, [r7, #11]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800f45e:	220b      	movs	r2, #11
 800f460:	e000      	b.n	800f464 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800f462:	220a      	movs	r2, #10
 800f464:	7afb      	ldrb	r3, [r7, #11]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800f46a:	2340      	movs	r3, #64	; 0x40
 800f46c:	e000      	b.n	800f470 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800f46e:	2300      	movs	r3, #0
 800f470:	4313      	orrs	r3, r2
 800f472:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800f478:	7afb      	ldrb	r3, [r7, #11]
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	b29b      	uxth	r3, r3
 800f480:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800f486:	7abb      	ldrb	r3, [r7, #10]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f494:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f498:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f49a:	f107 0310 	add.w	r3, r7, #16
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fe34 	bl	800e10c <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f4a4:	f7fe ffc5 	bl	800e432 <rfalTransceiveRunBlockingTx>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d103      	bne.n	800f4ba <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f4b2:	f7fe ffdb 	bl	800e46c <rfalTransceiveBlockingRx>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800f4ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4bc:	2b1d      	cmp	r3, #29
 800f4be:	d005      	beq.n	800f4cc <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f4c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4c2:	2b15      	cmp	r3, #21
 800f4c4:	d002      	beq.n	800f4cc <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f4c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4c8:	2b09      	cmp	r3, #9
 800f4ca:	d112      	bne.n	800f4f2 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	3307      	adds	r3, #7
 800f4d2:	08db      	lsrs	r3, r3, #3
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	2b0b      	cmp	r3, #11
 800f4d8:	d80b      	bhi.n	800f4f2 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	3307      	adds	r3, #7
 800f4e0:	08db      	lsrs	r3, r3, #3
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	f1c3 030c 	rsb	r3, r3, #12
 800f4e8:	089b      	lsrs	r3, r3, #2
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7f5 ff55 	bl	800539c <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800f4f2:	4b26      	ldr	r3, [pc, #152]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f4f4:	789b      	ldrb	r3, [r3, #2]
 800f4f6:	2bea      	cmp	r3, #234	; 0xea
 800f4f8:	d90c      	bls.n	800f514 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800f4fa:	4b24      	ldr	r3, [pc, #144]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f4fc:	789b      	ldrb	r3, [r3, #2]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	b29b      	uxth	r3, r3
 800f504:	b2db      	uxtb	r3, r3
 800f506:	b29b      	uxth	r3, r3
 800f508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f50c:	f043 0301 	orr.w	r3, r3, #1
 800f510:	b29b      	uxth	r3, r3
 800f512:	e00d      	b.n	800f530 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800f514:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f516:	789b      	ldrb	r3, [r3, #2]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	3301      	adds	r3, #1
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	011b      	lsls	r3, r3, #4
 800f520:	b29b      	uxth	r3, r3
 800f522:	b2db      	uxtb	r3, r3
 800f524:	b29b      	uxth	r3, r3
 800f526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f52a:	f043 0301 	orr.w	r3, r3, #1
 800f52e:	b29b      	uxth	r3, r3
 800f530:	4618      	mov	r0, r3
 800f532:	f7fd fb87 	bl	800cc44 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f536:	4b15      	ldr	r3, [pc, #84]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f538:	78db      	ldrb	r3, [r3, #3]
 800f53a:	2bea      	cmp	r3, #234	; 0xea
 800f53c:	d90c      	bls.n	800f558 <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f53e:	4b13      	ldr	r3, [pc, #76]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f540:	78db      	ldrb	r3, [r3, #3]
 800f542:	b29b      	uxth	r3, r3
 800f544:	011b      	lsls	r3, r3, #4
 800f546:	b29b      	uxth	r3, r3
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f550:	f043 0302 	orr.w	r3, r3, #2
 800f554:	b29b      	uxth	r3, r3
 800f556:	e00d      	b.n	800f574 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f558:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f55a:	78db      	ldrb	r3, [r3, #3]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	3301      	adds	r3, #1
 800f560:	b29b      	uxth	r3, r3
 800f562:	011b      	lsls	r3, r3, #4
 800f564:	b29b      	uxth	r3, r3
 800f566:	b2db      	uxtb	r3, r3
 800f568:	b29b      	uxth	r3, r3
 800f56a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f56e:	f043 0302 	orr.w	r3, r3, #2
 800f572:	b29b      	uxth	r3, r3
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd fb65 	bl	800cc44 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f57a:	4b04      	ldr	r3, [pc, #16]	; (800f58c <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    return ret;
 800f582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f584:	4618      	mov	r0, r3
 800f586:	3730      	adds	r7, #48	; 0x30
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20000754 	.word	0x20000754

0800f590 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af02      	add	r7, sp, #8
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	460b      	mov	r3, r1
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f59e:	7afa      	ldrb	r2, [r7, #11]
 800f5a0:	f107 0017 	add.w	r0, r7, #23
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	f7ff ff37 	bl	800f420 <rfalISO15693TransceiveAnticollisionFrame>
 800f5b2:	4603      	mov	r3, r0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3718      	adds	r7, #24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f5c0:	2240      	movs	r2, #64	; 0x40
 800f5c2:	2140      	movs	r1, #64	; 0x40
 800f5c4:	2031      	movs	r0, #49	; 0x31
 800f5c6:	f000 fe5f 	bl	8010288 <st25r3916CheckReg>
 800f5ca:	4603      	mov	r3, r0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	80fb      	strh	r3, [r7, #6]
 800f5da:	460b      	mov	r3, r1
 800f5dc:	717b      	strb	r3, [r7, #5]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f000 fe6e 	bl	80102c8 <st25r3916IsRegValid>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	f083 0301 	eor.w	r3, r3, #1
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800f5f8:	2307      	movs	r3, #7
 800f5fa:	e007      	b.n	800f60c <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	793a      	ldrb	r2, [r7, #4]
 800f602:	7979      	ldrb	r1, [r7, #5]
 800f604:	4618      	mov	r0, r3
 800f606:	f000 fdbb 	bl	8010180 <st25r3916ChangeRegisterBits>
 800f60a:	4603      	mov	r3, r0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	80fb      	strh	r3, [r7, #6]
 800f61e:	460b      	mov	r3, r1
 800f620:	717b      	strb	r3, [r7, #5]
 800f622:	4613      	mov	r3, r2
 800f624:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800f626:	88fb      	ldrh	r3, [r7, #6]
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	793a      	ldrb	r2, [r7, #4]
 800f62c:	7979      	ldrb	r1, [r7, #5]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fdf2 	bl	8010218 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b082      	sub	sp, #8
 800f642:	af00      	add	r7, sp, #0
 800f644:	603b      	str	r3, [r7, #0]
 800f646:	4603      	mov	r3, r0
 800f648:	71fb      	strb	r3, [r7, #7]
 800f64a:	460b      	mov	r3, r1
 800f64c:	71bb      	strb	r3, [r7, #6]
 800f64e:	4613      	mov	r3, r2
 800f650:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800f652:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f656:	f000 ffa1 	bl	801059c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800f65a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f65e:	f000 ffd5 	bl	801060c <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	4618      	mov	r0, r3
 800f666:	f000 fcc6 	bl	800fff6 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800f66a:	797b      	ldrb	r3, [r7, #5]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4619      	mov	r1, r3
 800f670:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f674:	f000 ff42 	bl	80104fc <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800f678:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f67c:	f000 ffd2 	bl	8010624 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d004      	beq.n	800f690 <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800f686:	79bb      	ldrb	r3, [r7, #6]
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 fbec 	bl	800fe68 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800f690:	2300      	movs	r3, #0

}
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800f6a2:	20c1      	movs	r0, #193	; 0xc1
 800f6a4:	f000 fca7 	bl	800fff6 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800f6a8:	2104      	movs	r1, #4
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	f000 fc1a 	bl	800fee4 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	f000 fa2b 	bl	800fb0c <st25r3916CheckChipID>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	f083 0301 	eor.w	r3, r3, #1
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800f6c2:	2324      	movs	r3, #36	; 0x24
 800f6c4:	e02d      	b.n	800f722 <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800f6c6:	f000 fe51 	bl	801036c <st25r3916InitInterrupts>
    st25r3916ledInit();
 800f6ca:	f000 ffe9 	bl	80106a0 <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800f6ce:	4b17      	ldr	r3, [pc, #92]	; (800f72c <st25r3916Initialize+0x90>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800f6d4:	2118      	movs	r1, #24
 800f6d6:	2001      	movs	r0, #1
 800f6d8:	f000 fd25 	bl	8010126 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800f6dc:	2210      	movs	r2, #16
 800f6de:	2110      	movs	r1, #16
 800f6e0:	2004      	movs	r0, #4
 800f6e2:	f000 fd99 	bl	8010218 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 800f6e6:	f000 f823 	bl	800f730 <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	f000 f854 	bl	800f798 <st25r3916MeasureVoltage>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800f6f4:	88fb      	ldrh	r3, [r7, #6]
 800f6f6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f6fa:	d201      	bcs.n	800f700 <st25r3916Initialize+0x64>
 800f6fc:	2380      	movs	r3, #128	; 0x80
 800f6fe:	e000      	b.n	800f702 <st25r3916Initialize+0x66>
 800f700:	2300      	movs	r3, #0
 800f702:	461a      	mov	r2, r3
 800f704:	2180      	movs	r1, #128	; 0x80
 800f706:	2001      	movs	r0, #1
 800f708:	f000 fd3a 	bl	8010180 <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 800f70c:	2148      	movs	r1, #72	; 0x48
 800f70e:	2002      	movs	r0, #2
 800f710:	f000 fcd2 	bl	80100b8 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	f000 ff84 	bl	8010624 <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 800f71c:	f000 ff8e 	bl	801063c <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	200009d0 	.word	0x200009d0

0800f730 <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800f734:	2280      	movs	r2, #128	; 0x80
 800f736:	2180      	movs	r1, #128	; 0x80
 800f738:	2002      	movs	r0, #2
 800f73a:	f000 fda5 	bl	8010288 <st25r3916CheckReg>
 800f73e:	4603      	mov	r3, r0
 800f740:	f083 0301 	eor.w	r3, r3, #1
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00c      	beq.n	800f764 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 800f74a:	2080      	movs	r0, #128	; 0x80
 800f74c:	f000 ff26 	bl	801059c <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800f750:	2080      	movs	r0, #128	; 0x80
 800f752:	f000 ff5b 	bl	801060c <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800f756:	2180      	movs	r1, #128	; 0x80
 800f758:	2002      	movs	r0, #2
 800f75a:	f000 fce4 	bl	8010126 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800f75e:	2080      	movs	r0, #128	; 0x80
 800f760:	f000 ff60 	bl	8010624 <st25r3916DisableInterrupts>
    }
}
 800f764:	bf00      	nop
 800f766:	bd80      	pop	{r7, pc}

0800f768 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	4603      	mov	r3, r0
 800f770:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800f772:	79fb      	ldrb	r3, [r7, #7]
 800f774:	461a      	mov	r2, r3
 800f776:	2107      	movs	r1, #7
 800f778:	202c      	movs	r0, #44	; 0x2c
 800f77a:	f000 fd01 	bl	8010180 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 800f77e:	f107 030f 	add.w	r3, r7, #15
 800f782:	2264      	movs	r2, #100	; 0x64
 800f784:	2125      	movs	r1, #37	; 0x25
 800f786:	20df      	movs	r0, #223	; 0xdf
 800f788:	f7ff ff59 	bl	800f63e <st25r3916ExecuteCommandAndGetResult>

    return result;
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
	...

0800f798 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff ffdf 	bl	800f768 <st25r3916MeasurePowerSupply>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	0052      	lsls	r2, r2, #1
 800f7b6:	441a      	add	r2, r3
 800f7b8:	00d2      	lsls	r2, r2, #3
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 800f7be:	7bfb      	ldrb	r3, [r7, #15]
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	3305      	adds	r3, #5
 800f7c4:	4a06      	ldr	r2, [pc, #24]	; (800f7e0 <st25r3916MeasureVoltage+0x48>)
 800f7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ca:	08db      	lsrs	r3, r3, #3
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	89bb      	ldrh	r3, [r7, #12]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	81bb      	strh	r3, [r7, #12]

    return mV;
 800f7d4:	89bb      	ldrh	r3, [r7, #12]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	cccccccd 	.word	0xcccccccd

0800f7e4 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800f7ec:	2180      	movs	r1, #128	; 0x80
 800f7ee:	202c      	movs	r0, #44	; 0x2c
 800f7f0:	f000 fc99 	bl	8010126 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800f7f4:	2180      	movs	r1, #128	; 0x80
 800f7f6:	202c      	movs	r0, #44	; 0x2c
 800f7f8:	f000 fc5e 	bl	80100b8 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 800f7fc:	f107 030f 	add.w	r3, r7, #15
 800f800:	2206      	movs	r2, #6
 800f802:	216c      	movs	r1, #108	; 0x6c
 800f804:	20d6      	movs	r0, #214	; 0xd6
 800f806:	f7ff ff1a 	bl	800f63e <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 800f80a:	7bfb      	ldrb	r3, [r7, #15]
 800f80c:	091b      	lsrs	r3, r3, #4
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d02b      	beq.n	800f870 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 800f818:	2280      	movs	r2, #128	; 0x80
 800f81a:	2180      	movs	r1, #128	; 0x80
 800f81c:	2001      	movs	r0, #1
 800f81e:	f000 fd33 	bl	8010288 <st25r3916CheckReg>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00d      	beq.n	800f844 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 800f828:	7bfb      	ldrb	r3, [r7, #15]
 800f82a:	2b04      	cmp	r3, #4
 800f82c:	d903      	bls.n	800f836 <st25r3916AdjustRegulators+0x52>
 800f82e:	7bfb      	ldrb	r3, [r7, #15]
 800f830:	3b05      	subs	r3, #5
 800f832:	b2db      	uxtb	r3, r3
 800f834:	e000      	b.n	800f838 <st25r3916AdjustRegulators+0x54>
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800f840:	801a      	strh	r2, [r3, #0]
 800f842:	e003      	b.n	800f84c <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800f84a:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	881a      	ldrh	r2, [r3, #0]
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	b29b      	uxth	r3, r3
 800f854:	4619      	mov	r1, r3
 800f856:	0089      	lsls	r1, r1, #2
 800f858:	440b      	add	r3, r1
 800f85a:	4619      	mov	r1, r3
 800f85c:	0088      	lsls	r0, r1, #2
 800f85e:	4619      	mov	r1, r3
 800f860:	4603      	mov	r3, r0
 800f862:	440b      	add	r3, r1
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	b29b      	uxth	r3, r3
 800f868:	4413      	add	r3, r2
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 800f870:	2300      	movs	r3, #0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <st25r3916SetBitrate>:
}


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 800f87a:	b580      	push	{r7, lr}
 800f87c:	b084      	sub	sp, #16
 800f87e:	af00      	add	r7, sp, #0
 800f880:	4603      	mov	r3, r0
 800f882:	460a      	mov	r2, r1
 800f884:	71fb      	strb	r3, [r7, #7]
 800f886:	4613      	mov	r3, r2
 800f888:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 800f88a:	f107 030f 	add.w	r3, r7, #15
 800f88e:	4619      	mov	r1, r3
 800f890:	2004      	movs	r0, #4
 800f892:	f000 fae9 	bl	800fe68 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 800f896:	79bb      	ldrb	r3, [r7, #6]
 800f898:	2bff      	cmp	r3, #255	; 0xff
 800f89a:	d00e      	beq.n	800f8ba <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 800f89c:	79bb      	ldrb	r3, [r7, #6]
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d901      	bls.n	800f8a6 <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 800f8a2:	2307      	movs	r3, #7
 800f8a4:	e025      	b.n	800f8f2 <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	f023 030f 	bic.w	r3, r3, #15
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800f8b0:	7bfa      	ldrb	r2, [r7, #15]
 800f8b2:	79bb      	ldrb	r3, [r7, #6]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 800f8ba:	79fb      	ldrb	r3, [r7, #7]
 800f8bc:	2bff      	cmp	r3, #255	; 0xff
 800f8be:	d012      	beq.n	800f8e6 <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 800f8c0:	79fb      	ldrb	r3, [r7, #7]
 800f8c2:	2b07      	cmp	r3, #7
 800f8c4:	d901      	bls.n	800f8ca <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 800f8c6:	2307      	movs	r3, #7
 800f8c8:	e013      	b.n	800f8f2 <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	f003 030f 	and.w	r3, r3, #15
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	b25a      	sxtb	r2, r3
 800f8da:	7bfb      	ldrb	r3, [r7, #15]
 800f8dc:	b25b      	sxtb	r3, r3
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	b25b      	sxtb	r3, r3
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 800f8e6:	7bfb      	ldrb	r3, [r7, #15]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	2004      	movs	r0, #4
 800f8ec:	f000 fafa 	bl	800fee4 <st25r3916WriteRegister>
 800f8f0:	4603      	mov	r3, r0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 800f8fc:	b590      	push	{r4, r7, lr}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	4604      	mov	r4, r0
 800f904:	4608      	mov	r0, r1
 800f906:	4611      	mov	r1, r2
 800f908:	461a      	mov	r2, r3
 800f90a:	4623      	mov	r3, r4
 800f90c:	71fb      	strb	r3, [r7, #7]
 800f90e:	4603      	mov	r3, r0
 800f910:	71bb      	strb	r3, [r7, #6]
 800f912:	460b      	mov	r3, r1
 800f914:	717b      	strb	r3, [r7, #5]
 800f916:	4613      	mov	r3, r2
 800f918:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 800f91a:	79fb      	ldrb	r3, [r7, #7]
 800f91c:	2bc8      	cmp	r3, #200	; 0xc8
 800f91e:	d004      	beq.n	800f92a <st25r3916PerformCollisionAvoidance+0x2e>
 800f920:	79fb      	ldrb	r3, [r7, #7]
 800f922:	2bc9      	cmp	r3, #201	; 0xc9
 800f924:	d001      	beq.n	800f92a <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 800f926:	2307      	movs	r3, #7
 800f928:	e05d      	b.n	800f9e6 <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 800f92a:	230c      	movs	r3, #12
 800f92c:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800f92e:	79bb      	ldrb	r3, [r7, #6]
 800f930:	2bff      	cmp	r3, #255	; 0xff
 800f932:	d102      	bne.n	800f93a <st25r3916PerformCollisionAvoidance+0x3e>
 800f934:	797b      	ldrb	r3, [r7, #5]
 800f936:	2bff      	cmp	r3, #255	; 0xff
 800f938:	d01e      	beq.n	800f978 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800f93e:	79bb      	ldrb	r3, [r7, #6]
 800f940:	2bff      	cmp	r3, #255	; 0xff
 800f942:	d003      	beq.n	800f94c <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
 800f946:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800f94a:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800f94c:	797b      	ldrb	r3, [r7, #5]
 800f94e:	2bff      	cmp	r3, #255	; 0xff
 800f950:	d003      	beq.n	800f95a <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 800f952:	7bfb      	ldrb	r3, [r7, #15]
 800f954:	f043 030f 	orr.w	r3, r3, #15
 800f958:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 800f95a:	79bb      	ldrb	r3, [r7, #6]
 800f95c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f960:	b2da      	uxtb	r2, r3
 800f962:	797b      	ldrb	r3, [r7, #5]
 800f964:	f003 030f 	and.w	r3, r3, #15
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	4313      	orrs	r3, r2
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	4619      	mov	r1, r3
 800f972:	202a      	movs	r0, #42	; 0x2a
 800f974:	f000 fc04 	bl	8010180 <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 800f978:	793b      	ldrb	r3, [r7, #4]
 800f97a:	461a      	mov	r2, r3
 800f97c:	2103      	movs	r1, #3
 800f97e:	200a      	movs	r0, #10
 800f980:	f000 fbfe 	bl	8010180 <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f984:	481a      	ldr	r0, [pc, #104]	; (800f9f0 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f986:	f000 fe09 	bl	801059c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f98a:	4819      	ldr	r0, [pc, #100]	; (800f9f0 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f98c:	f000 fe3e 	bl	801060c <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 fb2f 	bl	800fff6 <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 800f998:	210a      	movs	r1, #10
 800f99a:	4816      	ldr	r0, [pc, #88]	; (800f9f4 <st25r3916PerformCollisionAvoidance+0xf8>)
 800f99c:	f000 fdae 	bl	80104fc <st25r3916WaitForInterruptsTimed>
 800f9a0:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d002      	beq.n	800f9b2 <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 800f9ac:	231d      	movs	r3, #29
 800f9ae:	81bb      	strh	r3, [r7, #12]
 800f9b0:	e011      	b.n	800f9d6 <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00c      	beq.n	800f9d6 <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 800f9bc:	210a      	movs	r1, #10
 800f9be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f9c2:	f000 fd9b 	bl	80104fc <st25r3916WaitForInterruptsTimed>
 800f9c6:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d001      	beq.n	800f9d6 <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 800f9d6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800f9da:	f000 fddf 	bl	801059c <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f9de:	4804      	ldr	r0, [pc, #16]	; (800f9f0 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f9e0:	f000 fe20 	bl	8010624 <st25r3916DisableInterrupts>
    
    return err;
 800f9e4:	89bb      	ldrh	r3, [r7, #12]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd90      	pop	{r4, r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20000600 	.word	0x20000600
 800f9f4:	20000400 	.word	0x20000400

0800f9f8 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	4603      	mov	r3, r0
 800fa00:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 800fa02:	88fb      	ldrh	r3, [r7, #6]
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	4619      	mov	r1, r3
 800fa08:	2023      	movs	r0, #35	; 0x23
 800fa0a:	f000 fa6b 	bl	800fee4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 800fa0e:	88fb      	ldrh	r3, [r7, #6]
 800fa10:	0a1b      	lsrs	r3, r3, #8
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	4619      	mov	r1, r3
 800fa18:	2022      	movs	r0, #34	; 0x22
 800fa1a:	f000 fa63 	bl	800fee4 <st25r3916WriteRegister>
}
 800fa1e:	bf00      	nop
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
	...

0800fa28 <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 800fa34:	2300      	movs	r3, #0
 800fa36:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 800fa38:	4a19      	ldr	r2, [pc, #100]	; (800faa0 <st25r3916SetNoResponseTime+0x78>)
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 800fa3e:	2300      	movs	r3, #0
 800fa40:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa48:	d312      	bcc.n	800fa70 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	333f      	adds	r3, #63	; 0x3f
 800fa52:	099b      	lsrs	r3, r3, #6
 800fa54:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa5c:	d304      	bcc.n	800fa68 <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 800fa5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa62:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 800fa64:	2307      	movs	r3, #7
 800fa66:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	019b      	lsls	r3, r3, #6
 800fa6c:	4a0c      	ldr	r2, [pc, #48]	; (800faa0 <st25r3916SetNoResponseTime+0x78>)
 800fa6e:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 800fa70:	7b7b      	ldrb	r3, [r7, #13]
 800fa72:	461a      	mov	r2, r3
 800fa74:	2101      	movs	r1, #1
 800fa76:	2012      	movs	r0, #18
 800fa78:	f000 fb82 	bl	8010180 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	0a1b      	lsrs	r3, r3, #8
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	4619      	mov	r1, r3
 800fa84:	2010      	movs	r0, #16
 800fa86:	f000 fa2d 	bl	800fee4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	4619      	mov	r1, r3
 800fa90:	2011      	movs	r0, #17
 800fa92:	f000 fa27 	bl	800fee4 <st25r3916WriteRegister>

    return err;
 800fa96:	89fb      	ldrh	r3, [r7, #14]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	200009d0 	.word	0x200009d0

0800faa4 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 800faae:	88fb      	ldrh	r3, [r7, #6]
 800fab0:	0a1b      	lsrs	r3, r3, #8
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	4619      	mov	r1, r3
 800fab8:	2013      	movs	r0, #19
 800faba:	f000 fa13 	bl	800fee4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 800fabe:	88fb      	ldrh	r3, [r7, #6]
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	4619      	mov	r1, r3
 800fac4:	2014      	movs	r0, #20
 800fac6:	f000 fa0d 	bl	800fee4 <st25r3916WriteRegister>
}
 800faca:	bf00      	nop
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b082      	sub	sp, #8
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	4603      	mov	r3, r0
 800fada:	460a      	mov	r2, r1
 800fadc:	80fb      	strh	r3, [r7, #6]
 800fade:	4613      	mov	r3, r2
 800fae0:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 800fae2:	88fb      	ldrh	r3, [r7, #6]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff ffdd 	bl	800faa4 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 800faea:	797b      	ldrb	r3, [r7, #5]
 800faec:	461a      	mov	r2, r3
 800faee:	21e0      	movs	r1, #224	; 0xe0
 800faf0:	2012      	movs	r0, #18
 800faf2:	f000 fb45 	bl	8010180 <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 800faf6:	797b      	ldrb	r3, [r7, #5]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d102      	bne.n	800fb02 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 800fafc:	20e0      	movs	r0, #224	; 0xe0
 800fafe:	f000 fa7a 	bl	800fff6 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 800fb14:	2300      	movs	r3, #0
 800fb16:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 800fb18:	f107 030f 	add.w	r3, r7, #15
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	203f      	movs	r0, #63	; 0x3f
 800fb20:	f000 f9a2 	bl	800fe68 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fb2a:	2b28      	cmp	r3, #40	; 0x28
 800fb2c:	d001      	beq.n	800fb32 <st25r3916CheckChipID+0x26>
    {
        return false;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e009      	b.n	800fb46 <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d005      	beq.n	800fb44 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
 800fb3a:	f003 0307 	and.w	r3, r3, #7
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 800fb44:	2301      	movs	r3, #1
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b084      	sub	sp, #16
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d016      	beq.n	800fb90 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 800fb62:	2378      	movs	r3, #120	; 0x78
 800fb64:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	785b      	ldrb	r3, [r3, #1]
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d903      	bls.n	800fb76 <st25r3916StreamConfigure+0x28>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	785b      	ldrb	r3, [r3, #1]
 800fb72:	2b04      	cmp	r3, #4
 800fb74:	d901      	bls.n	800fb7a <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 800fb76:	2307      	movs	r3, #7
 800fb78:	e053      	b.n	800fc22 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	785b      	ldrb	r3, [r3, #1]
 800fb7e:	f1c3 0304 	rsb	r3, r3, #4
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	015b      	lsls	r3, r3, #5
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	73fb      	strb	r3, [r7, #15]
 800fb8e:	e01b      	b.n	800fbc8 <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 800fb90:	2370      	movs	r3, #112	; 0x70
 800fb92:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d903      	bls.n	800fba4 <st25r3916StreamConfigure+0x56>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	2b06      	cmp	r3, #6
 800fba2:	d901      	bls.n	800fba8 <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 800fba4:	2307      	movs	r3, #7
 800fba6:	e03c      	b.n	800fc22 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	785b      	ldrb	r3, [r3, #1]
 800fbac:	f1c3 0306 	rsb	r3, r3, #6
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	015b      	lsls	r3, r3, #5
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	7bfb      	ldrb	r3, [r7, #15]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	78db      	ldrb	r3, [r3, #3]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d101      	bne.n	800fbc8 <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 800fbc4:	2307      	movs	r3, #7
 800fbc6:	e02c      	b.n	800fc22 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	789b      	ldrb	r3, [r3, #2]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d003      	beq.n	800fbd8 <st25r3916StreamConfigure+0x8a>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	789b      	ldrb	r3, [r3, #2]
 800fbd4:	2b07      	cmp	r3, #7
 800fbd6:	d901      	bls.n	800fbdc <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 800fbd8:	2307      	movs	r3, #7
 800fbda:	e022      	b.n	800fc22 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	789b      	ldrb	r3, [r3, #2]
 800fbe0:	f1c3 0307 	rsb	r3, r3, #7
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	7bfb      	ldrb	r3, [r7, #15]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	78db      	ldrb	r3, [r3, #3]
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	d901      	bls.n	800fbf8 <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 800fbf4:	2307      	movs	r3, #7
 800fbf6:	e014      	b.n	800fc22 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	78db      	ldrb	r3, [r3, #3]
 800fbfc:	00db      	lsls	r3, r3, #3
 800fbfe:	b25a      	sxtb	r2, r3
 800fc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc04:	4313      	orrs	r3, r2
 800fc06:	b25b      	sxtb	r3, r3
 800fc08:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 800fc0a:	7bfb      	ldrb	r3, [r7, #15]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	2009      	movs	r0, #9
 800fc10:	f000 f968 	bl	800fee4 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
 800fc16:	461a      	mov	r2, r3
 800fc18:	2178      	movs	r1, #120	; 0x78
 800fc1a:	2003      	movs	r0, #3
 800fc1c:	f000 fab0 	bl	8010180 <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
	...

0800fc2c <__NVIC_EnableIRQ>:
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	4603      	mov	r3, r0
 800fc34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	db0b      	blt.n	800fc56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	f003 021f 	and.w	r2, r3, #31
 800fc44:	4907      	ldr	r1, [pc, #28]	; (800fc64 <__NVIC_EnableIRQ+0x38>)
 800fc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc4a:	095b      	lsrs	r3, r3, #5
 800fc4c:	2001      	movs	r0, #1
 800fc4e:	fa00 f202 	lsl.w	r2, r0, r2
 800fc52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fc56:	bf00      	nop
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	e000e100 	.word	0xe000e100

0800fc68 <__NVIC_DisableIRQ>:
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	db10      	blt.n	800fc9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fc7a:	79fb      	ldrb	r3, [r7, #7]
 800fc7c:	f003 021f 	and.w	r2, r3, #31
 800fc80:	4909      	ldr	r1, [pc, #36]	; (800fca8 <__NVIC_DisableIRQ+0x40>)
 800fc82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc86:	095b      	lsrs	r3, r3, #5
 800fc88:	2001      	movs	r0, #1
 800fc8a:	fa00 f202 	lsl.w	r2, r0, r2
 800fc8e:	3320      	adds	r3, #32
 800fc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800fc94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fc98:	f3bf 8f6f 	isb	sy
}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	e000e100 	.word	0xe000e100

0800fcac <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 800fcb0:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <st25r3916comStart+0x34>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <st25r3916comStart+0x34>)
 800fcba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	200a      	movs	r0, #10
 800fcc2:	f7ff ffd1 	bl	800fc68 <__NVIC_DisableIRQ>
 800fcc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fcca:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 800fcce:	2110      	movs	r1, #16
 800fcd0:	4804      	ldr	r0, [pc, #16]	; (800fce4 <st25r3916comStart+0x38>)
 800fcd2:	f7f4 fbb7 	bl	8004444 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 800fcd6:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <st25r3916comStart+0x3c>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 800fcdc:	bf00      	nop
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	20000f6d 	.word	0x20000f6d
 800fce4:	40020000 	.word	0x40020000
 800fce8:	20000bd6 	.word	0x20000bd6

0800fcec <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 800fcf0:	2110      	movs	r1, #16
 800fcf2:	4809      	ldr	r0, [pc, #36]	; (800fd18 <st25r3916comStop+0x2c>)
 800fcf4:	f7f4 fbb6 	bl	8004464 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 800fcf8:	4b08      	ldr	r3, [pc, #32]	; (800fd1c <st25r3916comStop+0x30>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	4b06      	ldr	r3, [pc, #24]	; (800fd1c <st25r3916comStop+0x30>)
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <st25r3916comStop+0x30>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d102      	bne.n	800fd12 <st25r3916comStop+0x26>
 800fd0c:	200a      	movs	r0, #10
 800fd0e:	f7ff ff8d 	bl	800fc2c <__NVIC_EnableIRQ>
}
 800fd12:	bf00      	nop
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	40020000 	.word	0x40020000
 800fd1c:	20000f6d 	.word	0x20000f6d

0800fd20 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	4608      	mov	r0, r1
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4603      	mov	r3, r0
 800fd30:	807b      	strh	r3, [r7, #2]
 800fd32:	460b      	mov	r3, r1
 800fd34:	707b      	strb	r3, [r7, #1]
 800fd36:	4613      	mov	r3, r2
 800fd38:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 800fd3a:	887b      	ldrh	r3, [r7, #2]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d02e      	beq.n	800fd9e <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 800fd40:	4b19      	ldr	r3, [pc, #100]	; (800fda8 <st25r3916comTx+0x88>)
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	461a      	mov	r2, r3
 800fd46:	4b19      	ldr	r3, [pc, #100]	; (800fdac <st25r3916comTx+0x8c>)
 800fd48:	18d0      	adds	r0, r2, r3
 800fd4a:	4b17      	ldr	r3, [pc, #92]	; (800fda8 <st25r3916comTx+0x88>)
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fd52:	3301      	adds	r3, #1
 800fd54:	887a      	ldrh	r2, [r7, #2]
 800fd56:	4293      	cmp	r3, r2
 800fd58:	bf28      	it	cs
 800fd5a:	4613      	movcs	r3, r2
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	6879      	ldr	r1, [r7, #4]
 800fd60:	f006 fb15 	bl	801638e <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 800fd64:	4b10      	ldr	r3, [pc, #64]	; (800fda8 <st25r3916comTx+0x88>)
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	887a      	ldrh	r2, [r7, #2]
 800fd70:	4293      	cmp	r3, r2
 800fd72:	bf28      	it	cs
 800fd74:	4613      	movcs	r3, r2
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	4b0b      	ldr	r3, [pc, #44]	; (800fda8 <st25r3916comTx+0x88>)
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	4b09      	ldr	r3, [pc, #36]	; (800fda8 <st25r3916comTx+0x88>)
 800fd82:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 800fd84:	787b      	ldrb	r3, [r7, #1]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d009      	beq.n	800fd9e <st25r3916comTx+0x7e>
 800fd8a:	783b      	ldrb	r3, [r7, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d006      	beq.n	800fd9e <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 800fd90:	4b05      	ldr	r3, [pc, #20]	; (800fda8 <st25r3916comTx+0x88>)
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	461a      	mov	r2, r3
 800fd96:	2100      	movs	r1, #0
 800fd98:	4804      	ldr	r0, [pc, #16]	; (800fdac <st25r3916comTx+0x8c>)
 800fd9a:	f7f4 fb73 	bl	8004484 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800fd9e:	bf00      	nop
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20000bd6 	.word	0x20000bd6
 800fdac:	200009d4 	.word	0x200009d4

0800fdb0 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 800fdbc:	887b      	ldrh	r3, [r7, #2]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d034      	beq.n	800fe2c <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 800fdc2:	4b1c      	ldr	r3, [pc, #112]	; (800fe34 <st25r3916comRx+0x84>)
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	4b1b      	ldr	r3, [pc, #108]	; (800fe38 <st25r3916comRx+0x88>)
 800fdca:	18d0      	adds	r0, r2, r3
 800fdcc:	4b19      	ldr	r3, [pc, #100]	; (800fe34 <st25r3916comRx+0x84>)
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	887a      	ldrh	r2, [r7, #2]
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	bf28      	it	cs
 800fddc:	4613      	movcs	r3, r2
 800fdde:	461a      	mov	r2, r3
 800fde0:	2100      	movs	r1, #0
 800fde2:	f006 fadf 	bl	80163a4 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 800fde6:	4b13      	ldr	r3, [pc, #76]	; (800fe34 <st25r3916comRx+0x84>)
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	461a      	mov	r2, r3
 800fdec:	887b      	ldrh	r3, [r7, #2]
 800fdee:	4413      	add	r3, r2
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	f240 2301 	movw	r3, #513	; 0x201
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	bf28      	it	cs
 800fdfa:	4613      	movcs	r3, r2
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	461a      	mov	r2, r3
 800fe00:	490d      	ldr	r1, [pc, #52]	; (800fe38 <st25r3916comRx+0x88>)
 800fe02:	480d      	ldr	r0, [pc, #52]	; (800fe38 <st25r3916comRx+0x88>)
 800fe04:	f7f4 fb3e 	bl	8004484 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 800fe08:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <st25r3916comRx+0x84>)
 800fe0a:	881b      	ldrh	r3, [r3, #0]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <st25r3916comRx+0x88>)
 800fe10:	18d1      	adds	r1, r2, r3
 800fe12:	4b08      	ldr	r3, [pc, #32]	; (800fe34 <st25r3916comRx+0x84>)
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	887a      	ldrh	r2, [r7, #2]
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	bf28      	it	cs
 800fe22:	4613      	movcs	r3, r2
 800fe24:	461a      	mov	r2, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f006 fab1 	bl	801638e <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	20000bd6 	.word	0x20000bd6
 800fe38:	200009d4 	.word	0x200009d4

0800fe3c <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	71fb      	strb	r3, [r7, #7]
 800fe46:	460b      	mov	r3, r1
 800fe48:	71bb      	strb	r3, [r7, #6]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 800fe52:	797b      	ldrb	r3, [r7, #5]
 800fe54:	79ba      	ldrb	r2, [r7, #6]
 800fe56:	f107 000f 	add.w	r0, r7, #15
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	f7ff ff60 	bl	800fd20 <st25r3916comTx>
}
 800fe60:	bf00      	nop
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	6039      	str	r1, [r7, #0]
 800fe72:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	2201      	movs	r2, #1
 800fe78:	6839      	ldr	r1, [r7, #0]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 f805 	bl	800fe8a <st25r3916ReadMultipleRegisters>
 800fe80:	4603      	mov	r3, r0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	4603      	mov	r3, r0
 800fe92:	6039      	str	r1, [r7, #0]
 800fe94:	71fb      	strb	r3, [r7, #7]
 800fe96:	4613      	mov	r3, r2
 800fe98:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800fe9a:	79bb      	ldrb	r3, [r7, #6]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d01c      	beq.n	800feda <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 800fea0:	f7ff ff04 	bl	800fcac <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800fea4:	79fb      	ldrb	r3, [r7, #7]
 800fea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d004      	beq.n	800feb8 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 800feae:	2200      	movs	r2, #0
 800feb0:	2100      	movs	r1, #0
 800feb2:	20fb      	movs	r0, #251	; 0xfb
 800feb4:	f7ff ffc2 	bl	800fe3c <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 800feb8:	79fb      	ldrb	r3, [r7, #7]
 800feba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	2200      	movs	r2, #0
 800fec2:	2101      	movs	r1, #1
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff ffb9 	bl	800fe3c <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 800feca:	79bb      	ldrb	r3, [r7, #6]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	4619      	mov	r1, r3
 800fed0:	6838      	ldr	r0, [r7, #0]
 800fed2:	f7ff ff6d 	bl	800fdb0 <st25r3916comRx>
        st25r3916comStop();
 800fed6:	f7ff ff09 	bl	800fcec <st25r3916comStop>
    }
    
    return ERR_NONE;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	4603      	mov	r3, r0
 800feec:	460a      	mov	r2, r1
 800feee:	71fb      	strb	r3, [r7, #7]
 800fef0:	4613      	mov	r3, r2
 800fef2:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800fef4:	79bb      	ldrb	r3, [r7, #6]
 800fef6:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 800fef8:	f107 010f 	add.w	r1, r7, #15
 800fefc:	79fb      	ldrb	r3, [r7, #7]
 800fefe:	2201      	movs	r2, #1
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 f805 	bl	800ff10 <st25r3916WriteMultipleRegisters>
 800ff06:	4603      	mov	r3, r0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	4603      	mov	r3, r0
 800ff18:	6039      	str	r1, [r7, #0]
 800ff1a:	71fb      	strb	r3, [r7, #7]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800ff20:	79bb      	ldrb	r3, [r7, #6]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d023      	beq.n	800ff6e <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 800ff26:	f7ff fec1 	bl	800fcac <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800ff2a:	79fb      	ldrb	r3, [r7, #7]
 800ff2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d004      	beq.n	800ff3e <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 800ff34:	2201      	movs	r2, #1
 800ff36:	2100      	movs	r1, #0
 800ff38:	20fb      	movs	r0, #251	; 0xfb
 800ff3a:	f7ff ff7f 	bl	800fe3c <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	2201      	movs	r2, #1
 800ff48:	2100      	movs	r1, #0
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7ff ff76 	bl	800fe3c <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800ff50:	79bb      	ldrb	r3, [r7, #6]
 800ff52:	b299      	uxth	r1, r3
 800ff54:	2301      	movs	r3, #1
 800ff56:	2201      	movs	r2, #1
 800ff58:	6838      	ldr	r0, [r7, #0]
 800ff5a:	f7ff fee1 	bl	800fd20 <st25r3916comTx>
        st25r3916comStop();
 800ff5e:	f7ff fec5 	bl	800fcec <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 800ff62:	79ba      	ldrb	r2, [r7, #6]
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 fbba 	bl	80106e2 <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 800ff84:	887b      	ldrh	r3, [r7, #2]
 800ff86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff8a:	d901      	bls.n	800ff90 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 800ff8c:	2307      	movs	r3, #7
 800ff8e:	e012      	b.n	800ffb6 <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 800ff90:	887b      	ldrh	r3, [r7, #2]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00e      	beq.n	800ffb4 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 800ff96:	f7ff fe89 	bl	800fcac <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	2080      	movs	r0, #128	; 0x80
 800ffa0:	f7ff ff4c 	bl	800fe3c <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800ffa4:	8879      	ldrh	r1, [r7, #2]
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff feb8 	bl	800fd20 <st25r3916comTx>
        st25r3916comStop();
 800ffb0:	f7ff fe9c 	bl	800fcec <st25r3916comStop>
    }

    return ERR_NONE;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 800ffca:	887b      	ldrh	r3, [r7, #2]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00d      	beq.n	800ffec <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 800ffd0:	f7ff fe6c 	bl	800fcac <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	2101      	movs	r1, #1
 800ffd8:	209f      	movs	r0, #159	; 0x9f
 800ffda:	f7ff ff2f 	bl	800fe3c <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 800ffde:	887b      	ldrh	r3, [r7, #2]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff fee4 	bl	800fdb0 <st25r3916comRx>
        st25r3916comStop();
 800ffe8:	f7ff fe80 	bl	800fcec <st25r3916comStop>
    }

    return ERR_NONE;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	4603      	mov	r3, r0
 800fffe:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010000:	f7ff fe54 	bl	800fcac <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8010004:	79fb      	ldrb	r3, [r7, #7]
 8010006:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2201      	movs	r2, #1
 801000e:	2101      	movs	r1, #1
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff ff13 	bl	800fe3c <st25r3916comTxByte>
    st25r3916comStop();
 8010016:	f7ff fe69 	bl	800fcec <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	4618      	mov	r0, r3
 801001e:	f000 fb81 	bl	8010724 <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	4603      	mov	r3, r0
 8010034:	6039      	str	r1, [r7, #0]
 8010036:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010038:	f7ff fe38 	bl	800fcac <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 801003c:	2200      	movs	r2, #0
 801003e:	2100      	movs	r1, #0
 8010040:	20fc      	movs	r0, #252	; 0xfc
 8010042:	f7ff fefb 	bl	800fe3c <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801004c:	b2db      	uxtb	r3, r3
 801004e:	2200      	movs	r2, #0
 8010050:	2101      	movs	r1, #1
 8010052:	4618      	mov	r0, r3
 8010054:	f7ff fef2 	bl	800fe3c <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 8010058:	2101      	movs	r1, #1
 801005a:	6838      	ldr	r0, [r7, #0]
 801005c:	f7ff fea8 	bl	800fdb0 <st25r3916comRx>
    st25r3916comStop();
 8010060:	f7ff fe44 	bl	800fcec <st25r3916comStop>
    
    return ERR_NONE;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b084      	sub	sp, #16
 8010072:	af00      	add	r7, sp, #0
 8010074:	4603      	mov	r3, r0
 8010076:	460a      	mov	r2, r1
 8010078:	71fb      	strb	r3, [r7, #7]
 801007a:	4613      	mov	r3, r2
 801007c:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 801007e:	79bb      	ldrb	r3, [r7, #6]
 8010080:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 8010082:	f7ff fe13 	bl	800fcac <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 8010086:	2201      	movs	r2, #1
 8010088:	2100      	movs	r1, #0
 801008a:	20fc      	movs	r0, #252	; 0xfc
 801008c:	f7ff fed6 	bl	800fe3c <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	2201      	movs	r2, #1
 8010094:	2100      	movs	r1, #0
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fed0 	bl	800fe3c <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 801009c:	f107 000f 	add.w	r0, r7, #15
 80100a0:	2301      	movs	r3, #1
 80100a2:	2201      	movs	r2, #1
 80100a4:	2101      	movs	r1, #1
 80100a6:	f7ff fe3b 	bl	800fd20 <st25r3916comTx>
    st25r3916comStop();
 80100aa:	f7ff fe1f 	bl	800fcec <st25r3916comStop>
    
    return ERR_NONE;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	460a      	mov	r2, r1
 80100c2:	71fb      	strb	r3, [r7, #7]
 80100c4:	4613      	mov	r3, r2
 80100c6:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 80100c8:	f107 020d 	add.w	r2, r7, #13
 80100cc:	79fb      	ldrb	r3, [r7, #7]
 80100ce:	4611      	mov	r1, r2
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7ff fec9 	bl	800fe68 <st25r3916ReadRegister>
 80100d6:	4603      	mov	r3, r0
 80100d8:	81fb      	strh	r3, [r7, #14]
 80100da:	89fb      	ldrh	r3, [r7, #14]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d001      	beq.n	80100e4 <st25r3916ClrRegisterBits+0x2c>
 80100e0:	89fb      	ldrh	r3, [r7, #14]
 80100e2:	e01c      	b.n	801011e <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 80100e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80100e8:	43db      	mvns	r3, r3
 80100ea:	b25a      	sxtb	r2, r3
 80100ec:	7b7b      	ldrb	r3, [r7, #13]
 80100ee:	b25b      	sxtb	r3, r3
 80100f0:	4013      	ands	r3, r2
 80100f2:	b25b      	sxtb	r3, r3
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	7b7b      	ldrb	r3, [r7, #13]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d101      	bne.n	8010100 <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 80100fc:	2300      	movs	r3, #0
 80100fe:	e00e      	b.n	801011e <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8010100:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010104:	43db      	mvns	r3, r3
 8010106:	b25a      	sxtb	r2, r3
 8010108:	7b7b      	ldrb	r3, [r7, #13]
 801010a:	b25b      	sxtb	r3, r3
 801010c:	4013      	ands	r3, r2
 801010e:	b25b      	sxtb	r3, r3
 8010110:	b2da      	uxtb	r2, r3
 8010112:	79fb      	ldrb	r3, [r7, #7]
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff fee4 	bl	800fee4 <st25r3916WriteRegister>
 801011c:	4603      	mov	r3, r0
}
 801011e:	4618      	mov	r0, r3
 8010120:	3710      	adds	r7, #16
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b084      	sub	sp, #16
 801012a:	af00      	add	r7, sp, #0
 801012c:	4603      	mov	r3, r0
 801012e:	460a      	mov	r2, r1
 8010130:	71fb      	strb	r3, [r7, #7]
 8010132:	4613      	mov	r3, r2
 8010134:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010136:	f107 020d 	add.w	r2, r7, #13
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	4611      	mov	r1, r2
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fe92 	bl	800fe68 <st25r3916ReadRegister>
 8010144:	4603      	mov	r3, r0
 8010146:	81fb      	strh	r3, [r7, #14]
 8010148:	89fb      	ldrh	r3, [r7, #14]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <st25r3916SetRegisterBits+0x2c>
 801014e:	89fb      	ldrh	r3, [r7, #14]
 8010150:	e012      	b.n	8010178 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8010152:	7b7a      	ldrb	r2, [r7, #13]
 8010154:	79bb      	ldrb	r3, [r7, #6]
 8010156:	4313      	orrs	r3, r2
 8010158:	b2da      	uxtb	r2, r3
 801015a:	7b7b      	ldrb	r3, [r7, #13]
 801015c:	429a      	cmp	r2, r3
 801015e:	d101      	bne.n	8010164 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 8010160:	2300      	movs	r3, #0
 8010162:	e009      	b.n	8010178 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8010164:	7b7a      	ldrb	r2, [r7, #13]
 8010166:	79bb      	ldrb	r3, [r7, #6]
 8010168:	4313      	orrs	r3, r2
 801016a:	b2da      	uxtb	r2, r3
 801016c:	79fb      	ldrb	r3, [r7, #7]
 801016e:	4611      	mov	r1, r2
 8010170:	4618      	mov	r0, r3
 8010172:	f7ff feb7 	bl	800fee4 <st25r3916WriteRegister>
 8010176:	4603      	mov	r3, r0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	71fb      	strb	r3, [r7, #7]
 801018a:	460b      	mov	r3, r1
 801018c:	71bb      	strb	r3, [r7, #6]
 801018e:	4613      	mov	r3, r2
 8010190:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8010192:	79ba      	ldrb	r2, [r7, #6]
 8010194:	797b      	ldrb	r3, [r7, #5]
 8010196:	4013      	ands	r3, r2
 8010198:	b2da      	uxtb	r2, r3
 801019a:	79b9      	ldrb	r1, [r7, #6]
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f805 	bl	80101ae <st25r3916ModifyRegister>
 80101a4:	4603      	mov	r3, r0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	4603      	mov	r3, r0
 80101b6:	71fb      	strb	r3, [r7, #7]
 80101b8:	460b      	mov	r3, r1
 80101ba:	71bb      	strb	r3, [r7, #6]
 80101bc:	4613      	mov	r3, r2
 80101be:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 80101c0:	f107 020c 	add.w	r2, r7, #12
 80101c4:	79fb      	ldrb	r3, [r7, #7]
 80101c6:	4611      	mov	r1, r2
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff fe4d 	bl	800fe68 <st25r3916ReadRegister>
 80101ce:	4603      	mov	r3, r0
 80101d0:	81fb      	strh	r3, [r7, #14]
 80101d2:	89fb      	ldrh	r3, [r7, #14]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <st25r3916ModifyRegister+0x2e>
 80101d8:	89fb      	ldrh	r3, [r7, #14]
 80101da:	e019      	b.n	8010210 <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 80101dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80101e0:	43db      	mvns	r3, r3
 80101e2:	b25a      	sxtb	r2, r3
 80101e4:	7b3b      	ldrb	r3, [r7, #12]
 80101e6:	b25b      	sxtb	r3, r3
 80101e8:	4013      	ands	r3, r2
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 80101ee:	7b7a      	ldrb	r2, [r7, #13]
 80101f0:	797b      	ldrb	r3, [r7, #5]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 80101f6:	7b3b      	ldrb	r3, [r7, #12]
 80101f8:	7b7a      	ldrb	r2, [r7, #13]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d101      	bne.n	8010202 <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 80101fe:	2300      	movs	r3, #0
 8010200:	e006      	b.n	8010210 <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8010202:	7b7a      	ldrb	r2, [r7, #13]
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	4611      	mov	r1, r2
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fe6b 	bl	800fee4 <st25r3916WriteRegister>
 801020e:	4603      	mov	r3, r0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	71fb      	strb	r3, [r7, #7]
 8010222:	460b      	mov	r3, r1
 8010224:	71bb      	strb	r3, [r7, #6]
 8010226:	4613      	mov	r3, r2
 8010228:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 801022a:	f107 020c 	add.w	r2, r7, #12
 801022e:	79fb      	ldrb	r3, [r7, #7]
 8010230:	4611      	mov	r1, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f7ff fefa 	bl	801002c <st25r3916ReadTestRegister>
 8010238:	4603      	mov	r3, r0
 801023a:	81fb      	strh	r3, [r7, #14]
 801023c:	89fb      	ldrh	r3, [r7, #14]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <st25r3916ChangeTestRegisterBits+0x2e>
 8010242:	89fb      	ldrh	r3, [r7, #14]
 8010244:	e01c      	b.n	8010280 <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8010246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801024a:	43db      	mvns	r3, r3
 801024c:	b25a      	sxtb	r2, r3
 801024e:	7b3b      	ldrb	r3, [r7, #12]
 8010250:	b25b      	sxtb	r3, r3
 8010252:	4013      	ands	r3, r2
 8010254:	b25b      	sxtb	r3, r3
 8010256:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 8010258:	797a      	ldrb	r2, [r7, #5]
 801025a:	79bb      	ldrb	r3, [r7, #6]
 801025c:	4013      	ands	r3, r2
 801025e:	b2da      	uxtb	r2, r3
 8010260:	7b7b      	ldrb	r3, [r7, #13]
 8010262:	4313      	orrs	r3, r2
 8010264:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8010266:	7b3b      	ldrb	r3, [r7, #12]
 8010268:	7b7a      	ldrb	r2, [r7, #13]
 801026a:	429a      	cmp	r2, r3
 801026c:	d101      	bne.n	8010272 <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 801026e:	2300      	movs	r3, #0
 8010270:	e006      	b.n	8010280 <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 8010272:	7b7a      	ldrb	r2, [r7, #13]
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff fef8 	bl	801006e <st25r3916WriteTestRegister>
 801027e:	4603      	mov	r3, r0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	71fb      	strb	r3, [r7, #7]
 8010292:	460b      	mov	r3, r1
 8010294:	71bb      	strb	r3, [r7, #6]
 8010296:	4613      	mov	r3, r2
 8010298:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 801029e:	f107 020f 	add.w	r2, r7, #15
 80102a2:	79fb      	ldrb	r3, [r7, #7]
 80102a4:	4611      	mov	r1, r2
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff fdde 	bl	800fe68 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 80102ac:	7bfa      	ldrb	r2, [r7, #15]
 80102ae:	79bb      	ldrb	r3, [r7, #6]
 80102b0:	4013      	ands	r3, r2
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	797a      	ldrb	r2, [r7, #5]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	bf0c      	ite	eq
 80102ba:	2301      	moveq	r3, #1
 80102bc:	2300      	movne	r3, #0
 80102be:	b2db      	uxtb	r3, r3
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	4603      	mov	r3, r0
 80102d0:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 80102d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	da01      	bge.n	80102de <st25r3916IsRegValid+0x16>
    {
        return false;
 80102da:	2300      	movs	r3, #0
 80102dc:	e000      	b.n	80102e0 <st25r3916IsRegValid+0x18>
    }    
    return true;
 80102de:	2301      	movs	r3, #1
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <__NVIC_EnableIRQ>:
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	4603      	mov	r3, r0
 80102f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80102f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	db0b      	blt.n	8010316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80102fe:	79fb      	ldrb	r3, [r7, #7]
 8010300:	f003 021f 	and.w	r2, r3, #31
 8010304:	4907      	ldr	r1, [pc, #28]	; (8010324 <__NVIC_EnableIRQ+0x38>)
 8010306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801030a:	095b      	lsrs	r3, r3, #5
 801030c:	2001      	movs	r0, #1
 801030e:	fa00 f202 	lsl.w	r2, r0, r2
 8010312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010316:	bf00      	nop
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	e000e100 	.word	0xe000e100

08010328 <__NVIC_DisableIRQ>:
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010336:	2b00      	cmp	r3, #0
 8010338:	db10      	blt.n	801035c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	f003 021f 	and.w	r2, r3, #31
 8010340:	4909      	ldr	r1, [pc, #36]	; (8010368 <__NVIC_DisableIRQ+0x40>)
 8010342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010346:	095b      	lsrs	r3, r3, #5
 8010348:	2001      	movs	r0, #1
 801034a:	fa00 f202 	lsl.w	r2, r0, r2
 801034e:	3320      	adds	r3, #32
 8010350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010358:	f3bf 8f6f 	isb	sy
}
 801035c:	bf00      	nop
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	e000e100 	.word	0xe000e100

0801036c <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 8010370:	4b08      	ldr	r3, [pc, #32]	; (8010394 <st25r3916InitInterrupts+0x28>)
 8010372:	2200      	movs	r2, #0
 8010374:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8010376:	4b07      	ldr	r3, [pc, #28]	; (8010394 <st25r3916InitInterrupts+0x28>)
 8010378:	2200      	movs	r2, #0
 801037a:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 801037c:	4b05      	ldr	r3, [pc, #20]	; (8010394 <st25r3916InitInterrupts+0x28>)
 801037e:	2200      	movs	r2, #0
 8010380:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 8010382:	4b04      	ldr	r3, [pc, #16]	; (8010394 <st25r3916InitInterrupts+0x28>)
 8010384:	2200      	movs	r2, #0
 8010386:	60da      	str	r2, [r3, #12]
}
 8010388:	bf00      	nop
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	20000bd8 	.word	0x20000bd8

08010398 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 801039c:	f000 f80c 	bl	80103b8 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 80103a0:	4b04      	ldr	r3, [pc, #16]	; (80103b4 <st25r3916Isr+0x1c>)
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 80103a8:	4b02      	ldr	r3, [pc, #8]	; (80103b4 <st25r3916Isr+0x1c>)
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	4798      	blx	r3
    }
}
 80103ae:	bf00      	nop
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20000bd8 	.word	0x20000bd8

080103b8 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 80103be:	2300      	movs	r3, #0
 80103c0:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 80103c2:	463b      	mov	r3, r7
 80103c4:	2204      	movs	r2, #4
 80103c6:	21ff      	movs	r1, #255	; 0xff
 80103c8:	4618      	mov	r0, r3
 80103ca:	f005 ffeb 	bl	80163a4 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80103ce:	e019      	b.n	8010404 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 80103d0:	463b      	mov	r3, r7
 80103d2:	2204      	movs	r2, #4
 80103d4:	4619      	mov	r1, r3
 80103d6:	201a      	movs	r0, #26
 80103d8:	f7ff fd57 	bl	800fe8a <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 80103dc:	783b      	ldrb	r3, [r7, #0]
 80103de:	461a      	mov	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 80103e6:	787b      	ldrb	r3, [r7, #1]
 80103e8:	021b      	lsls	r3, r3, #8
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 80103f0:	78bb      	ldrb	r3, [r7, #2]
 80103f2:	041b      	lsls	r3, r3, #16
 80103f4:	687a      	ldr	r2, [r7, #4]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 80103fa:	78fb      	ldrb	r3, [r7, #3]
 80103fc:	061b      	lsls	r3, r3, #24
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	4313      	orrs	r3, r2
 8010402:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8010404:	2110      	movs	r1, #16
 8010406:	4818      	ldr	r0, [pc, #96]	; (8010468 <st25r3916CheckForReceivedInterrupts+0xb0>)
 8010408:	f7f5 faa0 	bl	800594c <HAL_GPIO_ReadPin>
 801040c:	4603      	mov	r3, r0
 801040e:	2b01      	cmp	r3, #1
 8010410:	d0de      	beq.n	80103d0 <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 8010412:	4b16      	ldr	r3, [pc, #88]	; (801046c <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	3301      	adds	r3, #1
 8010418:	b2da      	uxtb	r2, r3
 801041a:	4b14      	ldr	r3, [pc, #80]	; (801046c <st25r3916CheckForReceivedInterrupts+0xb4>)
 801041c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	200a      	movs	r0, #10
 8010424:	f7ff ff80 	bl	8010328 <__NVIC_DisableIRQ>
 8010428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801042c:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 8010430:	4b0f      	ldr	r3, [pc, #60]	; (8010470 <st25r3916CheckForReceivedInterrupts+0xb8>)
 8010432:	689a      	ldr	r2, [r3, #8]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4313      	orrs	r3, r2
 8010438:	4a0d      	ldr	r2, [pc, #52]	; (8010470 <st25r3916CheckForReceivedInterrupts+0xb8>)
 801043a:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 801043c:	4b0b      	ldr	r3, [pc, #44]	; (801046c <st25r3916CheckForReceivedInterrupts+0xb4>)
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	3b01      	subs	r3, #1
 8010442:	b2da      	uxtb	r2, r3
 8010444:	4b09      	ldr	r3, [pc, #36]	; (801046c <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010446:	701a      	strb	r2, [r3, #0]
 8010448:	4b08      	ldr	r3, [pc, #32]	; (801046c <st25r3916CheckForReceivedInterrupts+0xb4>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d102      	bne.n	8010456 <st25r3916CheckForReceivedInterrupts+0x9e>
 8010450:	200a      	movs	r0, #10
 8010452:	f7ff ff4b 	bl	80102ec <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8010456:	4b06      	ldr	r3, [pc, #24]	; (8010470 <st25r3916CheckForReceivedInterrupts+0xb8>)
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	4618      	mov	r0, r3
 801045c:	f000 f927 	bl	80106ae <st25r3916ledEvtIrq>
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	40020800 	.word	0x40020800
 801046c:	20000f6d 	.word	0x20000f6d
 8010470:	20000bd8 	.word	0x20000bd8

08010474 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b086      	sub	sp, #24
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 801047e:	4b1e      	ldr	r3, [pc, #120]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	43da      	mvns	r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	401a      	ands	r2, r3
 801048c:	6939      	ldr	r1, [r7, #16]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	400b      	ands	r3, r1
 8010492:	4313      	orrs	r3, r2
 8010494:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 8010496:	4b18      	ldr	r3, [pc, #96]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	43db      	mvns	r3, r3
 801049e:	4013      	ands	r3, r2
 80104a0:	4a15      	ldr	r2, [pc, #84]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 80104a2:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 80104a4:	4b14      	ldr	r3, [pc, #80]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 80104a6:	68da      	ldr	r2, [r3, #12]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	4313      	orrs	r3, r2
 80104ac:	4a12      	ldr	r2, [pc, #72]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 80104ae:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 80104b0:	2300      	movs	r3, #0
 80104b2:	75fb      	strb	r3, [r7, #23]
 80104b4:	e019      	b.n	80104ea <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 80104b6:	7dfb      	ldrb	r3, [r7, #23]
 80104b8:	00db      	lsls	r3, r3, #3
 80104ba:	68fa      	ldr	r2, [r7, #12]
 80104bc:	fa22 f303 	lsr.w	r3, r2, r3
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00d      	beq.n	80104e2 <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 80104c6:	7dfb      	ldrb	r3, [r7, #23]
 80104c8:	3316      	adds	r3, #22
 80104ca:	b2d8      	uxtb	r0, r3
 80104cc:	4b0a      	ldr	r3, [pc, #40]	; (80104f8 <st25r3916ModifyInterrupts+0x84>)
 80104ce:	68da      	ldr	r2, [r3, #12]
 80104d0:	7dfb      	ldrb	r3, [r7, #23]
 80104d2:	00db      	lsls	r3, r3, #3
 80104d4:	fa22 f303 	lsr.w	r3, r2, r3
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	4619      	mov	r1, r3
 80104dc:	f7ff fd02 	bl	800fee4 <st25r3916WriteRegister>
 80104e0:	e000      	b.n	80104e4 <st25r3916ModifyInterrupts+0x70>
            continue;
 80104e2:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 80104e4:	7dfb      	ldrb	r3, [r7, #23]
 80104e6:	3301      	adds	r3, #1
 80104e8:	75fb      	strb	r3, [r7, #23]
 80104ea:	7dfb      	ldrb	r3, [r7, #23]
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	d9e2      	bls.n	80104b6 <st25r3916ModifyInterrupts+0x42>
    }
    return;
 80104f0:	bf00      	nop
}
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	20000bd8 	.word	0x20000bd8

080104fc <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	460b      	mov	r3, r1
 8010506:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 8010508:	887b      	ldrh	r3, [r7, #2]
 801050a:	4618      	mov	r0, r3
 801050c:	f7f3 fff8 	bl	8004500 <timerCalculateTimer>
 8010510:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 8010512:	4b20      	ldr	r3, [pc, #128]	; (8010594 <st25r3916WaitForInterruptsTimed+0x98>)
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	4013      	ands	r3, r2
 801051a:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f7f3 fffd 	bl	800451c <timerIsExpired>
 8010522:	4603      	mov	r3, r0
 8010524:	f083 0301 	eor.w	r3, r3, #1
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b00      	cmp	r3, #0
 801052c:	d102      	bne.n	8010534 <st25r3916WaitForInterruptsTimed+0x38>
 801052e:	887b      	ldrh	r3, [r7, #2]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <st25r3916WaitForInterruptsTimed+0x3e>
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0eb      	beq.n	8010512 <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 801053a:	4b16      	ldr	r3, [pc, #88]	; (8010594 <st25r3916WaitForInterruptsTimed+0x98>)
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	4013      	ands	r3, r2
 8010542:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8010544:	4b14      	ldr	r3, [pc, #80]	; (8010598 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	3301      	adds	r3, #1
 801054a:	b2da      	uxtb	r2, r3
 801054c:	4b12      	ldr	r3, [pc, #72]	; (8010598 <st25r3916WaitForInterruptsTimed+0x9c>)
 801054e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	200a      	movs	r0, #10
 8010556:	f7ff fee7 	bl	8010328 <__NVIC_DisableIRQ>
 801055a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801055e:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 8010562:	4b0c      	ldr	r3, [pc, #48]	; (8010594 <st25r3916WaitForInterruptsTimed+0x98>)
 8010564:	689a      	ldr	r2, [r3, #8]
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	43db      	mvns	r3, r3
 801056a:	4013      	ands	r3, r2
 801056c:	4a09      	ldr	r2, [pc, #36]	; (8010594 <st25r3916WaitForInterruptsTimed+0x98>)
 801056e:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8010570:	4b09      	ldr	r3, [pc, #36]	; (8010598 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	3b01      	subs	r3, #1
 8010576:	b2da      	uxtb	r2, r3
 8010578:	4b07      	ldr	r3, [pc, #28]	; (8010598 <st25r3916WaitForInterruptsTimed+0x9c>)
 801057a:	701a      	strb	r2, [r3, #0]
 801057c:	4b06      	ldr	r3, [pc, #24]	; (8010598 <st25r3916WaitForInterruptsTimed+0x9c>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d102      	bne.n	801058a <st25r3916WaitForInterruptsTimed+0x8e>
 8010584:	200a      	movs	r0, #10
 8010586:	f7ff feb1 	bl	80102ec <__NVIC_EnableIRQ>
    
    return status;
 801058a:	68bb      	ldr	r3, [r7, #8]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	20000bd8 	.word	0x20000bd8
 8010598:	20000f6d 	.word	0x20000f6d

0801059c <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 80105a4:	4b17      	ldr	r3, [pc, #92]	; (8010604 <st25r3916GetInterrupt+0x68>)
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	4013      	ands	r3, r2
 80105ac:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d022      	beq.n	80105fa <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 80105b4:	4b14      	ldr	r3, [pc, #80]	; (8010608 <st25r3916GetInterrupt+0x6c>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	3301      	adds	r3, #1
 80105ba:	b2da      	uxtb	r2, r3
 80105bc:	4b12      	ldr	r3, [pc, #72]	; (8010608 <st25r3916GetInterrupt+0x6c>)
 80105be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	200a      	movs	r0, #10
 80105c6:	f7ff feaf 	bl	8010328 <__NVIC_DisableIRQ>
 80105ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80105ce:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 80105d2:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <st25r3916GetInterrupt+0x68>)
 80105d4:	689a      	ldr	r2, [r3, #8]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	43db      	mvns	r3, r3
 80105da:	4013      	ands	r3, r2
 80105dc:	4a09      	ldr	r2, [pc, #36]	; (8010604 <st25r3916GetInterrupt+0x68>)
 80105de:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80105e0:	4b09      	ldr	r3, [pc, #36]	; (8010608 <st25r3916GetInterrupt+0x6c>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	3b01      	subs	r3, #1
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	4b07      	ldr	r3, [pc, #28]	; (8010608 <st25r3916GetInterrupt+0x6c>)
 80105ea:	701a      	strb	r2, [r3, #0]
 80105ec:	4b06      	ldr	r3, [pc, #24]	; (8010608 <st25r3916GetInterrupt+0x6c>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d102      	bne.n	80105fa <st25r3916GetInterrupt+0x5e>
 80105f4:	200a      	movs	r0, #10
 80105f6:	f7ff fe79 	bl	80102ec <__NVIC_EnableIRQ>
    }

    return irqs;
 80105fa:	68fb      	ldr	r3, [r7, #12]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20000bd8 	.word	0x20000bd8
 8010608:	20000f6d 	.word	0x20000f6d

0801060c <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 8010614:	2100      	movs	r1, #0
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7ff ff2c 	bl	8010474 <st25r3916ModifyInterrupts>
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	2000      	movs	r0, #0
 8010630:	f7ff ff20 	bl	8010474 <st25r3916ModifyInterrupts>
}
 8010634:	bf00      	nop
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 8010642:	1d3b      	adds	r3, r7, #4
 8010644:	2204      	movs	r2, #4
 8010646:	4619      	mov	r1, r3
 8010648:	201a      	movs	r0, #26
 801064a:	f7ff fc1e 	bl	800fe8a <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 801064e:	4b12      	ldr	r3, [pc, #72]	; (8010698 <st25r3916ClearInterrupts+0x5c>)
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	3301      	adds	r3, #1
 8010654:	b2da      	uxtb	r2, r3
 8010656:	4b10      	ldr	r3, [pc, #64]	; (8010698 <st25r3916ClearInterrupts+0x5c>)
 8010658:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	200a      	movs	r0, #10
 8010660:	f7ff fe62 	bl	8010328 <__NVIC_DisableIRQ>
 8010664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010668:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 801066c:	4b0b      	ldr	r3, [pc, #44]	; (801069c <st25r3916ClearInterrupts+0x60>)
 801066e:	2200      	movs	r2, #0
 8010670:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8010672:	4b09      	ldr	r3, [pc, #36]	; (8010698 <st25r3916ClearInterrupts+0x5c>)
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	3b01      	subs	r3, #1
 8010678:	b2da      	uxtb	r2, r3
 801067a:	4b07      	ldr	r3, [pc, #28]	; (8010698 <st25r3916ClearInterrupts+0x5c>)
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	4b06      	ldr	r3, [pc, #24]	; (8010698 <st25r3916ClearInterrupts+0x5c>)
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d103      	bne.n	801068e <st25r3916ClearInterrupts+0x52>
 8010686:	200a      	movs	r0, #10
 8010688:	f7ff fe30 	bl	80102ec <__NVIC_EnableIRQ>
    return;
 801068c:	bf00      	nop
 801068e:	bf00      	nop
}
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20000f6d 	.word	0x20000f6d
 801069c:	20000bd8 	.word	0x20000bd8

080106a0 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 80106a0:	b480      	push	{r7}
 80106a2:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 80106a4:	bf00      	nop
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr

080106ae <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 80106ae:	b480      	push	{r7}
 80106b0:	b083      	sub	sp, #12
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 80106b6:	bf00      	nop
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr

080106c2 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 80106c2:	b480      	push	{r7}
 80106c4:	b083      	sub	sp, #12
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	4603      	mov	r3, r0
 80106ca:	460a      	mov	r2, r1
 80106cc:	71fb      	strb	r3, [r7, #7]
 80106ce:	4613      	mov	r3, r2
 80106d0:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 80106d2:	79fb      	ldrb	r3, [r7, #7]
 80106d4:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b084      	sub	sp, #16
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	4603      	mov	r3, r0
 80106ea:	6039      	str	r1, [r7, #0]
 80106ec:	71fb      	strb	r3, [r7, #7]
 80106ee:	4613      	mov	r3, r2
 80106f0:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 80106f2:	2300      	movs	r3, #0
 80106f4:	73fb      	strb	r3, [r7, #15]
 80106f6:	e00d      	b.n	8010714 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 80106f8:	79fa      	ldrb	r2, [r7, #7]
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	4413      	add	r3, r2
 80106fe:	b2d8      	uxtb	r0, r3
 8010700:	7bfb      	ldrb	r3, [r7, #15]
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	4413      	add	r3, r2
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	4619      	mov	r1, r3
 801070a:	f7ff ffda 	bl	80106c2 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	3301      	adds	r3, #1
 8010712:	73fb      	strb	r3, [r7, #15]
 8010714:	7bfa      	ldrb	r2, [r7, #15]
 8010716:	79bb      	ldrb	r3, [r7, #6]
 8010718:	429a      	cmp	r2, r3
 801071a:	d3ed      	bcc.n	80106f8 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 801071c:	bf00      	nop
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	4603      	mov	r3, r0
 801072c:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 801072e:	bf00      	nop
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr

0801073a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b084      	sub	sp, #16
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	460b      	mov	r3, r1
 8010744:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010746:	2300      	movs	r3, #0
 8010748:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	7c1b      	ldrb	r3, [r3, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d115      	bne.n	801077e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010756:	2202      	movs	r2, #2
 8010758:	2181      	movs	r1, #129	; 0x81
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f005 fc7b 	bl	8016056 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010766:	f44f 7300 	mov.w	r3, #512	; 0x200
 801076a:	2202      	movs	r2, #2
 801076c:	2101      	movs	r1, #1
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f005 fc71 	bl	8016056 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 801077c:	e012      	b.n	80107a4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801077e:	2340      	movs	r3, #64	; 0x40
 8010780:	2202      	movs	r2, #2
 8010782:	2181      	movs	r1, #129	; 0x81
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f005 fc66 	bl	8016056 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2201      	movs	r2, #1
 801078e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010790:	2340      	movs	r3, #64	; 0x40
 8010792:	2202      	movs	r2, #2
 8010794:	2101      	movs	r1, #1
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f005 fc5d 	bl	8016056 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80107a4:	2308      	movs	r3, #8
 80107a6:	2203      	movs	r2, #3
 80107a8:	2182      	movs	r1, #130	; 0x82
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f005 fc53 	bl	8016056 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80107b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80107ba:	f005 fdc9 	bl	8016350 <malloc>
 80107be:	4603      	mov	r3, r0
 80107c0:	461a      	mov	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d102      	bne.n	80107d8 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80107d2:	2301      	movs	r3, #1
 80107d4:	73fb      	strb	r3, [r7, #15]
 80107d6:	e026      	b.n	8010826 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	7c1b      	ldrb	r3, [r3, #16]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d109      	bne.n	8010816 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010808:	f44f 7300 	mov.w	r3, #512	; 0x200
 801080c:	2101      	movs	r1, #1
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f005 fd12 	bl	8016238 <USBD_LL_PrepareReceive>
 8010814:	e007      	b.n	8010826 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801081c:	2340      	movs	r3, #64	; 0x40
 801081e:	2101      	movs	r1, #1
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f005 fd09 	bl	8016238 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010826:	7bfb      	ldrb	r3, [r7, #15]
}
 8010828:	4618      	mov	r0, r3
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	460b      	mov	r3, r1
 801083a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801083c:	2300      	movs	r3, #0
 801083e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010840:	2181      	movs	r1, #129	; 0x81
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f005 fc2d 	bl	80160a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801084e:	2101      	movs	r1, #1
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f005 fc26 	bl	80160a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2200      	movs	r2, #0
 801085a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801085e:	2182      	movs	r1, #130	; 0x82
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f005 fc1e 	bl	80160a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00e      	beq.n	8010894 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010886:	4618      	mov	r0, r3
 8010888:	f005 fd6a 	bl	8016360 <free>
    pdev->pClassData = NULL;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8010894:	7bfb      	ldrb	r3, [r7, #15]
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b086      	sub	sp, #24
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
 80108a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80108ae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80108b0:	2300      	movs	r3, #0
 80108b2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80108b4:	2300      	movs	r3, #0
 80108b6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d039      	beq.n	801093c <USBD_CDC_Setup+0x9e>
 80108c8:	2b20      	cmp	r3, #32
 80108ca:	d17c      	bne.n	80109c6 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	88db      	ldrh	r3, [r3, #6]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d029      	beq.n	8010928 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	b25b      	sxtb	r3, r3
 80108da:	2b00      	cmp	r3, #0
 80108dc:	da11      	bge.n	8010902 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80108ea:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	88d2      	ldrh	r2, [r2, #6]
 80108f0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80108f2:	6939      	ldr	r1, [r7, #16]
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	88db      	ldrh	r3, [r3, #6]
 80108f8:	461a      	mov	r2, r3
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f001 f99c 	bl	8011c38 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8010900:	e068      	b.n	80109d4 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	785a      	ldrb	r2, [r3, #1]
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	88db      	ldrh	r3, [r3, #6]
 8010910:	b2da      	uxtb	r2, r3
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010918:	6939      	ldr	r1, [r7, #16]
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	88db      	ldrh	r3, [r3, #6]
 801091e:	461a      	mov	r2, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f001 f9b7 	bl	8011c94 <USBD_CtlPrepareRx>
    break;
 8010926:	e055      	b.n	80109d4 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	7850      	ldrb	r0, [r2, #1]
 8010934:	2200      	movs	r2, #0
 8010936:	6839      	ldr	r1, [r7, #0]
 8010938:	4798      	blx	r3
    break;
 801093a:	e04b      	b.n	80109d4 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	785b      	ldrb	r3, [r3, #1]
 8010940:	2b0a      	cmp	r3, #10
 8010942:	d017      	beq.n	8010974 <USBD_CDC_Setup+0xd6>
 8010944:	2b0b      	cmp	r3, #11
 8010946:	d029      	beq.n	801099c <USBD_CDC_Setup+0xfe>
 8010948:	2b00      	cmp	r3, #0
 801094a:	d133      	bne.n	80109b4 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010952:	2b03      	cmp	r3, #3
 8010954:	d107      	bne.n	8010966 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8010956:	f107 030c 	add.w	r3, r7, #12
 801095a:	2202      	movs	r2, #2
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f001 f96a 	bl	8011c38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010964:	e02e      	b.n	80109c4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010966:	6839      	ldr	r1, [r7, #0]
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f001 f8fa 	bl	8011b62 <USBD_CtlError>
			  ret = USBD_FAIL;
 801096e:	2302      	movs	r3, #2
 8010970:	75fb      	strb	r3, [r7, #23]
      break;
 8010972:	e027      	b.n	80109c4 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801097a:	2b03      	cmp	r3, #3
 801097c:	d107      	bne.n	801098e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 801097e:	f107 030f 	add.w	r3, r7, #15
 8010982:	2201      	movs	r2, #1
 8010984:	4619      	mov	r1, r3
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f001 f956 	bl	8011c38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 801098c:	e01a      	b.n	80109c4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 801098e:	6839      	ldr	r1, [r7, #0]
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f001 f8e6 	bl	8011b62 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010996:	2302      	movs	r3, #2
 8010998:	75fb      	strb	r3, [r7, #23]
      break;
 801099a:	e013      	b.n	80109c4 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80109a2:	2b03      	cmp	r3, #3
 80109a4:	d00d      	beq.n	80109c2 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80109a6:	6839      	ldr	r1, [r7, #0]
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f001 f8da 	bl	8011b62 <USBD_CtlError>
			  ret = USBD_FAIL;
 80109ae:	2302      	movs	r3, #2
 80109b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80109b2:	e006      	b.n	80109c2 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f001 f8d3 	bl	8011b62 <USBD_CtlError>
      ret = USBD_FAIL;
 80109bc:	2302      	movs	r3, #2
 80109be:	75fb      	strb	r3, [r7, #23]
      break;
 80109c0:	e000      	b.n	80109c4 <USBD_CDC_Setup+0x126>
      break;
 80109c2:	bf00      	nop
    }
    break;
 80109c4:	e006      	b.n	80109d4 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 f8ca 	bl	8011b62 <USBD_CtlError>
    ret = USBD_FAIL;
 80109ce:	2302      	movs	r3, #2
 80109d0:	75fb      	strb	r3, [r7, #23]
    break;
 80109d2:	bf00      	nop
  }

  return ret;
 80109d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3718      	adds	r7, #24
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b084      	sub	sp, #16
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	460b      	mov	r3, r1
 80109e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80109f0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80109f8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d03a      	beq.n	8010a7a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010a04:	78fa      	ldrb	r2, [r7, #3]
 8010a06:	6879      	ldr	r1, [r7, #4]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	009b      	lsls	r3, r3, #2
 8010a0c:	4413      	add	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	440b      	add	r3, r1
 8010a12:	331c      	adds	r3, #28
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d029      	beq.n	8010a6e <USBD_CDC_DataIn+0x90>
 8010a1a:	78fa      	ldrb	r2, [r7, #3]
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	4413      	add	r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	440b      	add	r3, r1
 8010a28:	331c      	adds	r3, #28
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	78f9      	ldrb	r1, [r7, #3]
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	460b      	mov	r3, r1
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	1a5b      	subs	r3, r3, r1
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4403      	add	r3, r0
 8010a3a:	3344      	adds	r3, #68	; 0x44
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8010a42:	fb03 f301 	mul.w	r3, r3, r1
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d110      	bne.n	8010a6e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010a4c:	78fa      	ldrb	r2, [r7, #3]
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	4613      	mov	r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	440b      	add	r3, r1
 8010a5a:	331c      	adds	r3, #28
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8010a60:	78f9      	ldrb	r1, [r7, #3]
 8010a62:	2300      	movs	r3, #0
 8010a64:	2200      	movs	r2, #0
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f005 fbc3 	bl	80161f2 <USBD_LL_Transmit>
 8010a6c:	e003      	b.n	8010a76 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e000      	b.n	8010a7c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010a7a:	2302      	movs	r3, #2
  }
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a96:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8010a98:	78fb      	ldrb	r3, [r7, #3]
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f005 fbee 	bl	801627e <USBD_LL_GetRxDataSize>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00d      	beq.n	8010ad0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4798      	blx	r3

    return USBD_OK;
 8010acc:	2300      	movs	r3, #0
 8010ace:	e000      	b.n	8010ad2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010ad0:	2302      	movs	r3, #2
  }
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3710      	adds	r7, #16
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b084      	sub	sp, #16
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010ae8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d015      	beq.n	8010b20 <USBD_CDC_EP0_RxReady+0x46>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010afa:	2bff      	cmp	r3, #255	; 0xff
 8010afc:	d010      	beq.n	8010b20 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b04:	689b      	ldr	r3, [r3, #8]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010b0c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010b14:	b292      	uxth	r2, r2
 8010b16:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	22ff      	movs	r2, #255	; 0xff
 8010b1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2243      	movs	r2, #67	; 0x43
 8010b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010b3a:	4b03      	ldr	r3, [pc, #12]	; (8010b48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	200000e4 	.word	0x200000e4

08010b4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2243      	movs	r2, #67	; 0x43
 8010b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010b5a:	4b03      	ldr	r3, [pc, #12]	; (8010b68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr
 8010b68:	200000a0 	.word	0x200000a0

08010b6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2243      	movs	r2, #67	; 0x43
 8010b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010b7a:	4b03      	ldr	r3, [pc, #12]	; (8010b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	20000128 	.word	0x20000128

08010b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	220a      	movs	r2, #10
 8010b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010b9a:	4b03      	ldr	r3, [pc, #12]	; (8010ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr
 8010ba8:	2000005c 	.word	0x2000005c

08010bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010bb6:	2302      	movs	r3, #2
 8010bb8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d005      	beq.n	8010bcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	683a      	ldr	r2, [r7, #0]
 8010bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8010bda:	b480      	push	{r7}
 8010bdc:	b087      	sub	sp, #28
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	60f8      	str	r0, [r7, #12]
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	4613      	mov	r3, r2
 8010be6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010bee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010bf8:	88fa      	ldrh	r2, [r7, #6]
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010c00:	2300      	movs	r3, #0
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	371c      	adds	r7, #28
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr

08010c0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b085      	sub	sp, #20
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
 8010c16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	683a      	ldr	r2, [r7, #0]
 8010c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3714      	adds	r7, #20
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr

08010c36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b084      	sub	sp, #16
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d017      	beq.n	8010c80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	7c1b      	ldrb	r3, [r3, #16]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d109      	bne.n	8010c6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c62:	2101      	movs	r1, #1
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f005 fae7 	bl	8016238 <USBD_LL_PrepareReceive>
 8010c6a:	e007      	b.n	8010c7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c72:	2340      	movs	r3, #64	; 0x40
 8010c74:	2101      	movs	r1, #1
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f005 fade 	bl	8016238 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	e000      	b.n	8010c82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010c80:	2302      	movs	r3, #2
  }
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010c8a:	b580      	push	{r7, lr}
 8010c8c:	b084      	sub	sp, #16
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	60f8      	str	r0, [r7, #12]
 8010c92:	60b9      	str	r1, [r7, #8]
 8010c94:	4613      	mov	r3, r2
 8010c96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d101      	bne.n	8010ca2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	e01a      	b.n	8010cd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d003      	beq.n	8010cb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d003      	beq.n	8010cc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	79fa      	ldrb	r2, [r7, #7]
 8010cce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f005 f959 	bl	8015f88 <USBD_LL_Init>

  return USBD_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010cea:	2300      	movs	r3, #0
 8010cec:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d006      	beq.n	8010d02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	73fb      	strb	r3, [r7, #15]
 8010d00:	e001      	b.n	8010d06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010d02:	2302      	movs	r3, #2
 8010d04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3714      	adds	r7, #20
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f005 f97f 	bl	8016020 <USBD_LL_Start>

  return USBD_OK;
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b084      	sub	sp, #16
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010d4e:	2302      	movs	r3, #2
 8010d50:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00c      	beq.n	8010d76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	78fa      	ldrb	r2, [r7, #3]
 8010d66:	4611      	mov	r1, r2
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	4798      	blx	r3
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d101      	bne.n	8010d76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	78fa      	ldrb	r2, [r7, #3]
 8010d96:	4611      	mov	r1, r2
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	4798      	blx	r3
  return USBD_OK;
 8010d9c:	2300      	movs	r3, #0
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010db6:	6839      	ldr	r1, [r7, #0]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fe95 	bl	8011ae8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8010dcc:	461a      	mov	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010dda:	f003 031f 	and.w	r3, r3, #31
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d00c      	beq.n	8010dfc <USBD_LL_SetupStage+0x56>
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d302      	bcc.n	8010dec <USBD_LL_SetupStage+0x46>
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	d010      	beq.n	8010e0c <USBD_LL_SetupStage+0x66>
 8010dea:	e017      	b.n	8010e1c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010df2:	4619      	mov	r1, r3
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fa05 	bl	8011204 <USBD_StdDevReq>
    break;
 8010dfa:	e01a      	b.n	8010e32 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010e02:	4619      	mov	r1, r3
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 fa67 	bl	80112d8 <USBD_StdItfReq>
    break;
 8010e0a:	e012      	b.n	8010e32 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010e12:	4619      	mov	r1, r3
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 faa5 	bl	8011364 <USBD_StdEPReq>
    break;
 8010e1a:	e00a      	b.n	8010e32 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	4619      	mov	r1, r3
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f005 f958 	bl	80160e0 <USBD_LL_StallEP>
    break;
 8010e30:	bf00      	nop
  }

  return USBD_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	460b      	mov	r3, r1
 8010e46:	607a      	str	r2, [r7, #4]
 8010e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010e4a:	7afb      	ldrb	r3, [r7, #11]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d14b      	bne.n	8010ee8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e56:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010e5e:	2b03      	cmp	r3, #3
 8010e60:	d134      	bne.n	8010ecc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	68da      	ldr	r2, [r3, #12]
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d919      	bls.n	8010ea2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	68da      	ldr	r2, [r3, #12]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	68da      	ldr	r2, [r3, #12]
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d203      	bcs.n	8010e90 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	e002      	b.n	8010e96 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	461a      	mov	r2, r3
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f000 ff18 	bl	8011cd0 <USBD_CtlContinueRx>
 8010ea0:	e038      	b.n	8010f14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00a      	beq.n	8010ec4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010eb4:	2b03      	cmp	r3, #3
 8010eb6:	d105      	bne.n	8010ec4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f000 ff15 	bl	8011cf4 <USBD_CtlSendStatus>
 8010eca:	e023      	b.n	8010f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010ed2:	2b05      	cmp	r3, #5
 8010ed4:	d11e      	bne.n	8010f14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010ede:	2100      	movs	r1, #0
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f005 f8fd 	bl	80160e0 <USBD_LL_StallEP>
 8010ee6:	e015      	b.n	8010f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d00d      	beq.n	8010f10 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010efa:	2b03      	cmp	r3, #3
 8010efc:	d108      	bne.n	8010f10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	7afa      	ldrb	r2, [r7, #11]
 8010f08:	4611      	mov	r1, r2
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	4798      	blx	r3
 8010f0e:	e001      	b.n	8010f14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010f10:	2302      	movs	r3, #2
 8010f12:	e000      	b.n	8010f16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b086      	sub	sp, #24
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	460b      	mov	r3, r1
 8010f28:	607a      	str	r2, [r7, #4]
 8010f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010f2c:	7afb      	ldrb	r3, [r7, #11]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d17f      	bne.n	8011032 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3314      	adds	r3, #20
 8010f36:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d15c      	bne.n	8010ffc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	68da      	ldr	r2, [r3, #12]
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d915      	bls.n	8010f7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	68da      	ldr	r2, [r3, #12]
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	1ad2      	subs	r2, r2, r3
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	461a      	mov	r2, r3
 8010f64:	6879      	ldr	r1, [r7, #4]
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f000 fe82 	bl	8011c70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	2200      	movs	r2, #0
 8010f70:	2100      	movs	r1, #0
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f005 f960 	bl	8016238 <USBD_LL_PrepareReceive>
 8010f78:	e04e      	b.n	8011018 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	697a      	ldr	r2, [r7, #20]
 8010f80:	6912      	ldr	r2, [r2, #16]
 8010f82:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f86:	fb02 f201 	mul.w	r2, r2, r1
 8010f8a:	1a9b      	subs	r3, r3, r2
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d11c      	bne.n	8010fca <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	689a      	ldr	r2, [r3, #8]
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d316      	bcc.n	8010fca <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	689a      	ldr	r2, [r3, #8]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d20f      	bcs.n	8010fca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010faa:	2200      	movs	r2, #0
 8010fac:	2100      	movs	r1, #0
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 fe5e 	bl	8011c70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f005 f938 	bl	8016238 <USBD_LL_PrepareReceive>
 8010fc8:	e026      	b.n	8011018 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00a      	beq.n	8010fec <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010fdc:	2b03      	cmp	r3, #3
 8010fde:	d105      	bne.n	8010fec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010fec:	2180      	movs	r1, #128	; 0x80
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	f005 f876 	bl	80160e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 fe90 	bl	8011d1a <USBD_CtlReceiveStatus>
 8010ffa:	e00d      	b.n	8011018 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011002:	2b04      	cmp	r3, #4
 8011004:	d004      	beq.n	8011010 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801100c:	2b00      	cmp	r3, #0
 801100e:	d103      	bne.n	8011018 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011010:	2180      	movs	r1, #128	; 0x80
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f005 f864 	bl	80160e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801101e:	2b01      	cmp	r3, #1
 8011020:	d11d      	bne.n	801105e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f7ff fe82 	bl	8010d2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2200      	movs	r2, #0
 801102c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8011030:	e015      	b.n	801105e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011038:	695b      	ldr	r3, [r3, #20]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00d      	beq.n	801105a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8011044:	2b03      	cmp	r3, #3
 8011046:	d108      	bne.n	801105a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801104e:	695b      	ldr	r3, [r3, #20]
 8011050:	7afa      	ldrb	r2, [r7, #11]
 8011052:	4611      	mov	r1, r2
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	4798      	blx	r3
 8011058:	e001      	b.n	801105e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801105a:	2302      	movs	r3, #2
 801105c:	e000      	b.n	8011060 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801105e:	2300      	movs	r3, #0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3718      	adds	r7, #24
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011070:	2340      	movs	r3, #64	; 0x40
 8011072:	2200      	movs	r2, #0
 8011074:	2100      	movs	r1, #0
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f004 ffed 	bl	8016056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2201      	movs	r2, #1
 8011080:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2240      	movs	r2, #64	; 0x40
 8011088:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801108c:	2340      	movs	r3, #64	; 0x40
 801108e:	2200      	movs	r2, #0
 8011090:	2180      	movs	r1, #128	; 0x80
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f004 ffdf 	bl	8016056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2240      	movs	r2, #64	; 0x40
 80110a2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2201      	movs	r2, #1
 80110a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d009      	beq.n	80110e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	6852      	ldr	r2, [r2, #4]
 80110d8:	b2d2      	uxtb	r2, r2
 80110da:	4611      	mov	r1, r2
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	4798      	blx	r3
  }

  return USBD_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80110ea:	b480      	push	{r7}
 80110ec:	b083      	sub	sp, #12
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	460b      	mov	r3, r1
 80110f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	78fa      	ldrb	r2, [r7, #3]
 80110fa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	370c      	adds	r7, #12
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2204      	movs	r2, #4
 8011122:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	370c      	adds	r7, #12
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr

08011156 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b082      	sub	sp, #8
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011164:	2b03      	cmp	r3, #3
 8011166:	d10b      	bne.n	8011180 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801116e:	69db      	ldr	r3, [r3, #28]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d005      	beq.n	8011180 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801117a:	69db      	ldr	r3, [r3, #28]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801118a:	b480      	push	{r7}
 801118c:	b083      	sub	sp, #12
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	460b      	mov	r3, r1
 8011194:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	460b      	mov	r3, r1
 80111ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	370c      	adds	r7, #12
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr

080111be <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80111be:	b480      	push	{r7}
 80111c0:	b083      	sub	sp, #12
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2201      	movs	r2, #1
 80111e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	6852      	ldr	r2, [r2, #4]
 80111f0:	b2d2      	uxtb	r2, r2
 80111f2:	4611      	mov	r1, r2
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	4798      	blx	r3

  return USBD_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801121a:	2b20      	cmp	r3, #32
 801121c:	d004      	beq.n	8011228 <USBD_StdDevReq+0x24>
 801121e:	2b40      	cmp	r3, #64	; 0x40
 8011220:	d002      	beq.n	8011228 <USBD_StdDevReq+0x24>
 8011222:	2b00      	cmp	r3, #0
 8011224:	d008      	beq.n	8011238 <USBD_StdDevReq+0x34>
 8011226:	e04c      	b.n	80112c2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	6839      	ldr	r1, [r7, #0]
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	4798      	blx	r3
    break;
 8011236:	e049      	b.n	80112cc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	785b      	ldrb	r3, [r3, #1]
 801123c:	2b09      	cmp	r3, #9
 801123e:	d83a      	bhi.n	80112b6 <USBD_StdDevReq+0xb2>
 8011240:	a201      	add	r2, pc, #4	; (adr r2, 8011248 <USBD_StdDevReq+0x44>)
 8011242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011246:	bf00      	nop
 8011248:	08011299 	.word	0x08011299
 801124c:	080112ad 	.word	0x080112ad
 8011250:	080112b7 	.word	0x080112b7
 8011254:	080112a3 	.word	0x080112a3
 8011258:	080112b7 	.word	0x080112b7
 801125c:	0801127b 	.word	0x0801127b
 8011260:	08011271 	.word	0x08011271
 8011264:	080112b7 	.word	0x080112b7
 8011268:	0801128f 	.word	0x0801128f
 801126c:	08011285 	.word	0x08011285
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8011270:	6839      	ldr	r1, [r7, #0]
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f9d2 	bl	801161c <USBD_GetDescriptor>
      break;
 8011278:	e022      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 fac7 	bl	8011810 <USBD_SetAddress>
      break;
 8011282:	e01d      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8011284:	6839      	ldr	r1, [r7, #0]
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 fb04 	bl	8011894 <USBD_SetConfig>
      break;
 801128c:	e018      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fb8d 	bl	80119b0 <USBD_GetConfig>
      break;
 8011296:	e013      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 fbbc 	bl	8011a18 <USBD_GetStatus>
      break;
 80112a0:	e00e      	b.n	80112c0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 fbea 	bl	8011a7e <USBD_SetFeature>
      break;
 80112aa:	e009      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 fbf9 	bl	8011aa6 <USBD_ClrFeature>
      break;
 80112b4:	e004      	b.n	80112c0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80112b6:	6839      	ldr	r1, [r7, #0]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 fc52 	bl	8011b62 <USBD_CtlError>
      break;
 80112be:	bf00      	nop
    }
    break;
 80112c0:	e004      	b.n	80112cc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fc4c 	bl	8011b62 <USBD_CtlError>
    break;
 80112ca:	bf00      	nop
  }

  return ret;
 80112cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop

080112d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80112e2:	2300      	movs	r3, #0
 80112e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112ee:	2b20      	cmp	r3, #32
 80112f0:	d003      	beq.n	80112fa <USBD_StdItfReq+0x22>
 80112f2:	2b40      	cmp	r3, #64	; 0x40
 80112f4:	d001      	beq.n	80112fa <USBD_StdItfReq+0x22>
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d12a      	bne.n	8011350 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011300:	3b01      	subs	r3, #1
 8011302:	2b02      	cmp	r3, #2
 8011304:	d81d      	bhi.n	8011342 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	889b      	ldrh	r3, [r3, #4]
 801130a:	b2db      	uxtb	r3, r3
 801130c:	2b01      	cmp	r3, #1
 801130e:	d813      	bhi.n	8011338 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	6839      	ldr	r1, [r7, #0]
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	4798      	blx	r3
 801131e:	4603      	mov	r3, r0
 8011320:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	88db      	ldrh	r3, [r3, #6]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d110      	bne.n	801134c <USBD_StdItfReq+0x74>
 801132a:	7bfb      	ldrb	r3, [r7, #15]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10d      	bne.n	801134c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f000 fcdf 	bl	8011cf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011336:	e009      	b.n	801134c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011338:	6839      	ldr	r1, [r7, #0]
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 fc11 	bl	8011b62 <USBD_CtlError>
      break;
 8011340:	e004      	b.n	801134c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 fc0c 	bl	8011b62 <USBD_CtlError>
      break;
 801134a:	e000      	b.n	801134e <USBD_StdItfReq+0x76>
      break;
 801134c:	bf00      	nop
    }
    break;
 801134e:	e004      	b.n	801135a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011350:	6839      	ldr	r1, [r7, #0]
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 fc05 	bl	8011b62 <USBD_CtlError>
    break;
 8011358:	bf00      	nop
  }

  return USBD_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	889b      	ldrh	r3, [r3, #4]
 8011376:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011380:	2b20      	cmp	r3, #32
 8011382:	d004      	beq.n	801138e <USBD_StdEPReq+0x2a>
 8011384:	2b40      	cmp	r3, #64	; 0x40
 8011386:	d002      	beq.n	801138e <USBD_StdEPReq+0x2a>
 8011388:	2b00      	cmp	r3, #0
 801138a:	d008      	beq.n	801139e <USBD_StdEPReq+0x3a>
 801138c:	e13b      	b.n	8011606 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	6839      	ldr	r1, [r7, #0]
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	4798      	blx	r3
    break;
 801139c:	e138      	b.n	8011610 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113a6:	2b20      	cmp	r3, #32
 80113a8:	d10a      	bne.n	80113c0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80113b0:	689b      	ldr	r3, [r3, #8]
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	4798      	blx	r3
 80113b8:	4603      	mov	r3, r0
 80113ba:	73fb      	strb	r3, [r7, #15]

      return ret;
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
 80113be:	e128      	b.n	8011612 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d03e      	beq.n	8011446 <USBD_StdEPReq+0xe2>
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	d002      	beq.n	80113d2 <USBD_StdEPReq+0x6e>
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d070      	beq.n	80114b2 <USBD_StdEPReq+0x14e>
 80113d0:	e113      	b.n	80115fa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80113d8:	2b02      	cmp	r3, #2
 80113da:	d002      	beq.n	80113e2 <USBD_StdEPReq+0x7e>
 80113dc:	2b03      	cmp	r3, #3
 80113de:	d015      	beq.n	801140c <USBD_StdEPReq+0xa8>
 80113e0:	e02b      	b.n	801143a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113e2:	7bbb      	ldrb	r3, [r7, #14]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d00c      	beq.n	8011402 <USBD_StdEPReq+0x9e>
 80113e8:	7bbb      	ldrb	r3, [r7, #14]
 80113ea:	2b80      	cmp	r3, #128	; 0x80
 80113ec:	d009      	beq.n	8011402 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80113ee:	7bbb      	ldrb	r3, [r7, #14]
 80113f0:	4619      	mov	r1, r3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f004 fe74 	bl	80160e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80113f8:	2180      	movs	r1, #128	; 0x80
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f004 fe70 	bl	80160e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011400:	e020      	b.n	8011444 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8011402:	6839      	ldr	r1, [r7, #0]
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 fbac 	bl	8011b62 <USBD_CtlError>
        break;
 801140a:	e01b      	b.n	8011444 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	885b      	ldrh	r3, [r3, #2]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d10e      	bne.n	8011432 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011414:	7bbb      	ldrb	r3, [r7, #14]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00b      	beq.n	8011432 <USBD_StdEPReq+0xce>
 801141a:	7bbb      	ldrb	r3, [r7, #14]
 801141c:	2b80      	cmp	r3, #128	; 0x80
 801141e:	d008      	beq.n	8011432 <USBD_StdEPReq+0xce>
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	88db      	ldrh	r3, [r3, #6]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d104      	bne.n	8011432 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8011428:	7bbb      	ldrb	r3, [r7, #14]
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f004 fe57 	bl	80160e0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fc5e 	bl	8011cf4 <USBD_CtlSendStatus>

        break;
 8011438:	e004      	b.n	8011444 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801143a:	6839      	ldr	r1, [r7, #0]
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f000 fb90 	bl	8011b62 <USBD_CtlError>
        break;
 8011442:	bf00      	nop
      }
      break;
 8011444:	e0de      	b.n	8011604 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801144c:	2b02      	cmp	r3, #2
 801144e:	d002      	beq.n	8011456 <USBD_StdEPReq+0xf2>
 8011450:	2b03      	cmp	r3, #3
 8011452:	d015      	beq.n	8011480 <USBD_StdEPReq+0x11c>
 8011454:	e026      	b.n	80114a4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011456:	7bbb      	ldrb	r3, [r7, #14]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d00c      	beq.n	8011476 <USBD_StdEPReq+0x112>
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	2b80      	cmp	r3, #128	; 0x80
 8011460:	d009      	beq.n	8011476 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011462:	7bbb      	ldrb	r3, [r7, #14]
 8011464:	4619      	mov	r1, r3
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f004 fe3a 	bl	80160e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 801146c:	2180      	movs	r1, #128	; 0x80
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f004 fe36 	bl	80160e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011474:	e01c      	b.n	80114b0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011476:	6839      	ldr	r1, [r7, #0]
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f000 fb72 	bl	8011b62 <USBD_CtlError>
        break;
 801147e:	e017      	b.n	80114b0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	885b      	ldrh	r3, [r3, #2]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d112      	bne.n	80114ae <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011488:	7bbb      	ldrb	r3, [r7, #14]
 801148a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801148e:	2b00      	cmp	r3, #0
 8011490:	d004      	beq.n	801149c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8011492:	7bbb      	ldrb	r3, [r7, #14]
 8011494:	4619      	mov	r1, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f004 fe41 	bl	801611e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f000 fc29 	bl	8011cf4 <USBD_CtlSendStatus>
        }
        break;
 80114a2:	e004      	b.n	80114ae <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80114a4:	6839      	ldr	r1, [r7, #0]
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 fb5b 	bl	8011b62 <USBD_CtlError>
        break;
 80114ac:	e000      	b.n	80114b0 <USBD_StdEPReq+0x14c>
        break;
 80114ae:	bf00      	nop
      }
      break;
 80114b0:	e0a8      	b.n	8011604 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d002      	beq.n	80114c2 <USBD_StdEPReq+0x15e>
 80114bc:	2b03      	cmp	r3, #3
 80114be:	d031      	beq.n	8011524 <USBD_StdEPReq+0x1c0>
 80114c0:	e095      	b.n	80115ee <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d007      	beq.n	80114d8 <USBD_StdEPReq+0x174>
 80114c8:	7bbb      	ldrb	r3, [r7, #14]
 80114ca:	2b80      	cmp	r3, #128	; 0x80
 80114cc:	d004      	beq.n	80114d8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80114ce:	6839      	ldr	r1, [r7, #0]
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fb46 	bl	8011b62 <USBD_CtlError>
          break;
 80114d6:	e08f      	b.n	80115f8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80114d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da0b      	bge.n	80114f8 <USBD_StdEPReq+0x194>
 80114e0:	7bbb      	ldrb	r3, [r7, #14]
 80114e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114e6:	4613      	mov	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	3310      	adds	r3, #16
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	4413      	add	r3, r2
 80114f4:	3304      	adds	r3, #4
 80114f6:	e00a      	b.n	801150e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80114f8:	7bbb      	ldrb	r3, [r7, #14]
 80114fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80114fe:	4613      	mov	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	4413      	add	r3, r2
 801150e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	2202      	movs	r2, #2
 801151a:	4619      	mov	r1, r3
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f000 fb8b 	bl	8011c38 <USBD_CtlSendData>
          break;
 8011522:	e069      	b.n	80115f8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8011524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011528:	2b00      	cmp	r3, #0
 801152a:	da11      	bge.n	8011550 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801152c:	7bbb      	ldrb	r3, [r7, #14]
 801152e:	f003 020f 	and.w	r2, r3, #15
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	4613      	mov	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	3318      	adds	r3, #24
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d117      	bne.n	8011576 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f000 fb0a 	bl	8011b62 <USBD_CtlError>
            break;
 801154e:	e053      	b.n	80115f8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011550:	7bbb      	ldrb	r3, [r7, #14]
 8011552:	f003 020f 	and.w	r2, r3, #15
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	440b      	add	r3, r1
 8011562:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d104      	bne.n	8011576 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 faf7 	bl	8011b62 <USBD_CtlError>
            break;
 8011574:	e040      	b.n	80115f8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801157a:	2b00      	cmp	r3, #0
 801157c:	da0b      	bge.n	8011596 <USBD_StdEPReq+0x232>
 801157e:	7bbb      	ldrb	r3, [r7, #14]
 8011580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011584:	4613      	mov	r3, r2
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	4413      	add	r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	3310      	adds	r3, #16
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	4413      	add	r3, r2
 8011592:	3304      	adds	r3, #4
 8011594:	e00a      	b.n	80115ac <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8011596:	7bbb      	ldrb	r3, [r7, #14]
 8011598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801159c:	4613      	mov	r3, r2
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	4413      	add	r3, r2
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	4413      	add	r3, r2
 80115ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80115ae:	7bbb      	ldrb	r3, [r7, #14]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <USBD_StdEPReq+0x256>
 80115b4:	7bbb      	ldrb	r3, [r7, #14]
 80115b6:	2b80      	cmp	r3, #128	; 0x80
 80115b8:	d103      	bne.n	80115c2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	2200      	movs	r2, #0
 80115be:	601a      	str	r2, [r3, #0]
 80115c0:	e00e      	b.n	80115e0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80115c2:	7bbb      	ldrb	r3, [r7, #14]
 80115c4:	4619      	mov	r1, r3
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f004 fdc8 	bl	801615c <USBD_LL_IsStallEP>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d003      	beq.n	80115da <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	2201      	movs	r2, #1
 80115d6:	601a      	str	r2, [r3, #0]
 80115d8:	e002      	b.n	80115e0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2200      	movs	r2, #0
 80115de:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2202      	movs	r2, #2
 80115e4:	4619      	mov	r1, r3
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 fb26 	bl	8011c38 <USBD_CtlSendData>
          break;
 80115ec:	e004      	b.n	80115f8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fab6 	bl	8011b62 <USBD_CtlError>
        break;
 80115f6:	bf00      	nop
      }
      break;
 80115f8:	e004      	b.n	8011604 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80115fa:	6839      	ldr	r1, [r7, #0]
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f000 fab0 	bl	8011b62 <USBD_CtlError>
      break;
 8011602:	bf00      	nop
    }
    break;
 8011604:	e004      	b.n	8011610 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 faaa 	bl	8011b62 <USBD_CtlError>
    break;
 801160e:	bf00      	nop
  }

  return ret;
 8011610:	7bfb      	ldrb	r3, [r7, #15]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
	...

0801161c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	885b      	ldrh	r3, [r3, #2]
 801162a:	0a1b      	lsrs	r3, r3, #8
 801162c:	b29b      	uxth	r3, r3
 801162e:	3b01      	subs	r3, #1
 8011630:	2b06      	cmp	r3, #6
 8011632:	f200 80c9 	bhi.w	80117c8 <USBD_GetDescriptor+0x1ac>
 8011636:	a201      	add	r2, pc, #4	; (adr r2, 801163c <USBD_GetDescriptor+0x20>)
 8011638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163c:	08011659 	.word	0x08011659
 8011640:	08011671 	.word	0x08011671
 8011644:	080116b1 	.word	0x080116b1
 8011648:	080117c9 	.word	0x080117c9
 801164c:	080117c9 	.word	0x080117c9
 8011650:	08011775 	.word	0x08011775
 8011654:	0801179b 	.word	0x0801179b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	7c12      	ldrb	r2, [r2, #16]
 8011664:	f107 010a 	add.w	r1, r7, #10
 8011668:	4610      	mov	r0, r2
 801166a:	4798      	blx	r3
 801166c:	60f8      	str	r0, [r7, #12]
    break;
 801166e:	e0b0      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	7c1b      	ldrb	r3, [r3, #16]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10d      	bne.n	8011694 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011680:	f107 020a 	add.w	r2, r7, #10
 8011684:	4610      	mov	r0, r2
 8011686:	4798      	blx	r3
 8011688:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3301      	adds	r3, #1
 801168e:	2202      	movs	r2, #2
 8011690:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011692:	e09e      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169c:	f107 020a 	add.w	r2, r7, #10
 80116a0:	4610      	mov	r0, r2
 80116a2:	4798      	blx	r3
 80116a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	3301      	adds	r3, #1
 80116aa:	2202      	movs	r2, #2
 80116ac:	701a      	strb	r2, [r3, #0]
    break;
 80116ae:	e090      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	885b      	ldrh	r3, [r3, #2]
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	2b05      	cmp	r3, #5
 80116b8:	d856      	bhi.n	8011768 <USBD_GetDescriptor+0x14c>
 80116ba:	a201      	add	r2, pc, #4	; (adr r2, 80116c0 <USBD_GetDescriptor+0xa4>)
 80116bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c0:	080116d9 	.word	0x080116d9
 80116c4:	080116f1 	.word	0x080116f1
 80116c8:	08011709 	.word	0x08011709
 80116cc:	08011721 	.word	0x08011721
 80116d0:	08011739 	.word	0x08011739
 80116d4:	08011751 	.word	0x08011751
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	7c12      	ldrb	r2, [r2, #16]
 80116e4:	f107 010a 	add.w	r1, r7, #10
 80116e8:	4610      	mov	r0, r2
 80116ea:	4798      	blx	r3
 80116ec:	60f8      	str	r0, [r7, #12]
      break;
 80116ee:	e040      	b.n	8011772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	7c12      	ldrb	r2, [r2, #16]
 80116fc:	f107 010a 	add.w	r1, r7, #10
 8011700:	4610      	mov	r0, r2
 8011702:	4798      	blx	r3
 8011704:	60f8      	str	r0, [r7, #12]
      break;
 8011706:	e034      	b.n	8011772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	7c12      	ldrb	r2, [r2, #16]
 8011714:	f107 010a 	add.w	r1, r7, #10
 8011718:	4610      	mov	r0, r2
 801171a:	4798      	blx	r3
 801171c:	60f8      	str	r0, [r7, #12]
      break;
 801171e:	e028      	b.n	8011772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	7c12      	ldrb	r2, [r2, #16]
 801172c:	f107 010a 	add.w	r1, r7, #10
 8011730:	4610      	mov	r0, r2
 8011732:	4798      	blx	r3
 8011734:	60f8      	str	r0, [r7, #12]
      break;
 8011736:	e01c      	b.n	8011772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801173e:	695b      	ldr	r3, [r3, #20]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	7c12      	ldrb	r2, [r2, #16]
 8011744:	f107 010a 	add.w	r1, r7, #10
 8011748:	4610      	mov	r0, r2
 801174a:	4798      	blx	r3
 801174c:	60f8      	str	r0, [r7, #12]
      break;
 801174e:	e010      	b.n	8011772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	7c12      	ldrb	r2, [r2, #16]
 801175c:	f107 010a 	add.w	r1, r7, #10
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
 8011764:	60f8      	str	r0, [r7, #12]
      break;
 8011766:	e004      	b.n	8011772 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 f9f9 	bl	8011b62 <USBD_CtlError>
      return;
 8011770:	e04b      	b.n	801180a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8011772:	e02e      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	7c1b      	ldrb	r3, [r3, #16]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d109      	bne.n	8011790 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011784:	f107 020a 	add.w	r2, r7, #10
 8011788:	4610      	mov	r0, r2
 801178a:	4798      	blx	r3
 801178c:	60f8      	str	r0, [r7, #12]
      break;
 801178e:	e020      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f000 f9e5 	bl	8011b62 <USBD_CtlError>
      return;
 8011798:	e037      	b.n	801180a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	7c1b      	ldrb	r3, [r3, #16]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d10d      	bne.n	80117be <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80117a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117aa:	f107 020a 	add.w	r2, r7, #10
 80117ae:	4610      	mov	r0, r2
 80117b0:	4798      	blx	r3
 80117b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	3301      	adds	r3, #1
 80117b8:	2207      	movs	r2, #7
 80117ba:	701a      	strb	r2, [r3, #0]
      break;
 80117bc:	e009      	b.n	80117d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80117be:	6839      	ldr	r1, [r7, #0]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 f9ce 	bl	8011b62 <USBD_CtlError>
      return;
 80117c6:	e020      	b.n	801180a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80117c8:	6839      	ldr	r1, [r7, #0]
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 f9c9 	bl	8011b62 <USBD_CtlError>
    return;
 80117d0:	e01b      	b.n	801180a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80117d2:	897b      	ldrh	r3, [r7, #10]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d011      	beq.n	80117fc <USBD_GetDescriptor+0x1e0>
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	88db      	ldrh	r3, [r3, #6]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00d      	beq.n	80117fc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	88da      	ldrh	r2, [r3, #6]
 80117e4:	897b      	ldrh	r3, [r7, #10]
 80117e6:	4293      	cmp	r3, r2
 80117e8:	bf28      	it	cs
 80117ea:	4613      	movcs	r3, r2
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80117f0:	897b      	ldrh	r3, [r7, #10]
 80117f2:	461a      	mov	r2, r3
 80117f4:	68f9      	ldr	r1, [r7, #12]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fa1e 	bl	8011c38 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	88db      	ldrh	r3, [r3, #6]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d102      	bne.n	801180a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 fa75 	bl	8011cf4 <USBD_CtlSendStatus>
  }
}
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	889b      	ldrh	r3, [r3, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d130      	bne.n	8011884 <USBD_SetAddress+0x74>
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	88db      	ldrh	r3, [r3, #6]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d12c      	bne.n	8011884 <USBD_SetAddress+0x74>
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	885b      	ldrh	r3, [r3, #2]
 801182e:	2b7f      	cmp	r3, #127	; 0x7f
 8011830:	d828      	bhi.n	8011884 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	885b      	ldrh	r3, [r3, #2]
 8011836:	b2db      	uxtb	r3, r3
 8011838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801183c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011844:	2b03      	cmp	r3, #3
 8011846:	d104      	bne.n	8011852 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f989 	bl	8011b62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011850:	e01c      	b.n	801188c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	7bfa      	ldrb	r2, [r7, #15]
 8011856:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f004 fca8 	bl	80161b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fa45 	bl	8011cf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801186a:	7bfb      	ldrb	r3, [r7, #15]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d004      	beq.n	801187a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2202      	movs	r2, #2
 8011874:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011878:	e008      	b.n	801188c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2201      	movs	r2, #1
 801187e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011882:	e003      	b.n	801188c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f000 f96b 	bl	8011b62 <USBD_CtlError>
  }
}
 801188c:	bf00      	nop
 801188e:	3710      	adds	r7, #16
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	885b      	ldrh	r3, [r3, #2]
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b41      	ldr	r3, [pc, #260]	; (80119ac <USBD_SetConfig+0x118>)
 80118a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80118a8:	4b40      	ldr	r3, [pc, #256]	; (80119ac <USBD_SetConfig+0x118>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d904      	bls.n	80118ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f955 	bl	8011b62 <USBD_CtlError>
 80118b8:	e075      	b.n	80119a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d002      	beq.n	80118ca <USBD_SetConfig+0x36>
 80118c4:	2b03      	cmp	r3, #3
 80118c6:	d023      	beq.n	8011910 <USBD_SetConfig+0x7c>
 80118c8:	e062      	b.n	8011990 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80118ca:	4b38      	ldr	r3, [pc, #224]	; (80119ac <USBD_SetConfig+0x118>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d01a      	beq.n	8011908 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80118d2:	4b36      	ldr	r3, [pc, #216]	; (80119ac <USBD_SetConfig+0x118>)
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	461a      	mov	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2203      	movs	r2, #3
 80118e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80118e4:	4b31      	ldr	r3, [pc, #196]	; (80119ac <USBD_SetConfig+0x118>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	4619      	mov	r1, r3
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff fa29 	bl	8010d42 <USBD_SetClassConfig>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d104      	bne.n	8011900 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 f932 	bl	8011b62 <USBD_CtlError>
          return;
 80118fe:	e052      	b.n	80119a6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f000 f9f7 	bl	8011cf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011906:	e04e      	b.n	80119a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 f9f3 	bl	8011cf4 <USBD_CtlSendStatus>
      break;
 801190e:	e04a      	b.n	80119a6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011910:	4b26      	ldr	r3, [pc, #152]	; (80119ac <USBD_SetConfig+0x118>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d112      	bne.n	801193e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2202      	movs	r2, #2
 801191c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8011920:	4b22      	ldr	r3, [pc, #136]	; (80119ac <USBD_SetConfig+0x118>)
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	461a      	mov	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801192a:	4b20      	ldr	r3, [pc, #128]	; (80119ac <USBD_SetConfig+0x118>)
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff fa25 	bl	8010d80 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 f9dc 	bl	8011cf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 801193c:	e033      	b.n	80119a6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801193e:	4b1b      	ldr	r3, [pc, #108]	; (80119ac <USBD_SetConfig+0x118>)
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	461a      	mov	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	429a      	cmp	r2, r3
 801194a:	d01d      	beq.n	8011988 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	b2db      	uxtb	r3, r3
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7ff fa13 	bl	8010d80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801195a:	4b14      	ldr	r3, [pc, #80]	; (80119ac <USBD_SetConfig+0x118>)
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011964:	4b11      	ldr	r3, [pc, #68]	; (80119ac <USBD_SetConfig+0x118>)
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	4619      	mov	r1, r3
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7ff f9e9 	bl	8010d42 <USBD_SetClassConfig>
 8011970:	4603      	mov	r3, r0
 8011972:	2b02      	cmp	r3, #2
 8011974:	d104      	bne.n	8011980 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8011976:	6839      	ldr	r1, [r7, #0]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 f8f2 	bl	8011b62 <USBD_CtlError>
          return;
 801197e:	e012      	b.n	80119a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 f9b7 	bl	8011cf4 <USBD_CtlSendStatus>
      break;
 8011986:	e00e      	b.n	80119a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 f9b3 	bl	8011cf4 <USBD_CtlSendStatus>
      break;
 801198e:	e00a      	b.n	80119a6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 f8e5 	bl	8011b62 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8011998:	4b04      	ldr	r3, [pc, #16]	; (80119ac <USBD_SetConfig+0x118>)
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	4619      	mov	r1, r3
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f7ff f9ee 	bl	8010d80 <USBD_ClrClassConfig>
      break;
 80119a4:	bf00      	nop
    }
  }
}
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	20000be8 	.word	0x20000be8

080119b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	88db      	ldrh	r3, [r3, #6]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d004      	beq.n	80119cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80119c2:	6839      	ldr	r1, [r7, #0]
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 f8cc 	bl	8011b62 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80119ca:	e021      	b.n	8011a10 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	db17      	blt.n	8011a06 <USBD_GetConfig+0x56>
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	dd02      	ble.n	80119e0 <USBD_GetConfig+0x30>
 80119da:	2b03      	cmp	r3, #3
 80119dc:	d00b      	beq.n	80119f6 <USBD_GetConfig+0x46>
 80119de:	e012      	b.n	8011a06 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3308      	adds	r3, #8
 80119ea:	2201      	movs	r2, #1
 80119ec:	4619      	mov	r1, r3
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f922 	bl	8011c38 <USBD_CtlSendData>
      break;
 80119f4:	e00c      	b.n	8011a10 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	3304      	adds	r3, #4
 80119fa:	2201      	movs	r2, #1
 80119fc:	4619      	mov	r1, r3
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f91a 	bl	8011c38 <USBD_CtlSendData>
      break;
 8011a04:	e004      	b.n	8011a10 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f8aa 	bl	8011b62 <USBD_CtlError>
      break;
 8011a0e:	bf00      	nop
}
 8011a10:	bf00      	nop
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d81e      	bhi.n	8011a6c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	88db      	ldrh	r3, [r3, #6]
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d004      	beq.n	8011a40 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f892 	bl	8011b62 <USBD_CtlError>
      break;
 8011a3e:	e01a      	b.n	8011a76 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2201      	movs	r2, #1
 8011a44:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d005      	beq.n	8011a5c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	f043 0202 	orr.w	r2, r3, #2
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	330c      	adds	r3, #12
 8011a60:	2202      	movs	r2, #2
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 f8e7 	bl	8011c38 <USBD_CtlSendData>
    break;
 8011a6a:	e004      	b.n	8011a76 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011a6c:	6839      	ldr	r1, [r7, #0]
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 f877 	bl	8011b62 <USBD_CtlError>
    break;
 8011a74:	bf00      	nop
  }
}
 8011a76:	bf00      	nop
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
 8011a86:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	885b      	ldrh	r3, [r3, #2]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d106      	bne.n	8011a9e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2201      	movs	r2, #1
 8011a94:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 f92b 	bl	8011cf4 <USBD_CtlSendStatus>
  }

}
 8011a9e:	bf00      	nop
 8011aa0:	3708      	adds	r7, #8
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b082      	sub	sp, #8
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d80b      	bhi.n	8011ad4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	885b      	ldrh	r3, [r3, #2]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d10c      	bne.n	8011ade <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f000 f911 	bl	8011cf4 <USBD_CtlSendStatus>
    }
    break;
 8011ad2:	e004      	b.n	8011ade <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f843 	bl	8011b62 <USBD_CtlError>
    break;
 8011adc:	e000      	b.n	8011ae0 <USBD_ClrFeature+0x3a>
    break;
 8011ade:	bf00      	nop
  }
}
 8011ae0:	bf00      	nop
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	781a      	ldrb	r2, [r3, #0]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	785a      	ldrb	r2, [r3, #1]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	3302      	adds	r3, #2
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	3303      	adds	r3, #3
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	021b      	lsls	r3, r3, #8
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	4413      	add	r3, r2
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	3304      	adds	r3, #4
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	3305      	adds	r3, #5
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	021b      	lsls	r3, r3, #8
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	4413      	add	r3, r2
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	3306      	adds	r3, #6
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	3307      	adds	r3, #7
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	021b      	lsls	r3, r3, #8
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	4413      	add	r3, r2
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	80da      	strh	r2, [r3, #6]

}
 8011b56:	bf00      	nop
 8011b58:	370c      	adds	r7, #12
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr

08011b62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b082      	sub	sp, #8
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
 8011b6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011b6c:	2180      	movs	r1, #128	; 0x80
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f004 fab6 	bl	80160e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011b74:	2100      	movs	r1, #0
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f004 fab2 	bl	80160e0 <USBD_LL_StallEP>
}
 8011b7c:	bf00      	nop
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011b90:	2300      	movs	r3, #0
 8011b92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d032      	beq.n	8011c00 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f000 f834 	bl	8011c08 <USBD_GetLen>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	005b      	lsls	r3, r3, #1
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011bae:	7dfb      	ldrb	r3, [r7, #23]
 8011bb0:	1c5a      	adds	r2, r3, #1
 8011bb2:	75fa      	strb	r2, [r7, #23]
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	4413      	add	r3, r2
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	7812      	ldrb	r2, [r2, #0]
 8011bbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011bc0:	7dfb      	ldrb	r3, [r7, #23]
 8011bc2:	1c5a      	adds	r2, r3, #1
 8011bc4:	75fa      	strb	r2, [r7, #23]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	4413      	add	r3, r2
 8011bcc:	2203      	movs	r2, #3
 8011bce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011bd0:	e012      	b.n	8011bf8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1c5a      	adds	r2, r3, #1
 8011bd6:	60fa      	str	r2, [r7, #12]
 8011bd8:	7dfa      	ldrb	r2, [r7, #23]
 8011bda:	1c51      	adds	r1, r2, #1
 8011bdc:	75f9      	strb	r1, [r7, #23]
 8011bde:	4611      	mov	r1, r2
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	440a      	add	r2, r1
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011be8:	7dfb      	ldrb	r3, [r7, #23]
 8011bea:	1c5a      	adds	r2, r3, #1
 8011bec:	75fa      	strb	r2, [r7, #23]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d1e8      	bne.n	8011bd2 <USBD_GetString+0x4e>
    }
  }
}
 8011c00:	bf00      	nop
 8011c02:	3718      	adds	r7, #24
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b085      	sub	sp, #20
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8011c10:	2300      	movs	r3, #0
 8011c12:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011c14:	e005      	b.n	8011c22 <USBD_GetLen+0x1a>
    {
        len++;
 8011c16:	7bfb      	ldrb	r3, [r7, #15]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1f5      	bne.n	8011c16 <USBD_GetLen+0xe>
    }

    return len;
 8011c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3714      	adds	r7, #20
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	4613      	mov	r3, r2
 8011c44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2202      	movs	r2, #2
 8011c4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8011c4e:	88fa      	ldrh	r2, [r7, #6]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011c54:	88fa      	ldrh	r2, [r7, #6]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011c5a:	88fb      	ldrh	r3, [r7, #6]
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	2100      	movs	r1, #0
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f004 fac6 	bl	80161f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011c7e:	88fb      	ldrh	r3, [r7, #6]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	2100      	movs	r1, #0
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f004 fab4 	bl	80161f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2203      	movs	r2, #3
 8011ca6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8011caa:	88fa      	ldrh	r2, [r7, #6]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011cb2:	88fa      	ldrh	r2, [r7, #6]
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8011cba:	88fb      	ldrh	r3, [r7, #6]
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f004 fab9 	bl	8016238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011cc6:	2300      	movs	r3, #0
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3710      	adds	r7, #16
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011cde:	88fb      	ldrh	r3, [r7, #6]
 8011ce0:	68ba      	ldr	r2, [r7, #8]
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	68f8      	ldr	r0, [r7, #12]
 8011ce6:	f004 faa7 	bl	8016238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011cea:	2300      	movs	r3, #0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2204      	movs	r2, #4
 8011d00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011d04:	2300      	movs	r3, #0
 8011d06:	2200      	movs	r2, #0
 8011d08:	2100      	movs	r1, #0
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f004 fa71 	bl	80161f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2205      	movs	r2, #5
 8011d26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	2100      	movs	r1, #0
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f004 fa81 	bl	8016238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	4603      	mov	r3, r0
 8011d48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011d4a:	79fb      	ldrb	r3, [r7, #7]
 8011d4c:	4a08      	ldr	r2, [pc, #32]	; (8011d70 <disk_status+0x30>)
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	79fa      	ldrb	r2, [r7, #7]
 8011d58:	4905      	ldr	r1, [pc, #20]	; (8011d70 <disk_status+0x30>)
 8011d5a:	440a      	add	r2, r1
 8011d5c:	7a12      	ldrb	r2, [r2, #8]
 8011d5e:	4610      	mov	r0, r2
 8011d60:	4798      	blx	r3
 8011d62:	4603      	mov	r3, r0
 8011d64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	20000e14 	.word	0x20000e14

08011d74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011d82:	79fb      	ldrb	r3, [r7, #7]
 8011d84:	4a0d      	ldr	r2, [pc, #52]	; (8011dbc <disk_initialize+0x48>)
 8011d86:	5cd3      	ldrb	r3, [r2, r3]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d111      	bne.n	8011db0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011d8c:	79fb      	ldrb	r3, [r7, #7]
 8011d8e:	4a0b      	ldr	r2, [pc, #44]	; (8011dbc <disk_initialize+0x48>)
 8011d90:	2101      	movs	r1, #1
 8011d92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011d94:	79fb      	ldrb	r3, [r7, #7]
 8011d96:	4a09      	ldr	r2, [pc, #36]	; (8011dbc <disk_initialize+0x48>)
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4413      	add	r3, r2
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	79fa      	ldrb	r2, [r7, #7]
 8011da2:	4906      	ldr	r1, [pc, #24]	; (8011dbc <disk_initialize+0x48>)
 8011da4:	440a      	add	r2, r1
 8011da6:	7a12      	ldrb	r2, [r2, #8]
 8011da8:	4610      	mov	r0, r2
 8011daa:	4798      	blx	r3
 8011dac:	4603      	mov	r3, r0
 8011dae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20000e14 	.word	0x20000e14

08011dc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011dc0:	b590      	push	{r4, r7, lr}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60b9      	str	r1, [r7, #8]
 8011dc8:	607a      	str	r2, [r7, #4]
 8011dca:	603b      	str	r3, [r7, #0]
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
 8011dd2:	4a0a      	ldr	r2, [pc, #40]	; (8011dfc <disk_read+0x3c>)
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4413      	add	r3, r2
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	689c      	ldr	r4, [r3, #8]
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
 8011dde:	4a07      	ldr	r2, [pc, #28]	; (8011dfc <disk_read+0x3c>)
 8011de0:	4413      	add	r3, r2
 8011de2:	7a18      	ldrb	r0, [r3, #8]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	47a0      	blx	r4
 8011dec:	4603      	mov	r3, r0
 8011dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	371c      	adds	r7, #28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20000e14 	.word	0x20000e14

08011e00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011e00:	b590      	push	{r4, r7, lr}
 8011e02:	b087      	sub	sp, #28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60b9      	str	r1, [r7, #8]
 8011e08:	607a      	str	r2, [r7, #4]
 8011e0a:	603b      	str	r3, [r7, #0]
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
 8011e12:	4a0a      	ldr	r2, [pc, #40]	; (8011e3c <disk_write+0x3c>)
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	4413      	add	r3, r2
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	68dc      	ldr	r4, [r3, #12]
 8011e1c:	7bfb      	ldrb	r3, [r7, #15]
 8011e1e:	4a07      	ldr	r2, [pc, #28]	; (8011e3c <disk_write+0x3c>)
 8011e20:	4413      	add	r3, r2
 8011e22:	7a18      	ldrb	r0, [r3, #8]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	68b9      	ldr	r1, [r7, #8]
 8011e2a:	47a0      	blx	r4
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	371c      	adds	r7, #28
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd90      	pop	{r4, r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	20000e14 	.word	0x20000e14

08011e40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	4603      	mov	r3, r0
 8011e48:	603a      	str	r2, [r7, #0]
 8011e4a:	71fb      	strb	r3, [r7, #7]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011e50:	79fb      	ldrb	r3, [r7, #7]
 8011e52:	4a09      	ldr	r2, [pc, #36]	; (8011e78 <disk_ioctl+0x38>)
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4413      	add	r3, r2
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	79fa      	ldrb	r2, [r7, #7]
 8011e5e:	4906      	ldr	r1, [pc, #24]	; (8011e78 <disk_ioctl+0x38>)
 8011e60:	440a      	add	r2, r1
 8011e62:	7a10      	ldrb	r0, [r2, #8]
 8011e64:	79b9      	ldrb	r1, [r7, #6]
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	4798      	blx	r3
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	20000e14 	.word	0x20000e14

08011e7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	3301      	adds	r3, #1
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011e8c:	89fb      	ldrh	r3, [r7, #14]
 8011e8e:	021b      	lsls	r3, r3, #8
 8011e90:	b21a      	sxth	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	b21b      	sxth	r3, r3
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	b21b      	sxth	r3, r3
 8011e9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3714      	adds	r7, #20
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011eac:	b480      	push	{r7}
 8011eae:	b085      	sub	sp, #20
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3303      	adds	r3, #3
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	021b      	lsls	r3, r3, #8
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	3202      	adds	r2, #2
 8011ec4:	7812      	ldrb	r2, [r2, #0]
 8011ec6:	4313      	orrs	r3, r2
 8011ec8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	021b      	lsls	r3, r3, #8
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	3201      	adds	r2, #1
 8011ed2:	7812      	ldrb	r2, [r2, #0]
 8011ed4:	4313      	orrs	r3, r2
 8011ed6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	021b      	lsls	r3, r3, #8
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	7812      	ldrb	r2, [r2, #0]
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	60fb      	str	r3, [r7, #12]
	return rv;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011ef2:	b480      	push	{r7}
 8011ef4:	b083      	sub	sp, #12
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
 8011efa:	460b      	mov	r3, r1
 8011efc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	1c5a      	adds	r2, r3, #1
 8011f02:	607a      	str	r2, [r7, #4]
 8011f04:	887a      	ldrh	r2, [r7, #2]
 8011f06:	b2d2      	uxtb	r2, r2
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	887b      	ldrh	r3, [r7, #2]
 8011f0c:	0a1b      	lsrs	r3, r3, #8
 8011f0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	1c5a      	adds	r2, r3, #1
 8011f14:	607a      	str	r2, [r7, #4]
 8011f16:	887a      	ldrh	r2, [r7, #2]
 8011f18:	b2d2      	uxtb	r2, r2
 8011f1a:	701a      	strb	r2, [r3, #0]
}
 8011f1c:	bf00      	nop
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	607a      	str	r2, [r7, #4]
 8011f38:	683a      	ldr	r2, [r7, #0]
 8011f3a:	b2d2      	uxtb	r2, r2
 8011f3c:	701a      	strb	r2, [r3, #0]
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	0a1b      	lsrs	r3, r3, #8
 8011f42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	1c5a      	adds	r2, r3, #1
 8011f48:	607a      	str	r2, [r7, #4]
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	b2d2      	uxtb	r2, r2
 8011f4e:	701a      	strb	r2, [r3, #0]
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	0a1b      	lsrs	r3, r3, #8
 8011f54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	607a      	str	r2, [r7, #4]
 8011f5c:	683a      	ldr	r2, [r7, #0]
 8011f5e:	b2d2      	uxtb	r2, r2
 8011f60:	701a      	strb	r2, [r3, #0]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	0a1b      	lsrs	r3, r3, #8
 8011f66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	1c5a      	adds	r2, r3, #1
 8011f6c:	607a      	str	r2, [r7, #4]
 8011f6e:	683a      	ldr	r2, [r7, #0]
 8011f70:	b2d2      	uxtb	r2, r2
 8011f72:	701a      	strb	r2, [r3, #0]
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011f80:	b480      	push	{r7}
 8011f82:	b087      	sub	sp, #28
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d00d      	beq.n	8011fb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011f9a:	693a      	ldr	r2, [r7, #16]
 8011f9c:	1c53      	adds	r3, r2, #1
 8011f9e:	613b      	str	r3, [r7, #16]
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	1c59      	adds	r1, r3, #1
 8011fa4:	6179      	str	r1, [r7, #20]
 8011fa6:	7812      	ldrb	r2, [r2, #0]
 8011fa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	3b01      	subs	r3, #1
 8011fae:	607b      	str	r3, [r7, #4]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1f1      	bne.n	8011f9a <mem_cpy+0x1a>
	}
}
 8011fb6:	bf00      	nop
 8011fb8:	371c      	adds	r7, #28
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011fc2:	b480      	push	{r7}
 8011fc4:	b087      	sub	sp, #28
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	60f8      	str	r0, [r7, #12]
 8011fca:	60b9      	str	r1, [r7, #8]
 8011fcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	617a      	str	r2, [r7, #20]
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	b2d2      	uxtb	r2, r2
 8011fdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3b01      	subs	r3, #1
 8011fe2:	607b      	str	r3, [r7, #4]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1f3      	bne.n	8011fd2 <mem_set+0x10>
}
 8011fea:	bf00      	nop
 8011fec:	371c      	adds	r7, #28
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011ff6:	b480      	push	{r7}
 8011ff8:	b089      	sub	sp, #36	; 0x24
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	60f8      	str	r0, [r7, #12]
 8011ffe:	60b9      	str	r1, [r7, #8]
 8012000:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	61fb      	str	r3, [r7, #28]
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801200a:	2300      	movs	r3, #0
 801200c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	61fa      	str	r2, [r7, #28]
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	4619      	mov	r1, r3
 8012018:	69bb      	ldr	r3, [r7, #24]
 801201a:	1c5a      	adds	r2, r3, #1
 801201c:	61ba      	str	r2, [r7, #24]
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	1acb      	subs	r3, r1, r3
 8012022:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	3b01      	subs	r3, #1
 8012028:	607b      	str	r3, [r7, #4]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d002      	beq.n	8012036 <mem_cmp+0x40>
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d0eb      	beq.n	801200e <mem_cmp+0x18>

	return r;
 8012036:	697b      	ldr	r3, [r7, #20]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3724      	adds	r7, #36	; 0x24
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801204e:	e002      	b.n	8012056 <chk_chr+0x12>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	3301      	adds	r3, #1
 8012054:	607b      	str	r3, [r7, #4]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <chk_chr+0x26>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	461a      	mov	r2, r3
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	4293      	cmp	r3, r2
 8012068:	d1f2      	bne.n	8012050 <chk_chr+0xc>
	return *str;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	781b      	ldrb	r3, [r3, #0]
}
 801206e:	4618      	mov	r0, r3
 8012070:	370c      	adds	r7, #12
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr
	...

0801207c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012086:	2300      	movs	r3, #0
 8012088:	60bb      	str	r3, [r7, #8]
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	60fb      	str	r3, [r7, #12]
 801208e:	e029      	b.n	80120e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012090:	4a27      	ldr	r2, [pc, #156]	; (8012130 <chk_lock+0xb4>)
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	011b      	lsls	r3, r3, #4
 8012096:	4413      	add	r3, r2
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d01d      	beq.n	80120da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801209e:	4a24      	ldr	r2, [pc, #144]	; (8012130 <chk_lock+0xb4>)
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	011b      	lsls	r3, r3, #4
 80120a4:	4413      	add	r3, r2
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d116      	bne.n	80120de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80120b0:	4a1f      	ldr	r2, [pc, #124]	; (8012130 <chk_lock+0xb4>)
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	011b      	lsls	r3, r3, #4
 80120b6:	4413      	add	r3, r2
 80120b8:	3304      	adds	r3, #4
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d10c      	bne.n	80120de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80120c4:	4a1a      	ldr	r2, [pc, #104]	; (8012130 <chk_lock+0xb4>)
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	011b      	lsls	r3, r3, #4
 80120ca:	4413      	add	r3, r2
 80120cc:	3308      	adds	r3, #8
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d102      	bne.n	80120de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80120d8:	e007      	b.n	80120ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80120da:	2301      	movs	r3, #1
 80120dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d9d2      	bls.n	8012090 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2b02      	cmp	r3, #2
 80120ee:	d109      	bne.n	8012104 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d102      	bne.n	80120fc <chk_lock+0x80>
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	d101      	bne.n	8012100 <chk_lock+0x84>
 80120fc:	2300      	movs	r3, #0
 80120fe:	e010      	b.n	8012122 <chk_lock+0xa6>
 8012100:	2312      	movs	r3, #18
 8012102:	e00e      	b.n	8012122 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d108      	bne.n	801211c <chk_lock+0xa0>
 801210a:	4a09      	ldr	r2, [pc, #36]	; (8012130 <chk_lock+0xb4>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	011b      	lsls	r3, r3, #4
 8012110:	4413      	add	r3, r2
 8012112:	330c      	adds	r3, #12
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801211a:	d101      	bne.n	8012120 <chk_lock+0xa4>
 801211c:	2310      	movs	r3, #16
 801211e:	e000      	b.n	8012122 <chk_lock+0xa6>
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3714      	adds	r7, #20
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	20000bf4 	.word	0x20000bf4

08012134 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801213a:	2300      	movs	r3, #0
 801213c:	607b      	str	r3, [r7, #4]
 801213e:	e002      	b.n	8012146 <enq_lock+0x12>
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	3301      	adds	r3, #1
 8012144:	607b      	str	r3, [r7, #4]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2b01      	cmp	r3, #1
 801214a:	d806      	bhi.n	801215a <enq_lock+0x26>
 801214c:	4a09      	ldr	r2, [pc, #36]	; (8012174 <enq_lock+0x40>)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	011b      	lsls	r3, r3, #4
 8012152:	4413      	add	r3, r2
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1f2      	bne.n	8012140 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b02      	cmp	r3, #2
 801215e:	bf14      	ite	ne
 8012160:	2301      	movne	r3, #1
 8012162:	2300      	moveq	r3, #0
 8012164:	b2db      	uxtb	r3, r3
}
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	20000bf4 	.word	0x20000bf4

08012178 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012182:	2300      	movs	r3, #0
 8012184:	60fb      	str	r3, [r7, #12]
 8012186:	e01f      	b.n	80121c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012188:	4a41      	ldr	r2, [pc, #260]	; (8012290 <inc_lock+0x118>)
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	011b      	lsls	r3, r3, #4
 801218e:	4413      	add	r3, r2
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	429a      	cmp	r2, r3
 8012198:	d113      	bne.n	80121c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801219a:	4a3d      	ldr	r2, [pc, #244]	; (8012290 <inc_lock+0x118>)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	011b      	lsls	r3, r3, #4
 80121a0:	4413      	add	r3, r2
 80121a2:	3304      	adds	r3, #4
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d109      	bne.n	80121c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80121ae:	4a38      	ldr	r2, [pc, #224]	; (8012290 <inc_lock+0x118>)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	011b      	lsls	r3, r3, #4
 80121b4:	4413      	add	r3, r2
 80121b6:	3308      	adds	r3, #8
 80121b8:	681a      	ldr	r2, [r3, #0]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80121be:	429a      	cmp	r2, r3
 80121c0:	d006      	beq.n	80121d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3301      	adds	r3, #1
 80121c6:	60fb      	str	r3, [r7, #12]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d9dc      	bls.n	8012188 <inc_lock+0x10>
 80121ce:	e000      	b.n	80121d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80121d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d132      	bne.n	801223e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80121d8:	2300      	movs	r3, #0
 80121da:	60fb      	str	r3, [r7, #12]
 80121dc:	e002      	b.n	80121e4 <inc_lock+0x6c>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	3301      	adds	r3, #1
 80121e2:	60fb      	str	r3, [r7, #12]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d806      	bhi.n	80121f8 <inc_lock+0x80>
 80121ea:	4a29      	ldr	r2, [pc, #164]	; (8012290 <inc_lock+0x118>)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	011b      	lsls	r3, r3, #4
 80121f0:	4413      	add	r3, r2
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1f2      	bne.n	80121de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d101      	bne.n	8012202 <inc_lock+0x8a>
 80121fe:	2300      	movs	r3, #0
 8012200:	e040      	b.n	8012284 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681a      	ldr	r2, [r3, #0]
 8012206:	4922      	ldr	r1, [pc, #136]	; (8012290 <inc_lock+0x118>)
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	011b      	lsls	r3, r3, #4
 801220c:	440b      	add	r3, r1
 801220e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	689a      	ldr	r2, [r3, #8]
 8012214:	491e      	ldr	r1, [pc, #120]	; (8012290 <inc_lock+0x118>)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	011b      	lsls	r3, r3, #4
 801221a:	440b      	add	r3, r1
 801221c:	3304      	adds	r3, #4
 801221e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	695a      	ldr	r2, [r3, #20]
 8012224:	491a      	ldr	r1, [pc, #104]	; (8012290 <inc_lock+0x118>)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	011b      	lsls	r3, r3, #4
 801222a:	440b      	add	r3, r1
 801222c:	3308      	adds	r3, #8
 801222e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012230:	4a17      	ldr	r2, [pc, #92]	; (8012290 <inc_lock+0x118>)
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	011b      	lsls	r3, r3, #4
 8012236:	4413      	add	r3, r2
 8012238:	330c      	adds	r3, #12
 801223a:	2200      	movs	r2, #0
 801223c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d009      	beq.n	8012258 <inc_lock+0xe0>
 8012244:	4a12      	ldr	r2, [pc, #72]	; (8012290 <inc_lock+0x118>)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	011b      	lsls	r3, r3, #4
 801224a:	4413      	add	r3, r2
 801224c:	330c      	adds	r3, #12
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d001      	beq.n	8012258 <inc_lock+0xe0>
 8012254:	2300      	movs	r3, #0
 8012256:	e015      	b.n	8012284 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d108      	bne.n	8012270 <inc_lock+0xf8>
 801225e:	4a0c      	ldr	r2, [pc, #48]	; (8012290 <inc_lock+0x118>)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	011b      	lsls	r3, r3, #4
 8012264:	4413      	add	r3, r2
 8012266:	330c      	adds	r3, #12
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	3301      	adds	r3, #1
 801226c:	b29a      	uxth	r2, r3
 801226e:	e001      	b.n	8012274 <inc_lock+0xfc>
 8012270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012274:	4906      	ldr	r1, [pc, #24]	; (8012290 <inc_lock+0x118>)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	011b      	lsls	r3, r3, #4
 801227a:	440b      	add	r3, r1
 801227c:	330c      	adds	r3, #12
 801227e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	3301      	adds	r3, #1
}
 8012284:	4618      	mov	r0, r3
 8012286:	3714      	adds	r7, #20
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr
 8012290:	20000bf4 	.word	0x20000bf4

08012294 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3b01      	subs	r3, #1
 80122a0:	607b      	str	r3, [r7, #4]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d825      	bhi.n	80122f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80122a8:	4a17      	ldr	r2, [pc, #92]	; (8012308 <dec_lock+0x74>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	011b      	lsls	r3, r3, #4
 80122ae:	4413      	add	r3, r2
 80122b0:	330c      	adds	r3, #12
 80122b2:	881b      	ldrh	r3, [r3, #0]
 80122b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80122b6:	89fb      	ldrh	r3, [r7, #14]
 80122b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122bc:	d101      	bne.n	80122c2 <dec_lock+0x2e>
 80122be:	2300      	movs	r3, #0
 80122c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80122c2:	89fb      	ldrh	r3, [r7, #14]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d002      	beq.n	80122ce <dec_lock+0x3a>
 80122c8:	89fb      	ldrh	r3, [r7, #14]
 80122ca:	3b01      	subs	r3, #1
 80122cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80122ce:	4a0e      	ldr	r2, [pc, #56]	; (8012308 <dec_lock+0x74>)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	011b      	lsls	r3, r3, #4
 80122d4:	4413      	add	r3, r2
 80122d6:	330c      	adds	r3, #12
 80122d8:	89fa      	ldrh	r2, [r7, #14]
 80122da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80122dc:	89fb      	ldrh	r3, [r7, #14]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d105      	bne.n	80122ee <dec_lock+0x5a>
 80122e2:	4a09      	ldr	r2, [pc, #36]	; (8012308 <dec_lock+0x74>)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	011b      	lsls	r3, r3, #4
 80122e8:	4413      	add	r3, r2
 80122ea:	2200      	movs	r2, #0
 80122ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	737b      	strb	r3, [r7, #13]
 80122f2:	e001      	b.n	80122f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80122f4:	2302      	movs	r3, #2
 80122f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80122f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3714      	adds	r7, #20
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr
 8012306:	bf00      	nop
 8012308:	20000bf4 	.word	0x20000bf4

0801230c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801230c:	b480      	push	{r7}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012314:	2300      	movs	r3, #0
 8012316:	60fb      	str	r3, [r7, #12]
 8012318:	e010      	b.n	801233c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801231a:	4a0d      	ldr	r2, [pc, #52]	; (8012350 <clear_lock+0x44>)
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	011b      	lsls	r3, r3, #4
 8012320:	4413      	add	r3, r2
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	429a      	cmp	r2, r3
 8012328:	d105      	bne.n	8012336 <clear_lock+0x2a>
 801232a:	4a09      	ldr	r2, [pc, #36]	; (8012350 <clear_lock+0x44>)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	011b      	lsls	r3, r3, #4
 8012330:	4413      	add	r3, r2
 8012332:	2200      	movs	r2, #0
 8012334:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	3301      	adds	r3, #1
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d9eb      	bls.n	801231a <clear_lock+0xe>
	}
}
 8012342:	bf00      	nop
 8012344:	3714      	adds	r7, #20
 8012346:	46bd      	mov	sp, r7
 8012348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop
 8012350:	20000bf4 	.word	0x20000bf4

08012354 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801235c:	2300      	movs	r3, #0
 801235e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	78db      	ldrb	r3, [r3, #3]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d034      	beq.n	80123d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801236c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	7858      	ldrb	r0, [r3, #1]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012378:	2301      	movs	r3, #1
 801237a:	697a      	ldr	r2, [r7, #20]
 801237c:	f7ff fd40 	bl	8011e00 <disk_write>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d002      	beq.n	801238c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012386:	2301      	movs	r3, #1
 8012388:	73fb      	strb	r3, [r7, #15]
 801238a:	e022      	b.n	80123d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012396:	697a      	ldr	r2, [r7, #20]
 8012398:	1ad2      	subs	r2, r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6a1b      	ldr	r3, [r3, #32]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d217      	bcs.n	80123d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	789b      	ldrb	r3, [r3, #2]
 80123a6:	613b      	str	r3, [r7, #16]
 80123a8:	e010      	b.n	80123cc <sync_window+0x78>
					wsect += fs->fsize;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a1b      	ldr	r3, [r3, #32]
 80123ae:	697a      	ldr	r2, [r7, #20]
 80123b0:	4413      	add	r3, r2
 80123b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	7858      	ldrb	r0, [r3, #1]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123be:	2301      	movs	r3, #1
 80123c0:	697a      	ldr	r2, [r7, #20]
 80123c2:	f7ff fd1d 	bl	8011e00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	613b      	str	r3, [r7, #16]
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d8eb      	bhi.n	80123aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3718      	adds	r7, #24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80123e6:	2300      	movs	r3, #0
 80123e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d01b      	beq.n	801242c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff ffad 	bl	8012354 <sync_window>
 80123fa:	4603      	mov	r3, r0
 80123fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d113      	bne.n	801242c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	7858      	ldrb	r0, [r3, #1]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801240e:	2301      	movs	r3, #1
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	f7ff fcd5 	bl	8011dc0 <disk_read>
 8012416:	4603      	mov	r3, r0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d004      	beq.n	8012426 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801241c:	f04f 33ff 	mov.w	r3, #4294967295
 8012420:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012422:	2301      	movs	r3, #1
 8012424:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	683a      	ldr	r2, [r7, #0]
 801242a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801242c:	7bfb      	ldrb	r3, [r7, #15]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff ff87 	bl	8012354 <sync_window>
 8012446:	4603      	mov	r3, r0
 8012448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801244a:	7bfb      	ldrb	r3, [r7, #15]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d158      	bne.n	8012502 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	2b03      	cmp	r3, #3
 8012456:	d148      	bne.n	80124ea <sync_fs+0xb2>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	791b      	ldrb	r3, [r3, #4]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d144      	bne.n	80124ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	3338      	adds	r3, #56	; 0x38
 8012464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012468:	2100      	movs	r1, #0
 801246a:	4618      	mov	r0, r3
 801246c:	f7ff fda9 	bl	8011fc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	3338      	adds	r3, #56	; 0x38
 8012474:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012478:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff fd38 	bl	8011ef2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	3338      	adds	r3, #56	; 0x38
 8012486:	4921      	ldr	r1, [pc, #132]	; (801250c <sync_fs+0xd4>)
 8012488:	4618      	mov	r0, r3
 801248a:	f7ff fd4d 	bl	8011f28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	3338      	adds	r3, #56	; 0x38
 8012492:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012496:	491e      	ldr	r1, [pc, #120]	; (8012510 <sync_fs+0xd8>)
 8012498:	4618      	mov	r0, r3
 801249a:	f7ff fd45 	bl	8011f28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	3338      	adds	r3, #56	; 0x38
 80124a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	695b      	ldr	r3, [r3, #20]
 80124aa:	4619      	mov	r1, r3
 80124ac:	4610      	mov	r0, r2
 80124ae:	f7ff fd3b 	bl	8011f28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3338      	adds	r3, #56	; 0x38
 80124b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	4619      	mov	r1, r3
 80124c0:	4610      	mov	r0, r2
 80124c2:	f7ff fd31 	bl	8011f28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ca:	1c5a      	adds	r2, r3, #1
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	7858      	ldrb	r0, [r3, #1]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124de:	2301      	movs	r3, #1
 80124e0:	f7ff fc8e 	bl	8011e00 <disk_write>
			fs->fsi_flag = 0;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	785b      	ldrb	r3, [r3, #1]
 80124ee:	2200      	movs	r2, #0
 80124f0:	2100      	movs	r1, #0
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7ff fca4 	bl	8011e40 <disk_ioctl>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d001      	beq.n	8012502 <sync_fs+0xca>
 80124fe:	2301      	movs	r3, #1
 8012500:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012502:	7bfb      	ldrb	r3, [r7, #15]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	41615252 	.word	0x41615252
 8012510:	61417272 	.word	0x61417272

08012514 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012514:	b480      	push	{r7}
 8012516:	b083      	sub	sp, #12
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	3b02      	subs	r3, #2
 8012522:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	3b02      	subs	r3, #2
 801252a:	683a      	ldr	r2, [r7, #0]
 801252c:	429a      	cmp	r2, r3
 801252e:	d301      	bcc.n	8012534 <clust2sect+0x20>
 8012530:	2300      	movs	r3, #0
 8012532:	e008      	b.n	8012546 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	895b      	ldrh	r3, [r3, #10]
 8012538:	461a      	mov	r2, r3
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	fb03 f202 	mul.w	r2, r3, r2
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012544:	4413      	add	r3, r2
}
 8012546:	4618      	mov	r0, r3
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b086      	sub	sp, #24
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	2b01      	cmp	r3, #1
 8012566:	d904      	bls.n	8012572 <get_fat+0x20>
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	69db      	ldr	r3, [r3, #28]
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	429a      	cmp	r2, r3
 8012570:	d302      	bcc.n	8012578 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012572:	2301      	movs	r3, #1
 8012574:	617b      	str	r3, [r7, #20]
 8012576:	e08c      	b.n	8012692 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012578:	f04f 33ff 	mov.w	r3, #4294967295
 801257c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d045      	beq.n	8012612 <get_fat+0xc0>
 8012586:	2b03      	cmp	r3, #3
 8012588:	d05d      	beq.n	8012646 <get_fat+0xf4>
 801258a:	2b01      	cmp	r3, #1
 801258c:	d177      	bne.n	801267e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	60fb      	str	r3, [r7, #12]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	085b      	lsrs	r3, r3, #1
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	4413      	add	r3, r2
 801259a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	0a5b      	lsrs	r3, r3, #9
 80125a4:	4413      	add	r3, r2
 80125a6:	4619      	mov	r1, r3
 80125a8:	6938      	ldr	r0, [r7, #16]
 80125aa:	f7ff ff17 	bl	80123dc <move_window>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d167      	bne.n	8012684 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	1c5a      	adds	r2, r3, #1
 80125b8:	60fa      	str	r2, [r7, #12]
 80125ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125be:	693a      	ldr	r2, [r7, #16]
 80125c0:	4413      	add	r3, r2
 80125c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125c6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	0a5b      	lsrs	r3, r3, #9
 80125d0:	4413      	add	r3, r2
 80125d2:	4619      	mov	r1, r3
 80125d4:	6938      	ldr	r0, [r7, #16]
 80125d6:	f7ff ff01 	bl	80123dc <move_window>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d153      	bne.n	8012688 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	4413      	add	r3, r2
 80125ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125ee:	021b      	lsls	r3, r3, #8
 80125f0:	461a      	mov	r2, r3
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	4313      	orrs	r3, r2
 80125f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	f003 0301 	and.w	r3, r3, #1
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d002      	beq.n	8012608 <get_fat+0xb6>
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	091b      	lsrs	r3, r3, #4
 8012606:	e002      	b.n	801260e <get_fat+0xbc>
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801260e:	617b      	str	r3, [r7, #20]
			break;
 8012610:	e03f      	b.n	8012692 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	0a1b      	lsrs	r3, r3, #8
 801261a:	4413      	add	r3, r2
 801261c:	4619      	mov	r1, r3
 801261e:	6938      	ldr	r0, [r7, #16]
 8012620:	f7ff fedc 	bl	80123dc <move_window>
 8012624:	4603      	mov	r3, r0
 8012626:	2b00      	cmp	r3, #0
 8012628:	d130      	bne.n	801268c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	005b      	lsls	r3, r3, #1
 8012634:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012638:	4413      	add	r3, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f7ff fc1e 	bl	8011e7c <ld_word>
 8012640:	4603      	mov	r3, r0
 8012642:	617b      	str	r3, [r7, #20]
			break;
 8012644:	e025      	b.n	8012692 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	09db      	lsrs	r3, r3, #7
 801264e:	4413      	add	r3, r2
 8012650:	4619      	mov	r1, r3
 8012652:	6938      	ldr	r0, [r7, #16]
 8012654:	f7ff fec2 	bl	80123dc <move_window>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d118      	bne.n	8012690 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801266c:	4413      	add	r3, r2
 801266e:	4618      	mov	r0, r3
 8012670:	f7ff fc1c 	bl	8011eac <ld_dword>
 8012674:	4603      	mov	r3, r0
 8012676:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801267a:	617b      	str	r3, [r7, #20]
			break;
 801267c:	e009      	b.n	8012692 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801267e:	2301      	movs	r3, #1
 8012680:	617b      	str	r3, [r7, #20]
 8012682:	e006      	b.n	8012692 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012684:	bf00      	nop
 8012686:	e004      	b.n	8012692 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012688:	bf00      	nop
 801268a:	e002      	b.n	8012692 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801268c:	bf00      	nop
 801268e:	e000      	b.n	8012692 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012690:	bf00      	nop
		}
	}

	return val;
 8012692:	697b      	ldr	r3, [r7, #20]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801269c:	b590      	push	{r4, r7, lr}
 801269e:	b089      	sub	sp, #36	; 0x24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80126a8:	2302      	movs	r3, #2
 80126aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	f240 80d6 	bls.w	8012860 <put_fat+0x1c4>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	69db      	ldr	r3, [r3, #28]
 80126b8:	68ba      	ldr	r2, [r7, #8]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	f080 80d0 	bcs.w	8012860 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	d073      	beq.n	80127b0 <put_fat+0x114>
 80126c8:	2b03      	cmp	r3, #3
 80126ca:	f000 8091 	beq.w	80127f0 <put_fat+0x154>
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	f040 80c6 	bne.w	8012860 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	61bb      	str	r3, [r7, #24]
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	085b      	lsrs	r3, r3, #1
 80126dc:	69ba      	ldr	r2, [r7, #24]
 80126de:	4413      	add	r3, r2
 80126e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	0a5b      	lsrs	r3, r3, #9
 80126ea:	4413      	add	r3, r2
 80126ec:	4619      	mov	r1, r3
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f7ff fe74 	bl	80123dc <move_window>
 80126f4:	4603      	mov	r3, r0
 80126f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126f8:	7ffb      	ldrb	r3, [r7, #31]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f040 80a9 	bne.w	8012852 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	1c59      	adds	r1, r3, #1
 801270a:	61b9      	str	r1, [r7, #24]
 801270c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012710:	4413      	add	r3, r2
 8012712:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	f003 0301 	and.w	r3, r3, #1
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00d      	beq.n	801273a <put_fat+0x9e>
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	b25b      	sxtb	r3, r3
 8012724:	f003 030f 	and.w	r3, r3, #15
 8012728:	b25a      	sxtb	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	b2db      	uxtb	r3, r3
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	b25b      	sxtb	r3, r3
 8012732:	4313      	orrs	r3, r2
 8012734:	b25b      	sxtb	r3, r3
 8012736:	b2db      	uxtb	r3, r3
 8012738:	e001      	b.n	801273e <put_fat+0xa2>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	b2db      	uxtb	r3, r3
 801273e:	697a      	ldr	r2, [r7, #20]
 8012740:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2201      	movs	r2, #1
 8012746:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	0a5b      	lsrs	r3, r3, #9
 8012750:	4413      	add	r3, r2
 8012752:	4619      	mov	r1, r3
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f7ff fe41 	bl	80123dc <move_window>
 801275a:	4603      	mov	r3, r0
 801275c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801275e:	7ffb      	ldrb	r3, [r7, #31]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d178      	bne.n	8012856 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801276a:	69bb      	ldr	r3, [r7, #24]
 801276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012770:	4413      	add	r3, r2
 8012772:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	2b00      	cmp	r3, #0
 801277c:	d003      	beq.n	8012786 <put_fat+0xea>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	091b      	lsrs	r3, r3, #4
 8012782:	b2db      	uxtb	r3, r3
 8012784:	e00e      	b.n	80127a4 <put_fat+0x108>
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	b25b      	sxtb	r3, r3
 801278c:	f023 030f 	bic.w	r3, r3, #15
 8012790:	b25a      	sxtb	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	0a1b      	lsrs	r3, r3, #8
 8012796:	b25b      	sxtb	r3, r3
 8012798:	f003 030f 	and.w	r3, r3, #15
 801279c:	b25b      	sxtb	r3, r3
 801279e:	4313      	orrs	r3, r2
 80127a0:	b25b      	sxtb	r3, r3
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	697a      	ldr	r2, [r7, #20]
 80127a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2201      	movs	r2, #1
 80127ac:	70da      	strb	r2, [r3, #3]
			break;
 80127ae:	e057      	b.n	8012860 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	0a1b      	lsrs	r3, r3, #8
 80127b8:	4413      	add	r3, r2
 80127ba:	4619      	mov	r1, r3
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f7ff fe0d 	bl	80123dc <move_window>
 80127c2:	4603      	mov	r3, r0
 80127c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80127c6:	7ffb      	ldrb	r3, [r7, #31]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d146      	bne.n	801285a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	005b      	lsls	r3, r3, #1
 80127d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80127da:	4413      	add	r3, r2
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	b292      	uxth	r2, r2
 80127e0:	4611      	mov	r1, r2
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7ff fb85 	bl	8011ef2 <st_word>
			fs->wflag = 1;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2201      	movs	r2, #1
 80127ec:	70da      	strb	r2, [r3, #3]
			break;
 80127ee:	e037      	b.n	8012860 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	09db      	lsrs	r3, r3, #7
 80127f8:	4413      	add	r3, r2
 80127fa:	4619      	mov	r1, r3
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f7ff fded 	bl	80123dc <move_window>
 8012802:	4603      	mov	r3, r0
 8012804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012806:	7ffb      	ldrb	r3, [r7, #31]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d128      	bne.n	801285e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	009b      	lsls	r3, r3, #2
 801281c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012820:	4413      	add	r3, r2
 8012822:	4618      	mov	r0, r3
 8012824:	f7ff fb42 	bl	8011eac <ld_dword>
 8012828:	4603      	mov	r3, r0
 801282a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801282e:	4323      	orrs	r3, r4
 8012830:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012840:	4413      	add	r3, r2
 8012842:	6879      	ldr	r1, [r7, #4]
 8012844:	4618      	mov	r0, r3
 8012846:	f7ff fb6f 	bl	8011f28 <st_dword>
			fs->wflag = 1;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2201      	movs	r2, #1
 801284e:	70da      	strb	r2, [r3, #3]
			break;
 8012850:	e006      	b.n	8012860 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012852:	bf00      	nop
 8012854:	e004      	b.n	8012860 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012856:	bf00      	nop
 8012858:	e002      	b.n	8012860 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801285a:	bf00      	nop
 801285c:	e000      	b.n	8012860 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801285e:	bf00      	nop
		}
	}
	return res;
 8012860:	7ffb      	ldrb	r3, [r7, #31]
}
 8012862:	4618      	mov	r0, r3
 8012864:	3724      	adds	r7, #36	; 0x24
 8012866:	46bd      	mov	sp, r7
 8012868:	bd90      	pop	{r4, r7, pc}

0801286a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b088      	sub	sp, #32
 801286e:	af00      	add	r7, sp, #0
 8012870:	60f8      	str	r0, [r7, #12]
 8012872:	60b9      	str	r1, [r7, #8]
 8012874:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012876:	2300      	movs	r3, #0
 8012878:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	2b01      	cmp	r3, #1
 8012884:	d904      	bls.n	8012890 <remove_chain+0x26>
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	69db      	ldr	r3, [r3, #28]
 801288a:	68ba      	ldr	r2, [r7, #8]
 801288c:	429a      	cmp	r2, r3
 801288e:	d301      	bcc.n	8012894 <remove_chain+0x2a>
 8012890:	2302      	movs	r3, #2
 8012892:	e04b      	b.n	801292c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00c      	beq.n	80128b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801289a:	f04f 32ff 	mov.w	r2, #4294967295
 801289e:	6879      	ldr	r1, [r7, #4]
 80128a0:	69b8      	ldr	r0, [r7, #24]
 80128a2:	f7ff fefb 	bl	801269c <put_fat>
 80128a6:	4603      	mov	r3, r0
 80128a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80128aa:	7ffb      	ldrb	r3, [r7, #31]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <remove_chain+0x4a>
 80128b0:	7ffb      	ldrb	r3, [r7, #31]
 80128b2:	e03b      	b.n	801292c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80128b4:	68b9      	ldr	r1, [r7, #8]
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7ff fe4b 	bl	8012552 <get_fat>
 80128bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d031      	beq.n	8012928 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d101      	bne.n	80128ce <remove_chain+0x64>
 80128ca:	2302      	movs	r3, #2
 80128cc:	e02e      	b.n	801292c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d4:	d101      	bne.n	80128da <remove_chain+0x70>
 80128d6:	2301      	movs	r3, #1
 80128d8:	e028      	b.n	801292c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80128da:	2200      	movs	r2, #0
 80128dc:	68b9      	ldr	r1, [r7, #8]
 80128de:	69b8      	ldr	r0, [r7, #24]
 80128e0:	f7ff fedc 	bl	801269c <put_fat>
 80128e4:	4603      	mov	r3, r0
 80128e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80128e8:	7ffb      	ldrb	r3, [r7, #31]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d001      	beq.n	80128f2 <remove_chain+0x88>
 80128ee:	7ffb      	ldrb	r3, [r7, #31]
 80128f0:	e01c      	b.n	801292c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	695a      	ldr	r2, [r3, #20]
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	69db      	ldr	r3, [r3, #28]
 80128fa:	3b02      	subs	r3, #2
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d20b      	bcs.n	8012918 <remove_chain+0xae>
			fs->free_clst++;
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	695b      	ldr	r3, [r3, #20]
 8012904:	1c5a      	adds	r2, r3, #1
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	791b      	ldrb	r3, [r3, #4]
 801290e:	f043 0301 	orr.w	r3, r3, #1
 8012912:	b2da      	uxtb	r2, r3
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	69db      	ldr	r3, [r3, #28]
 8012920:	68ba      	ldr	r2, [r7, #8]
 8012922:	429a      	cmp	r2, r3
 8012924:	d3c6      	bcc.n	80128b4 <remove_chain+0x4a>
 8012926:	e000      	b.n	801292a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012928:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801292a:	2300      	movs	r3, #0
}
 801292c:	4618      	mov	r0, r3
 801292e:	3720      	adds	r7, #32
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b088      	sub	sp, #32
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d10d      	bne.n	8012966 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d004      	beq.n	8012960 <create_chain+0x2c>
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	69db      	ldr	r3, [r3, #28]
 801295a:	69ba      	ldr	r2, [r7, #24]
 801295c:	429a      	cmp	r2, r3
 801295e:	d31b      	bcc.n	8012998 <create_chain+0x64>
 8012960:	2301      	movs	r3, #1
 8012962:	61bb      	str	r3, [r7, #24]
 8012964:	e018      	b.n	8012998 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7ff fdf2 	bl	8012552 <get_fat>
 801296e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2b01      	cmp	r3, #1
 8012974:	d801      	bhi.n	801297a <create_chain+0x46>
 8012976:	2301      	movs	r3, #1
 8012978:	e070      	b.n	8012a5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012980:	d101      	bne.n	8012986 <create_chain+0x52>
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	e06a      	b.n	8012a5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	69db      	ldr	r3, [r3, #28]
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	429a      	cmp	r2, r3
 801298e:	d201      	bcs.n	8012994 <create_chain+0x60>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	e063      	b.n	8012a5c <create_chain+0x128>
		scl = clst;
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	3301      	adds	r3, #1
 80129a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	69db      	ldr	r3, [r3, #28]
 80129a6:	69fa      	ldr	r2, [r7, #28]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d307      	bcc.n	80129bc <create_chain+0x88>
				ncl = 2;
 80129ac:	2302      	movs	r3, #2
 80129ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80129b0:	69fa      	ldr	r2, [r7, #28]
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d901      	bls.n	80129bc <create_chain+0x88>
 80129b8:	2300      	movs	r3, #0
 80129ba:	e04f      	b.n	8012a5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80129bc:	69f9      	ldr	r1, [r7, #28]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ff fdc7 	bl	8012552 <get_fat>
 80129c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d00e      	beq.n	80129ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d003      	beq.n	80129da <create_chain+0xa6>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d8:	d101      	bne.n	80129de <create_chain+0xaa>
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	e03e      	b.n	8012a5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80129de:	69fa      	ldr	r2, [r7, #28]
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d1da      	bne.n	801299c <create_chain+0x68>
 80129e6:	2300      	movs	r3, #0
 80129e8:	e038      	b.n	8012a5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80129ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80129ec:	f04f 32ff 	mov.w	r2, #4294967295
 80129f0:	69f9      	ldr	r1, [r7, #28]
 80129f2:	6938      	ldr	r0, [r7, #16]
 80129f4:	f7ff fe52 	bl	801269c <put_fat>
 80129f8:	4603      	mov	r3, r0
 80129fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80129fc:	7dfb      	ldrb	r3, [r7, #23]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d109      	bne.n	8012a16 <create_chain+0xe2>
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d006      	beq.n	8012a16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012a08:	69fa      	ldr	r2, [r7, #28]
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6938      	ldr	r0, [r7, #16]
 8012a0e:	f7ff fe45 	bl	801269c <put_fat>
 8012a12:	4603      	mov	r3, r0
 8012a14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012a16:	7dfb      	ldrb	r3, [r7, #23]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d116      	bne.n	8012a4a <create_chain+0x116>
		fs->last_clst = ncl;
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	69fa      	ldr	r2, [r7, #28]
 8012a20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	695a      	ldr	r2, [r3, #20]
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	69db      	ldr	r3, [r3, #28]
 8012a2a:	3b02      	subs	r3, #2
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d804      	bhi.n	8012a3a <create_chain+0x106>
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	695b      	ldr	r3, [r3, #20]
 8012a34:	1e5a      	subs	r2, r3, #1
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	791b      	ldrb	r3, [r3, #4]
 8012a3e:	f043 0301 	orr.w	r3, r3, #1
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	711a      	strb	r2, [r3, #4]
 8012a48:	e007      	b.n	8012a5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d102      	bne.n	8012a56 <create_chain+0x122>
 8012a50:	f04f 33ff 	mov.w	r3, #4294967295
 8012a54:	e000      	b.n	8012a58 <create_chain+0x124>
 8012a56:	2301      	movs	r3, #1
 8012a58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012a5a:	69fb      	ldr	r3, [r7, #28]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3720      	adds	r7, #32
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}

08012a64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012a64:	b480      	push	{r7}
 8012a66:	b087      	sub	sp, #28
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a78:	3304      	adds	r3, #4
 8012a7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	0a5b      	lsrs	r3, r3, #9
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	8952      	ldrh	r2, [r2, #10]
 8012a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	1d1a      	adds	r2, r3, #4
 8012a8e:	613a      	str	r2, [r7, #16]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d101      	bne.n	8012a9e <clmt_clust+0x3a>
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e010      	b.n	8012ac0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d307      	bcc.n	8012ab6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	617b      	str	r3, [r7, #20]
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012ab4:	e7e9      	b.n	8012a8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012ab6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	4413      	add	r3, r2
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	371c      	adds	r7, #28
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012ae2:	d204      	bcs.n	8012aee <dir_sdi+0x22>
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	f003 031f 	and.w	r3, r3, #31
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012aee:	2302      	movs	r3, #2
 8012af0:	e063      	b.n	8012bba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	683a      	ldr	r2, [r7, #0]
 8012af6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	689b      	ldr	r3, [r3, #8]
 8012afc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d106      	bne.n	8012b12 <dir_sdi+0x46>
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d902      	bls.n	8012b12 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10c      	bne.n	8012b32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	095b      	lsrs	r3, r3, #5
 8012b1c:	693a      	ldr	r2, [r7, #16]
 8012b1e:	8912      	ldrh	r2, [r2, #8]
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d301      	bcc.n	8012b28 <dir_sdi+0x5c>
 8012b24:	2302      	movs	r3, #2
 8012b26:	e048      	b.n	8012bba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	61da      	str	r2, [r3, #28]
 8012b30:	e029      	b.n	8012b86 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	895b      	ldrh	r3, [r3, #10]
 8012b36:	025b      	lsls	r3, r3, #9
 8012b38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012b3a:	e019      	b.n	8012b70 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6979      	ldr	r1, [r7, #20]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7ff fd06 	bl	8012552 <get_fat>
 8012b46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b4e:	d101      	bne.n	8012b54 <dir_sdi+0x88>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e032      	b.n	8012bba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d904      	bls.n	8012b64 <dir_sdi+0x98>
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	69db      	ldr	r3, [r3, #28]
 8012b5e:	697a      	ldr	r2, [r7, #20]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d301      	bcc.n	8012b68 <dir_sdi+0x9c>
 8012b64:	2302      	movs	r3, #2
 8012b66:	e028      	b.n	8012bba <dir_sdi+0xee>
			ofs -= csz;
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	1ad3      	subs	r3, r2, r3
 8012b6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012b70:	683a      	ldr	r2, [r7, #0]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d2e1      	bcs.n	8012b3c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012b78:	6979      	ldr	r1, [r7, #20]
 8012b7a:	6938      	ldr	r0, [r7, #16]
 8012b7c:	f7ff fcca 	bl	8012514 <clust2sect>
 8012b80:	4602      	mov	r2, r0
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	697a      	ldr	r2, [r7, #20]
 8012b8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	69db      	ldr	r3, [r3, #28]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <dir_sdi+0xcc>
 8012b94:	2302      	movs	r3, #2
 8012b96:	e010      	b.n	8012bba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	69da      	ldr	r2, [r3, #28]
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	0a5b      	lsrs	r3, r3, #9
 8012ba0:	441a      	add	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bb2:	441a      	add	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012bb8:	2300      	movs	r3, #0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3718      	adds	r7, #24
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b086      	sub	sp, #24
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
 8012bca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	695b      	ldr	r3, [r3, #20]
 8012bd6:	3320      	adds	r3, #32
 8012bd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	69db      	ldr	r3, [r3, #28]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d003      	beq.n	8012bea <dir_next+0x28>
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012be8:	d301      	bcc.n	8012bee <dir_next+0x2c>
 8012bea:	2304      	movs	r3, #4
 8012bec:	e0aa      	b.n	8012d44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	f040 8098 	bne.w	8012d2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	69db      	ldr	r3, [r3, #28]
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	699b      	ldr	r3, [r3, #24]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d10b      	bne.n	8012c24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	095b      	lsrs	r3, r3, #5
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	8912      	ldrh	r2, [r2, #8]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	f0c0 8088 	bcc.w	8012d2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	61da      	str	r2, [r3, #28]
 8012c20:	2304      	movs	r3, #4
 8012c22:	e08f      	b.n	8012d44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	0a5b      	lsrs	r3, r3, #9
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	8952      	ldrh	r2, [r2, #10]
 8012c2c:	3a01      	subs	r2, #1
 8012c2e:	4013      	ands	r3, r2
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d17a      	bne.n	8012d2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	699b      	ldr	r3, [r3, #24]
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	4610      	mov	r0, r2
 8012c3e:	f7ff fc88 	bl	8012552 <get_fat>
 8012c42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d801      	bhi.n	8012c4e <dir_next+0x8c>
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e07a      	b.n	8012d44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c54:	d101      	bne.n	8012c5a <dir_next+0x98>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e074      	b.n	8012d44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	69db      	ldr	r3, [r3, #28]
 8012c5e:	697a      	ldr	r2, [r7, #20]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d358      	bcc.n	8012d16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d104      	bne.n	8012c74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	61da      	str	r2, [r3, #28]
 8012c70:	2304      	movs	r3, #4
 8012c72:	e067      	b.n	8012d44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	699b      	ldr	r3, [r3, #24]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4610      	mov	r0, r2
 8012c7e:	f7ff fe59 	bl	8012934 <create_chain>
 8012c82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d101      	bne.n	8012c8e <dir_next+0xcc>
 8012c8a:	2307      	movs	r3, #7
 8012c8c:	e05a      	b.n	8012d44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d101      	bne.n	8012c98 <dir_next+0xd6>
 8012c94:	2302      	movs	r3, #2
 8012c96:	e055      	b.n	8012d44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c9e:	d101      	bne.n	8012ca4 <dir_next+0xe2>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e04f      	b.n	8012d44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f7ff fb55 	bl	8012354 <sync_window>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d001      	beq.n	8012cb4 <dir_next+0xf2>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e047      	b.n	8012d44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	3338      	adds	r3, #56	; 0x38
 8012cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7ff f97f 	bl	8011fc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	613b      	str	r3, [r7, #16]
 8012cc8:	6979      	ldr	r1, [r7, #20]
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7ff fc22 	bl	8012514 <clust2sect>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8012cd6:	e012      	b.n	8012cfe <dir_next+0x13c>
						fs->wflag = 1;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2201      	movs	r2, #1
 8012cdc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f7ff fb38 	bl	8012354 <sync_window>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <dir_next+0x12c>
 8012cea:	2301      	movs	r3, #1
 8012cec:	e02a      	b.n	8012d44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	613b      	str	r3, [r7, #16]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cf8:	1c5a      	adds	r2, r3, #1
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	895b      	ldrh	r3, [r3, #10]
 8012d02:	461a      	mov	r2, r3
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d3e6      	bcc.n	8012cd8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	1ad2      	subs	r2, r2, r3
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	697a      	ldr	r2, [r7, #20]
 8012d1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012d1c:	6979      	ldr	r1, [r7, #20]
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f7ff fbf8 	bl	8012514 <clust2sect>
 8012d24:	4602      	mov	r2, r0
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68ba      	ldr	r2, [r7, #8]
 8012d2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d3c:	441a      	add	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012d42:	2300      	movs	r3, #0
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3718      	adds	r7, #24
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b086      	sub	sp, #24
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff feb4 	bl	8012acc <dir_sdi>
 8012d64:	4603      	mov	r3, r0
 8012d66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d68:	7dfb      	ldrb	r3, [r7, #23]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d12b      	bne.n	8012dc6 <dir_alloc+0x7a>
		n = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	69db      	ldr	r3, [r3, #28]
 8012d76:	4619      	mov	r1, r3
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7ff fb2f 	bl	80123dc <move_window>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d82:	7dfb      	ldrb	r3, [r7, #23]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d11d      	bne.n	8012dc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6a1b      	ldr	r3, [r3, #32]
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	2be5      	cmp	r3, #229	; 0xe5
 8012d90:	d004      	beq.n	8012d9c <dir_alloc+0x50>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6a1b      	ldr	r3, [r3, #32]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d107      	bne.n	8012dac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	613b      	str	r3, [r7, #16]
 8012da2:	693a      	ldr	r2, [r7, #16]
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d102      	bne.n	8012db0 <dir_alloc+0x64>
 8012daa:	e00c      	b.n	8012dc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012dac:	2300      	movs	r3, #0
 8012dae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012db0:	2101      	movs	r1, #1
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7ff ff05 	bl	8012bc2 <dir_next>
 8012db8:	4603      	mov	r3, r0
 8012dba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012dbc:	7dfb      	ldrb	r3, [r7, #23]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d0d7      	beq.n	8012d72 <dir_alloc+0x26>
 8012dc2:	e000      	b.n	8012dc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012dc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012dc6:	7dfb      	ldrb	r3, [r7, #23]
 8012dc8:	2b04      	cmp	r3, #4
 8012dca:	d101      	bne.n	8012dd0 <dir_alloc+0x84>
 8012dcc:	2307      	movs	r3, #7
 8012dce:	75fb      	strb	r3, [r7, #23]
	return res;
 8012dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3718      	adds	r7, #24
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b084      	sub	sp, #16
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
 8012de2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	331a      	adds	r3, #26
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7ff f847 	bl	8011e7c <ld_word>
 8012dee:	4603      	mov	r3, r0
 8012df0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b03      	cmp	r3, #3
 8012df8:	d109      	bne.n	8012e0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	3314      	adds	r3, #20
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff f83c 	bl	8011e7c <ld_word>
 8012e04:	4603      	mov	r3, r0
 8012e06:	041b      	lsls	r3, r3, #16
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	60b9      	str	r1, [r7, #8]
 8012e22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	331a      	adds	r3, #26
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	b292      	uxth	r2, r2
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff f85f 	bl	8011ef2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	2b03      	cmp	r3, #3
 8012e3a:	d109      	bne.n	8012e50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	f103 0214 	add.w	r2, r3, #20
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	0c1b      	lsrs	r3, r3, #16
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	4619      	mov	r1, r3
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	f7ff f851 	bl	8011ef2 <st_word>
	}
}
 8012e50:	bf00      	nop
 8012e52:	3710      	adds	r7, #16
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b087      	sub	sp, #28
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	331a      	adds	r3, #26
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff f808 	bl	8011e7c <ld_word>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d001      	beq.n	8012e76 <cmp_lfn+0x1e>
 8012e72:	2300      	movs	r3, #0
 8012e74:	e059      	b.n	8012f2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e7e:	1e5a      	subs	r2, r3, #1
 8012e80:	4613      	mov	r3, r2
 8012e82:	005b      	lsls	r3, r3, #1
 8012e84:	4413      	add	r3, r2
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	4413      	add	r3, r2
 8012e8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	81fb      	strh	r3, [r7, #14]
 8012e90:	2300      	movs	r3, #0
 8012e92:	613b      	str	r3, [r7, #16]
 8012e94:	e033      	b.n	8012efe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012e96:	4a27      	ldr	r2, [pc, #156]	; (8012f34 <cmp_lfn+0xdc>)
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7fe ffe9 	bl	8011e7c <ld_word>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012eae:	89fb      	ldrh	r3, [r7, #14]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d01a      	beq.n	8012eea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2bfe      	cmp	r3, #254	; 0xfe
 8012eb8:	d812      	bhi.n	8012ee0 <cmp_lfn+0x88>
 8012eba:	89bb      	ldrh	r3, [r7, #12]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f002 fc81 	bl	80157c4 <ff_wtoupper>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	461c      	mov	r4, r3
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	1c5a      	adds	r2, r3, #1
 8012eca:	617a      	str	r2, [r7, #20]
 8012ecc:	005b      	lsls	r3, r3, #1
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f002 fc75 	bl	80157c4 <ff_wtoupper>
 8012eda:	4603      	mov	r3, r0
 8012edc:	429c      	cmp	r4, r3
 8012ede:	d001      	beq.n	8012ee4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e022      	b.n	8012f2a <cmp_lfn+0xd2>
			}
			wc = uc;
 8012ee4:	89bb      	ldrh	r3, [r7, #12]
 8012ee6:	81fb      	strh	r3, [r7, #14]
 8012ee8:	e006      	b.n	8012ef8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012eea:	89bb      	ldrh	r3, [r7, #12]
 8012eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d001      	beq.n	8012ef8 <cmp_lfn+0xa0>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	e018      	b.n	8012f2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	3301      	adds	r3, #1
 8012efc:	613b      	str	r3, [r7, #16]
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	2b0c      	cmp	r3, #12
 8012f02:	d9c8      	bls.n	8012e96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00b      	beq.n	8012f28 <cmp_lfn+0xd0>
 8012f10:	89fb      	ldrh	r3, [r7, #14]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d008      	beq.n	8012f28 <cmp_lfn+0xd0>
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	005b      	lsls	r3, r3, #1
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	881b      	ldrh	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <cmp_lfn+0xd0>
 8012f24:	2300      	movs	r3, #0
 8012f26:	e000      	b.n	8012f2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012f28:	2301      	movs	r3, #1
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	371c      	adds	r7, #28
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd90      	pop	{r4, r7, pc}
 8012f32:	bf00      	nop
 8012f34:	0801aa78 	.word	0x0801aa78

08012f38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	4611      	mov	r1, r2
 8012f44:	461a      	mov	r2, r3
 8012f46:	460b      	mov	r3, r1
 8012f48:	71fb      	strb	r3, [r7, #7]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	330d      	adds	r3, #13
 8012f52:	79ba      	ldrb	r2, [r7, #6]
 8012f54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	330b      	adds	r3, #11
 8012f5a:	220f      	movs	r2, #15
 8012f5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	330c      	adds	r3, #12
 8012f62:	2200      	movs	r2, #0
 8012f64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	331a      	adds	r3, #26
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fe ffc0 	bl	8011ef2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012f72:	79fb      	ldrb	r3, [r7, #7]
 8012f74:	1e5a      	subs	r2, r3, #1
 8012f76:	4613      	mov	r3, r2
 8012f78:	005b      	lsls	r3, r3, #1
 8012f7a:	4413      	add	r3, r2
 8012f7c:	009b      	lsls	r3, r3, #2
 8012f7e:	4413      	add	r3, r2
 8012f80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012f82:	2300      	movs	r3, #0
 8012f84:	82fb      	strh	r3, [r7, #22]
 8012f86:	2300      	movs	r3, #0
 8012f88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012f8a:	8afb      	ldrh	r3, [r7, #22]
 8012f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d007      	beq.n	8012fa4 <put_lfn+0x6c>
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	1c5a      	adds	r2, r3, #1
 8012f98:	61fa      	str	r2, [r7, #28]
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	68fa      	ldr	r2, [r7, #12]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	881b      	ldrh	r3, [r3, #0]
 8012fa2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012fa4:	4a17      	ldr	r2, [pc, #92]	; (8013004 <put_lfn+0xcc>)
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	4413      	add	r3, r2
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	461a      	mov	r2, r3
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	8afa      	ldrh	r2, [r7, #22]
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fe ff9b 	bl	8011ef2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012fbc:	8afb      	ldrh	r3, [r7, #22]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d102      	bne.n	8012fc8 <put_lfn+0x90>
 8012fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	61bb      	str	r3, [r7, #24]
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	2b0c      	cmp	r3, #12
 8012fd2:	d9da      	bls.n	8012f8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012fd4:	8afb      	ldrh	r3, [r7, #22]
 8012fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d006      	beq.n	8012fec <put_lfn+0xb4>
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d103      	bne.n	8012ff4 <put_lfn+0xbc>
 8012fec:	79fb      	ldrb	r3, [r7, #7]
 8012fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ff2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	79fa      	ldrb	r2, [r7, #7]
 8012ff8:	701a      	strb	r2, [r3, #0]
}
 8012ffa:	bf00      	nop
 8012ffc:	3720      	adds	r7, #32
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	0801aa78 	.word	0x0801aa78

08013008 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b08c      	sub	sp, #48	; 0x30
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	607a      	str	r2, [r7, #4]
 8013014:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013016:	220b      	movs	r2, #11
 8013018:	68b9      	ldr	r1, [r7, #8]
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f7fe ffb0 	bl	8011f80 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	2b05      	cmp	r3, #5
 8013024:	d92b      	bls.n	801307e <gen_numname+0x76>
		sr = seq;
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801302a:	e022      	b.n	8013072 <gen_numname+0x6a>
			wc = *lfn++;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	1c9a      	adds	r2, r3, #2
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8013036:	2300      	movs	r3, #0
 8013038:	62bb      	str	r3, [r7, #40]	; 0x28
 801303a:	e017      	b.n	801306c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	005a      	lsls	r2, r3, #1
 8013040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013042:	f003 0301 	and.w	r3, r3, #1
 8013046:	4413      	add	r3, r2
 8013048:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801304a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801304c:	085b      	lsrs	r3, r3, #1
 801304e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013056:	2b00      	cmp	r3, #0
 8013058:	d005      	beq.n	8013066 <gen_numname+0x5e>
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8013060:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013064:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013068:	3301      	adds	r3, #1
 801306a:	62bb      	str	r3, [r7, #40]	; 0x28
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	2b0f      	cmp	r3, #15
 8013070:	d9e4      	bls.n	801303c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1d8      	bne.n	801302c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801307e:	2307      	movs	r3, #7
 8013080:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	b2db      	uxtb	r3, r3
 8013086:	f003 030f 	and.w	r3, r3, #15
 801308a:	b2db      	uxtb	r3, r3
 801308c:	3330      	adds	r3, #48	; 0x30
 801308e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013096:	2b39      	cmp	r3, #57	; 0x39
 8013098:	d904      	bls.n	80130a4 <gen_numname+0x9c>
 801309a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801309e:	3307      	adds	r3, #7
 80130a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80130a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a6:	1e5a      	subs	r2, r3, #1
 80130a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80130aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80130ae:	4413      	add	r3, r2
 80130b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80130b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	091b      	lsrs	r3, r3, #4
 80130bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d1de      	bne.n	8013082 <gen_numname+0x7a>
	ns[i] = '~';
 80130c4:	f107 0214 	add.w	r2, r7, #20
 80130c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ca:	4413      	add	r3, r2
 80130cc:	227e      	movs	r2, #126	; 0x7e
 80130ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80130d0:	2300      	movs	r3, #0
 80130d2:	627b      	str	r3, [r7, #36]	; 0x24
 80130d4:	e002      	b.n	80130dc <gen_numname+0xd4>
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	3301      	adds	r3, #1
 80130da:	627b      	str	r3, [r7, #36]	; 0x24
 80130dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d205      	bcs.n	80130f0 <gen_numname+0xe8>
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e8:	4413      	add	r3, r2
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	2b20      	cmp	r3, #32
 80130ee:	d1f2      	bne.n	80130d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f2:	2b07      	cmp	r3, #7
 80130f4:	d808      	bhi.n	8013108 <gen_numname+0x100>
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	1c5a      	adds	r2, r3, #1
 80130fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80130fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013100:	4413      	add	r3, r2
 8013102:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013106:	e000      	b.n	801310a <gen_numname+0x102>
 8013108:	2120      	movs	r1, #32
 801310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310c:	1c5a      	adds	r2, r3, #1
 801310e:	627a      	str	r2, [r7, #36]	; 0x24
 8013110:	68fa      	ldr	r2, [r7, #12]
 8013112:	4413      	add	r3, r2
 8013114:	460a      	mov	r2, r1
 8013116:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	2b07      	cmp	r3, #7
 801311c:	d9e8      	bls.n	80130f0 <gen_numname+0xe8>
}
 801311e:	bf00      	nop
 8013120:	3730      	adds	r7, #48	; 0x30
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013126:	b480      	push	{r7}
 8013128:	b085      	sub	sp, #20
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013132:	230b      	movs	r3, #11
 8013134:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013136:	7bfb      	ldrb	r3, [r7, #15]
 8013138:	b2da      	uxtb	r2, r3
 801313a:	0852      	lsrs	r2, r2, #1
 801313c:	01db      	lsls	r3, r3, #7
 801313e:	4313      	orrs	r3, r2
 8013140:	b2da      	uxtb	r2, r3
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	1c59      	adds	r1, r3, #1
 8013146:	6079      	str	r1, [r7, #4]
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	4413      	add	r3, r2
 801314c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	3b01      	subs	r3, #1
 8013152:	60bb      	str	r3, [r7, #8]
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1ed      	bne.n	8013136 <sum_sfn+0x10>
	return sum;
 801315a:	7bfb      	ldrb	r3, [r7, #15]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3714      	adds	r7, #20
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b086      	sub	sp, #24
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013176:	2100      	movs	r1, #0
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ff fca7 	bl	8012acc <dir_sdi>
 801317e:	4603      	mov	r3, r0
 8013180:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013182:	7dfb      	ldrb	r3, [r7, #23]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <dir_find+0x24>
 8013188:	7dfb      	ldrb	r3, [r7, #23]
 801318a:	e0a9      	b.n	80132e0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801318c:	23ff      	movs	r3, #255	; 0xff
 801318e:	753b      	strb	r3, [r7, #20]
 8013190:	7d3b      	ldrb	r3, [r7, #20]
 8013192:	757b      	strb	r3, [r7, #21]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f04f 32ff 	mov.w	r2, #4294967295
 801319a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	69db      	ldr	r3, [r3, #28]
 80131a0:	4619      	mov	r1, r3
 80131a2:	6938      	ldr	r0, [r7, #16]
 80131a4:	f7ff f91a 	bl	80123dc <move_window>
 80131a8:	4603      	mov	r3, r0
 80131aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80131ac:	7dfb      	ldrb	r3, [r7, #23]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f040 8090 	bne.w	80132d4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6a1b      	ldr	r3, [r3, #32]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80131bc:	7dbb      	ldrb	r3, [r7, #22]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d102      	bne.n	80131c8 <dir_find+0x60>
 80131c2:	2304      	movs	r3, #4
 80131c4:	75fb      	strb	r3, [r7, #23]
 80131c6:	e08a      	b.n	80132de <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6a1b      	ldr	r3, [r3, #32]
 80131cc:	330b      	adds	r3, #11
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131d4:	73fb      	strb	r3, [r7, #15]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	7bfa      	ldrb	r2, [r7, #15]
 80131da:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80131dc:	7dbb      	ldrb	r3, [r7, #22]
 80131de:	2be5      	cmp	r3, #229	; 0xe5
 80131e0:	d007      	beq.n	80131f2 <dir_find+0x8a>
 80131e2:	7bfb      	ldrb	r3, [r7, #15]
 80131e4:	f003 0308 	and.w	r3, r3, #8
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d009      	beq.n	8013200 <dir_find+0x98>
 80131ec:	7bfb      	ldrb	r3, [r7, #15]
 80131ee:	2b0f      	cmp	r3, #15
 80131f0:	d006      	beq.n	8013200 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80131f2:	23ff      	movs	r3, #255	; 0xff
 80131f4:	757b      	strb	r3, [r7, #21]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f04f 32ff 	mov.w	r2, #4294967295
 80131fc:	631a      	str	r2, [r3, #48]	; 0x30
 80131fe:	e05e      	b.n	80132be <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013200:	7bfb      	ldrb	r3, [r7, #15]
 8013202:	2b0f      	cmp	r3, #15
 8013204:	d136      	bne.n	8013274 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013210:	2b00      	cmp	r3, #0
 8013212:	d154      	bne.n	80132be <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013214:	7dbb      	ldrb	r3, [r7, #22]
 8013216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00d      	beq.n	801323a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6a1b      	ldr	r3, [r3, #32]
 8013222:	7b5b      	ldrb	r3, [r3, #13]
 8013224:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013226:	7dbb      	ldrb	r3, [r7, #22]
 8013228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801322c:	75bb      	strb	r3, [r7, #22]
 801322e:	7dbb      	ldrb	r3, [r7, #22]
 8013230:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	695a      	ldr	r2, [r3, #20]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801323a:	7dba      	ldrb	r2, [r7, #22]
 801323c:	7d7b      	ldrb	r3, [r7, #21]
 801323e:	429a      	cmp	r2, r3
 8013240:	d115      	bne.n	801326e <dir_find+0x106>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6a1b      	ldr	r3, [r3, #32]
 8013246:	330d      	adds	r3, #13
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	7d3a      	ldrb	r2, [r7, #20]
 801324c:	429a      	cmp	r2, r3
 801324e:	d10e      	bne.n	801326e <dir_find+0x106>
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	68da      	ldr	r2, [r3, #12]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	6a1b      	ldr	r3, [r3, #32]
 8013258:	4619      	mov	r1, r3
 801325a:	4610      	mov	r0, r2
 801325c:	f7ff fdfc 	bl	8012e58 <cmp_lfn>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d003      	beq.n	801326e <dir_find+0x106>
 8013266:	7d7b      	ldrb	r3, [r7, #21]
 8013268:	3b01      	subs	r3, #1
 801326a:	b2db      	uxtb	r3, r3
 801326c:	e000      	b.n	8013270 <dir_find+0x108>
 801326e:	23ff      	movs	r3, #255	; 0xff
 8013270:	757b      	strb	r3, [r7, #21]
 8013272:	e024      	b.n	80132be <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013274:	7d7b      	ldrb	r3, [r7, #21]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d109      	bne.n	801328e <dir_find+0x126>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6a1b      	ldr	r3, [r3, #32]
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff ff51 	bl	8013126 <sum_sfn>
 8013284:	4603      	mov	r3, r0
 8013286:	461a      	mov	r2, r3
 8013288:	7d3b      	ldrb	r3, [r7, #20]
 801328a:	4293      	cmp	r3, r2
 801328c:	d024      	beq.n	80132d8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013294:	f003 0301 	and.w	r3, r3, #1
 8013298:	2b00      	cmp	r3, #0
 801329a:	d10a      	bne.n	80132b2 <dir_find+0x14a>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6a18      	ldr	r0, [r3, #32]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3324      	adds	r3, #36	; 0x24
 80132a4:	220b      	movs	r2, #11
 80132a6:	4619      	mov	r1, r3
 80132a8:	f7fe fea5 	bl	8011ff6 <mem_cmp>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d014      	beq.n	80132dc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80132b2:	23ff      	movs	r3, #255	; 0xff
 80132b4:	757b      	strb	r3, [r7, #21]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f04f 32ff 	mov.w	r2, #4294967295
 80132bc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80132be:	2100      	movs	r1, #0
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff fc7e 	bl	8012bc2 <dir_next>
 80132c6:	4603      	mov	r3, r0
 80132c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80132ca:	7dfb      	ldrb	r3, [r7, #23]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f43f af65 	beq.w	801319c <dir_find+0x34>
 80132d2:	e004      	b.n	80132de <dir_find+0x176>
		if (res != FR_OK) break;
 80132d4:	bf00      	nop
 80132d6:	e002      	b.n	80132de <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80132d8:	bf00      	nop
 80132da:	e000      	b.n	80132de <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80132dc:	bf00      	nop

	return res;
 80132de:	7dfb      	ldrb	r3, [r7, #23]
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b08c      	sub	sp, #48	; 0x30
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80132fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <dir_register+0x20>
 8013304:	2306      	movs	r3, #6
 8013306:	e0e0      	b.n	80134ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013308:	2300      	movs	r3, #0
 801330a:	627b      	str	r3, [r7, #36]	; 0x24
 801330c:	e002      	b.n	8013314 <dir_register+0x2c>
 801330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013310:	3301      	adds	r3, #1
 8013312:	627b      	str	r3, [r7, #36]	; 0x24
 8013314:	69fb      	ldr	r3, [r7, #28]
 8013316:	68da      	ldr	r2, [r3, #12]
 8013318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	4413      	add	r3, r2
 801331e:	881b      	ldrh	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1f4      	bne.n	801330e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801332a:	f107 030c 	add.w	r3, r7, #12
 801332e:	220c      	movs	r2, #12
 8013330:	4618      	mov	r0, r3
 8013332:	f7fe fe25 	bl	8011f80 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013336:	7dfb      	ldrb	r3, [r7, #23]
 8013338:	f003 0301 	and.w	r3, r3, #1
 801333c:	2b00      	cmp	r3, #0
 801333e:	d032      	beq.n	80133a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2240      	movs	r2, #64	; 0x40
 8013344:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8013348:	2301      	movs	r3, #1
 801334a:	62bb      	str	r3, [r7, #40]	; 0x28
 801334c:	e016      	b.n	801337c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	68da      	ldr	r2, [r3, #12]
 8013358:	f107 010c 	add.w	r1, r7, #12
 801335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335e:	f7ff fe53 	bl	8013008 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7ff ff00 	bl	8013168 <dir_find>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801336e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013372:	2b00      	cmp	r3, #0
 8013374:	d106      	bne.n	8013384 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013378:	3301      	adds	r3, #1
 801337a:	62bb      	str	r3, [r7, #40]	; 0x28
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	2b63      	cmp	r3, #99	; 0x63
 8013380:	d9e5      	bls.n	801334e <dir_register+0x66>
 8013382:	e000      	b.n	8013386 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013384:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	2b64      	cmp	r3, #100	; 0x64
 801338a:	d101      	bne.n	8013390 <dir_register+0xa8>
 801338c:	2307      	movs	r3, #7
 801338e:	e09c      	b.n	80134ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013394:	2b04      	cmp	r3, #4
 8013396:	d002      	beq.n	801339e <dir_register+0xb6>
 8013398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801339c:	e095      	b.n	80134ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801339e:	7dfa      	ldrb	r2, [r7, #23]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80133a6:	7dfb      	ldrb	r3, [r7, #23]
 80133a8:	f003 0302 	and.w	r3, r3, #2
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d007      	beq.n	80133c0 <dir_register+0xd8>
 80133b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b2:	330c      	adds	r3, #12
 80133b4:	4a47      	ldr	r2, [pc, #284]	; (80134d4 <dir_register+0x1ec>)
 80133b6:	fba2 2303 	umull	r2, r3, r2, r3
 80133ba:	089b      	lsrs	r3, r3, #2
 80133bc:	3301      	adds	r3, #1
 80133be:	e000      	b.n	80133c2 <dir_register+0xda>
 80133c0:	2301      	movs	r3, #1
 80133c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80133c4:	6a39      	ldr	r1, [r7, #32]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7ff fcc0 	bl	8012d4c <dir_alloc>
 80133cc:	4603      	mov	r3, r0
 80133ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80133d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d148      	bne.n	801346c <dir_register+0x184>
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	3b01      	subs	r3, #1
 80133de:	623b      	str	r3, [r7, #32]
 80133e0:	6a3b      	ldr	r3, [r7, #32]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d042      	beq.n	801346c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	695a      	ldr	r2, [r3, #20]
 80133ea:	6a3b      	ldr	r3, [r7, #32]
 80133ec:	015b      	lsls	r3, r3, #5
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	4619      	mov	r1, r3
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f7ff fb6a 	bl	8012acc <dir_sdi>
 80133f8:	4603      	mov	r3, r0
 80133fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80133fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013402:	2b00      	cmp	r3, #0
 8013404:	d132      	bne.n	801346c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	3324      	adds	r3, #36	; 0x24
 801340a:	4618      	mov	r0, r3
 801340c:	f7ff fe8b 	bl	8013126 <sum_sfn>
 8013410:	4603      	mov	r3, r0
 8013412:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	69db      	ldr	r3, [r3, #28]
 8013418:	4619      	mov	r1, r3
 801341a:	69f8      	ldr	r0, [r7, #28]
 801341c:	f7fe ffde 	bl	80123dc <move_window>
 8013420:	4603      	mov	r3, r0
 8013422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8013426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801342a:	2b00      	cmp	r3, #0
 801342c:	d11d      	bne.n	801346a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	68d8      	ldr	r0, [r3, #12]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6a19      	ldr	r1, [r3, #32]
 8013436:	6a3b      	ldr	r3, [r7, #32]
 8013438:	b2da      	uxtb	r2, r3
 801343a:	7efb      	ldrb	r3, [r7, #27]
 801343c:	f7ff fd7c 	bl	8012f38 <put_lfn>
				fs->wflag = 1;
 8013440:	69fb      	ldr	r3, [r7, #28]
 8013442:	2201      	movs	r2, #1
 8013444:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013446:	2100      	movs	r1, #0
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7ff fbba 	bl	8012bc2 <dir_next>
 801344e:	4603      	mov	r3, r0
 8013450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8013454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013458:	2b00      	cmp	r3, #0
 801345a:	d107      	bne.n	801346c <dir_register+0x184>
 801345c:	6a3b      	ldr	r3, [r7, #32]
 801345e:	3b01      	subs	r3, #1
 8013460:	623b      	str	r3, [r7, #32]
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d1d5      	bne.n	8013414 <dir_register+0x12c>
 8013468:	e000      	b.n	801346c <dir_register+0x184>
				if (res != FR_OK) break;
 801346a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801346c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013470:	2b00      	cmp	r3, #0
 8013472:	d128      	bne.n	80134c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	69db      	ldr	r3, [r3, #28]
 8013478:	4619      	mov	r1, r3
 801347a:	69f8      	ldr	r0, [r7, #28]
 801347c:	f7fe ffae 	bl	80123dc <move_window>
 8013480:	4603      	mov	r3, r0
 8013482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801348a:	2b00      	cmp	r3, #0
 801348c:	d11b      	bne.n	80134c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a1b      	ldr	r3, [r3, #32]
 8013492:	2220      	movs	r2, #32
 8013494:	2100      	movs	r1, #0
 8013496:	4618      	mov	r0, r3
 8013498:	f7fe fd93 	bl	8011fc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6a18      	ldr	r0, [r3, #32]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	3324      	adds	r3, #36	; 0x24
 80134a4:	220b      	movs	r2, #11
 80134a6:	4619      	mov	r1, r3
 80134a8:	f7fe fd6a 	bl	8011f80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6a1b      	ldr	r3, [r3, #32]
 80134b6:	330c      	adds	r3, #12
 80134b8:	f002 0218 	and.w	r2, r2, #24
 80134bc:	b2d2      	uxtb	r2, r2
 80134be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	2201      	movs	r2, #1
 80134c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80134c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3730      	adds	r7, #48	; 0x30
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	4ec4ec4f 	.word	0x4ec4ec4f

080134d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b08a      	sub	sp, #40	; 0x28
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	613b      	str	r3, [r7, #16]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	60fb      	str	r3, [r7, #12]
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	1c5a      	adds	r2, r3, #1
 80134fc:	61ba      	str	r2, [r7, #24]
 80134fe:	693a      	ldr	r2, [r7, #16]
 8013500:	4413      	add	r3, r2
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013508:	2b1f      	cmp	r3, #31
 801350a:	d940      	bls.n	801358e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801350c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801350e:	2b2f      	cmp	r3, #47	; 0x2f
 8013510:	d006      	beq.n	8013520 <create_name+0x48>
 8013512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013514:	2b5c      	cmp	r3, #92	; 0x5c
 8013516:	d110      	bne.n	801353a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013518:	e002      	b.n	8013520 <create_name+0x48>
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	3301      	adds	r3, #1
 801351e:	61bb      	str	r3, [r7, #24]
 8013520:	693a      	ldr	r2, [r7, #16]
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	4413      	add	r3, r2
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2b2f      	cmp	r3, #47	; 0x2f
 801352a:	d0f6      	beq.n	801351a <create_name+0x42>
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	4413      	add	r3, r2
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	2b5c      	cmp	r3, #92	; 0x5c
 8013536:	d0f0      	beq.n	801351a <create_name+0x42>
			break;
 8013538:	e02a      	b.n	8013590 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	2bfe      	cmp	r3, #254	; 0xfe
 801353e:	d901      	bls.n	8013544 <create_name+0x6c>
 8013540:	2306      	movs	r3, #6
 8013542:	e1c9      	b.n	80138d8 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013546:	b2db      	uxtb	r3, r3
 8013548:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801354a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801354c:	2101      	movs	r1, #1
 801354e:	4618      	mov	r0, r3
 8013550:	f002 f8fc 	bl	801574c <ff_convert>
 8013554:	4603      	mov	r3, r0
 8013556:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <create_name+0x8a>
 801355e:	2306      	movs	r3, #6
 8013560:	e1ba      	b.n	80138d8 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013564:	2b7f      	cmp	r3, #127	; 0x7f
 8013566:	d809      	bhi.n	801357c <create_name+0xa4>
 8013568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801356a:	4619      	mov	r1, r3
 801356c:	48a5      	ldr	r0, [pc, #660]	; (8013804 <create_name+0x32c>)
 801356e:	f7fe fd69 	bl	8012044 <chk_chr>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d001      	beq.n	801357c <create_name+0xa4>
 8013578:	2306      	movs	r3, #6
 801357a:	e1ad      	b.n	80138d8 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	1c5a      	adds	r2, r3, #1
 8013580:	617a      	str	r2, [r7, #20]
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	68fa      	ldr	r2, [r7, #12]
 8013586:	4413      	add	r3, r2
 8013588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801358a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801358c:	e7b4      	b.n	80134f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801358e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	441a      	add	r2, r3
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801359a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801359c:	2b1f      	cmp	r3, #31
 801359e:	d801      	bhi.n	80135a4 <create_name+0xcc>
 80135a0:	2304      	movs	r3, #4
 80135a2:	e000      	b.n	80135a6 <create_name+0xce>
 80135a4:	2300      	movs	r3, #0
 80135a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	d109      	bne.n	80135c4 <create_name+0xec>
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80135b6:	3b01      	subs	r3, #1
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	4413      	add	r3, r2
 80135be:	881b      	ldrh	r3, [r3, #0]
 80135c0:	2b2e      	cmp	r3, #46	; 0x2e
 80135c2:	d016      	beq.n	80135f2 <create_name+0x11a>
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	d14e      	bne.n	8013668 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80135d0:	3b01      	subs	r3, #1
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	68fa      	ldr	r2, [r7, #12]
 80135d6:	4413      	add	r3, r2
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	2b2e      	cmp	r3, #46	; 0x2e
 80135dc:	d144      	bne.n	8013668 <create_name+0x190>
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80135e4:	3b02      	subs	r3, #2
 80135e6:	005b      	lsls	r3, r3, #1
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	4413      	add	r3, r2
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	2b2e      	cmp	r3, #46	; 0x2e
 80135f0:	d13a      	bne.n	8013668 <create_name+0x190>
		lfn[di] = 0;
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	005b      	lsls	r3, r3, #1
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	4413      	add	r3, r2
 80135fa:	2200      	movs	r2, #0
 80135fc:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80135fe:	2300      	movs	r3, #0
 8013600:	623b      	str	r3, [r7, #32]
 8013602:	e00f      	b.n	8013624 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8013604:	6a3a      	ldr	r2, [r7, #32]
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	429a      	cmp	r2, r3
 801360a:	d201      	bcs.n	8013610 <create_name+0x138>
 801360c:	212e      	movs	r1, #46	; 0x2e
 801360e:	e000      	b.n	8013612 <create_name+0x13a>
 8013610:	2120      	movs	r1, #32
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	6a3b      	ldr	r3, [r7, #32]
 8013616:	4413      	add	r3, r2
 8013618:	3324      	adds	r3, #36	; 0x24
 801361a:	460a      	mov	r2, r1
 801361c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 801361e:	6a3b      	ldr	r3, [r7, #32]
 8013620:	3301      	adds	r3, #1
 8013622:	623b      	str	r3, [r7, #32]
 8013624:	6a3b      	ldr	r3, [r7, #32]
 8013626:	2b0a      	cmp	r3, #10
 8013628:	d9ec      	bls.n	8013604 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801362a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801362e:	f043 0320 	orr.w	r3, r3, #32
 8013632:	b2d9      	uxtb	r1, r3
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	4413      	add	r3, r2
 801363a:	3324      	adds	r3, #36	; 0x24
 801363c:	460a      	mov	r2, r1
 801363e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8013640:	2300      	movs	r3, #0
 8013642:	e149      	b.n	80138d8 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801364a:	3b01      	subs	r3, #1
 801364c:	005b      	lsls	r3, r3, #1
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	4413      	add	r3, r2
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013658:	2b20      	cmp	r3, #32
 801365a:	d002      	beq.n	8013662 <create_name+0x18a>
 801365c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801365e:	2b2e      	cmp	r3, #46	; 0x2e
 8013660:	d106      	bne.n	8013670 <create_name+0x198>
		di--;
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	3b01      	subs	r3, #1
 8013666:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1ea      	bne.n	8013644 <create_name+0x16c>
 801366e:	e000      	b.n	8013672 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8013670:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	005b      	lsls	r3, r3, #1
 8013676:	68fa      	ldr	r2, [r7, #12]
 8013678:	4413      	add	r3, r2
 801367a:	2200      	movs	r2, #0
 801367c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d101      	bne.n	8013688 <create_name+0x1b0>
 8013684:	2306      	movs	r3, #6
 8013686:	e127      	b.n	80138d8 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	3324      	adds	r3, #36	; 0x24
 801368c:	220b      	movs	r2, #11
 801368e:	2120      	movs	r1, #32
 8013690:	4618      	mov	r0, r3
 8013692:	f7fe fc96 	bl	8011fc2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013696:	2300      	movs	r3, #0
 8013698:	61bb      	str	r3, [r7, #24]
 801369a:	e002      	b.n	80136a2 <create_name+0x1ca>
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	3301      	adds	r3, #1
 80136a0:	61bb      	str	r3, [r7, #24]
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	005b      	lsls	r3, r3, #1
 80136a6:	68fa      	ldr	r2, [r7, #12]
 80136a8:	4413      	add	r3, r2
 80136aa:	881b      	ldrh	r3, [r3, #0]
 80136ac:	2b20      	cmp	r3, #32
 80136ae:	d0f5      	beq.n	801369c <create_name+0x1c4>
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	005b      	lsls	r3, r3, #1
 80136b4:	68fa      	ldr	r2, [r7, #12]
 80136b6:	4413      	add	r3, r2
 80136b8:	881b      	ldrh	r3, [r3, #0]
 80136ba:	2b2e      	cmp	r3, #46	; 0x2e
 80136bc:	d0ee      	beq.n	801369c <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d009      	beq.n	80136d8 <create_name+0x200>
 80136c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c8:	f043 0303 	orr.w	r3, r3, #3
 80136cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80136d0:	e002      	b.n	80136d8 <create_name+0x200>
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	3b01      	subs	r3, #1
 80136d6:	617b      	str	r3, [r7, #20]
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d009      	beq.n	80136f2 <create_name+0x21a>
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80136e4:	3b01      	subs	r3, #1
 80136e6:	005b      	lsls	r3, r3, #1
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	4413      	add	r3, r2
 80136ec:	881b      	ldrh	r3, [r3, #0]
 80136ee:	2b2e      	cmp	r3, #46	; 0x2e
 80136f0:	d1ef      	bne.n	80136d2 <create_name+0x1fa>

	i = b = 0; ni = 8;
 80136f2:	2300      	movs	r3, #0
 80136f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80136f8:	2300      	movs	r3, #0
 80136fa:	623b      	str	r3, [r7, #32]
 80136fc:	2308      	movs	r3, #8
 80136fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	1c5a      	adds	r2, r3, #1
 8013704:	61ba      	str	r2, [r7, #24]
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	4413      	add	r3, r2
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 8096 	beq.w	8013844 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801371a:	2b20      	cmp	r3, #32
 801371c:	d006      	beq.n	801372c <create_name+0x254>
 801371e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013720:	2b2e      	cmp	r3, #46	; 0x2e
 8013722:	d10a      	bne.n	801373a <create_name+0x262>
 8013724:	69ba      	ldr	r2, [r7, #24]
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	429a      	cmp	r2, r3
 801372a:	d006      	beq.n	801373a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 801372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013730:	f043 0303 	orr.w	r3, r3, #3
 8013734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013738:	e083      	b.n	8013842 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801373a:	6a3a      	ldr	r2, [r7, #32]
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	429a      	cmp	r2, r3
 8013740:	d203      	bcs.n	801374a <create_name+0x272>
 8013742:	69ba      	ldr	r2, [r7, #24]
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	429a      	cmp	r2, r3
 8013748:	d123      	bne.n	8013792 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	2b0b      	cmp	r3, #11
 801374e:	d106      	bne.n	801375e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8013750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013754:	f043 0303 	orr.w	r3, r3, #3
 8013758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801375c:	e075      	b.n	801384a <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801375e:	69ba      	ldr	r2, [r7, #24]
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	429a      	cmp	r2, r3
 8013764:	d005      	beq.n	8013772 <create_name+0x29a>
 8013766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801376a:	f043 0303 	orr.w	r3, r3, #3
 801376e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013772:	69ba      	ldr	r2, [r7, #24]
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	429a      	cmp	r2, r3
 8013778:	d866      	bhi.n	8013848 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	61bb      	str	r3, [r7, #24]
 801377e:	2308      	movs	r3, #8
 8013780:	623b      	str	r3, [r7, #32]
 8013782:	230b      	movs	r3, #11
 8013784:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013790:	e057      	b.n	8013842 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013794:	2b7f      	cmp	r3, #127	; 0x7f
 8013796:	d914      	bls.n	80137c2 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801379a:	2100      	movs	r1, #0
 801379c:	4618      	mov	r0, r3
 801379e:	f001 ffd5 	bl	801574c <ff_convert>
 80137a2:	4603      	mov	r3, r0
 80137a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80137a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d004      	beq.n	80137b6 <create_name+0x2de>
 80137ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137ae:	3b80      	subs	r3, #128	; 0x80
 80137b0:	4a15      	ldr	r2, [pc, #84]	; (8013808 <create_name+0x330>)
 80137b2:	5cd3      	ldrb	r3, [r2, r3]
 80137b4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80137b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137ba:	f043 0302 	orr.w	r3, r3, #2
 80137be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80137c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d007      	beq.n	80137d8 <create_name+0x300>
 80137c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137ca:	4619      	mov	r1, r3
 80137cc:	480f      	ldr	r0, [pc, #60]	; (801380c <create_name+0x334>)
 80137ce:	f7fe fc39 	bl	8012044 <chk_chr>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d008      	beq.n	80137ea <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80137d8:	235f      	movs	r3, #95	; 0x5f
 80137da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80137dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137e0:	f043 0303 	orr.w	r3, r3, #3
 80137e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137e8:	e021      	b.n	801382e <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80137ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137ec:	2b40      	cmp	r3, #64	; 0x40
 80137ee:	d90f      	bls.n	8013810 <create_name+0x338>
 80137f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137f2:	2b5a      	cmp	r3, #90	; 0x5a
 80137f4:	d80c      	bhi.n	8013810 <create_name+0x338>
					b |= 2;
 80137f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137fa:	f043 0302 	orr.w	r3, r3, #2
 80137fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013802:	e014      	b.n	801382e <create_name+0x356>
 8013804:	08016d28 	.word	0x08016d28
 8013808:	0801a9f8 	.word	0x0801a9f8
 801380c:	08016d34 	.word	0x08016d34
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013812:	2b60      	cmp	r3, #96	; 0x60
 8013814:	d90b      	bls.n	801382e <create_name+0x356>
 8013816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013818:	2b7a      	cmp	r3, #122	; 0x7a
 801381a:	d808      	bhi.n	801382e <create_name+0x356>
						b |= 1; w -= 0x20;
 801381c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013820:	f043 0301 	orr.w	r3, r3, #1
 8013824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801382a:	3b20      	subs	r3, #32
 801382c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801382e:	6a3b      	ldr	r3, [r7, #32]
 8013830:	1c5a      	adds	r2, r3, #1
 8013832:	623a      	str	r2, [r7, #32]
 8013834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013836:	b2d1      	uxtb	r1, r2
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	4413      	add	r3, r2
 801383c:	460a      	mov	r2, r1
 801383e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013842:	e75d      	b.n	8013700 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 8013844:	bf00      	nop
 8013846:	e000      	b.n	801384a <create_name+0x372>
			if (si > di) break;			/* No extension */
 8013848:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013850:	2be5      	cmp	r3, #229	; 0xe5
 8013852:	d103      	bne.n	801385c <create_name+0x384>
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2205      	movs	r2, #5
 8013858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	2b08      	cmp	r3, #8
 8013860:	d104      	bne.n	801386c <create_name+0x394>
 8013862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801386c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013870:	f003 030c 	and.w	r3, r3, #12
 8013874:	2b0c      	cmp	r3, #12
 8013876:	d005      	beq.n	8013884 <create_name+0x3ac>
 8013878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801387c:	f003 0303 	and.w	r3, r3, #3
 8013880:	2b03      	cmp	r3, #3
 8013882:	d105      	bne.n	8013890 <create_name+0x3b8>
 8013884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013888:	f043 0302 	orr.w	r3, r3, #2
 801388c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013894:	f003 0302 	and.w	r3, r3, #2
 8013898:	2b00      	cmp	r3, #0
 801389a:	d117      	bne.n	80138cc <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801389c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138a0:	f003 0303 	and.w	r3, r3, #3
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d105      	bne.n	80138b4 <create_name+0x3dc>
 80138a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138ac:	f043 0310 	orr.w	r3, r3, #16
 80138b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80138b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138b8:	f003 030c 	and.w	r3, r3, #12
 80138bc:	2b04      	cmp	r3, #4
 80138be:	d105      	bne.n	80138cc <create_name+0x3f4>
 80138c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138c4:	f043 0308 	orr.w	r3, r3, #8
 80138c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80138d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80138d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3728      	adds	r7, #40	; 0x28
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b086      	sub	sp, #24
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	2b2f      	cmp	r3, #47	; 0x2f
 80138fa:	d00b      	beq.n	8013914 <follow_path+0x34>
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b5c      	cmp	r3, #92	; 0x5c
 8013902:	d007      	beq.n	8013914 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	699a      	ldr	r2, [r3, #24]
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	609a      	str	r2, [r3, #8]
 801390c:	e00d      	b.n	801392a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	3301      	adds	r3, #1
 8013912:	603b      	str	r3, [r7, #0]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b2f      	cmp	r3, #47	; 0x2f
 801391a:	d0f8      	beq.n	801390e <follow_path+0x2e>
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b5c      	cmp	r3, #92	; 0x5c
 8013922:	d0f4      	beq.n	801390e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	2200      	movs	r2, #0
 8013928:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2b1f      	cmp	r3, #31
 8013930:	d80a      	bhi.n	8013948 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2280      	movs	r2, #128	; 0x80
 8013936:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801393a:	2100      	movs	r1, #0
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7ff f8c5 	bl	8012acc <dir_sdi>
 8013942:	4603      	mov	r3, r0
 8013944:	75fb      	strb	r3, [r7, #23]
 8013946:	e056      	b.n	80139f6 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013948:	463b      	mov	r3, r7
 801394a:	4619      	mov	r1, r3
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7ff fdc3 	bl	80134d8 <create_name>
 8013952:	4603      	mov	r3, r0
 8013954:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013956:	7dfb      	ldrb	r3, [r7, #23]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d147      	bne.n	80139ec <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7ff fc03 	bl	8013168 <dir_find>
 8013962:	4603      	mov	r3, r0
 8013964:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801396c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801396e:	7dfb      	ldrb	r3, [r7, #23]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d01b      	beq.n	80139ac <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013974:	7dfb      	ldrb	r3, [r7, #23]
 8013976:	2b04      	cmp	r3, #4
 8013978:	d13a      	bne.n	80139f0 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801397a:	7afb      	ldrb	r3, [r7, #11]
 801397c:	f003 0320 	and.w	r3, r3, #32
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013984:	7afb      	ldrb	r3, [r7, #11]
 8013986:	f003 0304 	and.w	r3, r3, #4
 801398a:	2b00      	cmp	r3, #0
 801398c:	d02c      	beq.n	80139e8 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2280      	movs	r2, #128	; 0x80
 8013992:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8013996:	2300      	movs	r3, #0
 8013998:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801399a:	e029      	b.n	80139f0 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801399c:	7afb      	ldrb	r3, [r7, #11]
 801399e:	f003 0304 	and.w	r3, r3, #4
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d124      	bne.n	80139f0 <follow_path+0x110>
 80139a6:	2305      	movs	r3, #5
 80139a8:	75fb      	strb	r3, [r7, #23]
				break;
 80139aa:	e021      	b.n	80139f0 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80139ac:	7afb      	ldrb	r3, [r7, #11]
 80139ae:	f003 0304 	and.w	r3, r3, #4
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d11e      	bne.n	80139f4 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	799b      	ldrb	r3, [r3, #6]
 80139ba:	f003 0310 	and.w	r3, r3, #16
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d102      	bne.n	80139c8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80139c2:	2305      	movs	r3, #5
 80139c4:	75fb      	strb	r3, [r7, #23]
 80139c6:	e016      	b.n	80139f6 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	695b      	ldr	r3, [r3, #20]
 80139d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139d6:	4413      	add	r3, r2
 80139d8:	4619      	mov	r1, r3
 80139da:	68f8      	ldr	r0, [r7, #12]
 80139dc:	f7ff f9fd 	bl	8012dda <ld_clust>
 80139e0:	4602      	mov	r2, r0
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	609a      	str	r2, [r3, #8]
 80139e6:	e7af      	b.n	8013948 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80139e8:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80139ea:	e7ad      	b.n	8013948 <follow_path+0x68>
			if (res != FR_OK) break;
 80139ec:	bf00      	nop
 80139ee:	e002      	b.n	80139f6 <follow_path+0x116>
				break;
 80139f0:	bf00      	nop
 80139f2:	e000      	b.n	80139f6 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80139f4:	bf00      	nop
			}
		}
	}

	return res;
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b087      	sub	sp, #28
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d031      	beq.n	8013a7a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	617b      	str	r3, [r7, #20]
 8013a1c:	e002      	b.n	8013a24 <get_ldnumber+0x24>
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	3301      	adds	r3, #1
 8013a22:	617b      	str	r3, [r7, #20]
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	2b1f      	cmp	r3, #31
 8013a2a:	d903      	bls.n	8013a34 <get_ldnumber+0x34>
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b3a      	cmp	r3, #58	; 0x3a
 8013a32:	d1f4      	bne.n	8013a1e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	2b3a      	cmp	r3, #58	; 0x3a
 8013a3a:	d11c      	bne.n	8013a76 <get_ldnumber+0x76>
			tp = *path;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	1c5a      	adds	r2, r3, #1
 8013a46:	60fa      	str	r2, [r7, #12]
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	3b30      	subs	r3, #48	; 0x30
 8013a4c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2b09      	cmp	r3, #9
 8013a52:	d80e      	bhi.n	8013a72 <get_ldnumber+0x72>
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d10a      	bne.n	8013a72 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d107      	bne.n	8013a72 <get_ldnumber+0x72>
					vol = (int)i;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	617b      	str	r3, [r7, #20]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	697a      	ldr	r2, [r7, #20]
 8013a70:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	e002      	b.n	8013a7c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013a76:	2300      	movs	r3, #0
 8013a78:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013a7a:	693b      	ldr	r3, [r7, #16]
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	371c      	adds	r7, #28
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr

08013a88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	70da      	strb	r2, [r3, #3]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f7fe fc9a 	bl	80123dc <move_window>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d001      	beq.n	8013ab2 <check_fs+0x2a>
 8013aae:	2304      	movs	r3, #4
 8013ab0:	e038      	b.n	8013b24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	3338      	adds	r3, #56	; 0x38
 8013ab6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fe f9de 	bl	8011e7c <ld_word>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d001      	beq.n	8013ad0 <check_fs+0x48>
 8013acc:	2303      	movs	r3, #3
 8013ace:	e029      	b.n	8013b24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013ad6:	2be9      	cmp	r3, #233	; 0xe9
 8013ad8:	d009      	beq.n	8013aee <check_fs+0x66>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013ae0:	2beb      	cmp	r3, #235	; 0xeb
 8013ae2:	d11e      	bne.n	8013b22 <check_fs+0x9a>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013aea:	2b90      	cmp	r3, #144	; 0x90
 8013aec:	d119      	bne.n	8013b22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	3338      	adds	r3, #56	; 0x38
 8013af2:	3336      	adds	r3, #54	; 0x36
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fe f9d9 	bl	8011eac <ld_dword>
 8013afa:	4603      	mov	r3, r0
 8013afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b00:	4a0a      	ldr	r2, [pc, #40]	; (8013b2c <check_fs+0xa4>)
 8013b02:	4293      	cmp	r3, r2
 8013b04:	d101      	bne.n	8013b0a <check_fs+0x82>
 8013b06:	2300      	movs	r3, #0
 8013b08:	e00c      	b.n	8013b24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	3338      	adds	r3, #56	; 0x38
 8013b0e:	3352      	adds	r3, #82	; 0x52
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7fe f9cb 	bl	8011eac <ld_dword>
 8013b16:	4602      	mov	r2, r0
 8013b18:	4b05      	ldr	r3, [pc, #20]	; (8013b30 <check_fs+0xa8>)
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d101      	bne.n	8013b22 <check_fs+0x9a>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	e000      	b.n	8013b24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013b22:	2302      	movs	r3, #2
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	00544146 	.word	0x00544146
 8013b30:	33544146 	.word	0x33544146

08013b34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b096      	sub	sp, #88	; 0x58
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	2200      	movs	r2, #0
 8013b46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013b48:	68f8      	ldr	r0, [r7, #12]
 8013b4a:	f7ff ff59 	bl	8013a00 <get_ldnumber>
 8013b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	da01      	bge.n	8013b5a <find_volume+0x26>
 8013b56:	230b      	movs	r3, #11
 8013b58:	e234      	b.n	8013fc4 <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013b5a:	4aa8      	ldr	r2, [pc, #672]	; (8013dfc <find_volume+0x2c8>)
 8013b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d101      	bne.n	8013b6e <find_volume+0x3a>
 8013b6a:	230c      	movs	r3, #12
 8013b6c:	e22a      	b.n	8013fc4 <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013b74:	79fb      	ldrb	r3, [r7, #7]
 8013b76:	f023 0301 	bic.w	r3, r3, #1
 8013b7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d01a      	beq.n	8013bba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b86:	785b      	ldrb	r3, [r3, #1]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7fe f8d9 	bl	8011d40 <disk_status>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b98:	f003 0301 	and.w	r3, r3, #1
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d10c      	bne.n	8013bba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013ba0:	79fb      	ldrb	r3, [r7, #7]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d007      	beq.n	8013bb6 <find_volume+0x82>
 8013ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013baa:	f003 0304 	and.w	r3, r3, #4
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013bb2:	230a      	movs	r3, #10
 8013bb4:	e206      	b.n	8013fc4 <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	e204      	b.n	8013fc4 <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bc2:	b2da      	uxtb	r2, r3
 8013bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bca:	785b      	ldrb	r3, [r3, #1]
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fe f8d1 	bl	8011d74 <disk_initialize>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013bd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bdc:	f003 0301 	and.w	r3, r3, #1
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d001      	beq.n	8013be8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013be4:	2303      	movs	r3, #3
 8013be6:	e1ed      	b.n	8013fc4 <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013be8:	79fb      	ldrb	r3, [r7, #7]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d007      	beq.n	8013bfe <find_volume+0xca>
 8013bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bf2:	f003 0304 	and.w	r3, r3, #4
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013bfa:	230a      	movs	r3, #10
 8013bfc:	e1e2      	b.n	8013fc4 <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c06:	f7ff ff3f 	bl	8013a88 <check_fs>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d14b      	bne.n	8013cb0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013c18:	2300      	movs	r3, #0
 8013c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8013c1c:	e01f      	b.n	8013c5e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c20:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c26:	011b      	lsls	r3, r3, #4
 8013c28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013c2c:	4413      	add	r3, r2
 8013c2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c32:	3304      	adds	r3, #4
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d006      	beq.n	8013c48 <find_volume+0x114>
 8013c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3c:	3308      	adds	r3, #8
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fe f934 	bl	8011eac <ld_dword>
 8013c44:	4602      	mov	r2, r0
 8013c46:	e000      	b.n	8013c4a <find_volume+0x116>
 8013c48:	2200      	movs	r2, #0
 8013c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c4c:	009b      	lsls	r3, r3, #2
 8013c4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013c52:	440b      	add	r3, r1
 8013c54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8013c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c60:	2b03      	cmp	r3, #3
 8013c62:	d9dc      	bls.n	8013c1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013c64:	2300      	movs	r3, #0
 8013c66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d002      	beq.n	8013c74 <find_volume+0x140>
 8013c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c70:	3b01      	subs	r3, #1
 8013c72:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013c82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d005      	beq.n	8013c96 <find_volume+0x162>
 8013c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c8e:	f7ff fefb 	bl	8013a88 <check_fs>
 8013c92:	4603      	mov	r3, r0
 8013c94:	e000      	b.n	8013c98 <find_volume+0x164>
 8013c96:	2303      	movs	r3, #3
 8013c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d905      	bls.n	8013cb0 <find_volume+0x17c>
 8013ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8013caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cac:	2b03      	cmp	r3, #3
 8013cae:	d9e1      	bls.n	8013c74 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cb4:	2b04      	cmp	r3, #4
 8013cb6:	d101      	bne.n	8013cbc <find_volume+0x188>
 8013cb8:	2301      	movs	r3, #1
 8013cba:	e183      	b.n	8013fc4 <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d901      	bls.n	8013cc8 <find_volume+0x194>
 8013cc4:	230d      	movs	r3, #13
 8013cc6:	e17d      	b.n	8013fc4 <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cca:	3338      	adds	r3, #56	; 0x38
 8013ccc:	330b      	adds	r3, #11
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fe f8d4 	bl	8011e7c <ld_word>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cda:	d001      	beq.n	8013ce0 <find_volume+0x1ac>
 8013cdc:	230d      	movs	r3, #13
 8013cde:	e171      	b.n	8013fc4 <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce2:	3338      	adds	r3, #56	; 0x38
 8013ce4:	3316      	adds	r3, #22
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7fe f8c8 	bl	8011e7c <ld_word>
 8013cec:	4603      	mov	r3, r0
 8013cee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d106      	bne.n	8013d04 <find_volume+0x1d0>
 8013cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cf8:	3338      	adds	r3, #56	; 0x38
 8013cfa:	3324      	adds	r3, #36	; 0x24
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fe f8d5 	bl	8011eac <ld_dword>
 8013d02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d16:	789b      	ldrb	r3, [r3, #2]
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d005      	beq.n	8013d28 <find_volume+0x1f4>
 8013d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1e:	789b      	ldrb	r3, [r3, #2]
 8013d20:	2b02      	cmp	r3, #2
 8013d22:	d001      	beq.n	8013d28 <find_volume+0x1f4>
 8013d24:	230d      	movs	r3, #13
 8013d26:	e14d      	b.n	8013fc4 <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2a:	789b      	ldrb	r3, [r3, #2]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d30:	fb02 f303 	mul.w	r3, r2, r3
 8013d34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d44:	895b      	ldrh	r3, [r3, #10]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d008      	beq.n	8013d5c <find_volume+0x228>
 8013d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d4c:	895b      	ldrh	r3, [r3, #10]
 8013d4e:	461a      	mov	r2, r3
 8013d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d52:	895b      	ldrh	r3, [r3, #10]
 8013d54:	3b01      	subs	r3, #1
 8013d56:	4013      	ands	r3, r2
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <find_volume+0x22c>
 8013d5c:	230d      	movs	r3, #13
 8013d5e:	e131      	b.n	8013fc4 <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d62:	3338      	adds	r3, #56	; 0x38
 8013d64:	3311      	adds	r3, #17
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe f888 	bl	8011e7c <ld_word>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	461a      	mov	r2, r3
 8013d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d76:	891b      	ldrh	r3, [r3, #8]
 8013d78:	f003 030f 	and.w	r3, r3, #15
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d001      	beq.n	8013d86 <find_volume+0x252>
 8013d82:	230d      	movs	r3, #13
 8013d84:	e11e      	b.n	8013fc4 <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d88:	3338      	adds	r3, #56	; 0x38
 8013d8a:	3313      	adds	r3, #19
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7fe f875 	bl	8011e7c <ld_word>
 8013d92:	4603      	mov	r3, r0
 8013d94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d106      	bne.n	8013daa <find_volume+0x276>
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	3338      	adds	r3, #56	; 0x38
 8013da0:	3320      	adds	r3, #32
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7fe f882 	bl	8011eac <ld_dword>
 8013da8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dac:	3338      	adds	r3, #56	; 0x38
 8013dae:	330e      	adds	r3, #14
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe f863 	bl	8011e7c <ld_word>
 8013db6:	4603      	mov	r3, r0
 8013db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d101      	bne.n	8013dc4 <find_volume+0x290>
 8013dc0:	230d      	movs	r3, #13
 8013dc2:	e0ff      	b.n	8013fc4 <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013dc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dc8:	4413      	add	r3, r2
 8013dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dcc:	8912      	ldrh	r2, [r2, #8]
 8013dce:	0912      	lsrs	r2, r2, #4
 8013dd0:	b292      	uxth	r2, r2
 8013dd2:	4413      	add	r3, r2
 8013dd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d201      	bcs.n	8013de2 <find_volume+0x2ae>
 8013dde:	230d      	movs	r3, #13
 8013de0:	e0f0      	b.n	8013fc4 <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dea:	8952      	ldrh	r2, [r2, #10]
 8013dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8013df0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d103      	bne.n	8013e00 <find_volume+0x2cc>
 8013df8:	230d      	movs	r3, #13
 8013dfa:	e0e3      	b.n	8013fc4 <find_volume+0x490>
 8013dfc:	20000bec 	.word	0x20000bec
		fmt = FS_FAT32;
 8013e00:	2303      	movs	r3, #3
 8013e02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e08:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d802      	bhi.n	8013e16 <find_volume+0x2e2>
 8013e10:	2302      	movs	r3, #2
 8013e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e18:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d802      	bhi.n	8013e26 <find_volume+0x2f2>
 8013e20:	2301      	movs	r3, #1
 8013e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e28:	1c9a      	adds	r2, r3, #2
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e32:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013e34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e38:	441a      	add	r2, r3
 8013e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e42:	441a      	add	r2, r3
 8013e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e46:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8013e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e4c:	2b03      	cmp	r3, #3
 8013e4e:	d11e      	bne.n	8013e8e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	3338      	adds	r3, #56	; 0x38
 8013e54:	332a      	adds	r3, #42	; 0x2a
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fe f810 	bl	8011e7c <ld_word>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d001      	beq.n	8013e66 <find_volume+0x332>
 8013e62:	230d      	movs	r3, #13
 8013e64:	e0ae      	b.n	8013fc4 <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e68:	891b      	ldrh	r3, [r3, #8]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d001      	beq.n	8013e72 <find_volume+0x33e>
 8013e6e:	230d      	movs	r3, #13
 8013e70:	e0a8      	b.n	8013fc4 <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e74:	3338      	adds	r3, #56	; 0x38
 8013e76:	332c      	adds	r3, #44	; 0x2c
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fe f817 	bl	8011eac <ld_dword>
 8013e7e:	4602      	mov	r2, r0
 8013e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e82:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e86:	69db      	ldr	r3, [r3, #28]
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8013e8c:	e01f      	b.n	8013ece <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e90:	891b      	ldrh	r3, [r3, #8]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d101      	bne.n	8013e9a <find_volume+0x366>
 8013e96:	230d      	movs	r3, #13
 8013e98:	e094      	b.n	8013fc4 <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ea0:	441a      	add	r2, r3
 8013ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013eaa:	2b02      	cmp	r3, #2
 8013eac:	d103      	bne.n	8013eb6 <find_volume+0x382>
 8013eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb0:	69db      	ldr	r3, [r3, #28]
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	e00a      	b.n	8013ecc <find_volume+0x398>
 8013eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb8:	69da      	ldr	r2, [r3, #28]
 8013eba:	4613      	mov	r3, r2
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	4413      	add	r3, r2
 8013ec0:	085a      	lsrs	r2, r3, #1
 8013ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec4:	69db      	ldr	r3, [r3, #28]
 8013ec6:	f003 0301 	and.w	r3, r3, #1
 8013eca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013ecc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ed0:	6a1a      	ldr	r2, [r3, #32]
 8013ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ed4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013ed8:	0a5b      	lsrs	r3, r3, #9
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d201      	bcs.n	8013ee2 <find_volume+0x3ae>
 8013ede:	230d      	movs	r3, #13
 8013ee0:	e070      	b.n	8013fc4 <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee8:	615a      	str	r2, [r3, #20]
 8013eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eec:	695a      	ldr	r2, [r3, #20]
 8013eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef4:	2280      	movs	r2, #128	; 0x80
 8013ef6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	d149      	bne.n	8013f94 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	3338      	adds	r3, #56	; 0x38
 8013f04:	3330      	adds	r3, #48	; 0x30
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fd ffb8 	bl	8011e7c <ld_word>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d140      	bne.n	8013f94 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f14:	3301      	adds	r3, #1
 8013f16:	4619      	mov	r1, r3
 8013f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f1a:	f7fe fa5f 	bl	80123dc <move_window>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d137      	bne.n	8013f94 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f26:	2200      	movs	r2, #0
 8013f28:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2c:	3338      	adds	r3, #56	; 0x38
 8013f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7fd ffa2 	bl	8011e7c <ld_word>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d127      	bne.n	8013f94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f46:	3338      	adds	r3, #56	; 0x38
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7fd ffaf 	bl	8011eac <ld_dword>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	4b1e      	ldr	r3, [pc, #120]	; (8013fcc <find_volume+0x498>)
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d11e      	bne.n	8013f94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f58:	3338      	adds	r3, #56	; 0x38
 8013f5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fd ffa4 	bl	8011eac <ld_dword>
 8013f64:	4602      	mov	r2, r0
 8013f66:	4b1a      	ldr	r3, [pc, #104]	; (8013fd0 <find_volume+0x49c>)
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d113      	bne.n	8013f94 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6e:	3338      	adds	r3, #56	; 0x38
 8013f70:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fd ff99 	bl	8011eac <ld_dword>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f82:	3338      	adds	r3, #56	; 0x38
 8013f84:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fd ff8f 	bl	8011eac <ld_dword>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f92:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013f9a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013f9c:	4b0d      	ldr	r3, [pc, #52]	; (8013fd4 <find_volume+0x4a0>)
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	4b0b      	ldr	r3, [pc, #44]	; (8013fd4 <find_volume+0x4a0>)
 8013fa6:	801a      	strh	r2, [r3, #0]
 8013fa8:	4b0a      	ldr	r3, [pc, #40]	; (8013fd4 <find_volume+0x4a0>)
 8013faa:	881a      	ldrh	r2, [r3, #0]
 8013fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb2:	4a09      	ldr	r2, [pc, #36]	; (8013fd8 <find_volume+0x4a4>)
 8013fb4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb8:	2200      	movs	r2, #0
 8013fba:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013fbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013fbe:	f7fe f9a5 	bl	801230c <clear_lock>
#endif
	return FR_OK;
 8013fc2:	2300      	movs	r3, #0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3758      	adds	r7, #88	; 0x58
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	41615252 	.word	0x41615252
 8013fd0:	61417272 	.word	0x61417272
 8013fd4:	20000bf0 	.word	0x20000bf0
 8013fd8:	20000c14 	.word	0x20000c14

08013fdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013fe6:	2309      	movs	r3, #9
 8013fe8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d01c      	beq.n	801402a <validate+0x4e>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d018      	beq.n	801402a <validate+0x4e>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d013      	beq.n	801402a <validate+0x4e>
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	889a      	ldrh	r2, [r3, #4]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	88db      	ldrh	r3, [r3, #6]
 801400c:	429a      	cmp	r2, r3
 801400e:	d10c      	bne.n	801402a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	785b      	ldrb	r3, [r3, #1]
 8014016:	4618      	mov	r0, r3
 8014018:	f7fd fe92 	bl	8011d40 <disk_status>
 801401c:	4603      	mov	r3, r0
 801401e:	f003 0301 	and.w	r3, r3, #1
 8014022:	2b00      	cmp	r3, #0
 8014024:	d101      	bne.n	801402a <validate+0x4e>
			res = FR_OK;
 8014026:	2300      	movs	r3, #0
 8014028:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d102      	bne.n	8014036 <validate+0x5a>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	e000      	b.n	8014038 <validate+0x5c>
 8014036:	2300      	movs	r3, #0
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	6013      	str	r3, [r2, #0]
	return res;
 801403c:	7bfb      	ldrb	r3, [r7, #15]
}
 801403e:	4618      	mov	r0, r3
 8014040:	3710      	adds	r7, #16
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
	...

08014048 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b088      	sub	sp, #32
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	4613      	mov	r3, r2
 8014054:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801405a:	f107 0310 	add.w	r3, r7, #16
 801405e:	4618      	mov	r0, r3
 8014060:	f7ff fcce 	bl	8013a00 <get_ldnumber>
 8014064:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	2b00      	cmp	r3, #0
 801406a:	da01      	bge.n	8014070 <f_mount+0x28>
 801406c:	230b      	movs	r3, #11
 801406e:	e02b      	b.n	80140c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014070:	4a17      	ldr	r2, [pc, #92]	; (80140d0 <f_mount+0x88>)
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014078:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801407a:	69bb      	ldr	r3, [r7, #24]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d005      	beq.n	801408c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014080:	69b8      	ldr	r0, [r7, #24]
 8014082:	f7fe f943 	bl	801230c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014086:	69bb      	ldr	r3, [r7, #24]
 8014088:	2200      	movs	r2, #0
 801408a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d002      	beq.n	8014098 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2200      	movs	r2, #0
 8014096:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	490d      	ldr	r1, [pc, #52]	; (80140d0 <f_mount+0x88>)
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <f_mount+0x66>
 80140a8:	79fb      	ldrb	r3, [r7, #7]
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	d001      	beq.n	80140b2 <f_mount+0x6a>
 80140ae:	2300      	movs	r3, #0
 80140b0:	e00a      	b.n	80140c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80140b2:	f107 010c 	add.w	r1, r7, #12
 80140b6:	f107 0308 	add.w	r3, r7, #8
 80140ba:	2200      	movs	r2, #0
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff fd39 	bl	8013b34 <find_volume>
 80140c2:	4603      	mov	r3, r0
 80140c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80140c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3720      	adds	r7, #32
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	20000bec 	.word	0x20000bec

080140d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b09a      	sub	sp, #104	; 0x68
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	60b9      	str	r1, [r7, #8]
 80140de:	4613      	mov	r3, r2
 80140e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d101      	bne.n	80140ec <f_open+0x18>
 80140e8:	2309      	movs	r3, #9
 80140ea:	e1ad      	b.n	8014448 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80140ec:	79fb      	ldrb	r3, [r7, #7]
 80140ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80140f4:	79fa      	ldrb	r2, [r7, #7]
 80140f6:	f107 0114 	add.w	r1, r7, #20
 80140fa:	f107 0308 	add.w	r3, r7, #8
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff fd18 	bl	8013b34 <find_volume>
 8014104:	4603      	mov	r3, r0
 8014106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801410a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801410e:	2b00      	cmp	r3, #0
 8014110:	f040 8191 	bne.w	8014436 <f_open+0x362>
		dj.obj.fs = fs;
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014118:	68ba      	ldr	r2, [r7, #8]
 801411a:	f107 0318 	add.w	r3, r7, #24
 801411e:	4611      	mov	r1, r2
 8014120:	4618      	mov	r0, r3
 8014122:	f7ff fbdd 	bl	80138e0 <follow_path>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801412c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014130:	2b00      	cmp	r3, #0
 8014132:	d11a      	bne.n	801416a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014138:	b25b      	sxtb	r3, r3
 801413a:	2b00      	cmp	r3, #0
 801413c:	da03      	bge.n	8014146 <f_open+0x72>
				res = FR_INVALID_NAME;
 801413e:	2306      	movs	r3, #6
 8014140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014144:	e011      	b.n	801416a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014146:	79fb      	ldrb	r3, [r7, #7]
 8014148:	f023 0301 	bic.w	r3, r3, #1
 801414c:	2b00      	cmp	r3, #0
 801414e:	bf14      	ite	ne
 8014150:	2301      	movne	r3, #1
 8014152:	2300      	moveq	r3, #0
 8014154:	b2db      	uxtb	r3, r3
 8014156:	461a      	mov	r2, r3
 8014158:	f107 0318 	add.w	r3, r7, #24
 801415c:	4611      	mov	r1, r2
 801415e:	4618      	mov	r0, r3
 8014160:	f7fd ff8c 	bl	801207c <chk_lock>
 8014164:	4603      	mov	r3, r0
 8014166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801416a:	79fb      	ldrb	r3, [r7, #7]
 801416c:	f003 031c 	and.w	r3, r3, #28
 8014170:	2b00      	cmp	r3, #0
 8014172:	d07f      	beq.n	8014274 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014174:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014178:	2b00      	cmp	r3, #0
 801417a:	d017      	beq.n	80141ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801417c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014180:	2b04      	cmp	r3, #4
 8014182:	d10e      	bne.n	80141a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014184:	f7fd ffd6 	bl	8012134 <enq_lock>
 8014188:	4603      	mov	r3, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	d006      	beq.n	801419c <f_open+0xc8>
 801418e:	f107 0318 	add.w	r3, r7, #24
 8014192:	4618      	mov	r0, r3
 8014194:	f7ff f8a8 	bl	80132e8 <dir_register>
 8014198:	4603      	mov	r3, r0
 801419a:	e000      	b.n	801419e <f_open+0xca>
 801419c:	2312      	movs	r3, #18
 801419e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80141a2:	79fb      	ldrb	r3, [r7, #7]
 80141a4:	f043 0308 	orr.w	r3, r3, #8
 80141a8:	71fb      	strb	r3, [r7, #7]
 80141aa:	e010      	b.n	80141ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80141ac:	7fbb      	ldrb	r3, [r7, #30]
 80141ae:	f003 0311 	and.w	r3, r3, #17
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d003      	beq.n	80141be <f_open+0xea>
					res = FR_DENIED;
 80141b6:	2307      	movs	r3, #7
 80141b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80141bc:	e007      	b.n	80141ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80141be:	79fb      	ldrb	r3, [r7, #7]
 80141c0:	f003 0304 	and.w	r3, r3, #4
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d002      	beq.n	80141ce <f_open+0xfa>
 80141c8:	2308      	movs	r3, #8
 80141ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80141ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d168      	bne.n	80142a8 <f_open+0x1d4>
 80141d6:	79fb      	ldrb	r3, [r7, #7]
 80141d8:	f003 0308 	and.w	r3, r3, #8
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d063      	beq.n	80142a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80141e0:	f7f8 fb2a 	bl	800c838 <get_fattime>
 80141e4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80141e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e8:	330e      	adds	r3, #14
 80141ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fd fe9b 	bl	8011f28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80141f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f4:	3316      	adds	r3, #22
 80141f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fd fe95 	bl	8011f28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80141fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014200:	330b      	adds	r3, #11
 8014202:	2220      	movs	r2, #32
 8014204:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801420a:	4611      	mov	r1, r2
 801420c:	4618      	mov	r0, r3
 801420e:	f7fe fde4 	bl	8012dda <ld_clust>
 8014212:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014218:	2200      	movs	r2, #0
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe fdfc 	bl	8012e18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014222:	331c      	adds	r3, #28
 8014224:	2100      	movs	r1, #0
 8014226:	4618      	mov	r0, r3
 8014228:	f7fd fe7e 	bl	8011f28 <st_dword>
					fs->wflag = 1;
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	2201      	movs	r2, #1
 8014230:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014234:	2b00      	cmp	r3, #0
 8014236:	d037      	beq.n	80142a8 <f_open+0x1d4>
						dw = fs->winsect;
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801423c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801423e:	f107 0318 	add.w	r3, r7, #24
 8014242:	2200      	movs	r2, #0
 8014244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe fb0f 	bl	801286a <remove_chain>
 801424c:	4603      	mov	r3, r0
 801424e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014256:	2b00      	cmp	r3, #0
 8014258:	d126      	bne.n	80142a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe f8bc 	bl	80123dc <move_window>
 8014264:	4603      	mov	r3, r0
 8014266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801426e:	3a01      	subs	r2, #1
 8014270:	611a      	str	r2, [r3, #16]
 8014272:	e019      	b.n	80142a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014278:	2b00      	cmp	r3, #0
 801427a:	d115      	bne.n	80142a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801427c:	7fbb      	ldrb	r3, [r7, #30]
 801427e:	f003 0310 	and.w	r3, r3, #16
 8014282:	2b00      	cmp	r3, #0
 8014284:	d003      	beq.n	801428e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014286:	2304      	movs	r3, #4
 8014288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801428c:	e00c      	b.n	80142a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801428e:	79fb      	ldrb	r3, [r7, #7]
 8014290:	f003 0302 	and.w	r3, r3, #2
 8014294:	2b00      	cmp	r3, #0
 8014296:	d007      	beq.n	80142a8 <f_open+0x1d4>
 8014298:	7fbb      	ldrb	r3, [r7, #30]
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d002      	beq.n	80142a8 <f_open+0x1d4>
						res = FR_DENIED;
 80142a2:	2307      	movs	r3, #7
 80142a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80142a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d128      	bne.n	8014302 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80142b0:	79fb      	ldrb	r3, [r7, #7]
 80142b2:	f003 0308 	and.w	r3, r3, #8
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d003      	beq.n	80142c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80142ba:	79fb      	ldrb	r3, [r7, #7]
 80142bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80142ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80142d0:	79fb      	ldrb	r3, [r7, #7]
 80142d2:	f023 0301 	bic.w	r3, r3, #1
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	bf14      	ite	ne
 80142da:	2301      	movne	r3, #1
 80142dc:	2300      	moveq	r3, #0
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	461a      	mov	r2, r3
 80142e2:	f107 0318 	add.w	r3, r7, #24
 80142e6:	4611      	mov	r1, r2
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fd ff45 	bl	8012178 <inc_lock>
 80142ee:	4602      	mov	r2, r0
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	691b      	ldr	r3, [r3, #16]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d102      	bne.n	8014302 <f_open+0x22e>
 80142fc:	2302      	movs	r3, #2
 80142fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014302:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014306:	2b00      	cmp	r3, #0
 8014308:	f040 8095 	bne.w	8014436 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014310:	4611      	mov	r1, r2
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe fd61 	bl	8012dda <ld_clust>
 8014318:	4602      	mov	r2, r0
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014320:	331c      	adds	r3, #28
 8014322:	4618      	mov	r0, r3
 8014324:	f7fd fdc2 	bl	8011eac <ld_dword>
 8014328:	4602      	mov	r2, r0
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2200      	movs	r2, #0
 8014332:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014334:	697a      	ldr	r2, [r7, #20]
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	88da      	ldrh	r2, [r3, #6]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	79fa      	ldrb	r2, [r7, #7]
 8014346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2200      	movs	r2, #0
 801434c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	2200      	movs	r2, #0
 8014352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2200      	movs	r2, #0
 8014358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	3330      	adds	r3, #48	; 0x30
 801435e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014362:	2100      	movs	r1, #0
 8014364:	4618      	mov	r0, r3
 8014366:	f7fd fe2c 	bl	8011fc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801436a:	79fb      	ldrb	r3, [r7, #7]
 801436c:	f003 0320 	and.w	r3, r3, #32
 8014370:	2b00      	cmp	r3, #0
 8014372:	d060      	beq.n	8014436 <f_open+0x362>
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d05c      	beq.n	8014436 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	68da      	ldr	r2, [r3, #12]
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	895b      	ldrh	r3, [r3, #10]
 8014388:	025b      	lsls	r3, r3, #9
 801438a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014398:	e016      	b.n	80143c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fe f8d7 	bl	8012552 <get_fat>
 80143a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80143a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	d802      	bhi.n	80143b2 <f_open+0x2de>
 80143ac:	2302      	movs	r3, #2
 80143ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80143b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b8:	d102      	bne.n	80143c0 <f_open+0x2ec>
 80143ba:	2301      	movs	r3, #1
 80143bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80143c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80143c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80143c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d103      	bne.n	80143d8 <f_open+0x304>
 80143d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80143d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d8e0      	bhi.n	801439a <f_open+0x2c6>
				}
				fp->clust = clst;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80143dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80143de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d127      	bne.n	8014436 <f_open+0x362>
 80143e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d022      	beq.n	8014436 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7fe f88d 	bl	8012514 <clust2sect>
 80143fa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80143fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d103      	bne.n	801440a <f_open+0x336>
						res = FR_INT_ERR;
 8014402:	2302      	movs	r3, #2
 8014404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014408:	e015      	b.n	8014436 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801440c:	0a5a      	lsrs	r2, r3, #9
 801440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014410:	441a      	add	r2, r3
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	7858      	ldrb	r0, [r3, #1]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6a1a      	ldr	r2, [r3, #32]
 8014424:	2301      	movs	r3, #1
 8014426:	f7fd fccb 	bl	8011dc0 <disk_read>
 801442a:	4603      	mov	r3, r0
 801442c:	2b00      	cmp	r3, #0
 801442e:	d002      	beq.n	8014436 <f_open+0x362>
 8014430:	2301      	movs	r3, #1
 8014432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801443a:	2b00      	cmp	r3, #0
 801443c:	d002      	beq.n	8014444 <f_open+0x370>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2200      	movs	r2, #0
 8014442:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014448:	4618      	mov	r0, r3
 801444a:	3768      	adds	r7, #104	; 0x68
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b08c      	sub	sp, #48	; 0x30
 8014454:	af00      	add	r7, sp, #0
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	607a      	str	r2, [r7, #4]
 801445c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f107 0210 	add.w	r2, r7, #16
 801446e:	4611      	mov	r1, r2
 8014470:	4618      	mov	r0, r3
 8014472:	f7ff fdb3 	bl	8013fdc <validate>
 8014476:	4603      	mov	r3, r0
 8014478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801447c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014480:	2b00      	cmp	r3, #0
 8014482:	d107      	bne.n	8014494 <f_write+0x44>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	7d5b      	ldrb	r3, [r3, #21]
 8014488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801448c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014490:	2b00      	cmp	r3, #0
 8014492:	d002      	beq.n	801449a <f_write+0x4a>
 8014494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014498:	e14b      	b.n	8014732 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	7d1b      	ldrb	r3, [r3, #20]
 801449e:	f003 0302 	and.w	r3, r3, #2
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d101      	bne.n	80144aa <f_write+0x5a>
 80144a6:	2307      	movs	r3, #7
 80144a8:	e143      	b.n	8014732 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	699a      	ldr	r2, [r3, #24]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	441a      	add	r2, r3
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	699b      	ldr	r3, [r3, #24]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	f080 812d 	bcs.w	8014716 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	699b      	ldr	r3, [r3, #24]
 80144c0:	43db      	mvns	r3, r3
 80144c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80144c4:	e127      	b.n	8014716 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	699b      	ldr	r3, [r3, #24]
 80144ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	f040 80e3 	bne.w	801469a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	699b      	ldr	r3, [r3, #24]
 80144d8:	0a5b      	lsrs	r3, r3, #9
 80144da:	693a      	ldr	r2, [r7, #16]
 80144dc:	8952      	ldrh	r2, [r2, #10]
 80144de:	3a01      	subs	r2, #1
 80144e0:	4013      	ands	r3, r2
 80144e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80144e4:	69bb      	ldr	r3, [r7, #24]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d143      	bne.n	8014572 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	699b      	ldr	r3, [r3, #24]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d10c      	bne.n	801450c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	689b      	ldr	r3, [r3, #8]
 80144f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80144f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d11a      	bne.n	8014534 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2100      	movs	r1, #0
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe fa16 	bl	8012934 <create_chain>
 8014508:	62b8      	str	r0, [r7, #40]	; 0x28
 801450a:	e013      	b.n	8014534 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014510:	2b00      	cmp	r3, #0
 8014512:	d007      	beq.n	8014524 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	699b      	ldr	r3, [r3, #24]
 8014518:	4619      	mov	r1, r3
 801451a:	68f8      	ldr	r0, [r7, #12]
 801451c:	f7fe faa2 	bl	8012a64 <clmt_clust>
 8014520:	62b8      	str	r0, [r7, #40]	; 0x28
 8014522:	e007      	b.n	8014534 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014524:	68fa      	ldr	r2, [r7, #12]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	69db      	ldr	r3, [r3, #28]
 801452a:	4619      	mov	r1, r3
 801452c:	4610      	mov	r0, r2
 801452e:	f7fe fa01 	bl	8012934 <create_chain>
 8014532:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014536:	2b00      	cmp	r3, #0
 8014538:	f000 80f2 	beq.w	8014720 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453e:	2b01      	cmp	r3, #1
 8014540:	d104      	bne.n	801454c <f_write+0xfc>
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2202      	movs	r2, #2
 8014546:	755a      	strb	r2, [r3, #21]
 8014548:	2302      	movs	r3, #2
 801454a:	e0f2      	b.n	8014732 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014552:	d104      	bne.n	801455e <f_write+0x10e>
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2201      	movs	r2, #1
 8014558:	755a      	strb	r2, [r3, #21]
 801455a:	2301      	movs	r3, #1
 801455c:	e0e9      	b.n	8014732 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014562:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	689b      	ldr	r3, [r3, #8]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d102      	bne.n	8014572 <f_write+0x122>
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014570:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	7d1b      	ldrb	r3, [r3, #20]
 8014576:	b25b      	sxtb	r3, r3
 8014578:	2b00      	cmp	r3, #0
 801457a:	da18      	bge.n	80145ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	7858      	ldrb	r0, [r3, #1]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	6a1a      	ldr	r2, [r3, #32]
 801458a:	2301      	movs	r3, #1
 801458c:	f7fd fc38 	bl	8011e00 <disk_write>
 8014590:	4603      	mov	r3, r0
 8014592:	2b00      	cmp	r3, #0
 8014594:	d004      	beq.n	80145a0 <f_write+0x150>
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2201      	movs	r2, #1
 801459a:	755a      	strb	r2, [r3, #21]
 801459c:	2301      	movs	r3, #1
 801459e:	e0c8      	b.n	8014732 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	7d1b      	ldrb	r3, [r3, #20]
 80145a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145a8:	b2da      	uxtb	r2, r3
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80145ae:	693a      	ldr	r2, [r7, #16]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	69db      	ldr	r3, [r3, #28]
 80145b4:	4619      	mov	r1, r3
 80145b6:	4610      	mov	r0, r2
 80145b8:	f7fd ffac 	bl	8012514 <clust2sect>
 80145bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d104      	bne.n	80145ce <f_write+0x17e>
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2202      	movs	r2, #2
 80145c8:	755a      	strb	r2, [r3, #21]
 80145ca:	2302      	movs	r3, #2
 80145cc:	e0b1      	b.n	8014732 <f_write+0x2e2>
			sect += csect;
 80145ce:	697a      	ldr	r2, [r7, #20]
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	4413      	add	r3, r2
 80145d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	0a5b      	lsrs	r3, r3, #9
 80145da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80145dc:	6a3b      	ldr	r3, [r7, #32]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d03c      	beq.n	801465c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80145e2:	69ba      	ldr	r2, [r7, #24]
 80145e4:	6a3b      	ldr	r3, [r7, #32]
 80145e6:	4413      	add	r3, r2
 80145e8:	693a      	ldr	r2, [r7, #16]
 80145ea:	8952      	ldrh	r2, [r2, #10]
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d905      	bls.n	80145fc <f_write+0x1ac>
					cc = fs->csize - csect;
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	895b      	ldrh	r3, [r3, #10]
 80145f4:	461a      	mov	r2, r3
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	7858      	ldrb	r0, [r3, #1]
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	697a      	ldr	r2, [r7, #20]
 8014604:	69f9      	ldr	r1, [r7, #28]
 8014606:	f7fd fbfb 	bl	8011e00 <disk_write>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d004      	beq.n	801461a <f_write+0x1ca>
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2201      	movs	r2, #1
 8014614:	755a      	strb	r2, [r3, #21]
 8014616:	2301      	movs	r3, #1
 8014618:	e08b      	b.n	8014732 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	6a1a      	ldr	r2, [r3, #32]
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	6a3a      	ldr	r2, [r7, #32]
 8014624:	429a      	cmp	r2, r3
 8014626:	d915      	bls.n	8014654 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6a1a      	ldr	r2, [r3, #32]
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	025b      	lsls	r3, r3, #9
 8014638:	69fa      	ldr	r2, [r7, #28]
 801463a:	4413      	add	r3, r2
 801463c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014640:	4619      	mov	r1, r3
 8014642:	f7fd fc9d 	bl	8011f80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	7d1b      	ldrb	r3, [r3, #20]
 801464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801464e:	b2da      	uxtb	r2, r3
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014654:	6a3b      	ldr	r3, [r7, #32]
 8014656:	025b      	lsls	r3, r3, #9
 8014658:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801465a:	e03f      	b.n	80146dc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	6a1b      	ldr	r3, [r3, #32]
 8014660:	697a      	ldr	r2, [r7, #20]
 8014662:	429a      	cmp	r2, r3
 8014664:	d016      	beq.n	8014694 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	699a      	ldr	r2, [r3, #24]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801466e:	429a      	cmp	r2, r3
 8014670:	d210      	bcs.n	8014694 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	7858      	ldrb	r0, [r3, #1]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801467c:	2301      	movs	r3, #1
 801467e:	697a      	ldr	r2, [r7, #20]
 8014680:	f7fd fb9e 	bl	8011dc0 <disk_read>
 8014684:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014686:	2b00      	cmp	r3, #0
 8014688:	d004      	beq.n	8014694 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2201      	movs	r2, #1
 801468e:	755a      	strb	r2, [r3, #21]
 8014690:	2301      	movs	r3, #1
 8014692:	e04e      	b.n	8014732 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	697a      	ldr	r2, [r7, #20]
 8014698:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	699b      	ldr	r3, [r3, #24]
 801469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80146a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80146a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d901      	bls.n	80146b4 <f_write+0x264>
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	699b      	ldr	r3, [r3, #24]
 80146be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146c2:	4413      	add	r3, r2
 80146c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146c6:	69f9      	ldr	r1, [r7, #28]
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fd fc59 	bl	8011f80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	7d1b      	ldrb	r3, [r3, #20]
 80146d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146d6:	b2da      	uxtb	r2, r3
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80146dc:	69fa      	ldr	r2, [r7, #28]
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	4413      	add	r3, r2
 80146e2:	61fb      	str	r3, [r7, #28]
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	699a      	ldr	r2, [r3, #24]
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	441a      	add	r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	619a      	str	r2, [r3, #24]
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	68da      	ldr	r2, [r3, #12]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	699b      	ldr	r3, [r3, #24]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	bf38      	it	cc
 80146fc:	461a      	movcc	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	60da      	str	r2, [r3, #12]
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014708:	441a      	add	r2, r3
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2b00      	cmp	r3, #0
 801471a:	f47f aed4 	bne.w	80144c6 <f_write+0x76>
 801471e:	e000      	b.n	8014722 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014720:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	7d1b      	ldrb	r3, [r3, #20]
 8014726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801472a:	b2da      	uxtb	r2, r3
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3730      	adds	r7, #48	; 0x30
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}

0801473a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801473a:	b580      	push	{r7, lr}
 801473c:	b086      	sub	sp, #24
 801473e:	af00      	add	r7, sp, #0
 8014740:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f107 0208 	add.w	r2, r7, #8
 8014748:	4611      	mov	r1, r2
 801474a:	4618      	mov	r0, r3
 801474c:	f7ff fc46 	bl	8013fdc <validate>
 8014750:	4603      	mov	r3, r0
 8014752:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014754:	7dfb      	ldrb	r3, [r7, #23]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d168      	bne.n	801482c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	7d1b      	ldrb	r3, [r3, #20]
 801475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014762:	2b00      	cmp	r3, #0
 8014764:	d062      	beq.n	801482c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	7d1b      	ldrb	r3, [r3, #20]
 801476a:	b25b      	sxtb	r3, r3
 801476c:	2b00      	cmp	r3, #0
 801476e:	da15      	bge.n	801479c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	7858      	ldrb	r0, [r3, #1]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6a1a      	ldr	r2, [r3, #32]
 801477e:	2301      	movs	r3, #1
 8014780:	f7fd fb3e 	bl	8011e00 <disk_write>
 8014784:	4603      	mov	r3, r0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d001      	beq.n	801478e <f_sync+0x54>
 801478a:	2301      	movs	r3, #1
 801478c:	e04f      	b.n	801482e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	7d1b      	ldrb	r3, [r3, #20]
 8014792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014796:	b2da      	uxtb	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801479c:	f7f8 f84c 	bl	800c838 <get_fattime>
 80147a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80147a2:	68ba      	ldr	r2, [r7, #8]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a8:	4619      	mov	r1, r3
 80147aa:	4610      	mov	r0, r2
 80147ac:	f7fd fe16 	bl	80123dc <move_window>
 80147b0:	4603      	mov	r3, r0
 80147b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80147b4:	7dfb      	ldrb	r3, [r7, #23]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d138      	bne.n	801482c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	330b      	adds	r3, #11
 80147c4:	781a      	ldrb	r2, [r3, #0]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	330b      	adds	r3, #11
 80147ca:	f042 0220 	orr.w	r2, r2, #32
 80147ce:	b2d2      	uxtb	r2, r2
 80147d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6818      	ldr	r0, [r3, #0]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	689b      	ldr	r3, [r3, #8]
 80147da:	461a      	mov	r2, r3
 80147dc:	68f9      	ldr	r1, [r7, #12]
 80147de:	f7fe fb1b 	bl	8012e18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	f103 021c 	add.w	r2, r3, #28
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	4619      	mov	r1, r3
 80147ee:	4610      	mov	r0, r2
 80147f0:	f7fd fb9a 	bl	8011f28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	3316      	adds	r3, #22
 80147f8:	6939      	ldr	r1, [r7, #16]
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fd fb94 	bl	8011f28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	3312      	adds	r3, #18
 8014804:	2100      	movs	r1, #0
 8014806:	4618      	mov	r0, r3
 8014808:	f7fd fb73 	bl	8011ef2 <st_word>
					fs->wflag = 1;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2201      	movs	r2, #1
 8014810:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	4618      	mov	r0, r3
 8014816:	f7fd fe0f 	bl	8012438 <sync_fs>
 801481a:	4603      	mov	r3, r0
 801481c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	7d1b      	ldrb	r3, [r3, #20]
 8014822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014826:	b2da      	uxtb	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801482c:	7dfb      	ldrb	r3, [r7, #23]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3718      	adds	r7, #24
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}

08014836 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014836:	b580      	push	{r7, lr}
 8014838:	b084      	sub	sp, #16
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f7ff ff7b 	bl	801473a <f_sync>
 8014844:	4603      	mov	r3, r0
 8014846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014848:	7bfb      	ldrb	r3, [r7, #15]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d118      	bne.n	8014880 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f107 0208 	add.w	r2, r7, #8
 8014854:	4611      	mov	r1, r2
 8014856:	4618      	mov	r0, r3
 8014858:	f7ff fbc0 	bl	8013fdc <validate>
 801485c:	4603      	mov	r3, r0
 801485e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014860:	7bfb      	ldrb	r3, [r7, #15]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d10c      	bne.n	8014880 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	691b      	ldr	r3, [r3, #16]
 801486a:	4618      	mov	r0, r3
 801486c:	f7fd fd12 	bl	8012294 <dec_lock>
 8014870:	4603      	mov	r3, r0
 8014872:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014874:	7bfb      	ldrb	r3, [r7, #15]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d102      	bne.n	8014880 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2200      	movs	r2, #0
 801487e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014880:	7bfb      	ldrb	r3, [r7, #15]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3710      	adds	r7, #16
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}

0801488a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801488a:	b590      	push	{r4, r7, lr}
 801488c:	b093      	sub	sp, #76	; 0x4c
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014892:	f107 010c 	add.w	r1, r7, #12
 8014896:	1d3b      	adds	r3, r7, #4
 8014898:	2200      	movs	r2, #0
 801489a:	4618      	mov	r0, r3
 801489c:	f7ff f94a 	bl	8013b34 <find_volume>
 80148a0:	4603      	mov	r3, r0
 80148a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80148a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d131      	bne.n	8014912 <f_chdir+0x88>
		dj.obj.fs = fs;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	f107 0310 	add.w	r3, r7, #16
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7ff f810 	bl	80138e0 <follow_path>
 80148c0:	4603      	mov	r3, r0
 80148c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80148c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d11a      	bne.n	8014904 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80148ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148d2:	b25b      	sxtb	r3, r3
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	da03      	bge.n	80148e0 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	69ba      	ldr	r2, [r7, #24]
 80148dc:	619a      	str	r2, [r3, #24]
 80148de:	e011      	b.n	8014904 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80148e0:	7dbb      	ldrb	r3, [r7, #22]
 80148e2:	f003 0310 	and.w	r3, r3, #16
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d009      	beq.n	80148fe <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148ee:	68fc      	ldr	r4, [r7, #12]
 80148f0:	4611      	mov	r1, r2
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fe fa71 	bl	8012dda <ld_clust>
 80148f8:	4603      	mov	r3, r0
 80148fa:	61a3      	str	r3, [r4, #24]
 80148fc:	e002      	b.n	8014904 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80148fe:	2305      	movs	r3, #5
 8014900:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014908:	2b04      	cmp	r3, #4
 801490a:	d102      	bne.n	8014912 <f_chdir+0x88>
 801490c:	2305      	movs	r3, #5
 801490e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8014912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014916:	4618      	mov	r0, r3
 8014918:	374c      	adds	r7, #76	; 0x4c
 801491a:	46bd      	mov	sp, r7
 801491c:	bd90      	pop	{r4, r7, pc}

0801491e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801491e:	b580      	push	{r7, lr}
 8014920:	b086      	sub	sp, #24
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
 8014926:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d101      	bne.n	8014932 <f_opendir+0x14>
 801492e:	2309      	movs	r3, #9
 8014930:	e064      	b.n	80149fc <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014936:	f107 010c 	add.w	r1, r7, #12
 801493a:	463b      	mov	r3, r7
 801493c:	2200      	movs	r2, #0
 801493e:	4618      	mov	r0, r3
 8014940:	f7ff f8f8 	bl	8013b34 <find_volume>
 8014944:	4603      	mov	r3, r0
 8014946:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014948:	7dfb      	ldrb	r3, [r7, #23]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d14f      	bne.n	80149ee <f_opendir+0xd0>
		obj->fs = fs;
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	4619      	mov	r1, r3
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f7fe ffc1 	bl	80138e0 <follow_path>
 801495e:	4603      	mov	r3, r0
 8014960:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014962:	7dfb      	ldrb	r3, [r7, #23]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d13d      	bne.n	80149e4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801496e:	b25b      	sxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	db12      	blt.n	801499a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	799b      	ldrb	r3, [r3, #6]
 8014978:	f003 0310 	and.w	r3, r3, #16
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00a      	beq.n	8014996 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014980:	68fa      	ldr	r2, [r7, #12]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6a1b      	ldr	r3, [r3, #32]
 8014986:	4619      	mov	r1, r3
 8014988:	4610      	mov	r0, r2
 801498a:	f7fe fa26 	bl	8012dda <ld_clust>
 801498e:	4602      	mov	r2, r0
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	609a      	str	r2, [r3, #8]
 8014994:	e001      	b.n	801499a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014996:	2305      	movs	r3, #5
 8014998:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d121      	bne.n	80149e4 <f_opendir+0xc6>
				obj->id = fs->id;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	88da      	ldrh	r2, [r3, #6]
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80149a8:	2100      	movs	r1, #0
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fe f88e 	bl	8012acc <dir_sdi>
 80149b0:	4603      	mov	r3, r0
 80149b2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d114      	bne.n	80149e4 <f_opendir+0xc6>
					if (obj->sclust) {
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	689b      	ldr	r3, [r3, #8]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00d      	beq.n	80149de <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80149c2:	2100      	movs	r1, #0
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7fd fbd7 	bl	8012178 <inc_lock>
 80149ca:	4602      	mov	r2, r0
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	691b      	ldr	r3, [r3, #16]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d105      	bne.n	80149e4 <f_opendir+0xc6>
 80149d8:	2312      	movs	r3, #18
 80149da:	75fb      	strb	r3, [r7, #23]
 80149dc:	e002      	b.n	80149e4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2200      	movs	r2, #0
 80149e2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80149e4:	7dfb      	ldrb	r3, [r7, #23]
 80149e6:	2b04      	cmp	r3, #4
 80149e8:	d101      	bne.n	80149ee <f_opendir+0xd0>
 80149ea:	2305      	movs	r3, #5
 80149ec:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80149ee:	7dfb      	ldrb	r3, [r7, #23]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d002      	beq.n	80149fa <f_opendir+0xdc>
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2200      	movs	r2, #0
 80149f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3718      	adds	r7, #24
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f107 0208 	add.w	r2, r7, #8
 8014a12:	4611      	mov	r1, r2
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff fae1 	bl	8013fdc <validate>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014a1e:	7bfb      	ldrb	r3, [r7, #15]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d110      	bne.n	8014a46 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d006      	beq.n	8014a3a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	691b      	ldr	r3, [r3, #16]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7fd fc2f 	bl	8012294 <dec_lock>
 8014a36:	4603      	mov	r3, r0
 8014a38:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014a3a:	7bfb      	ldrb	r3, [r7, #15]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d102      	bne.n	8014a46 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2200      	movs	r2, #0
 8014a44:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3710      	adds	r7, #16
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}

08014a50 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b098      	sub	sp, #96	; 0x60
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014a58:	f107 010c 	add.w	r1, r7, #12
 8014a5c:	1d3b      	adds	r3, r7, #4
 8014a5e:	2202      	movs	r2, #2
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7ff f867 	bl	8013b34 <find_volume>
 8014a66:	4603      	mov	r3, r0
 8014a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f040 80f9 	bne.w	8014c6c <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	f107 0310 	add.w	r3, r7, #16
 8014a80:	4611      	mov	r1, r2
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7fe ff2c 	bl	80138e0 <follow_path>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d102      	bne.n	8014a9c <f_mkdir+0x4c>
 8014a96:	2308      	movs	r3, #8
 8014a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014aa0:	2b04      	cmp	r3, #4
 8014aa2:	d108      	bne.n	8014ab6 <f_mkdir+0x66>
 8014aa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014aa8:	f003 0320 	and.w	r3, r3, #32
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d002      	beq.n	8014ab6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014ab0:	2306      	movs	r3, #6
 8014ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014aba:	2b04      	cmp	r3, #4
 8014abc:	f040 80d6 	bne.w	8014c6c <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014ac0:	f107 0310 	add.w	r3, r7, #16
 8014ac4:	2100      	movs	r1, #0
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fd ff34 	bl	8012934 <create_chain>
 8014acc:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	895b      	ldrh	r3, [r3, #10]
 8014ad2:	025b      	lsls	r3, r3, #9
 8014ad4:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <f_mkdir+0x98>
 8014ae2:	2307      	movs	r3, #7
 8014ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8014ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	d102      	bne.n	8014af4 <f_mkdir+0xa4>
 8014aee:	2302      	movs	r3, #2
 8014af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014afa:	d102      	bne.n	8014b02 <f_mkdir+0xb2>
 8014afc:	2301      	movs	r3, #1
 8014afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d106      	bne.n	8014b18 <f_mkdir+0xc8>
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7fd fc21 	bl	8012354 <sync_window>
 8014b12:	4603      	mov	r3, r0
 8014b14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8014b18:	f7f7 fe8e 	bl	800c838 <get_fattime>
 8014b1c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d16a      	bne.n	8014bfc <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7fd fcf2 	bl	8012514 <clust2sect>
 8014b30:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3338      	adds	r3, #56	; 0x38
 8014b36:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8014b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b40:	f7fd fa3f 	bl	8011fc2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014b44:	220b      	movs	r2, #11
 8014b46:	2120      	movs	r1, #32
 8014b48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b4a:	f7fd fa3a 	bl	8011fc2 <mem_set>
					dir[DIR_Name] = '.';
 8014b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b50:	222e      	movs	r2, #46	; 0x2e
 8014b52:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b56:	330b      	adds	r3, #11
 8014b58:	2210      	movs	r2, #16
 8014b5a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b5e:	3316      	adds	r3, #22
 8014b60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7fd f9e0 	bl	8011f28 <st_dword>
					st_clust(fs, dir, dcl);
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe f952 	bl	8012e18 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b76:	3320      	adds	r3, #32
 8014b78:	2220      	movs	r2, #32
 8014b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fd f9ff 	bl	8011f80 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b84:	3321      	adds	r3, #33	; 0x21
 8014b86:	222e      	movs	r2, #46	; 0x2e
 8014b88:	701a      	strb	r2, [r3, #0]
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	2b03      	cmp	r3, #3
 8014b94:	d106      	bne.n	8014ba4 <f_mkdir+0x154>
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d101      	bne.n	8014ba4 <f_mkdir+0x154>
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8014ba4:	68f8      	ldr	r0, [r7, #12]
 8014ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ba8:	3320      	adds	r3, #32
 8014baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bac:	4619      	mov	r1, r3
 8014bae:	f7fe f933 	bl	8012e18 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	895b      	ldrh	r3, [r3, #10]
 8014bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8014bb8:	e01b      	b.n	8014bf2 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8014bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bbc:	1c5a      	adds	r2, r3, #1
 8014bbe:	657a      	str	r2, [r7, #84]	; 0x54
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fd fbc1 	bl	8012354 <sync_window>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8014bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d10c      	bne.n	8014bfa <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8014be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014be4:	2100      	movs	r1, #0
 8014be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014be8:	f7fd f9eb 	bl	8011fc2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014bee:	3b01      	subs	r3, #1
 8014bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8014bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d1e0      	bne.n	8014bba <f_mkdir+0x16a>
 8014bf8:	e000      	b.n	8014bfc <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8014bfa:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d107      	bne.n	8014c14 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014c04:	f107 0310 	add.w	r3, r7, #16
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fe fb6d 	bl	80132e8 <dir_register>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8014c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d120      	bne.n	8014c5e <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c22:	3316      	adds	r3, #22
 8014c24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fd f97e 	bl	8011f28 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fe f8f0 	bl	8012e18 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c3a:	330b      	adds	r3, #11
 8014c3c:	2210      	movs	r2, #16
 8014c3e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2201      	movs	r2, #1
 8014c44:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d10e      	bne.n	8014c6c <f_mkdir+0x21c>
					res = sync_fs(fs);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fd fbf1 	bl	8012438 <sync_fs>
 8014c56:	4603      	mov	r3, r0
 8014c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c5c:	e006      	b.n	8014c6c <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014c5e:	f107 0310 	add.w	r3, r7, #16
 8014c62:	2200      	movs	r2, #0
 8014c64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fd fdff 	bl	801286a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3760      	adds	r7, #96	; 0x60
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8014c78:	b590      	push	{r4, r7, lr}
 8014c7a:	b09d      	sub	sp, #116	; 0x74
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	607a      	str	r2, [r7, #4]
 8014c82:	603b      	str	r3, [r7, #0]
 8014c84:	460b      	mov	r3, r1
 8014c86:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8014c88:	2301      	movs	r3, #1
 8014c8a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c90:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014c92:	f107 030c 	add.w	r3, r7, #12
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fe feb2 	bl	8013a00 <get_ldnumber>
 8014c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	da02      	bge.n	8014caa <f_mkfs+0x32>
 8014ca4:	230b      	movs	r3, #11
 8014ca6:	f000 bc0d 	b.w	80154c4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014caa:	4a94      	ldr	r2, [pc, #592]	; (8014efc <f_mkfs+0x284>)
 8014cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d005      	beq.n	8014cc2 <f_mkfs+0x4a>
 8014cb6:	4a91      	ldr	r2, [pc, #580]	; (8014efc <f_mkfs+0x284>)
 8014cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014cc8:	2300      	movs	r3, #0
 8014cca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014cce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7fd f84e 	bl	8011d74 <disk_initialize>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014cde:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014ce2:	f003 0301 	and.w	r3, r3, #1
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d001      	beq.n	8014cee <f_mkfs+0x76>
 8014cea:	2303      	movs	r3, #3
 8014cec:	e3ea      	b.n	80154c4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014cee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014cf2:	f003 0304 	and.w	r3, r3, #4
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d001      	beq.n	8014cfe <f_mkfs+0x86>
 8014cfa:	230a      	movs	r3, #10
 8014cfc:	e3e2      	b.n	80154c4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014cfe:	f107 0214 	add.w	r2, r7, #20
 8014d02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014d06:	2103      	movs	r1, #3
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fd f899 	bl	8011e40 <disk_ioctl>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10c      	bne.n	8014d2e <f_mkfs+0xb6>
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d009      	beq.n	8014d2e <f_mkfs+0xb6>
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d20:	d805      	bhi.n	8014d2e <f_mkfs+0xb6>
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	1e5a      	subs	r2, r3, #1
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	4013      	ands	r3, r2
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <f_mkfs+0xba>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d36:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d003      	beq.n	8014d46 <f_mkfs+0xce>
 8014d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d309      	bcc.n	8014d5a <f_mkfs+0xe2>
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014d4c:	d805      	bhi.n	8014d5a <f_mkfs+0xe2>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	1e5a      	subs	r2, r3, #1
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	4013      	ands	r3, r2
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d001      	beq.n	8014d5e <f_mkfs+0xe6>
 8014d5a:	2313      	movs	r3, #19
 8014d5c:	e3b2      	b.n	80154c4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014d5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d66:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8014d78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d7c:	fb02 f303 	mul.w	r3, r2, r3
 8014d80:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d101      	bne.n	8014d8c <f_mkfs+0x114>
 8014d88:	230e      	movs	r3, #14
 8014d8a:	e39b      	b.n	80154c4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014d8c:	f107 0210 	add.w	r2, r7, #16
 8014d90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014d94:	2101      	movs	r1, #1
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fd f852 	bl	8011e40 <disk_ioctl>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d001      	beq.n	8014da6 <f_mkfs+0x12e>
 8014da2:	2301      	movs	r3, #1
 8014da4:	e38e      	b.n	80154c4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014da6:	7afb      	ldrb	r3, [r7, #11]
 8014da8:	f003 0308 	and.w	r3, r3, #8
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d001      	beq.n	8014db4 <f_mkfs+0x13c>
 8014db0:	2300      	movs	r3, #0
 8014db2:	e000      	b.n	8014db6 <f_mkfs+0x13e>
 8014db4:	233f      	movs	r3, #63	; 0x3f
 8014db6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d901      	bls.n	8014dc4 <f_mkfs+0x14c>
 8014dc0:	230e      	movs	r3, #14
 8014dc2:	e37f      	b.n	80154c4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014dc4:	693a      	ldr	r2, [r7, #16]
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	2b7f      	cmp	r3, #127	; 0x7f
 8014dd0:	d801      	bhi.n	8014dd6 <f_mkfs+0x15e>
 8014dd2:	230e      	movs	r3, #14
 8014dd4:	e376      	b.n	80154c4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b80      	cmp	r3, #128	; 0x80
 8014dda:	d901      	bls.n	8014de0 <f_mkfs+0x168>
 8014ddc:	2313      	movs	r3, #19
 8014dde:	e371      	b.n	80154c4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014de0:	7afb      	ldrb	r3, [r7, #11]
 8014de2:	f003 0302 	and.w	r3, r3, #2
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00d      	beq.n	8014e06 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8014dea:	7afb      	ldrb	r3, [r7, #11]
 8014dec:	f003 0307 	and.w	r3, r3, #7
 8014df0:	2b02      	cmp	r3, #2
 8014df2:	d004      	beq.n	8014dfe <f_mkfs+0x186>
 8014df4:	7afb      	ldrb	r3, [r7, #11]
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d103      	bne.n	8014e06 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8014e04:	e009      	b.n	8014e1a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8014e06:	7afb      	ldrb	r3, [r7, #11]
 8014e08:	f003 0301 	and.w	r3, r3, #1
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d101      	bne.n	8014e14 <f_mkfs+0x19c>
 8014e10:	2313      	movs	r3, #19
 8014e12:	e357      	b.n	80154c4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8014e14:	2302      	movs	r3, #2
 8014e16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014e22:	2b03      	cmp	r3, #3
 8014e24:	d13c      	bne.n	8014ea0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8014e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d11b      	bne.n	8014e64 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	0c5b      	lsrs	r3, r3, #17
 8014e30:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014e32:	2300      	movs	r3, #0
 8014e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e36:	2301      	movs	r3, #1
 8014e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014e3a:	e005      	b.n	8014e48 <f_mkfs+0x1d0>
 8014e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e3e:	3301      	adds	r3, #1
 8014e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e44:	005b      	lsls	r3, r3, #1
 8014e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014e48:	4a2d      	ldr	r2, [pc, #180]	; (8014f00 <f_mkfs+0x288>)
 8014e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d007      	beq.n	8014e64 <f_mkfs+0x1ec>
 8014e54:	4a2a      	ldr	r2, [pc, #168]	; (8014f00 <f_mkfs+0x288>)
 8014e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e60:	4293      	cmp	r3, r2
 8014e62:	d2eb      	bcs.n	8014e3c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014e64:	693a      	ldr	r2, [r7, #16]
 8014e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e6c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014e6e:	6a3b      	ldr	r3, [r7, #32]
 8014e70:	3302      	adds	r3, #2
 8014e72:	009a      	lsls	r2, r3, #2
 8014e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e76:	4413      	add	r3, r2
 8014e78:	1e5a      	subs	r2, r3, #1
 8014e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e80:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8014e82:	2320      	movs	r3, #32
 8014e84:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8014e86:	2300      	movs	r3, #0
 8014e88:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8014e8a:	6a3b      	ldr	r3, [r7, #32]
 8014e8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d903      	bls.n	8014e9c <f_mkfs+0x224>
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	4a1b      	ldr	r2, [pc, #108]	; (8014f04 <f_mkfs+0x28c>)
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	d952      	bls.n	8014f42 <f_mkfs+0x2ca>
 8014e9c:	230e      	movs	r3, #14
 8014e9e:	e311      	b.n	80154c4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d11b      	bne.n	8014ede <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	0b1b      	lsrs	r3, r3, #12
 8014eaa:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014eac:	2300      	movs	r3, #0
 8014eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014eb4:	e005      	b.n	8014ec2 <f_mkfs+0x24a>
 8014eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014eb8:	3301      	adds	r3, #1
 8014eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8014ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014ec2:	4a11      	ldr	r2, [pc, #68]	; (8014f08 <f_mkfs+0x290>)
 8014ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d007      	beq.n	8014ede <f_mkfs+0x266>
 8014ece:	4a0e      	ldr	r2, [pc, #56]	; (8014f08 <f_mkfs+0x290>)
 8014ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014eda:	4293      	cmp	r3, r2
 8014edc:	d2eb      	bcs.n	8014eb6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014ede:	693a      	ldr	r2, [r7, #16]
 8014ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ee6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8014ee8:	6a3b      	ldr	r3, [r7, #32]
 8014eea:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d90c      	bls.n	8014f0c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014ef2:	6a3b      	ldr	r3, [r7, #32]
 8014ef4:	3302      	adds	r3, #2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8014efa:	e012      	b.n	8014f22 <f_mkfs+0x2aa>
 8014efc:	20000bec 	.word	0x20000bec
 8014f00:	0801aa88 	.word	0x0801aa88
 8014f04:	0ffffff5 	.word	0x0ffffff5
 8014f08:	0801aa98 	.word	0x0801aa98
				} else {
					fmt = FS_FAT12;
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014f12:	6a3a      	ldr	r2, [r7, #32]
 8014f14:	4613      	mov	r3, r2
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	085b      	lsrs	r3, r3, #1
 8014f1e:	3303      	adds	r3, #3
 8014f20:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014f22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f26:	4413      	add	r3, r2
 8014f28:	1e5a      	subs	r2, r3, #1
 8014f2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f30:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8014f32:	2301      	movs	r3, #1
 8014f34:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8014f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f38:	015a      	lsls	r2, r3, #5
 8014f3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f40:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f46:	4413      	add	r3, r2
 8014f48:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8014f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f4e:	fb02 f203 	mul.w	r2, r2, r3
 8014f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f54:	4413      	add	r3, r2
 8014f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014f58:	4413      	add	r3, r2
 8014f5a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014f5c:	697a      	ldr	r2, [r7, #20]
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	4413      	add	r3, r2
 8014f62:	1e5a      	subs	r2, r3, #1
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	425b      	negs	r3, r3
 8014f68:	401a      	ands	r2, r3
 8014f6a:	69fb      	ldr	r3, [r7, #28]
 8014f6c:	1ad3      	subs	r3, r2, r3
 8014f6e:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014f70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014f74:	2b03      	cmp	r3, #3
 8014f76:	d108      	bne.n	8014f8a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8014f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f7c:	4413      	add	r3, r2
 8014f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f84:	4413      	add	r3, r2
 8014f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014f88:	e006      	b.n	8014f98 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f94:	4413      	add	r3, r2
 8014f96:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f9a:	011a      	lsls	r2, r3, #4
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	441a      	add	r2, r3
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	1ad2      	subs	r2, r2, r3
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d901      	bls.n	8014fae <f_mkfs+0x336>
 8014faa:	230e      	movs	r3, #14
 8014fac:	e28a      	b.n	80154c4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014fae:	693a      	ldr	r2, [r7, #16]
 8014fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014fb2:	1ad2      	subs	r2, r2, r3
 8014fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fb8:	fb01 f303 	mul.w	r3, r1, r3
 8014fbc:	1ad2      	subs	r2, r2, r3
 8014fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fc0:	1ad2      	subs	r2, r2, r3
 8014fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fc8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8014fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014fce:	2b03      	cmp	r3, #3
 8014fd0:	d10f      	bne.n	8014ff2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014fd2:	6a3b      	ldr	r3, [r7, #32]
 8014fd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d80a      	bhi.n	8014ff2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d105      	bne.n	8014fee <f_mkfs+0x376>
 8014fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014fe4:	085b      	lsrs	r3, r3, #1
 8014fe6:	607b      	str	r3, [r7, #4]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d144      	bne.n	8015078 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014fee:	230e      	movs	r3, #14
 8014ff0:	e268      	b.n	80154c4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014ff2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ff6:	2b02      	cmp	r3, #2
 8014ff8:	d133      	bne.n	8015062 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014ffa:	6a3b      	ldr	r3, [r7, #32]
 8014ffc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015000:	4293      	cmp	r3, r2
 8015002:	d91e      	bls.n	8015042 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d107      	bne.n	801501a <f_mkfs+0x3a2>
 801500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801500c:	005b      	lsls	r3, r3, #1
 801500e:	2b40      	cmp	r3, #64	; 0x40
 8015010:	d803      	bhi.n	801501a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	607b      	str	r3, [r7, #4]
 8015018:	e033      	b.n	8015082 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801501a:	7afb      	ldrb	r3, [r7, #11]
 801501c:	f003 0302 	and.w	r3, r3, #2
 8015020:	2b00      	cmp	r3, #0
 8015022:	d003      	beq.n	801502c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015024:	2303      	movs	r3, #3
 8015026:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801502a:	e02a      	b.n	8015082 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d105      	bne.n	801503e <f_mkfs+0x3c6>
 8015032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015034:	005b      	lsls	r3, r3, #1
 8015036:	607b      	str	r3, [r7, #4]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2b80      	cmp	r3, #128	; 0x80
 801503c:	d91e      	bls.n	801507c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801503e:	230e      	movs	r3, #14
 8015040:	e240      	b.n	80154c4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015042:	6a3b      	ldr	r3, [r7, #32]
 8015044:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015048:	4293      	cmp	r3, r2
 801504a:	d80a      	bhi.n	8015062 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d105      	bne.n	801505e <f_mkfs+0x3e6>
 8015052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015054:	005b      	lsls	r3, r3, #1
 8015056:	607b      	str	r3, [r7, #4]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b80      	cmp	r3, #128	; 0x80
 801505c:	d910      	bls.n	8015080 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801505e:	230e      	movs	r3, #14
 8015060:	e230      	b.n	80154c4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015066:	2b01      	cmp	r3, #1
 8015068:	d10c      	bne.n	8015084 <f_mkfs+0x40c>
 801506a:	6a3b      	ldr	r3, [r7, #32]
 801506c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015070:	4293      	cmp	r3, r2
 8015072:	d907      	bls.n	8015084 <f_mkfs+0x40c>
 8015074:	230e      	movs	r3, #14
 8015076:	e225      	b.n	80154c4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015078:	bf00      	nop
 801507a:	e6ce      	b.n	8014e1a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801507c:	bf00      	nop
 801507e:	e6cc      	b.n	8014e1a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015080:	bf00      	nop
			pau = au;
 8015082:	e6ca      	b.n	8014e1a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015084:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015088:	461a      	mov	r2, r3
 801508a:	2100      	movs	r1, #0
 801508c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801508e:	f7fc ff98 	bl	8011fc2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015092:	220b      	movs	r2, #11
 8015094:	49bc      	ldr	r1, [pc, #752]	; (8015388 <f_mkfs+0x710>)
 8015096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015098:	f7fc ff72 	bl	8011f80 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509e:	330b      	adds	r3, #11
 80150a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80150a2:	4611      	mov	r1, r2
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7fc ff24 	bl	8011ef2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80150aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ac:	330d      	adds	r3, #13
 80150ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80150b0:	b2d2      	uxtb	r2, r2
 80150b2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80150b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b6:	330e      	adds	r3, #14
 80150b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80150ba:	b292      	uxth	r2, r2
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fc ff17 	bl	8011ef2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80150c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c6:	3310      	adds	r3, #16
 80150c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80150ca:	b2d2      	uxtb	r2, r2
 80150cc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80150ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d0:	f103 0211 	add.w	r2, r3, #17
 80150d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80150d8:	2b03      	cmp	r3, #3
 80150da:	d002      	beq.n	80150e2 <f_mkfs+0x46a>
 80150dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150de:	b29b      	uxth	r3, r3
 80150e0:	e000      	b.n	80150e4 <f_mkfs+0x46c>
 80150e2:	2300      	movs	r3, #0
 80150e4:	4619      	mov	r1, r3
 80150e6:	4610      	mov	r0, r2
 80150e8:	f7fc ff03 	bl	8011ef2 <st_word>
		if (sz_vol < 0x10000) {
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150f2:	d208      	bcs.n	8015106 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80150f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f6:	3313      	adds	r3, #19
 80150f8:	693a      	ldr	r2, [r7, #16]
 80150fa:	b292      	uxth	r2, r2
 80150fc:	4611      	mov	r1, r2
 80150fe:	4618      	mov	r0, r3
 8015100:	f7fc fef7 	bl	8011ef2 <st_word>
 8015104:	e006      	b.n	8015114 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015108:	3320      	adds	r3, #32
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	4611      	mov	r1, r2
 801510e:	4618      	mov	r0, r3
 8015110:	f7fc ff0a 	bl	8011f28 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015116:	3315      	adds	r3, #21
 8015118:	22f8      	movs	r2, #248	; 0xf8
 801511a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511e:	3318      	adds	r3, #24
 8015120:	213f      	movs	r1, #63	; 0x3f
 8015122:	4618      	mov	r0, r3
 8015124:	f7fc fee5 	bl	8011ef2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801512a:	331a      	adds	r3, #26
 801512c:	21ff      	movs	r1, #255	; 0xff
 801512e:	4618      	mov	r0, r3
 8015130:	f7fc fedf 	bl	8011ef2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015136:	331c      	adds	r3, #28
 8015138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801513a:	4618      	mov	r0, r3
 801513c:	f7fc fef4 	bl	8011f28 <st_dword>
		if (fmt == FS_FAT32) {
 8015140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015144:	2b03      	cmp	r3, #3
 8015146:	d131      	bne.n	80151ac <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801514e:	f7f7 fb73 	bl	800c838 <get_fattime>
 8015152:	4603      	mov	r3, r0
 8015154:	4619      	mov	r1, r3
 8015156:	4620      	mov	r0, r4
 8015158:	f7fc fee6 	bl	8011f28 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801515e:	3324      	adds	r3, #36	; 0x24
 8015160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015162:	4618      	mov	r0, r3
 8015164:	f7fc fee0 	bl	8011f28 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516a:	332c      	adds	r3, #44	; 0x2c
 801516c:	2102      	movs	r1, #2
 801516e:	4618      	mov	r0, r3
 8015170:	f7fc feda 	bl	8011f28 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015176:	3330      	adds	r3, #48	; 0x30
 8015178:	2101      	movs	r1, #1
 801517a:	4618      	mov	r0, r3
 801517c:	f7fc feb9 	bl	8011ef2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015182:	3332      	adds	r3, #50	; 0x32
 8015184:	2106      	movs	r1, #6
 8015186:	4618      	mov	r0, r3
 8015188:	f7fc feb3 	bl	8011ef2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518e:	3340      	adds	r3, #64	; 0x40
 8015190:	2280      	movs	r2, #128	; 0x80
 8015192:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015196:	3342      	adds	r3, #66	; 0x42
 8015198:	2229      	movs	r2, #41	; 0x29
 801519a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519e:	3347      	adds	r3, #71	; 0x47
 80151a0:	2213      	movs	r2, #19
 80151a2:	497a      	ldr	r1, [pc, #488]	; (801538c <f_mkfs+0x714>)
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7fc feeb 	bl	8011f80 <mem_cpy>
 80151aa:	e020      	b.n	80151ee <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80151ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ae:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80151b2:	f7f7 fb41 	bl	800c838 <get_fattime>
 80151b6:	4603      	mov	r3, r0
 80151b8:	4619      	mov	r1, r3
 80151ba:	4620      	mov	r0, r4
 80151bc:	f7fc feb4 	bl	8011f28 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80151c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c2:	3316      	adds	r3, #22
 80151c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80151c6:	b292      	uxth	r2, r2
 80151c8:	4611      	mov	r1, r2
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fc fe91 	bl	8011ef2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80151d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d2:	3324      	adds	r3, #36	; 0x24
 80151d4:	2280      	movs	r2, #128	; 0x80
 80151d6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80151d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151da:	3326      	adds	r3, #38	; 0x26
 80151dc:	2229      	movs	r2, #41	; 0x29
 80151de:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80151e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e2:	332b      	adds	r3, #43	; 0x2b
 80151e4:	2213      	movs	r2, #19
 80151e6:	496a      	ldr	r1, [pc, #424]	; (8015390 <f_mkfs+0x718>)
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7fc fec9 	bl	8011f80 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80151ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80151f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7fc fe7a 	bl	8011ef2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80151fe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015202:	2301      	movs	r3, #1
 8015204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015208:	f7fc fdfa 	bl	8011e00 <disk_write>
 801520c:	4603      	mov	r3, r0
 801520e:	2b00      	cmp	r3, #0
 8015210:	d001      	beq.n	8015216 <f_mkfs+0x59e>
 8015212:	2301      	movs	r3, #1
 8015214:	e156      	b.n	80154c4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8015216:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801521a:	2b03      	cmp	r3, #3
 801521c:	d140      	bne.n	80152a0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015220:	1d9a      	adds	r2, r3, #6
 8015222:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015226:	2301      	movs	r3, #1
 8015228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801522a:	f7fc fde9 	bl	8011e00 <disk_write>
			mem_set(buf, 0, ss);
 801522e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015230:	461a      	mov	r2, r3
 8015232:	2100      	movs	r1, #0
 8015234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015236:	f7fc fec4 	bl	8011fc2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801523a:	4956      	ldr	r1, [pc, #344]	; (8015394 <f_mkfs+0x71c>)
 801523c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801523e:	f7fc fe73 	bl	8011f28 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8015242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015244:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015248:	4953      	ldr	r1, [pc, #332]	; (8015398 <f_mkfs+0x720>)
 801524a:	4618      	mov	r0, r3
 801524c:	f7fc fe6c 	bl	8011f28 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015252:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015256:	6a3b      	ldr	r3, [r7, #32]
 8015258:	3b01      	subs	r3, #1
 801525a:	4619      	mov	r1, r3
 801525c:	4610      	mov	r0, r2
 801525e:	f7fc fe63 	bl	8011f28 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015264:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015268:	2102      	movs	r1, #2
 801526a:	4618      	mov	r0, r3
 801526c:	f7fc fe5c 	bl	8011f28 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015272:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015276:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801527a:	4618      	mov	r0, r3
 801527c:	f7fc fe39 	bl	8011ef2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015282:	1dda      	adds	r2, r3, #7
 8015284:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015288:	2301      	movs	r3, #1
 801528a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801528c:	f7fc fdb8 	bl	8011e00 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015292:	1c5a      	adds	r2, r3, #1
 8015294:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015298:	2301      	movs	r3, #1
 801529a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801529c:	f7fc fdb0 	bl	8011e00 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80152a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152a2:	2100      	movs	r1, #0
 80152a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a6:	f7fc fe8c 	bl	8011fc2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80152aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152ac:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80152ae:	2300      	movs	r3, #0
 80152b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80152b2:	e04b      	b.n	801534c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80152b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80152b8:	2b03      	cmp	r3, #3
 80152ba:	d113      	bne.n	80152e4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80152bc:	f06f 0107 	mvn.w	r1, #7
 80152c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152c2:	f7fc fe31 	bl	8011f28 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80152c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c8:	3304      	adds	r3, #4
 80152ca:	f04f 31ff 	mov.w	r1, #4294967295
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fc fe2a 	bl	8011f28 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80152d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d6:	3308      	adds	r3, #8
 80152d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fc fe23 	bl	8011f28 <st_dword>
 80152e2:	e00b      	b.n	80152fc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80152e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d101      	bne.n	80152f0 <f_mkfs+0x678>
 80152ec:	4b2b      	ldr	r3, [pc, #172]	; (801539c <f_mkfs+0x724>)
 80152ee:	e001      	b.n	80152f4 <f_mkfs+0x67c>
 80152f0:	f06f 0307 	mvn.w	r3, #7
 80152f4:	4619      	mov	r1, r3
 80152f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152f8:	f7fc fe16 	bl	8011f28 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80152fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152fe:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015304:	4293      	cmp	r3, r2
 8015306:	bf28      	it	cs
 8015308:	4613      	movcs	r3, r2
 801530a:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801530c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015316:	f7fc fd73 	bl	8011e00 <disk_write>
 801531a:	4603      	mov	r3, r0
 801531c:	2b00      	cmp	r3, #0
 801531e:	d001      	beq.n	8015324 <f_mkfs+0x6ac>
 8015320:	2301      	movs	r3, #1
 8015322:	e0cf      	b.n	80154c4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8015324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015326:	461a      	mov	r2, r3
 8015328:	2100      	movs	r1, #0
 801532a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801532c:	f7fc fe49 	bl	8011fc2 <mem_set>
				sect += n; nsect -= n;
 8015330:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015334:	4413      	add	r3, r2
 8015336:	66bb      	str	r3, [r7, #104]	; 0x68
 8015338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801533c:	1ad3      	subs	r3, r2, r3
 801533e:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8015340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015342:	2b00      	cmp	r3, #0
 8015344:	d1dc      	bne.n	8015300 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015348:	3301      	adds	r3, #1
 801534a:	64bb      	str	r3, [r7, #72]	; 0x48
 801534c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801534e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015350:	429a      	cmp	r2, r3
 8015352:	d3af      	bcc.n	80152b4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015358:	2b03      	cmp	r3, #3
 801535a:	d101      	bne.n	8015360 <f_mkfs+0x6e8>
 801535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801535e:	e000      	b.n	8015362 <f_mkfs+0x6ea>
 8015360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015362:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015368:	4293      	cmp	r3, r2
 801536a:	bf28      	it	cs
 801536c:	4613      	movcs	r3, r2
 801536e:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015370:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801537a:	f7fc fd41 	bl	8011e00 <disk_write>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d00d      	beq.n	80153a0 <f_mkfs+0x728>
 8015384:	2301      	movs	r3, #1
 8015386:	e09d      	b.n	80154c4 <f_mkfs+0x84c>
 8015388:	08016d3c 	.word	0x08016d3c
 801538c:	08016d48 	.word	0x08016d48
 8015390:	08016d5c 	.word	0x08016d5c
 8015394:	41615252 	.word	0x41615252
 8015398:	61417272 	.word	0x61417272
 801539c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80153a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80153a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153a4:	4413      	add	r3, r2
 80153a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80153a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80153aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153ac:	1ad3      	subs	r3, r2, r3
 80153ae:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 80153b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d1d6      	bne.n	8015364 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80153b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80153ba:	2b03      	cmp	r3, #3
 80153bc:	d103      	bne.n	80153c6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80153be:	230c      	movs	r3, #12
 80153c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80153c4:	e010      	b.n	80153e8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80153cc:	d303      	bcc.n	80153d6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80153ce:	2306      	movs	r3, #6
 80153d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80153d4:	e008      	b.n	80153e8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80153d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d101      	bne.n	80153e2 <f_mkfs+0x76a>
 80153de:	2304      	movs	r3, #4
 80153e0:	e000      	b.n	80153e4 <f_mkfs+0x76c>
 80153e2:	2301      	movs	r3, #1
 80153e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80153e8:	7afb      	ldrb	r3, [r7, #11]
 80153ea:	f003 0308 	and.w	r3, r3, #8
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d15b      	bne.n	80154aa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80153f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80153f4:	461a      	mov	r2, r3
 80153f6:	2100      	movs	r1, #0
 80153f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153fa:	f7fc fde2 	bl	8011fc2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80153fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015400:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015404:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015408:	4618      	mov	r0, r3
 801540a:	f7fc fd72 	bl	8011ef2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015410:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015414:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8015416:	69bb      	ldr	r3, [r7, #24]
 8015418:	2200      	movs	r2, #0
 801541a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801541c:	69bb      	ldr	r3, [r7, #24]
 801541e:	3301      	adds	r3, #1
 8015420:	2201      	movs	r2, #1
 8015422:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	3302      	adds	r3, #2
 8015428:	2201      	movs	r2, #1
 801542a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	3303      	adds	r3, #3
 8015430:	2200      	movs	r2, #0
 8015432:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8015434:	69bb      	ldr	r3, [r7, #24]
 8015436:	3304      	adds	r3, #4
 8015438:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801543c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801543e:	693a      	ldr	r2, [r7, #16]
 8015440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015442:	441a      	add	r2, r3
 8015444:	4b21      	ldr	r3, [pc, #132]	; (80154cc <f_mkfs+0x854>)
 8015446:	fba3 1302 	umull	r1, r3, r3, r2
 801544a:	1ad2      	subs	r2, r2, r3
 801544c:	0852      	lsrs	r2, r2, #1
 801544e:	4413      	add	r3, r2
 8015450:	0b5b      	lsrs	r3, r3, #13
 8015452:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	3305      	adds	r3, #5
 8015458:	22fe      	movs	r2, #254	; 0xfe
 801545a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 801545c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801545e:	089b      	lsrs	r3, r3, #2
 8015460:	b2da      	uxtb	r2, r3
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	3306      	adds	r3, #6
 8015466:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801546a:	b2d2      	uxtb	r2, r2
 801546c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	3307      	adds	r3, #7
 8015472:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015474:	b2d2      	uxtb	r2, r2
 8015476:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8015478:	69bb      	ldr	r3, [r7, #24]
 801547a:	3308      	adds	r3, #8
 801547c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801547e:	4618      	mov	r0, r3
 8015480:	f7fc fd52 	bl	8011f28 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	330c      	adds	r3, #12
 8015488:	693a      	ldr	r2, [r7, #16]
 801548a:	4611      	mov	r1, r2
 801548c:	4618      	mov	r0, r3
 801548e:	f7fc fd4b 	bl	8011f28 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8015492:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015496:	2301      	movs	r3, #1
 8015498:	2200      	movs	r2, #0
 801549a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801549c:	f7fc fcb0 	bl	8011e00 <disk_write>
 80154a0:	4603      	mov	r3, r0
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d001      	beq.n	80154aa <f_mkfs+0x832>
 80154a6:	2301      	movs	r3, #1
 80154a8:	e00c      	b.n	80154c4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80154aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80154ae:	2200      	movs	r2, #0
 80154b0:	2100      	movs	r1, #0
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fc fcc4 	bl	8011e40 <disk_ioctl>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d001      	beq.n	80154c2 <f_mkfs+0x84a>
 80154be:	2301      	movs	r3, #1
 80154c0:	e000      	b.n	80154c4 <f_mkfs+0x84c>

	return FR_OK;
 80154c2:	2300      	movs	r3, #0
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3774      	adds	r7, #116	; 0x74
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd90      	pop	{r4, r7, pc}
 80154cc:	0515565b 	.word	0x0515565b

080154d0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	460b      	mov	r3, r1
 80154da:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80154dc:	78fb      	ldrb	r3, [r7, #3]
 80154de:	2b0a      	cmp	r3, #10
 80154e0:	d103      	bne.n	80154ea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80154e2:	210d      	movs	r1, #13
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7ff fff3 	bl	80154d0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	db25      	blt.n	8015542 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	60fa      	str	r2, [r7, #12]
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	4413      	add	r3, r2
 8015500:	78fa      	ldrb	r2, [r7, #3]
 8015502:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	2b3c      	cmp	r3, #60	; 0x3c
 8015508:	dd12      	ble.n	8015530 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6818      	ldr	r0, [r3, #0]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f103 010c 	add.w	r1, r3, #12
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	f107 0308 	add.w	r3, r7, #8
 801551a:	f7fe ff99 	bl	8014450 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801551e:	68ba      	ldr	r2, [r7, #8]
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	429a      	cmp	r2, r3
 8015524:	d101      	bne.n	801552a <putc_bfd+0x5a>
 8015526:	2300      	movs	r3, #0
 8015528:	e001      	b.n	801552e <putc_bfd+0x5e>
 801552a:	f04f 33ff 	mov.w	r3, #4294967295
 801552e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	689b      	ldr	r3, [r3, #8]
 801553a:	1c5a      	adds	r2, r3, #1
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	609a      	str	r2, [r3, #8]
 8015540:	e000      	b.n	8015544 <putc_bfd+0x74>
	if (i < 0) return;
 8015542:	bf00      	nop
}
 8015544:	3710      	adds	r7, #16
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801554a:	b580      	push	{r7, lr}
 801554c:	b084      	sub	sp, #16
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	db17      	blt.n	801558a <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6818      	ldr	r0, [r3, #0]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f103 010c 	add.w	r1, r3, #12
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	461a      	mov	r2, r3
 801556a:	f107 030c 	add.w	r3, r7, #12
 801556e:	f7fe ff6f 	bl	8014450 <f_write>
 8015572:	4603      	mov	r3, r0
 8015574:	2b00      	cmp	r3, #0
 8015576:	d108      	bne.n	801558a <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	461a      	mov	r2, r3
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	429a      	cmp	r2, r3
 8015582:	d102      	bne.n	801558a <putc_flush+0x40>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	e001      	b.n	801558e <putc_flush+0x44>
	return EOF;
 801558a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801558e:	4618      	mov	r0, r3
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015596:	b480      	push	{r7}
 8015598:	b083      	sub	sp, #12
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
 801559e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2200      	movs	r2, #0
 80155aa:	605a      	str	r2, [r3, #4]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	685a      	ldr	r2, [r3, #4]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	609a      	str	r2, [r3, #8]
}
 80155b4:	bf00      	nop
 80155b6:	370c      	adds	r7, #12
 80155b8:	46bd      	mov	sp, r7
 80155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b096      	sub	sp, #88	; 0x58
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80155ca:	f107 030c 	add.w	r3, r7, #12
 80155ce:	6839      	ldr	r1, [r7, #0]
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7ff ffe0 	bl	8015596 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80155d6:	e009      	b.n	80155ec <f_puts+0x2c>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	1c5a      	adds	r2, r3, #1
 80155dc:	607a      	str	r2, [r7, #4]
 80155de:	781a      	ldrb	r2, [r3, #0]
 80155e0:	f107 030c 	add.w	r3, r7, #12
 80155e4:	4611      	mov	r1, r2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff ff72 	bl	80154d0 <putc_bfd>
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d1f1      	bne.n	80155d8 <f_puts+0x18>
	return putc_flush(&pb);
 80155f4:	f107 030c 	add.w	r3, r7, #12
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7ff ffa6 	bl	801554a <putc_flush>
 80155fe:	4603      	mov	r3, r0
}
 8015600:	4618      	mov	r0, r3
 8015602:	3758      	adds	r7, #88	; 0x58
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015608:	b480      	push	{r7}
 801560a:	b087      	sub	sp, #28
 801560c:	af00      	add	r7, sp, #0
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	4613      	mov	r3, r2
 8015614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015616:	2301      	movs	r3, #1
 8015618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801561a:	2300      	movs	r3, #0
 801561c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801561e:	4b1f      	ldr	r3, [pc, #124]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015620:	7a5b      	ldrb	r3, [r3, #9]
 8015622:	b2db      	uxtb	r3, r3
 8015624:	2b00      	cmp	r3, #0
 8015626:	d131      	bne.n	801568c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015628:	4b1c      	ldr	r3, [pc, #112]	; (801569c <FATFS_LinkDriverEx+0x94>)
 801562a:	7a5b      	ldrb	r3, [r3, #9]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	461a      	mov	r2, r3
 8015630:	4b1a      	ldr	r3, [pc, #104]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015632:	2100      	movs	r1, #0
 8015634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015636:	4b19      	ldr	r3, [pc, #100]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015638:	7a5b      	ldrb	r3, [r3, #9]
 801563a:	b2db      	uxtb	r3, r3
 801563c:	4a17      	ldr	r2, [pc, #92]	; (801569c <FATFS_LinkDriverEx+0x94>)
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	4413      	add	r3, r2
 8015642:	68fa      	ldr	r2, [r7, #12]
 8015644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015646:	4b15      	ldr	r3, [pc, #84]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015648:	7a5b      	ldrb	r3, [r3, #9]
 801564a:	b2db      	uxtb	r3, r3
 801564c:	461a      	mov	r2, r3
 801564e:	4b13      	ldr	r3, [pc, #76]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015650:	4413      	add	r3, r2
 8015652:	79fa      	ldrb	r2, [r7, #7]
 8015654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015656:	4b11      	ldr	r3, [pc, #68]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015658:	7a5b      	ldrb	r3, [r3, #9]
 801565a:	b2db      	uxtb	r3, r3
 801565c:	1c5a      	adds	r2, r3, #1
 801565e:	b2d1      	uxtb	r1, r2
 8015660:	4a0e      	ldr	r2, [pc, #56]	; (801569c <FATFS_LinkDriverEx+0x94>)
 8015662:	7251      	strb	r1, [r2, #9]
 8015664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015666:	7dbb      	ldrb	r3, [r7, #22]
 8015668:	3330      	adds	r3, #48	; 0x30
 801566a:	b2da      	uxtb	r2, r3
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	3301      	adds	r3, #1
 8015674:	223a      	movs	r2, #58	; 0x3a
 8015676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	3302      	adds	r3, #2
 801567c:	222f      	movs	r2, #47	; 0x2f
 801567e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	3303      	adds	r3, #3
 8015684:	2200      	movs	r2, #0
 8015686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015688:	2300      	movs	r3, #0
 801568a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801568c:	7dfb      	ldrb	r3, [r7, #23]
}
 801568e:	4618      	mov	r0, r3
 8015690:	371c      	adds	r7, #28
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	20000e14 	.word	0x20000e14

080156a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80156aa:	2200      	movs	r2, #0
 80156ac:	6839      	ldr	r1, [r7, #0]
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f7ff ffaa 	bl	8015608 <FATFS_LinkDriverEx>
 80156b4:	4603      	mov	r3, r0
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3708      	adds	r7, #8
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
	...

080156c0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b085      	sub	sp, #20
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	460b      	mov	r3, r1
 80156ca:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80156cc:	2300      	movs	r3, #0
 80156ce:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80156d0:	2301      	movs	r3, #1
 80156d2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80156d4:	4b15      	ldr	r3, [pc, #84]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 80156d6:	7a5b      	ldrb	r3, [r3, #9]
 80156d8:	b2db      	uxtb	r3, r3
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d01e      	beq.n	801571c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	3b30      	subs	r3, #48	; 0x30
 80156e4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80156e6:	7bbb      	ldrb	r3, [r7, #14]
 80156e8:	4a10      	ldr	r2, [pc, #64]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	4413      	add	r3, r2
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d013      	beq.n	801571c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80156f4:	7bbb      	ldrb	r3, [r7, #14]
 80156f6:	4a0d      	ldr	r2, [pc, #52]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 80156f8:	009b      	lsls	r3, r3, #2
 80156fa:	4413      	add	r3, r2
 80156fc:	2200      	movs	r2, #0
 80156fe:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8015700:	7bbb      	ldrb	r3, [r7, #14]
 8015702:	4a0a      	ldr	r2, [pc, #40]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 8015704:	4413      	add	r3, r2
 8015706:	2200      	movs	r2, #0
 8015708:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 801570a:	4b08      	ldr	r3, [pc, #32]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 801570c:	7a5b      	ldrb	r3, [r3, #9]
 801570e:	b2db      	uxtb	r3, r3
 8015710:	3b01      	subs	r3, #1
 8015712:	b2da      	uxtb	r2, r3
 8015714:	4b05      	ldr	r3, [pc, #20]	; (801572c <FATFS_UnLinkDriverEx+0x6c>)
 8015716:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8015718:	2300      	movs	r3, #0
 801571a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801571c:	7bfb      	ldrb	r3, [r7, #15]
}
 801571e:	4618      	mov	r0, r3
 8015720:	3714      	adds	r7, #20
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr
 801572a:	bf00      	nop
 801572c:	20000e14 	.word	0x20000e14

08015730 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8015738:	2100      	movs	r1, #0
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f7ff ffc0 	bl	80156c0 <FATFS_UnLinkDriverEx>
 8015740:	4603      	mov	r3, r0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801574c:	b480      	push	{r7}
 801574e:	b085      	sub	sp, #20
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	6039      	str	r1, [r7, #0]
 8015756:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015758:	88fb      	ldrh	r3, [r7, #6]
 801575a:	2b7f      	cmp	r3, #127	; 0x7f
 801575c:	d802      	bhi.n	8015764 <ff_convert+0x18>
		c = chr;
 801575e:	88fb      	ldrh	r3, [r7, #6]
 8015760:	81fb      	strh	r3, [r7, #14]
 8015762:	e025      	b.n	80157b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d00b      	beq.n	8015782 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801576a:	88fb      	ldrh	r3, [r7, #6]
 801576c:	2bff      	cmp	r3, #255	; 0xff
 801576e:	d805      	bhi.n	801577c <ff_convert+0x30>
 8015770:	88fb      	ldrh	r3, [r7, #6]
 8015772:	3b80      	subs	r3, #128	; 0x80
 8015774:	4a12      	ldr	r2, [pc, #72]	; (80157c0 <ff_convert+0x74>)
 8015776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801577a:	e000      	b.n	801577e <ff_convert+0x32>
 801577c:	2300      	movs	r3, #0
 801577e:	81fb      	strh	r3, [r7, #14]
 8015780:	e016      	b.n	80157b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015782:	2300      	movs	r3, #0
 8015784:	81fb      	strh	r3, [r7, #14]
 8015786:	e009      	b.n	801579c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015788:	89fb      	ldrh	r3, [r7, #14]
 801578a:	4a0d      	ldr	r2, [pc, #52]	; (80157c0 <ff_convert+0x74>)
 801578c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015790:	88fa      	ldrh	r2, [r7, #6]
 8015792:	429a      	cmp	r2, r3
 8015794:	d006      	beq.n	80157a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015796:	89fb      	ldrh	r3, [r7, #14]
 8015798:	3301      	adds	r3, #1
 801579a:	81fb      	strh	r3, [r7, #14]
 801579c:	89fb      	ldrh	r3, [r7, #14]
 801579e:	2b7f      	cmp	r3, #127	; 0x7f
 80157a0:	d9f2      	bls.n	8015788 <ff_convert+0x3c>
 80157a2:	e000      	b.n	80157a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80157a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80157a6:	89fb      	ldrh	r3, [r7, #14]
 80157a8:	3380      	adds	r3, #128	; 0x80
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	b2db      	uxtb	r3, r3
 80157ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80157b0:	89fb      	ldrh	r3, [r7, #14]
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3714      	adds	r7, #20
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	0801aaa8 	.word	0x0801aaa8

080157c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b087      	sub	sp, #28
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80157ce:	88fb      	ldrh	r3, [r7, #6]
 80157d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157d4:	d201      	bcs.n	80157da <ff_wtoupper+0x16>
 80157d6:	4b3e      	ldr	r3, [pc, #248]	; (80158d0 <ff_wtoupper+0x10c>)
 80157d8:	e000      	b.n	80157dc <ff_wtoupper+0x18>
 80157da:	4b3e      	ldr	r3, [pc, #248]	; (80158d4 <ff_wtoupper+0x110>)
 80157dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	1c9a      	adds	r2, r3, #2
 80157e2:	617a      	str	r2, [r7, #20]
 80157e4:	881b      	ldrh	r3, [r3, #0]
 80157e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80157e8:	8a7b      	ldrh	r3, [r7, #18]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d068      	beq.n	80158c0 <ff_wtoupper+0xfc>
 80157ee:	88fa      	ldrh	r2, [r7, #6]
 80157f0:	8a7b      	ldrh	r3, [r7, #18]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d364      	bcc.n	80158c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	1c9a      	adds	r2, r3, #2
 80157fa:	617a      	str	r2, [r7, #20]
 80157fc:	881b      	ldrh	r3, [r3, #0]
 80157fe:	823b      	strh	r3, [r7, #16]
 8015800:	8a3b      	ldrh	r3, [r7, #16]
 8015802:	0a1b      	lsrs	r3, r3, #8
 8015804:	81fb      	strh	r3, [r7, #14]
 8015806:	8a3b      	ldrh	r3, [r7, #16]
 8015808:	b2db      	uxtb	r3, r3
 801580a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801580c:	88fa      	ldrh	r2, [r7, #6]
 801580e:	8a79      	ldrh	r1, [r7, #18]
 8015810:	8a3b      	ldrh	r3, [r7, #16]
 8015812:	440b      	add	r3, r1
 8015814:	429a      	cmp	r2, r3
 8015816:	da49      	bge.n	80158ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8015818:	89fb      	ldrh	r3, [r7, #14]
 801581a:	2b08      	cmp	r3, #8
 801581c:	d84f      	bhi.n	80158be <ff_wtoupper+0xfa>
 801581e:	a201      	add	r2, pc, #4	; (adr r2, 8015824 <ff_wtoupper+0x60>)
 8015820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015824:	08015849 	.word	0x08015849
 8015828:	0801585b 	.word	0x0801585b
 801582c:	08015871 	.word	0x08015871
 8015830:	08015879 	.word	0x08015879
 8015834:	08015881 	.word	0x08015881
 8015838:	08015889 	.word	0x08015889
 801583c:	08015891 	.word	0x08015891
 8015840:	08015899 	.word	0x08015899
 8015844:	080158a1 	.word	0x080158a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015848:	88fa      	ldrh	r2, [r7, #6]
 801584a:	8a7b      	ldrh	r3, [r7, #18]
 801584c:	1ad3      	subs	r3, r2, r3
 801584e:	005b      	lsls	r3, r3, #1
 8015850:	697a      	ldr	r2, [r7, #20]
 8015852:	4413      	add	r3, r2
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	80fb      	strh	r3, [r7, #6]
 8015858:	e027      	b.n	80158aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801585a:	88fa      	ldrh	r2, [r7, #6]
 801585c:	8a7b      	ldrh	r3, [r7, #18]
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	b29b      	uxth	r3, r3
 8015862:	f003 0301 	and.w	r3, r3, #1
 8015866:	b29b      	uxth	r3, r3
 8015868:	88fa      	ldrh	r2, [r7, #6]
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	80fb      	strh	r3, [r7, #6]
 801586e:	e01c      	b.n	80158aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015870:	88fb      	ldrh	r3, [r7, #6]
 8015872:	3b10      	subs	r3, #16
 8015874:	80fb      	strh	r3, [r7, #6]
 8015876:	e018      	b.n	80158aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015878:	88fb      	ldrh	r3, [r7, #6]
 801587a:	3b20      	subs	r3, #32
 801587c:	80fb      	strh	r3, [r7, #6]
 801587e:	e014      	b.n	80158aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015880:	88fb      	ldrh	r3, [r7, #6]
 8015882:	3b30      	subs	r3, #48	; 0x30
 8015884:	80fb      	strh	r3, [r7, #6]
 8015886:	e010      	b.n	80158aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015888:	88fb      	ldrh	r3, [r7, #6]
 801588a:	3b1a      	subs	r3, #26
 801588c:	80fb      	strh	r3, [r7, #6]
 801588e:	e00c      	b.n	80158aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015890:	88fb      	ldrh	r3, [r7, #6]
 8015892:	3308      	adds	r3, #8
 8015894:	80fb      	strh	r3, [r7, #6]
 8015896:	e008      	b.n	80158aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015898:	88fb      	ldrh	r3, [r7, #6]
 801589a:	3b50      	subs	r3, #80	; 0x50
 801589c:	80fb      	strh	r3, [r7, #6]
 801589e:	e004      	b.n	80158aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80158a0:	88fb      	ldrh	r3, [r7, #6]
 80158a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80158a6:	80fb      	strh	r3, [r7, #6]
 80158a8:	bf00      	nop
			}
			break;
 80158aa:	e008      	b.n	80158be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80158ac:	89fb      	ldrh	r3, [r7, #14]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d195      	bne.n	80157de <ff_wtoupper+0x1a>
 80158b2:	8a3b      	ldrh	r3, [r7, #16]
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	697a      	ldr	r2, [r7, #20]
 80158b8:	4413      	add	r3, r2
 80158ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80158bc:	e78f      	b.n	80157de <ff_wtoupper+0x1a>
			break;
 80158be:	bf00      	nop
	}

	return chr;
 80158c0:	88fb      	ldrh	r3, [r7, #6]
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	371c      	adds	r7, #28
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	0801aba8 	.word	0x0801aba8
 80158d4:	0801ad9c 	.word	0x0801ad9c

080158d8 <rxCliInput>:

	cliInitialized = true;
	return CLI_OK;
}

void rxCliInput(uint8_t* Buf, uint32_t *Len) {
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6039      	str	r1, [r7, #0]
	if (Buf[0] != 13){					// Ignore Return Character
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	2b0d      	cmp	r3, #13
 80158e8:	d00d      	beq.n	8015906 <rxCliInput+0x2e>
		usbCli.rxFlag = true;			/* Set the flag for the parser				*/
 80158ea:	4b09      	ldr	r3, [pc, #36]	; (8015910 <rxCliInput+0x38>)
 80158ec:	2201      	movs	r2, #1
 80158ee:	719a      	strb	r2, [r3, #6]
		usbCli.cmd_len = Len[0];		/* Store the command length for the parser	*/
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	4a06      	ldr	r2, [pc, #24]	; (8015910 <rxCliInput+0x38>)
 80158f6:	6093      	str	r3, [r2, #8]

		// Copy the Received String to the Buffer in the structure
		memcpy(usbCli.cmd_buffer, Buf, usbCli.cmd_len);
 80158f8:	4b05      	ldr	r3, [pc, #20]	; (8015910 <rxCliInput+0x38>)
 80158fa:	689b      	ldr	r3, [r3, #8]
 80158fc:	461a      	mov	r2, r3
 80158fe:	6879      	ldr	r1, [r7, #4]
 8015900:	4804      	ldr	r0, [pc, #16]	; (8015914 <rxCliInput+0x3c>)
 8015902:	f000 fd44 	bl	801638e <memcpy>
	}
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	20000e20 	.word	0x20000e20
 8015914:	20000e2c 	.word	0x20000e2c

08015918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801591c:	2200      	movs	r2, #0
 801591e:	4912      	ldr	r1, [pc, #72]	; (8015968 <MX_USB_DEVICE_Init+0x50>)
 8015920:	4812      	ldr	r0, [pc, #72]	; (801596c <MX_USB_DEVICE_Init+0x54>)
 8015922:	f7fb f9b2 	bl	8010c8a <USBD_Init>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d001      	beq.n	8015930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801592c:	f7ef f90a 	bl	8004b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015930:	490f      	ldr	r1, [pc, #60]	; (8015970 <MX_USB_DEVICE_Init+0x58>)
 8015932:	480e      	ldr	r0, [pc, #56]	; (801596c <MX_USB_DEVICE_Init+0x54>)
 8015934:	f7fb f9d4 	bl	8010ce0 <USBD_RegisterClass>
 8015938:	4603      	mov	r3, r0
 801593a:	2b00      	cmp	r3, #0
 801593c:	d001      	beq.n	8015942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801593e:	f7ef f901 	bl	8004b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015942:	490c      	ldr	r1, [pc, #48]	; (8015974 <MX_USB_DEVICE_Init+0x5c>)
 8015944:	4809      	ldr	r0, [pc, #36]	; (801596c <MX_USB_DEVICE_Init+0x54>)
 8015946:	f7fb f931 	bl	8010bac <USBD_CDC_RegisterInterface>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d001      	beq.n	8015954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015950:	f7ef f8f8 	bl	8004b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015954:	4805      	ldr	r0, [pc, #20]	; (801596c <MX_USB_DEVICE_Init+0x54>)
 8015956:	f7fb f9dd 	bl	8010d14 <USBD_Start>
 801595a:	4603      	mov	r3, r0
 801595c:	2b00      	cmp	r3, #0
 801595e:	d001      	beq.n	8015964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015960:	f7ef f8f0 	bl	8004b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015964:	bf00      	nop
 8015966:	bd80      	pop	{r7, pc}
 8015968:	20000184 	.word	0x20000184
 801596c:	20001798 	.word	0x20001798
 8015970:	20000068 	.word	0x20000068
 8015974:	20000174 	.word	0x20000174

08015978 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801597c:	2200      	movs	r2, #0
 801597e:	4905      	ldr	r1, [pc, #20]	; (8015994 <CDC_Init_FS+0x1c>)
 8015980:	4805      	ldr	r0, [pc, #20]	; (8015998 <CDC_Init_FS+0x20>)
 8015982:	f7fb f92a 	bl	8010bda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015986:	4905      	ldr	r1, [pc, #20]	; (801599c <CDC_Init_FS+0x24>)
 8015988:	4803      	ldr	r0, [pc, #12]	; (8015998 <CDC_Init_FS+0x20>)
 801598a:	f7fb f940 	bl	8010c0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801598e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015990:	4618      	mov	r0, r3
 8015992:	bd80      	pop	{r7, pc}
 8015994:	20001e34 	.word	0x20001e34
 8015998:	20001798 	.word	0x20001798
 801599c:	20001a34 	.word	0x20001a34

080159a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80159a0:	b480      	push	{r7}
 80159a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80159a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	46bd      	mov	sp, r7
 80159aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ae:	4770      	bx	lr

080159b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80159b0:	b480      	push	{r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	4603      	mov	r3, r0
 80159b8:	6039      	str	r1, [r7, #0]
 80159ba:	71fb      	strb	r3, [r7, #7]
 80159bc:	4613      	mov	r3, r2
 80159be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80159c0:	79fb      	ldrb	r3, [r7, #7]
 80159c2:	2b23      	cmp	r3, #35	; 0x23
 80159c4:	d85c      	bhi.n	8015a80 <CDC_Control_FS+0xd0>
 80159c6:	a201      	add	r2, pc, #4	; (adr r2, 80159cc <CDC_Control_FS+0x1c>)
 80159c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159cc:	08015a81 	.word	0x08015a81
 80159d0:	08015a81 	.word	0x08015a81
 80159d4:	08015a81 	.word	0x08015a81
 80159d8:	08015a81 	.word	0x08015a81
 80159dc:	08015a81 	.word	0x08015a81
 80159e0:	08015a81 	.word	0x08015a81
 80159e4:	08015a81 	.word	0x08015a81
 80159e8:	08015a81 	.word	0x08015a81
 80159ec:	08015a81 	.word	0x08015a81
 80159f0:	08015a81 	.word	0x08015a81
 80159f4:	08015a81 	.word	0x08015a81
 80159f8:	08015a81 	.word	0x08015a81
 80159fc:	08015a81 	.word	0x08015a81
 8015a00:	08015a81 	.word	0x08015a81
 8015a04:	08015a81 	.word	0x08015a81
 8015a08:	08015a81 	.word	0x08015a81
 8015a0c:	08015a81 	.word	0x08015a81
 8015a10:	08015a81 	.word	0x08015a81
 8015a14:	08015a81 	.word	0x08015a81
 8015a18:	08015a81 	.word	0x08015a81
 8015a1c:	08015a81 	.word	0x08015a81
 8015a20:	08015a81 	.word	0x08015a81
 8015a24:	08015a81 	.word	0x08015a81
 8015a28:	08015a81 	.word	0x08015a81
 8015a2c:	08015a81 	.word	0x08015a81
 8015a30:	08015a81 	.word	0x08015a81
 8015a34:	08015a81 	.word	0x08015a81
 8015a38:	08015a81 	.word	0x08015a81
 8015a3c:	08015a81 	.word	0x08015a81
 8015a40:	08015a81 	.word	0x08015a81
 8015a44:	08015a81 	.word	0x08015a81
 8015a48:	08015a81 	.word	0x08015a81
 8015a4c:	08015a5d 	.word	0x08015a5d
 8015a50:	08015a6f 	.word	0x08015a6f
 8015a54:	08015a81 	.word	0x08015a81
 8015a58:	08015a81 	.word	0x08015a81
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8015a5c:	4b0c      	ldr	r3, [pc, #48]	; (8015a90 <CDC_Control_FS+0xe0>)
 8015a5e:	683a      	ldr	r2, [r7, #0]
 8015a60:	6810      	ldr	r0, [r2, #0]
 8015a62:	6018      	str	r0, [r3, #0]
 8015a64:	8891      	ldrh	r1, [r2, #4]
 8015a66:	7992      	ldrb	r2, [r2, #6]
 8015a68:	8099      	strh	r1, [r3, #4]
 8015a6a:	719a      	strb	r2, [r3, #6]
    break;
 8015a6c:	e009      	b.n	8015a82 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	4a07      	ldr	r2, [pc, #28]	; (8015a90 <CDC_Control_FS+0xe0>)
 8015a72:	6810      	ldr	r0, [r2, #0]
 8015a74:	6018      	str	r0, [r3, #0]
 8015a76:	8891      	ldrh	r1, [r2, #4]
 8015a78:	7992      	ldrb	r2, [r2, #6]
 8015a7a:	8099      	strh	r1, [r3, #4]
 8015a7c:	719a      	strb	r2, [r3, #6]
    break;
 8015a7e:	e000      	b.n	8015a82 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015a80:	bf00      	nop
  }

  return (USBD_OK);
 8015a82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	370c      	adds	r7, #12
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr
 8015a90:	2000016c 	.word	0x2000016c

08015a94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015a9e:	6879      	ldr	r1, [r7, #4]
 8015aa0:	4807      	ldr	r0, [pc, #28]	; (8015ac0 <CDC_Receive_FS+0x2c>)
 8015aa2:	f7fb f8b4 	bl	8010c0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015aa6:	4806      	ldr	r0, [pc, #24]	; (8015ac0 <CDC_Receive_FS+0x2c>)
 8015aa8:	f7fb f8c5 	bl	8010c36 <USBD_CDC_ReceivePacket>

  // Feed the buffer through to the CLI parser
  rxCliInput(Buf, Len);
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff ff12 	bl	80158d8 <rxCliInput>

  return (USBD_OK);
 8015ab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3708      	adds	r7, #8
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	20001798 	.word	0x20001798

08015ac4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	b083      	sub	sp, #12
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	4603      	mov	r3, r0
 8015acc:	6039      	str	r1, [r7, #0]
 8015ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	2212      	movs	r2, #18
 8015ad4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015ad6:	4b03      	ldr	r3, [pc, #12]	; (8015ae4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr
 8015ae4:	200001a0 	.word	0x200001a0

08015ae8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b083      	sub	sp, #12
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	4603      	mov	r3, r0
 8015af0:	6039      	str	r1, [r7, #0]
 8015af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2204      	movs	r2, #4
 8015af8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015afa:	4b03      	ldr	r3, [pc, #12]	; (8015b08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	370c      	adds	r7, #12
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr
 8015b08:	200001b4 	.word	0x200001b4

08015b0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	6039      	str	r1, [r7, #0]
 8015b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d105      	bne.n	8015b2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b1e:	683a      	ldr	r2, [r7, #0]
 8015b20:	4907      	ldr	r1, [pc, #28]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b22:	4808      	ldr	r0, [pc, #32]	; (8015b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015b24:	f7fc f82e 	bl	8011b84 <USBD_GetString>
 8015b28:	e004      	b.n	8015b34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b2a:	683a      	ldr	r2, [r7, #0]
 8015b2c:	4904      	ldr	r1, [pc, #16]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b2e:	4805      	ldr	r0, [pc, #20]	; (8015b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015b30:	f7fc f828 	bl	8011b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b34:	4b02      	ldr	r3, [pc, #8]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	20002234 	.word	0x20002234
 8015b44:	08016d70 	.word	0x08016d70

08015b48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	4603      	mov	r3, r0
 8015b50:	6039      	str	r1, [r7, #0]
 8015b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015b54:	683a      	ldr	r2, [r7, #0]
 8015b56:	4904      	ldr	r1, [pc, #16]	; (8015b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015b58:	4804      	ldr	r0, [pc, #16]	; (8015b6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015b5a:	f7fc f813 	bl	8011b84 <USBD_GetString>
  return USBD_StrDesc;
 8015b5e:	4b02      	ldr	r3, [pc, #8]	; (8015b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	20002234 	.word	0x20002234
 8015b6c:	08016d88 	.word	0x08016d88

08015b70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	6039      	str	r1, [r7, #0]
 8015b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	221a      	movs	r2, #26
 8015b80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015b82:	f000 f843 	bl	8015c0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015b86:	4b02      	ldr	r3, [pc, #8]	; (8015b90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	200001b8 	.word	0x200001b8

08015b94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	6039      	str	r1, [r7, #0]
 8015b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ba0:	79fb      	ldrb	r3, [r7, #7]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d105      	bne.n	8015bb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ba6:	683a      	ldr	r2, [r7, #0]
 8015ba8:	4907      	ldr	r1, [pc, #28]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015baa:	4808      	ldr	r0, [pc, #32]	; (8015bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015bac:	f7fb ffea 	bl	8011b84 <USBD_GetString>
 8015bb0:	e004      	b.n	8015bbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015bb2:	683a      	ldr	r2, [r7, #0]
 8015bb4:	4904      	ldr	r1, [pc, #16]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015bb6:	4805      	ldr	r0, [pc, #20]	; (8015bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015bb8:	f7fb ffe4 	bl	8011b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015bbc:	4b02      	ldr	r3, [pc, #8]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	20002234 	.word	0x20002234
 8015bcc:	08016d9c 	.word	0x08016d9c

08015bd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	6039      	str	r1, [r7, #0]
 8015bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015bdc:	79fb      	ldrb	r3, [r7, #7]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d105      	bne.n	8015bee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015be2:	683a      	ldr	r2, [r7, #0]
 8015be4:	4907      	ldr	r1, [pc, #28]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015be6:	4808      	ldr	r0, [pc, #32]	; (8015c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015be8:	f7fb ffcc 	bl	8011b84 <USBD_GetString>
 8015bec:	e004      	b.n	8015bf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015bee:	683a      	ldr	r2, [r7, #0]
 8015bf0:	4904      	ldr	r1, [pc, #16]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015bf2:	4805      	ldr	r0, [pc, #20]	; (8015c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015bf4:	f7fb ffc6 	bl	8011b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015bf8:	4b02      	ldr	r3, [pc, #8]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3708      	adds	r7, #8
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	20002234 	.word	0x20002234
 8015c08:	08016da8 	.word	0x08016da8

08015c0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015c12:	4b0f      	ldr	r3, [pc, #60]	; (8015c50 <Get_SerialNum+0x44>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015c18:	4b0e      	ldr	r3, [pc, #56]	; (8015c54 <Get_SerialNum+0x48>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015c1e:	4b0e      	ldr	r3, [pc, #56]	; (8015c58 <Get_SerialNum+0x4c>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015c24:	68fa      	ldr	r2, [r7, #12]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4413      	add	r3, r2
 8015c2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d009      	beq.n	8015c46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015c32:	2208      	movs	r2, #8
 8015c34:	4909      	ldr	r1, [pc, #36]	; (8015c5c <Get_SerialNum+0x50>)
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	f000 f814 	bl	8015c64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015c3c:	2204      	movs	r2, #4
 8015c3e:	4908      	ldr	r1, [pc, #32]	; (8015c60 <Get_SerialNum+0x54>)
 8015c40:	68b8      	ldr	r0, [r7, #8]
 8015c42:	f000 f80f 	bl	8015c64 <IntToUnicode>
  }
}
 8015c46:	bf00      	nop
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	1fff7a10 	.word	0x1fff7a10
 8015c54:	1fff7a14 	.word	0x1fff7a14
 8015c58:	1fff7a18 	.word	0x1fff7a18
 8015c5c:	200001ba 	.word	0x200001ba
 8015c60:	200001ca 	.word	0x200001ca

08015c64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015c64:	b480      	push	{r7}
 8015c66:	b087      	sub	sp, #28
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015c72:	2300      	movs	r3, #0
 8015c74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015c76:	2300      	movs	r3, #0
 8015c78:	75fb      	strb	r3, [r7, #23]
 8015c7a:	e027      	b.n	8015ccc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	0f1b      	lsrs	r3, r3, #28
 8015c80:	2b09      	cmp	r3, #9
 8015c82:	d80b      	bhi.n	8015c9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	0f1b      	lsrs	r3, r3, #28
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	7dfb      	ldrb	r3, [r7, #23]
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4619      	mov	r1, r3
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	440b      	add	r3, r1
 8015c94:	3230      	adds	r2, #48	; 0x30
 8015c96:	b2d2      	uxtb	r2, r2
 8015c98:	701a      	strb	r2, [r3, #0]
 8015c9a:	e00a      	b.n	8015cb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	0f1b      	lsrs	r3, r3, #28
 8015ca0:	b2da      	uxtb	r2, r3
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	440b      	add	r3, r1
 8015cac:	3237      	adds	r2, #55	; 0x37
 8015cae:	b2d2      	uxtb	r2, r2
 8015cb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	011b      	lsls	r3, r3, #4
 8015cb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015cb8:	7dfb      	ldrb	r3, [r7, #23]
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015cc6:	7dfb      	ldrb	r3, [r7, #23]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	75fb      	strb	r3, [r7, #23]
 8015ccc:	7dfa      	ldrb	r2, [r7, #23]
 8015cce:	79fb      	ldrb	r3, [r7, #7]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d3d3      	bcc.n	8015c7c <IntToUnicode+0x18>
  }
}
 8015cd4:	bf00      	nop
 8015cd6:	371c      	adds	r7, #28
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr

08015ce0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08a      	sub	sp, #40	; 0x28
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ce8:	f107 0314 	add.w	r3, r7, #20
 8015cec:	2200      	movs	r2, #0
 8015cee:	601a      	str	r2, [r3, #0]
 8015cf0:	605a      	str	r2, [r3, #4]
 8015cf2:	609a      	str	r2, [r3, #8]
 8015cf4:	60da      	str	r2, [r3, #12]
 8015cf6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015d00:	d152      	bne.n	8015da8 <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8015d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d06:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015d10:	2302      	movs	r3, #2
 8015d12:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d14:	f107 0314 	add.w	r3, r7, #20
 8015d18:	4619      	mov	r1, r3
 8015d1a:	4825      	ldr	r0, [pc, #148]	; (8015db0 <HAL_PCD_MspInit+0xd0>)
 8015d1c:	f7ef fc94 	bl	8005648 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8015d20:	2200      	movs	r2, #0
 8015d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015d26:	4822      	ldr	r0, [pc, #136]	; (8015db0 <HAL_PCD_MspInit+0xd0>)
 8015d28:	f7ef fe28 	bl	800597c <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8015d2c:	2005      	movs	r0, #5
 8015d2e:	f7ef fb35 	bl	800539c <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d32:	2300      	movs	r3, #0
 8015d34:	613b      	str	r3, [r7, #16]
 8015d36:	4b1f      	ldr	r3, [pc, #124]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d3a:	4a1e      	ldr	r2, [pc, #120]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d3c:	f043 0301 	orr.w	r3, r3, #1
 8015d40:	6313      	str	r3, [r2, #48]	; 0x30
 8015d42:	4b1c      	ldr	r3, [pc, #112]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d46:	f003 0301 	and.w	r3, r3, #1
 8015d4a:	613b      	str	r3, [r7, #16]
 8015d4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015d4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d54:	2302      	movs	r3, #2
 8015d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d5c:	2303      	movs	r3, #3
 8015d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015d60:	230a      	movs	r3, #10
 8015d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d64:	f107 0314 	add.w	r3, r7, #20
 8015d68:	4619      	mov	r1, r3
 8015d6a:	4811      	ldr	r0, [pc, #68]	; (8015db0 <HAL_PCD_MspInit+0xd0>)
 8015d6c:	f7ef fc6c 	bl	8005648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015d70:	4b10      	ldr	r3, [pc, #64]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d74:	4a0f      	ldr	r2, [pc, #60]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d7a:	6353      	str	r3, [r2, #52]	; 0x34
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	60fb      	str	r3, [r7, #12]
 8015d80:	4b0c      	ldr	r3, [pc, #48]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d84:	4a0b      	ldr	r2, [pc, #44]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8015d8c:	4b09      	ldr	r3, [pc, #36]	; (8015db4 <HAL_PCD_MspInit+0xd4>)
 8015d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d94:	60fb      	str	r3, [r7, #12]
 8015d96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015d98:	2200      	movs	r2, #0
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	2043      	movs	r0, #67	; 0x43
 8015d9e:	f7ef fbfa 	bl	8005596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015da2:	2043      	movs	r0, #67	; 0x43
 8015da4:	f7ef fc13 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015da8:	bf00      	nop
 8015daa:	3728      	adds	r7, #40	; 0x28
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	40020000 	.word	0x40020000
 8015db4:	40023800 	.word	0x40023800

08015db8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015dcc:	4619      	mov	r1, r3
 8015dce:	4610      	mov	r0, r2
 8015dd0:	f7fa ffe9 	bl	8010da6 <USBD_LL_SetupStage>
}
 8015dd4:	bf00      	nop
 8015dd6:	3708      	adds	r7, #8
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}

08015ddc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	460b      	mov	r3, r1
 8015de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015dee:	78fa      	ldrb	r2, [r7, #3]
 8015df0:	6879      	ldr	r1, [r7, #4]
 8015df2:	4613      	mov	r3, r2
 8015df4:	00db      	lsls	r3, r3, #3
 8015df6:	1a9b      	subs	r3, r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	440b      	add	r3, r1
 8015dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	78fb      	ldrb	r3, [r7, #3]
 8015e04:	4619      	mov	r1, r3
 8015e06:	f7fb f819 	bl	8010e3c <USBD_LL_DataOutStage>
}
 8015e0a:	bf00      	nop
 8015e0c:	3708      	adds	r7, #8
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b082      	sub	sp, #8
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
 8015e1a:	460b      	mov	r3, r1
 8015e1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015e24:	78fa      	ldrb	r2, [r7, #3]
 8015e26:	6879      	ldr	r1, [r7, #4]
 8015e28:	4613      	mov	r3, r2
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	1a9b      	subs	r3, r3, r2
 8015e2e:	009b      	lsls	r3, r3, #2
 8015e30:	440b      	add	r3, r1
 8015e32:	3348      	adds	r3, #72	; 0x48
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	78fb      	ldrb	r3, [r7, #3]
 8015e38:	4619      	mov	r1, r3
 8015e3a:	f7fb f870 	bl	8010f1e <USBD_LL_DataInStage>
}
 8015e3e:	bf00      	nop
 8015e40:	3708      	adds	r7, #8
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}

08015e46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e46:	b580      	push	{r7, lr}
 8015e48:	b082      	sub	sp, #8
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7fb f97e 	bl	8011156 <USBD_LL_SOF>
}
 8015e5a:	bf00      	nop
 8015e5c:	3708      	adds	r7, #8
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b084      	sub	sp, #16
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	68db      	ldr	r3, [r3, #12]
 8015e72:	2b02      	cmp	r3, #2
 8015e74:	d001      	beq.n	8015e7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015e76:	f7ee fe65 	bl	8004b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e80:	7bfa      	ldrb	r2, [r7, #15]
 8015e82:	4611      	mov	r1, r2
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fb f930 	bl	80110ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fb f8e9 	bl	8011068 <USBD_LL_Reset>
}
 8015e96:	bf00      	nop
 8015e98:	3710      	adds	r7, #16
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
	...

08015ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b082      	sub	sp, #8
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7fb f92b 	bl	801110a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	6812      	ldr	r2, [r2, #0]
 8015ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ec6:	f043 0301 	orr.w	r3, r3, #1
 8015eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a1b      	ldr	r3, [r3, #32]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d005      	beq.n	8015ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ed4:	4b04      	ldr	r3, [pc, #16]	; (8015ee8 <HAL_PCD_SuspendCallback+0x48>)
 8015ed6:	691b      	ldr	r3, [r3, #16]
 8015ed8:	4a03      	ldr	r2, [pc, #12]	; (8015ee8 <HAL_PCD_SuspendCallback+0x48>)
 8015eda:	f043 0306 	orr.w	r3, r3, #6
 8015ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015ee0:	bf00      	nop
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	e000ed00 	.word	0xe000ed00

08015eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7fb f91a 	bl	8011134 <USBD_LL_Resume>
}
 8015f00:	bf00      	nop
 8015f02:	3708      	adds	r7, #8
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	460b      	mov	r3, r1
 8015f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f1a:	78fa      	ldrb	r2, [r7, #3]
 8015f1c:	4611      	mov	r1, r2
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fb f940 	bl	80111a4 <USBD_LL_IsoOUTIncomplete>
}
 8015f24:	bf00      	nop
 8015f26:	3708      	adds	r7, #8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f3e:	78fa      	ldrb	r2, [r7, #3]
 8015f40:	4611      	mov	r1, r2
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fb f921 	bl	801118a <USBD_LL_IsoINIncomplete>
}
 8015f48:	bf00      	nop
 8015f4a:	3708      	adds	r7, #8
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7fb f92d 	bl	80111be <USBD_LL_DevConnected>
}
 8015f64:	bf00      	nop
 8015f66:	3708      	adds	r7, #8
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7fb f92a 	bl	80111d4 <USBD_LL_DevDisconnected>
}
 8015f80:	bf00      	nop
 8015f82:	3708      	adds	r7, #8
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d13c      	bne.n	8016012 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015f98:	4a20      	ldr	r2, [pc, #128]	; (801601c <USBD_LL_Init+0x94>)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	4a1e      	ldr	r2, [pc, #120]	; (801601c <USBD_LL_Init+0x94>)
 8015fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015fa8:	4b1c      	ldr	r3, [pc, #112]	; (801601c <USBD_LL_Init+0x94>)
 8015faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015fae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015fb0:	4b1a      	ldr	r3, [pc, #104]	; (801601c <USBD_LL_Init+0x94>)
 8015fb2:	2204      	movs	r2, #4
 8015fb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015fb6:	4b19      	ldr	r3, [pc, #100]	; (801601c <USBD_LL_Init+0x94>)
 8015fb8:	2202      	movs	r2, #2
 8015fba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015fbc:	4b17      	ldr	r3, [pc, #92]	; (801601c <USBD_LL_Init+0x94>)
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015fc2:	4b16      	ldr	r3, [pc, #88]	; (801601c <USBD_LL_Init+0x94>)
 8015fc4:	2202      	movs	r2, #2
 8015fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015fc8:	4b14      	ldr	r3, [pc, #80]	; (801601c <USBD_LL_Init+0x94>)
 8015fca:	2200      	movs	r2, #0
 8015fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015fce:	4b13      	ldr	r3, [pc, #76]	; (801601c <USBD_LL_Init+0x94>)
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015fd4:	4b11      	ldr	r3, [pc, #68]	; (801601c <USBD_LL_Init+0x94>)
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015fda:	4b10      	ldr	r3, [pc, #64]	; (801601c <USBD_LL_Init+0x94>)
 8015fdc:	2200      	movs	r2, #0
 8015fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015fe0:	4b0e      	ldr	r3, [pc, #56]	; (801601c <USBD_LL_Init+0x94>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015fe6:	480d      	ldr	r0, [pc, #52]	; (801601c <USBD_LL_Init+0x94>)
 8015fe8:	f7f0 fae6 	bl	80065b8 <HAL_PCD_Init>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015ff2:	f7ee fda7 	bl	8004b44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015ff6:	2180      	movs	r1, #128	; 0x80
 8015ff8:	4808      	ldr	r0, [pc, #32]	; (801601c <USBD_LL_Init+0x94>)
 8015ffa:	f7f1 fc4a 	bl	8007892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ffe:	2240      	movs	r2, #64	; 0x40
 8016000:	2100      	movs	r1, #0
 8016002:	4806      	ldr	r0, [pc, #24]	; (801601c <USBD_LL_Init+0x94>)
 8016004:	f7f1 fbfe 	bl	8007804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016008:	2280      	movs	r2, #128	; 0x80
 801600a:	2101      	movs	r1, #1
 801600c:	4803      	ldr	r0, [pc, #12]	; (801601c <USBD_LL_Init+0x94>)
 801600e:	f7f1 fbf9 	bl	8007804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	20002434 	.word	0x20002434

08016020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016028:	2300      	movs	r3, #0
 801602a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801602c:	2300      	movs	r3, #0
 801602e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016036:	4618      	mov	r0, r3
 8016038:	f7f0 fbdb 	bl	80067f2 <HAL_PCD_Start>
 801603c:	4603      	mov	r3, r0
 801603e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016040:	7bfb      	ldrb	r3, [r7, #15]
 8016042:	4618      	mov	r0, r3
 8016044:	f000 f92e 	bl	80162a4 <USBD_Get_USB_Status>
 8016048:	4603      	mov	r3, r0
 801604a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801604c:	7bbb      	ldrb	r3, [r7, #14]
}
 801604e:	4618      	mov	r0, r3
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}

08016056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016056:	b580      	push	{r7, lr}
 8016058:	b084      	sub	sp, #16
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
 801605e:	4608      	mov	r0, r1
 8016060:	4611      	mov	r1, r2
 8016062:	461a      	mov	r2, r3
 8016064:	4603      	mov	r3, r0
 8016066:	70fb      	strb	r3, [r7, #3]
 8016068:	460b      	mov	r3, r1
 801606a:	70bb      	strb	r3, [r7, #2]
 801606c:	4613      	mov	r3, r2
 801606e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016070:	2300      	movs	r3, #0
 8016072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016074:	2300      	movs	r3, #0
 8016076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801607e:	78bb      	ldrb	r3, [r7, #2]
 8016080:	883a      	ldrh	r2, [r7, #0]
 8016082:	78f9      	ldrb	r1, [r7, #3]
 8016084:	f7f0 ffb0 	bl	8006fe8 <HAL_PCD_EP_Open>
 8016088:	4603      	mov	r3, r0
 801608a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801608c:	7bfb      	ldrb	r3, [r7, #15]
 801608e:	4618      	mov	r0, r3
 8016090:	f000 f908 	bl	80162a4 <USBD_Get_USB_Status>
 8016094:	4603      	mov	r3, r0
 8016096:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016098:	7bbb      	ldrb	r3, [r7, #14]
}
 801609a:	4618      	mov	r0, r3
 801609c:	3710      	adds	r7, #16
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}

080160a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160a2:	b580      	push	{r7, lr}
 80160a4:	b084      	sub	sp, #16
 80160a6:	af00      	add	r7, sp, #0
 80160a8:	6078      	str	r0, [r7, #4]
 80160aa:	460b      	mov	r3, r1
 80160ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160ae:	2300      	movs	r3, #0
 80160b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160b2:	2300      	movs	r3, #0
 80160b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80160bc:	78fa      	ldrb	r2, [r7, #3]
 80160be:	4611      	mov	r1, r2
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7f0 fff9 	bl	80070b8 <HAL_PCD_EP_Close>
 80160c6:	4603      	mov	r3, r0
 80160c8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80160ca:	7bfb      	ldrb	r3, [r7, #15]
 80160cc:	4618      	mov	r0, r3
 80160ce:	f000 f8e9 	bl	80162a4 <USBD_Get_USB_Status>
 80160d2:	4603      	mov	r3, r0
 80160d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80160d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3710      	adds	r7, #16
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	460b      	mov	r3, r1
 80160ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160ec:	2300      	movs	r3, #0
 80160ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80160fa:	78fa      	ldrb	r2, [r7, #3]
 80160fc:	4611      	mov	r1, r2
 80160fe:	4618      	mov	r0, r3
 8016100:	f7f1 f8d1 	bl	80072a6 <HAL_PCD_EP_SetStall>
 8016104:	4603      	mov	r3, r0
 8016106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016108:	7bfb      	ldrb	r3, [r7, #15]
 801610a:	4618      	mov	r0, r3
 801610c:	f000 f8ca 	bl	80162a4 <USBD_Get_USB_Status>
 8016110:	4603      	mov	r3, r0
 8016112:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016114:	7bbb      	ldrb	r3, [r7, #14]
}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b084      	sub	sp, #16
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
 8016126:	460b      	mov	r3, r1
 8016128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801612a:	2300      	movs	r3, #0
 801612c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801612e:	2300      	movs	r3, #0
 8016130:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016138:	78fa      	ldrb	r2, [r7, #3]
 801613a:	4611      	mov	r1, r2
 801613c:	4618      	mov	r0, r3
 801613e:	f7f1 f916 	bl	800736e <HAL_PCD_EP_ClrStall>
 8016142:	4603      	mov	r3, r0
 8016144:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016146:	7bfb      	ldrb	r3, [r7, #15]
 8016148:	4618      	mov	r0, r3
 801614a:	f000 f8ab 	bl	80162a4 <USBD_Get_USB_Status>
 801614e:	4603      	mov	r3, r0
 8016150:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016152:	7bbb      	ldrb	r3, [r7, #14]
}
 8016154:	4618      	mov	r0, r3
 8016156:	3710      	adds	r7, #16
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801615c:	b480      	push	{r7}
 801615e:	b085      	sub	sp, #20
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	460b      	mov	r3, r1
 8016166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801616e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016174:	2b00      	cmp	r3, #0
 8016176:	da0b      	bge.n	8016190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016178:	78fb      	ldrb	r3, [r7, #3]
 801617a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801617e:	68f9      	ldr	r1, [r7, #12]
 8016180:	4613      	mov	r3, r2
 8016182:	00db      	lsls	r3, r3, #3
 8016184:	1a9b      	subs	r3, r3, r2
 8016186:	009b      	lsls	r3, r3, #2
 8016188:	440b      	add	r3, r1
 801618a:	333e      	adds	r3, #62	; 0x3e
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	e00b      	b.n	80161a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016190:	78fb      	ldrb	r3, [r7, #3]
 8016192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016196:	68f9      	ldr	r1, [r7, #12]
 8016198:	4613      	mov	r3, r2
 801619a:	00db      	lsls	r3, r3, #3
 801619c:	1a9b      	subs	r3, r3, r2
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	440b      	add	r3, r1
 80161a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80161a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3714      	adds	r7, #20
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b084      	sub	sp, #16
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161c0:	2300      	movs	r3, #0
 80161c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161c4:	2300      	movs	r3, #0
 80161c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80161ce:	78fa      	ldrb	r2, [r7, #3]
 80161d0:	4611      	mov	r1, r2
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7f0 fee3 	bl	8006f9e <HAL_PCD_SetAddress>
 80161d8:	4603      	mov	r3, r0
 80161da:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80161dc:	7bfb      	ldrb	r3, [r7, #15]
 80161de:	4618      	mov	r0, r3
 80161e0:	f000 f860 	bl	80162a4 <USBD_Get_USB_Status>
 80161e4:	4603      	mov	r3, r0
 80161e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80161e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b086      	sub	sp, #24
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	60f8      	str	r0, [r7, #12]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	461a      	mov	r2, r3
 80161fe:	460b      	mov	r3, r1
 8016200:	72fb      	strb	r3, [r7, #11]
 8016202:	4613      	mov	r3, r2
 8016204:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016206:	2300      	movs	r3, #0
 8016208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016214:	893b      	ldrh	r3, [r7, #8]
 8016216:	7af9      	ldrb	r1, [r7, #11]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	f7f0 fffa 	bl	8007212 <HAL_PCD_EP_Transmit>
 801621e:	4603      	mov	r3, r0
 8016220:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016222:	7dfb      	ldrb	r3, [r7, #23]
 8016224:	4618      	mov	r0, r3
 8016226:	f000 f83d 	bl	80162a4 <USBD_Get_USB_Status>
 801622a:	4603      	mov	r3, r0
 801622c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801622e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3718      	adds	r7, #24
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	607a      	str	r2, [r7, #4]
 8016242:	461a      	mov	r2, r3
 8016244:	460b      	mov	r3, r1
 8016246:	72fb      	strb	r3, [r7, #11]
 8016248:	4613      	mov	r3, r2
 801624a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801624c:	2300      	movs	r3, #0
 801624e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016250:	2300      	movs	r3, #0
 8016252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801625a:	893b      	ldrh	r3, [r7, #8]
 801625c:	7af9      	ldrb	r1, [r7, #11]
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	f7f0 ff74 	bl	800714c <HAL_PCD_EP_Receive>
 8016264:	4603      	mov	r3, r0
 8016266:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016268:	7dfb      	ldrb	r3, [r7, #23]
 801626a:	4618      	mov	r0, r3
 801626c:	f000 f81a 	bl	80162a4 <USBD_Get_USB_Status>
 8016270:	4603      	mov	r3, r0
 8016272:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016274:	7dbb      	ldrb	r3, [r7, #22]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3718      	adds	r7, #24
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	460b      	mov	r3, r1
 8016288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016290:	78fa      	ldrb	r2, [r7, #3]
 8016292:	4611      	mov	r1, r2
 8016294:	4618      	mov	r0, r3
 8016296:	f7f0 ffa4 	bl	80071e2 <HAL_PCD_EP_GetRxCount>
 801629a:	4603      	mov	r3, r0
}
 801629c:	4618      	mov	r0, r3
 801629e:	3708      	adds	r7, #8
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80162a4:	b480      	push	{r7}
 80162a6:	b085      	sub	sp, #20
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4603      	mov	r3, r0
 80162ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162ae:	2300      	movs	r3, #0
 80162b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80162b2:	79fb      	ldrb	r3, [r7, #7]
 80162b4:	2b03      	cmp	r3, #3
 80162b6:	d817      	bhi.n	80162e8 <USBD_Get_USB_Status+0x44>
 80162b8:	a201      	add	r2, pc, #4	; (adr r2, 80162c0 <USBD_Get_USB_Status+0x1c>)
 80162ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162be:	bf00      	nop
 80162c0:	080162d1 	.word	0x080162d1
 80162c4:	080162d7 	.word	0x080162d7
 80162c8:	080162dd 	.word	0x080162dd
 80162cc:	080162e3 	.word	0x080162e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80162d0:	2300      	movs	r3, #0
 80162d2:	73fb      	strb	r3, [r7, #15]
    break;
 80162d4:	e00b      	b.n	80162ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80162d6:	2302      	movs	r3, #2
 80162d8:	73fb      	strb	r3, [r7, #15]
    break;
 80162da:	e008      	b.n	80162ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80162dc:	2301      	movs	r3, #1
 80162de:	73fb      	strb	r3, [r7, #15]
    break;
 80162e0:	e005      	b.n	80162ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80162e2:	2302      	movs	r3, #2
 80162e4:	73fb      	strb	r3, [r7, #15]
    break;
 80162e6:	e002      	b.n	80162ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80162e8:	2302      	movs	r3, #2
 80162ea:	73fb      	strb	r3, [r7, #15]
    break;
 80162ec:	bf00      	nop
  }
  return usb_status;
 80162ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3714      	adds	r7, #20
 80162f4:	46bd      	mov	sp, r7
 80162f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fa:	4770      	bx	lr

080162fc <__errno>:
 80162fc:	4b01      	ldr	r3, [pc, #4]	; (8016304 <__errno+0x8>)
 80162fe:	6818      	ldr	r0, [r3, #0]
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop
 8016304:	200001d4 	.word	0x200001d4

08016308 <__libc_init_array>:
 8016308:	b570      	push	{r4, r5, r6, lr}
 801630a:	4e0d      	ldr	r6, [pc, #52]	; (8016340 <__libc_init_array+0x38>)
 801630c:	4c0d      	ldr	r4, [pc, #52]	; (8016344 <__libc_init_array+0x3c>)
 801630e:	1ba4      	subs	r4, r4, r6
 8016310:	10a4      	asrs	r4, r4, #2
 8016312:	2500      	movs	r5, #0
 8016314:	42a5      	cmp	r5, r4
 8016316:	d109      	bne.n	801632c <__libc_init_array+0x24>
 8016318:	4e0b      	ldr	r6, [pc, #44]	; (8016348 <__libc_init_array+0x40>)
 801631a:	4c0c      	ldr	r4, [pc, #48]	; (801634c <__libc_init_array+0x44>)
 801631c:	f000 fc4e 	bl	8016bbc <_init>
 8016320:	1ba4      	subs	r4, r4, r6
 8016322:	10a4      	asrs	r4, r4, #2
 8016324:	2500      	movs	r5, #0
 8016326:	42a5      	cmp	r5, r4
 8016328:	d105      	bne.n	8016336 <__libc_init_array+0x2e>
 801632a:	bd70      	pop	{r4, r5, r6, pc}
 801632c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016330:	4798      	blx	r3
 8016332:	3501      	adds	r5, #1
 8016334:	e7ee      	b.n	8016314 <__libc_init_array+0xc>
 8016336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801633a:	4798      	blx	r3
 801633c:	3501      	adds	r5, #1
 801633e:	e7f2      	b.n	8016326 <__libc_init_array+0x1e>
 8016340:	0801ae94 	.word	0x0801ae94
 8016344:	0801ae94 	.word	0x0801ae94
 8016348:	0801ae94 	.word	0x0801ae94
 801634c:	0801ae98 	.word	0x0801ae98

08016350 <malloc>:
 8016350:	4b02      	ldr	r3, [pc, #8]	; (801635c <malloc+0xc>)
 8016352:	4601      	mov	r1, r0
 8016354:	6818      	ldr	r0, [r3, #0]
 8016356:	f000 b87b 	b.w	8016450 <_malloc_r>
 801635a:	bf00      	nop
 801635c:	200001d4 	.word	0x200001d4

08016360 <free>:
 8016360:	4b02      	ldr	r3, [pc, #8]	; (801636c <free+0xc>)
 8016362:	4601      	mov	r1, r0
 8016364:	6818      	ldr	r0, [r3, #0]
 8016366:	f000 b825 	b.w	80163b4 <_free_r>
 801636a:	bf00      	nop
 801636c:	200001d4 	.word	0x200001d4

08016370 <memcmp>:
 8016370:	b530      	push	{r4, r5, lr}
 8016372:	2400      	movs	r4, #0
 8016374:	42a2      	cmp	r2, r4
 8016376:	d101      	bne.n	801637c <memcmp+0xc>
 8016378:	2000      	movs	r0, #0
 801637a:	e007      	b.n	801638c <memcmp+0x1c>
 801637c:	5d03      	ldrb	r3, [r0, r4]
 801637e:	3401      	adds	r4, #1
 8016380:	190d      	adds	r5, r1, r4
 8016382:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016386:	42ab      	cmp	r3, r5
 8016388:	d0f4      	beq.n	8016374 <memcmp+0x4>
 801638a:	1b58      	subs	r0, r3, r5
 801638c:	bd30      	pop	{r4, r5, pc}

0801638e <memcpy>:
 801638e:	b510      	push	{r4, lr}
 8016390:	1e43      	subs	r3, r0, #1
 8016392:	440a      	add	r2, r1
 8016394:	4291      	cmp	r1, r2
 8016396:	d100      	bne.n	801639a <memcpy+0xc>
 8016398:	bd10      	pop	{r4, pc}
 801639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163a2:	e7f7      	b.n	8016394 <memcpy+0x6>

080163a4 <memset>:
 80163a4:	4402      	add	r2, r0
 80163a6:	4603      	mov	r3, r0
 80163a8:	4293      	cmp	r3, r2
 80163aa:	d100      	bne.n	80163ae <memset+0xa>
 80163ac:	4770      	bx	lr
 80163ae:	f803 1b01 	strb.w	r1, [r3], #1
 80163b2:	e7f9      	b.n	80163a8 <memset+0x4>

080163b4 <_free_r>:
 80163b4:	b538      	push	{r3, r4, r5, lr}
 80163b6:	4605      	mov	r5, r0
 80163b8:	2900      	cmp	r1, #0
 80163ba:	d045      	beq.n	8016448 <_free_r+0x94>
 80163bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163c0:	1f0c      	subs	r4, r1, #4
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	bfb8      	it	lt
 80163c6:	18e4      	addlt	r4, r4, r3
 80163c8:	f000 f8d4 	bl	8016574 <__malloc_lock>
 80163cc:	4a1f      	ldr	r2, [pc, #124]	; (801644c <_free_r+0x98>)
 80163ce:	6813      	ldr	r3, [r2, #0]
 80163d0:	4610      	mov	r0, r2
 80163d2:	b933      	cbnz	r3, 80163e2 <_free_r+0x2e>
 80163d4:	6063      	str	r3, [r4, #4]
 80163d6:	6014      	str	r4, [r2, #0]
 80163d8:	4628      	mov	r0, r5
 80163da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163de:	f000 b8ca 	b.w	8016576 <__malloc_unlock>
 80163e2:	42a3      	cmp	r3, r4
 80163e4:	d90c      	bls.n	8016400 <_free_r+0x4c>
 80163e6:	6821      	ldr	r1, [r4, #0]
 80163e8:	1862      	adds	r2, r4, r1
 80163ea:	4293      	cmp	r3, r2
 80163ec:	bf04      	itt	eq
 80163ee:	681a      	ldreq	r2, [r3, #0]
 80163f0:	685b      	ldreq	r3, [r3, #4]
 80163f2:	6063      	str	r3, [r4, #4]
 80163f4:	bf04      	itt	eq
 80163f6:	1852      	addeq	r2, r2, r1
 80163f8:	6022      	streq	r2, [r4, #0]
 80163fa:	6004      	str	r4, [r0, #0]
 80163fc:	e7ec      	b.n	80163d8 <_free_r+0x24>
 80163fe:	4613      	mov	r3, r2
 8016400:	685a      	ldr	r2, [r3, #4]
 8016402:	b10a      	cbz	r2, 8016408 <_free_r+0x54>
 8016404:	42a2      	cmp	r2, r4
 8016406:	d9fa      	bls.n	80163fe <_free_r+0x4a>
 8016408:	6819      	ldr	r1, [r3, #0]
 801640a:	1858      	adds	r0, r3, r1
 801640c:	42a0      	cmp	r0, r4
 801640e:	d10b      	bne.n	8016428 <_free_r+0x74>
 8016410:	6820      	ldr	r0, [r4, #0]
 8016412:	4401      	add	r1, r0
 8016414:	1858      	adds	r0, r3, r1
 8016416:	4282      	cmp	r2, r0
 8016418:	6019      	str	r1, [r3, #0]
 801641a:	d1dd      	bne.n	80163d8 <_free_r+0x24>
 801641c:	6810      	ldr	r0, [r2, #0]
 801641e:	6852      	ldr	r2, [r2, #4]
 8016420:	605a      	str	r2, [r3, #4]
 8016422:	4401      	add	r1, r0
 8016424:	6019      	str	r1, [r3, #0]
 8016426:	e7d7      	b.n	80163d8 <_free_r+0x24>
 8016428:	d902      	bls.n	8016430 <_free_r+0x7c>
 801642a:	230c      	movs	r3, #12
 801642c:	602b      	str	r3, [r5, #0]
 801642e:	e7d3      	b.n	80163d8 <_free_r+0x24>
 8016430:	6820      	ldr	r0, [r4, #0]
 8016432:	1821      	adds	r1, r4, r0
 8016434:	428a      	cmp	r2, r1
 8016436:	bf04      	itt	eq
 8016438:	6811      	ldreq	r1, [r2, #0]
 801643a:	6852      	ldreq	r2, [r2, #4]
 801643c:	6062      	str	r2, [r4, #4]
 801643e:	bf04      	itt	eq
 8016440:	1809      	addeq	r1, r1, r0
 8016442:	6021      	streq	r1, [r4, #0]
 8016444:	605c      	str	r4, [r3, #4]
 8016446:	e7c7      	b.n	80163d8 <_free_r+0x24>
 8016448:	bd38      	pop	{r3, r4, r5, pc}
 801644a:	bf00      	nop
 801644c:	20000e90 	.word	0x20000e90

08016450 <_malloc_r>:
 8016450:	b570      	push	{r4, r5, r6, lr}
 8016452:	1ccd      	adds	r5, r1, #3
 8016454:	f025 0503 	bic.w	r5, r5, #3
 8016458:	3508      	adds	r5, #8
 801645a:	2d0c      	cmp	r5, #12
 801645c:	bf38      	it	cc
 801645e:	250c      	movcc	r5, #12
 8016460:	2d00      	cmp	r5, #0
 8016462:	4606      	mov	r6, r0
 8016464:	db01      	blt.n	801646a <_malloc_r+0x1a>
 8016466:	42a9      	cmp	r1, r5
 8016468:	d903      	bls.n	8016472 <_malloc_r+0x22>
 801646a:	230c      	movs	r3, #12
 801646c:	6033      	str	r3, [r6, #0]
 801646e:	2000      	movs	r0, #0
 8016470:	bd70      	pop	{r4, r5, r6, pc}
 8016472:	f000 f87f 	bl	8016574 <__malloc_lock>
 8016476:	4a21      	ldr	r2, [pc, #132]	; (80164fc <_malloc_r+0xac>)
 8016478:	6814      	ldr	r4, [r2, #0]
 801647a:	4621      	mov	r1, r4
 801647c:	b991      	cbnz	r1, 80164a4 <_malloc_r+0x54>
 801647e:	4c20      	ldr	r4, [pc, #128]	; (8016500 <_malloc_r+0xb0>)
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	b91b      	cbnz	r3, 801648c <_malloc_r+0x3c>
 8016484:	4630      	mov	r0, r6
 8016486:	f000 f83d 	bl	8016504 <_sbrk_r>
 801648a:	6020      	str	r0, [r4, #0]
 801648c:	4629      	mov	r1, r5
 801648e:	4630      	mov	r0, r6
 8016490:	f000 f838 	bl	8016504 <_sbrk_r>
 8016494:	1c43      	adds	r3, r0, #1
 8016496:	d124      	bne.n	80164e2 <_malloc_r+0x92>
 8016498:	230c      	movs	r3, #12
 801649a:	6033      	str	r3, [r6, #0]
 801649c:	4630      	mov	r0, r6
 801649e:	f000 f86a 	bl	8016576 <__malloc_unlock>
 80164a2:	e7e4      	b.n	801646e <_malloc_r+0x1e>
 80164a4:	680b      	ldr	r3, [r1, #0]
 80164a6:	1b5b      	subs	r3, r3, r5
 80164a8:	d418      	bmi.n	80164dc <_malloc_r+0x8c>
 80164aa:	2b0b      	cmp	r3, #11
 80164ac:	d90f      	bls.n	80164ce <_malloc_r+0x7e>
 80164ae:	600b      	str	r3, [r1, #0]
 80164b0:	50cd      	str	r5, [r1, r3]
 80164b2:	18cc      	adds	r4, r1, r3
 80164b4:	4630      	mov	r0, r6
 80164b6:	f000 f85e 	bl	8016576 <__malloc_unlock>
 80164ba:	f104 000b 	add.w	r0, r4, #11
 80164be:	1d23      	adds	r3, r4, #4
 80164c0:	f020 0007 	bic.w	r0, r0, #7
 80164c4:	1ac3      	subs	r3, r0, r3
 80164c6:	d0d3      	beq.n	8016470 <_malloc_r+0x20>
 80164c8:	425a      	negs	r2, r3
 80164ca:	50e2      	str	r2, [r4, r3]
 80164cc:	e7d0      	b.n	8016470 <_malloc_r+0x20>
 80164ce:	428c      	cmp	r4, r1
 80164d0:	684b      	ldr	r3, [r1, #4]
 80164d2:	bf16      	itet	ne
 80164d4:	6063      	strne	r3, [r4, #4]
 80164d6:	6013      	streq	r3, [r2, #0]
 80164d8:	460c      	movne	r4, r1
 80164da:	e7eb      	b.n	80164b4 <_malloc_r+0x64>
 80164dc:	460c      	mov	r4, r1
 80164de:	6849      	ldr	r1, [r1, #4]
 80164e0:	e7cc      	b.n	801647c <_malloc_r+0x2c>
 80164e2:	1cc4      	adds	r4, r0, #3
 80164e4:	f024 0403 	bic.w	r4, r4, #3
 80164e8:	42a0      	cmp	r0, r4
 80164ea:	d005      	beq.n	80164f8 <_malloc_r+0xa8>
 80164ec:	1a21      	subs	r1, r4, r0
 80164ee:	4630      	mov	r0, r6
 80164f0:	f000 f808 	bl	8016504 <_sbrk_r>
 80164f4:	3001      	adds	r0, #1
 80164f6:	d0cf      	beq.n	8016498 <_malloc_r+0x48>
 80164f8:	6025      	str	r5, [r4, #0]
 80164fa:	e7db      	b.n	80164b4 <_malloc_r+0x64>
 80164fc:	20000e90 	.word	0x20000e90
 8016500:	20000e94 	.word	0x20000e94

08016504 <_sbrk_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4c06      	ldr	r4, [pc, #24]	; (8016520 <_sbrk_r+0x1c>)
 8016508:	2300      	movs	r3, #0
 801650a:	4605      	mov	r5, r0
 801650c:	4608      	mov	r0, r1
 801650e:	6023      	str	r3, [r4, #0]
 8016510:	f7ee fe66 	bl	80051e0 <_sbrk>
 8016514:	1c43      	adds	r3, r0, #1
 8016516:	d102      	bne.n	801651e <_sbrk_r+0x1a>
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	b103      	cbz	r3, 801651e <_sbrk_r+0x1a>
 801651c:	602b      	str	r3, [r5, #0]
 801651e:	bd38      	pop	{r3, r4, r5, pc}
 8016520:	2000283c 	.word	0x2000283c

08016524 <siprintf>:
 8016524:	b40e      	push	{r1, r2, r3}
 8016526:	b500      	push	{lr}
 8016528:	b09c      	sub	sp, #112	; 0x70
 801652a:	ab1d      	add	r3, sp, #116	; 0x74
 801652c:	9002      	str	r0, [sp, #8]
 801652e:	9006      	str	r0, [sp, #24]
 8016530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016534:	4809      	ldr	r0, [pc, #36]	; (801655c <siprintf+0x38>)
 8016536:	9107      	str	r1, [sp, #28]
 8016538:	9104      	str	r1, [sp, #16]
 801653a:	4909      	ldr	r1, [pc, #36]	; (8016560 <siprintf+0x3c>)
 801653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016540:	9105      	str	r1, [sp, #20]
 8016542:	6800      	ldr	r0, [r0, #0]
 8016544:	9301      	str	r3, [sp, #4]
 8016546:	a902      	add	r1, sp, #8
 8016548:	f000 f870 	bl	801662c <_svfiprintf_r>
 801654c:	9b02      	ldr	r3, [sp, #8]
 801654e:	2200      	movs	r2, #0
 8016550:	701a      	strb	r2, [r3, #0]
 8016552:	b01c      	add	sp, #112	; 0x70
 8016554:	f85d eb04 	ldr.w	lr, [sp], #4
 8016558:	b003      	add	sp, #12
 801655a:	4770      	bx	lr
 801655c:	200001d4 	.word	0x200001d4
 8016560:	ffff0208 	.word	0xffff0208

08016564 <strcpy>:
 8016564:	4603      	mov	r3, r0
 8016566:	f811 2b01 	ldrb.w	r2, [r1], #1
 801656a:	f803 2b01 	strb.w	r2, [r3], #1
 801656e:	2a00      	cmp	r2, #0
 8016570:	d1f9      	bne.n	8016566 <strcpy+0x2>
 8016572:	4770      	bx	lr

08016574 <__malloc_lock>:
 8016574:	4770      	bx	lr

08016576 <__malloc_unlock>:
 8016576:	4770      	bx	lr

08016578 <__ssputs_r>:
 8016578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801657c:	688e      	ldr	r6, [r1, #8]
 801657e:	429e      	cmp	r6, r3
 8016580:	4682      	mov	sl, r0
 8016582:	460c      	mov	r4, r1
 8016584:	4690      	mov	r8, r2
 8016586:	4699      	mov	r9, r3
 8016588:	d837      	bhi.n	80165fa <__ssputs_r+0x82>
 801658a:	898a      	ldrh	r2, [r1, #12]
 801658c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016590:	d031      	beq.n	80165f6 <__ssputs_r+0x7e>
 8016592:	6825      	ldr	r5, [r4, #0]
 8016594:	6909      	ldr	r1, [r1, #16]
 8016596:	1a6f      	subs	r7, r5, r1
 8016598:	6965      	ldr	r5, [r4, #20]
 801659a:	2302      	movs	r3, #2
 801659c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80165a4:	f109 0301 	add.w	r3, r9, #1
 80165a8:	443b      	add	r3, r7
 80165aa:	429d      	cmp	r5, r3
 80165ac:	bf38      	it	cc
 80165ae:	461d      	movcc	r5, r3
 80165b0:	0553      	lsls	r3, r2, #21
 80165b2:	d530      	bpl.n	8016616 <__ssputs_r+0x9e>
 80165b4:	4629      	mov	r1, r5
 80165b6:	f7ff ff4b 	bl	8016450 <_malloc_r>
 80165ba:	4606      	mov	r6, r0
 80165bc:	b950      	cbnz	r0, 80165d4 <__ssputs_r+0x5c>
 80165be:	230c      	movs	r3, #12
 80165c0:	f8ca 3000 	str.w	r3, [sl]
 80165c4:	89a3      	ldrh	r3, [r4, #12]
 80165c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165ca:	81a3      	strh	r3, [r4, #12]
 80165cc:	f04f 30ff 	mov.w	r0, #4294967295
 80165d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d4:	463a      	mov	r2, r7
 80165d6:	6921      	ldr	r1, [r4, #16]
 80165d8:	f7ff fed9 	bl	801638e <memcpy>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80165e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165e6:	81a3      	strh	r3, [r4, #12]
 80165e8:	6126      	str	r6, [r4, #16]
 80165ea:	6165      	str	r5, [r4, #20]
 80165ec:	443e      	add	r6, r7
 80165ee:	1bed      	subs	r5, r5, r7
 80165f0:	6026      	str	r6, [r4, #0]
 80165f2:	60a5      	str	r5, [r4, #8]
 80165f4:	464e      	mov	r6, r9
 80165f6:	454e      	cmp	r6, r9
 80165f8:	d900      	bls.n	80165fc <__ssputs_r+0x84>
 80165fa:	464e      	mov	r6, r9
 80165fc:	4632      	mov	r2, r6
 80165fe:	4641      	mov	r1, r8
 8016600:	6820      	ldr	r0, [r4, #0]
 8016602:	f000 fa93 	bl	8016b2c <memmove>
 8016606:	68a3      	ldr	r3, [r4, #8]
 8016608:	1b9b      	subs	r3, r3, r6
 801660a:	60a3      	str	r3, [r4, #8]
 801660c:	6823      	ldr	r3, [r4, #0]
 801660e:	441e      	add	r6, r3
 8016610:	6026      	str	r6, [r4, #0]
 8016612:	2000      	movs	r0, #0
 8016614:	e7dc      	b.n	80165d0 <__ssputs_r+0x58>
 8016616:	462a      	mov	r2, r5
 8016618:	f000 faa1 	bl	8016b5e <_realloc_r>
 801661c:	4606      	mov	r6, r0
 801661e:	2800      	cmp	r0, #0
 8016620:	d1e2      	bne.n	80165e8 <__ssputs_r+0x70>
 8016622:	6921      	ldr	r1, [r4, #16]
 8016624:	4650      	mov	r0, sl
 8016626:	f7ff fec5 	bl	80163b4 <_free_r>
 801662a:	e7c8      	b.n	80165be <__ssputs_r+0x46>

0801662c <_svfiprintf_r>:
 801662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	461d      	mov	r5, r3
 8016632:	898b      	ldrh	r3, [r1, #12]
 8016634:	061f      	lsls	r7, r3, #24
 8016636:	b09d      	sub	sp, #116	; 0x74
 8016638:	4680      	mov	r8, r0
 801663a:	460c      	mov	r4, r1
 801663c:	4616      	mov	r6, r2
 801663e:	d50f      	bpl.n	8016660 <_svfiprintf_r+0x34>
 8016640:	690b      	ldr	r3, [r1, #16]
 8016642:	b96b      	cbnz	r3, 8016660 <_svfiprintf_r+0x34>
 8016644:	2140      	movs	r1, #64	; 0x40
 8016646:	f7ff ff03 	bl	8016450 <_malloc_r>
 801664a:	6020      	str	r0, [r4, #0]
 801664c:	6120      	str	r0, [r4, #16]
 801664e:	b928      	cbnz	r0, 801665c <_svfiprintf_r+0x30>
 8016650:	230c      	movs	r3, #12
 8016652:	f8c8 3000 	str.w	r3, [r8]
 8016656:	f04f 30ff 	mov.w	r0, #4294967295
 801665a:	e0c8      	b.n	80167ee <_svfiprintf_r+0x1c2>
 801665c:	2340      	movs	r3, #64	; 0x40
 801665e:	6163      	str	r3, [r4, #20]
 8016660:	2300      	movs	r3, #0
 8016662:	9309      	str	r3, [sp, #36]	; 0x24
 8016664:	2320      	movs	r3, #32
 8016666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801666a:	2330      	movs	r3, #48	; 0x30
 801666c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016670:	9503      	str	r5, [sp, #12]
 8016672:	f04f 0b01 	mov.w	fp, #1
 8016676:	4637      	mov	r7, r6
 8016678:	463d      	mov	r5, r7
 801667a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801667e:	b10b      	cbz	r3, 8016684 <_svfiprintf_r+0x58>
 8016680:	2b25      	cmp	r3, #37	; 0x25
 8016682:	d13e      	bne.n	8016702 <_svfiprintf_r+0xd6>
 8016684:	ebb7 0a06 	subs.w	sl, r7, r6
 8016688:	d00b      	beq.n	80166a2 <_svfiprintf_r+0x76>
 801668a:	4653      	mov	r3, sl
 801668c:	4632      	mov	r2, r6
 801668e:	4621      	mov	r1, r4
 8016690:	4640      	mov	r0, r8
 8016692:	f7ff ff71 	bl	8016578 <__ssputs_r>
 8016696:	3001      	adds	r0, #1
 8016698:	f000 80a4 	beq.w	80167e4 <_svfiprintf_r+0x1b8>
 801669c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801669e:	4453      	add	r3, sl
 80166a0:	9309      	str	r3, [sp, #36]	; 0x24
 80166a2:	783b      	ldrb	r3, [r7, #0]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	f000 809d 	beq.w	80167e4 <_svfiprintf_r+0x1b8>
 80166aa:	2300      	movs	r3, #0
 80166ac:	f04f 32ff 	mov.w	r2, #4294967295
 80166b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166b4:	9304      	str	r3, [sp, #16]
 80166b6:	9307      	str	r3, [sp, #28]
 80166b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166bc:	931a      	str	r3, [sp, #104]	; 0x68
 80166be:	462f      	mov	r7, r5
 80166c0:	2205      	movs	r2, #5
 80166c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80166c6:	4850      	ldr	r0, [pc, #320]	; (8016808 <_svfiprintf_r+0x1dc>)
 80166c8:	f7e9 fd8a 	bl	80001e0 <memchr>
 80166cc:	9b04      	ldr	r3, [sp, #16]
 80166ce:	b9d0      	cbnz	r0, 8016706 <_svfiprintf_r+0xda>
 80166d0:	06d9      	lsls	r1, r3, #27
 80166d2:	bf44      	itt	mi
 80166d4:	2220      	movmi	r2, #32
 80166d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80166da:	071a      	lsls	r2, r3, #28
 80166dc:	bf44      	itt	mi
 80166de:	222b      	movmi	r2, #43	; 0x2b
 80166e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80166e4:	782a      	ldrb	r2, [r5, #0]
 80166e6:	2a2a      	cmp	r2, #42	; 0x2a
 80166e8:	d015      	beq.n	8016716 <_svfiprintf_r+0xea>
 80166ea:	9a07      	ldr	r2, [sp, #28]
 80166ec:	462f      	mov	r7, r5
 80166ee:	2000      	movs	r0, #0
 80166f0:	250a      	movs	r5, #10
 80166f2:	4639      	mov	r1, r7
 80166f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166f8:	3b30      	subs	r3, #48	; 0x30
 80166fa:	2b09      	cmp	r3, #9
 80166fc:	d94d      	bls.n	801679a <_svfiprintf_r+0x16e>
 80166fe:	b1b8      	cbz	r0, 8016730 <_svfiprintf_r+0x104>
 8016700:	e00f      	b.n	8016722 <_svfiprintf_r+0xf6>
 8016702:	462f      	mov	r7, r5
 8016704:	e7b8      	b.n	8016678 <_svfiprintf_r+0x4c>
 8016706:	4a40      	ldr	r2, [pc, #256]	; (8016808 <_svfiprintf_r+0x1dc>)
 8016708:	1a80      	subs	r0, r0, r2
 801670a:	fa0b f000 	lsl.w	r0, fp, r0
 801670e:	4318      	orrs	r0, r3
 8016710:	9004      	str	r0, [sp, #16]
 8016712:	463d      	mov	r5, r7
 8016714:	e7d3      	b.n	80166be <_svfiprintf_r+0x92>
 8016716:	9a03      	ldr	r2, [sp, #12]
 8016718:	1d11      	adds	r1, r2, #4
 801671a:	6812      	ldr	r2, [r2, #0]
 801671c:	9103      	str	r1, [sp, #12]
 801671e:	2a00      	cmp	r2, #0
 8016720:	db01      	blt.n	8016726 <_svfiprintf_r+0xfa>
 8016722:	9207      	str	r2, [sp, #28]
 8016724:	e004      	b.n	8016730 <_svfiprintf_r+0x104>
 8016726:	4252      	negs	r2, r2
 8016728:	f043 0302 	orr.w	r3, r3, #2
 801672c:	9207      	str	r2, [sp, #28]
 801672e:	9304      	str	r3, [sp, #16]
 8016730:	783b      	ldrb	r3, [r7, #0]
 8016732:	2b2e      	cmp	r3, #46	; 0x2e
 8016734:	d10c      	bne.n	8016750 <_svfiprintf_r+0x124>
 8016736:	787b      	ldrb	r3, [r7, #1]
 8016738:	2b2a      	cmp	r3, #42	; 0x2a
 801673a:	d133      	bne.n	80167a4 <_svfiprintf_r+0x178>
 801673c:	9b03      	ldr	r3, [sp, #12]
 801673e:	1d1a      	adds	r2, r3, #4
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	9203      	str	r2, [sp, #12]
 8016744:	2b00      	cmp	r3, #0
 8016746:	bfb8      	it	lt
 8016748:	f04f 33ff 	movlt.w	r3, #4294967295
 801674c:	3702      	adds	r7, #2
 801674e:	9305      	str	r3, [sp, #20]
 8016750:	4d2e      	ldr	r5, [pc, #184]	; (801680c <_svfiprintf_r+0x1e0>)
 8016752:	7839      	ldrb	r1, [r7, #0]
 8016754:	2203      	movs	r2, #3
 8016756:	4628      	mov	r0, r5
 8016758:	f7e9 fd42 	bl	80001e0 <memchr>
 801675c:	b138      	cbz	r0, 801676e <_svfiprintf_r+0x142>
 801675e:	2340      	movs	r3, #64	; 0x40
 8016760:	1b40      	subs	r0, r0, r5
 8016762:	fa03 f000 	lsl.w	r0, r3, r0
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	4303      	orrs	r3, r0
 801676a:	3701      	adds	r7, #1
 801676c:	9304      	str	r3, [sp, #16]
 801676e:	7839      	ldrb	r1, [r7, #0]
 8016770:	4827      	ldr	r0, [pc, #156]	; (8016810 <_svfiprintf_r+0x1e4>)
 8016772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016776:	2206      	movs	r2, #6
 8016778:	1c7e      	adds	r6, r7, #1
 801677a:	f7e9 fd31 	bl	80001e0 <memchr>
 801677e:	2800      	cmp	r0, #0
 8016780:	d038      	beq.n	80167f4 <_svfiprintf_r+0x1c8>
 8016782:	4b24      	ldr	r3, [pc, #144]	; (8016814 <_svfiprintf_r+0x1e8>)
 8016784:	bb13      	cbnz	r3, 80167cc <_svfiprintf_r+0x1a0>
 8016786:	9b03      	ldr	r3, [sp, #12]
 8016788:	3307      	adds	r3, #7
 801678a:	f023 0307 	bic.w	r3, r3, #7
 801678e:	3308      	adds	r3, #8
 8016790:	9303      	str	r3, [sp, #12]
 8016792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016794:	444b      	add	r3, r9
 8016796:	9309      	str	r3, [sp, #36]	; 0x24
 8016798:	e76d      	b.n	8016676 <_svfiprintf_r+0x4a>
 801679a:	fb05 3202 	mla	r2, r5, r2, r3
 801679e:	2001      	movs	r0, #1
 80167a0:	460f      	mov	r7, r1
 80167a2:	e7a6      	b.n	80166f2 <_svfiprintf_r+0xc6>
 80167a4:	2300      	movs	r3, #0
 80167a6:	3701      	adds	r7, #1
 80167a8:	9305      	str	r3, [sp, #20]
 80167aa:	4619      	mov	r1, r3
 80167ac:	250a      	movs	r5, #10
 80167ae:	4638      	mov	r0, r7
 80167b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167b4:	3a30      	subs	r2, #48	; 0x30
 80167b6:	2a09      	cmp	r2, #9
 80167b8:	d903      	bls.n	80167c2 <_svfiprintf_r+0x196>
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d0c8      	beq.n	8016750 <_svfiprintf_r+0x124>
 80167be:	9105      	str	r1, [sp, #20]
 80167c0:	e7c6      	b.n	8016750 <_svfiprintf_r+0x124>
 80167c2:	fb05 2101 	mla	r1, r5, r1, r2
 80167c6:	2301      	movs	r3, #1
 80167c8:	4607      	mov	r7, r0
 80167ca:	e7f0      	b.n	80167ae <_svfiprintf_r+0x182>
 80167cc:	ab03      	add	r3, sp, #12
 80167ce:	9300      	str	r3, [sp, #0]
 80167d0:	4622      	mov	r2, r4
 80167d2:	4b11      	ldr	r3, [pc, #68]	; (8016818 <_svfiprintf_r+0x1ec>)
 80167d4:	a904      	add	r1, sp, #16
 80167d6:	4640      	mov	r0, r8
 80167d8:	f3af 8000 	nop.w
 80167dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80167e0:	4681      	mov	r9, r0
 80167e2:	d1d6      	bne.n	8016792 <_svfiprintf_r+0x166>
 80167e4:	89a3      	ldrh	r3, [r4, #12]
 80167e6:	065b      	lsls	r3, r3, #25
 80167e8:	f53f af35 	bmi.w	8016656 <_svfiprintf_r+0x2a>
 80167ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167ee:	b01d      	add	sp, #116	; 0x74
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f4:	ab03      	add	r3, sp, #12
 80167f6:	9300      	str	r3, [sp, #0]
 80167f8:	4622      	mov	r2, r4
 80167fa:	4b07      	ldr	r3, [pc, #28]	; (8016818 <_svfiprintf_r+0x1ec>)
 80167fc:	a904      	add	r1, sp, #16
 80167fe:	4640      	mov	r0, r8
 8016800:	f000 f882 	bl	8016908 <_printf_i>
 8016804:	e7ea      	b.n	80167dc <_svfiprintf_r+0x1b0>
 8016806:	bf00      	nop
 8016808:	0801ae58 	.word	0x0801ae58
 801680c:	0801ae5e 	.word	0x0801ae5e
 8016810:	0801ae62 	.word	0x0801ae62
 8016814:	00000000 	.word	0x00000000
 8016818:	08016579 	.word	0x08016579

0801681c <_printf_common>:
 801681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016820:	4691      	mov	r9, r2
 8016822:	461f      	mov	r7, r3
 8016824:	688a      	ldr	r2, [r1, #8]
 8016826:	690b      	ldr	r3, [r1, #16]
 8016828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801682c:	4293      	cmp	r3, r2
 801682e:	bfb8      	it	lt
 8016830:	4613      	movlt	r3, r2
 8016832:	f8c9 3000 	str.w	r3, [r9]
 8016836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801683a:	4606      	mov	r6, r0
 801683c:	460c      	mov	r4, r1
 801683e:	b112      	cbz	r2, 8016846 <_printf_common+0x2a>
 8016840:	3301      	adds	r3, #1
 8016842:	f8c9 3000 	str.w	r3, [r9]
 8016846:	6823      	ldr	r3, [r4, #0]
 8016848:	0699      	lsls	r1, r3, #26
 801684a:	bf42      	ittt	mi
 801684c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016850:	3302      	addmi	r3, #2
 8016852:	f8c9 3000 	strmi.w	r3, [r9]
 8016856:	6825      	ldr	r5, [r4, #0]
 8016858:	f015 0506 	ands.w	r5, r5, #6
 801685c:	d107      	bne.n	801686e <_printf_common+0x52>
 801685e:	f104 0a19 	add.w	sl, r4, #25
 8016862:	68e3      	ldr	r3, [r4, #12]
 8016864:	f8d9 2000 	ldr.w	r2, [r9]
 8016868:	1a9b      	subs	r3, r3, r2
 801686a:	42ab      	cmp	r3, r5
 801686c:	dc28      	bgt.n	80168c0 <_printf_common+0xa4>
 801686e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016872:	6822      	ldr	r2, [r4, #0]
 8016874:	3300      	adds	r3, #0
 8016876:	bf18      	it	ne
 8016878:	2301      	movne	r3, #1
 801687a:	0692      	lsls	r2, r2, #26
 801687c:	d42d      	bmi.n	80168da <_printf_common+0xbe>
 801687e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016882:	4639      	mov	r1, r7
 8016884:	4630      	mov	r0, r6
 8016886:	47c0      	blx	r8
 8016888:	3001      	adds	r0, #1
 801688a:	d020      	beq.n	80168ce <_printf_common+0xb2>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	68e5      	ldr	r5, [r4, #12]
 8016890:	f8d9 2000 	ldr.w	r2, [r9]
 8016894:	f003 0306 	and.w	r3, r3, #6
 8016898:	2b04      	cmp	r3, #4
 801689a:	bf08      	it	eq
 801689c:	1aad      	subeq	r5, r5, r2
 801689e:	68a3      	ldr	r3, [r4, #8]
 80168a0:	6922      	ldr	r2, [r4, #16]
 80168a2:	bf0c      	ite	eq
 80168a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168a8:	2500      	movne	r5, #0
 80168aa:	4293      	cmp	r3, r2
 80168ac:	bfc4      	itt	gt
 80168ae:	1a9b      	subgt	r3, r3, r2
 80168b0:	18ed      	addgt	r5, r5, r3
 80168b2:	f04f 0900 	mov.w	r9, #0
 80168b6:	341a      	adds	r4, #26
 80168b8:	454d      	cmp	r5, r9
 80168ba:	d11a      	bne.n	80168f2 <_printf_common+0xd6>
 80168bc:	2000      	movs	r0, #0
 80168be:	e008      	b.n	80168d2 <_printf_common+0xb6>
 80168c0:	2301      	movs	r3, #1
 80168c2:	4652      	mov	r2, sl
 80168c4:	4639      	mov	r1, r7
 80168c6:	4630      	mov	r0, r6
 80168c8:	47c0      	blx	r8
 80168ca:	3001      	adds	r0, #1
 80168cc:	d103      	bne.n	80168d6 <_printf_common+0xba>
 80168ce:	f04f 30ff 	mov.w	r0, #4294967295
 80168d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168d6:	3501      	adds	r5, #1
 80168d8:	e7c3      	b.n	8016862 <_printf_common+0x46>
 80168da:	18e1      	adds	r1, r4, r3
 80168dc:	1c5a      	adds	r2, r3, #1
 80168de:	2030      	movs	r0, #48	; 0x30
 80168e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80168e4:	4422      	add	r2, r4
 80168e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80168ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80168ee:	3302      	adds	r3, #2
 80168f0:	e7c5      	b.n	801687e <_printf_common+0x62>
 80168f2:	2301      	movs	r3, #1
 80168f4:	4622      	mov	r2, r4
 80168f6:	4639      	mov	r1, r7
 80168f8:	4630      	mov	r0, r6
 80168fa:	47c0      	blx	r8
 80168fc:	3001      	adds	r0, #1
 80168fe:	d0e6      	beq.n	80168ce <_printf_common+0xb2>
 8016900:	f109 0901 	add.w	r9, r9, #1
 8016904:	e7d8      	b.n	80168b8 <_printf_common+0x9c>
	...

08016908 <_printf_i>:
 8016908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801690c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016910:	460c      	mov	r4, r1
 8016912:	7e09      	ldrb	r1, [r1, #24]
 8016914:	b085      	sub	sp, #20
 8016916:	296e      	cmp	r1, #110	; 0x6e
 8016918:	4617      	mov	r7, r2
 801691a:	4606      	mov	r6, r0
 801691c:	4698      	mov	r8, r3
 801691e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016920:	f000 80b3 	beq.w	8016a8a <_printf_i+0x182>
 8016924:	d822      	bhi.n	801696c <_printf_i+0x64>
 8016926:	2963      	cmp	r1, #99	; 0x63
 8016928:	d036      	beq.n	8016998 <_printf_i+0x90>
 801692a:	d80a      	bhi.n	8016942 <_printf_i+0x3a>
 801692c:	2900      	cmp	r1, #0
 801692e:	f000 80b9 	beq.w	8016aa4 <_printf_i+0x19c>
 8016932:	2958      	cmp	r1, #88	; 0x58
 8016934:	f000 8083 	beq.w	8016a3e <_printf_i+0x136>
 8016938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801693c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016940:	e032      	b.n	80169a8 <_printf_i+0xa0>
 8016942:	2964      	cmp	r1, #100	; 0x64
 8016944:	d001      	beq.n	801694a <_printf_i+0x42>
 8016946:	2969      	cmp	r1, #105	; 0x69
 8016948:	d1f6      	bne.n	8016938 <_printf_i+0x30>
 801694a:	6820      	ldr	r0, [r4, #0]
 801694c:	6813      	ldr	r3, [r2, #0]
 801694e:	0605      	lsls	r5, r0, #24
 8016950:	f103 0104 	add.w	r1, r3, #4
 8016954:	d52a      	bpl.n	80169ac <_printf_i+0xa4>
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	6011      	str	r1, [r2, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	da03      	bge.n	8016966 <_printf_i+0x5e>
 801695e:	222d      	movs	r2, #45	; 0x2d
 8016960:	425b      	negs	r3, r3
 8016962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016966:	486f      	ldr	r0, [pc, #444]	; (8016b24 <_printf_i+0x21c>)
 8016968:	220a      	movs	r2, #10
 801696a:	e039      	b.n	80169e0 <_printf_i+0xd8>
 801696c:	2973      	cmp	r1, #115	; 0x73
 801696e:	f000 809d 	beq.w	8016aac <_printf_i+0x1a4>
 8016972:	d808      	bhi.n	8016986 <_printf_i+0x7e>
 8016974:	296f      	cmp	r1, #111	; 0x6f
 8016976:	d020      	beq.n	80169ba <_printf_i+0xb2>
 8016978:	2970      	cmp	r1, #112	; 0x70
 801697a:	d1dd      	bne.n	8016938 <_printf_i+0x30>
 801697c:	6823      	ldr	r3, [r4, #0]
 801697e:	f043 0320 	orr.w	r3, r3, #32
 8016982:	6023      	str	r3, [r4, #0]
 8016984:	e003      	b.n	801698e <_printf_i+0x86>
 8016986:	2975      	cmp	r1, #117	; 0x75
 8016988:	d017      	beq.n	80169ba <_printf_i+0xb2>
 801698a:	2978      	cmp	r1, #120	; 0x78
 801698c:	d1d4      	bne.n	8016938 <_printf_i+0x30>
 801698e:	2378      	movs	r3, #120	; 0x78
 8016990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016994:	4864      	ldr	r0, [pc, #400]	; (8016b28 <_printf_i+0x220>)
 8016996:	e055      	b.n	8016a44 <_printf_i+0x13c>
 8016998:	6813      	ldr	r3, [r2, #0]
 801699a:	1d19      	adds	r1, r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	6011      	str	r1, [r2, #0]
 80169a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80169a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169a8:	2301      	movs	r3, #1
 80169aa:	e08c      	b.n	8016ac6 <_printf_i+0x1be>
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	6011      	str	r1, [r2, #0]
 80169b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80169b4:	bf18      	it	ne
 80169b6:	b21b      	sxthne	r3, r3
 80169b8:	e7cf      	b.n	801695a <_printf_i+0x52>
 80169ba:	6813      	ldr	r3, [r2, #0]
 80169bc:	6825      	ldr	r5, [r4, #0]
 80169be:	1d18      	adds	r0, r3, #4
 80169c0:	6010      	str	r0, [r2, #0]
 80169c2:	0628      	lsls	r0, r5, #24
 80169c4:	d501      	bpl.n	80169ca <_printf_i+0xc2>
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	e002      	b.n	80169d0 <_printf_i+0xc8>
 80169ca:	0668      	lsls	r0, r5, #25
 80169cc:	d5fb      	bpl.n	80169c6 <_printf_i+0xbe>
 80169ce:	881b      	ldrh	r3, [r3, #0]
 80169d0:	4854      	ldr	r0, [pc, #336]	; (8016b24 <_printf_i+0x21c>)
 80169d2:	296f      	cmp	r1, #111	; 0x6f
 80169d4:	bf14      	ite	ne
 80169d6:	220a      	movne	r2, #10
 80169d8:	2208      	moveq	r2, #8
 80169da:	2100      	movs	r1, #0
 80169dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80169e0:	6865      	ldr	r5, [r4, #4]
 80169e2:	60a5      	str	r5, [r4, #8]
 80169e4:	2d00      	cmp	r5, #0
 80169e6:	f2c0 8095 	blt.w	8016b14 <_printf_i+0x20c>
 80169ea:	6821      	ldr	r1, [r4, #0]
 80169ec:	f021 0104 	bic.w	r1, r1, #4
 80169f0:	6021      	str	r1, [r4, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d13d      	bne.n	8016a72 <_printf_i+0x16a>
 80169f6:	2d00      	cmp	r5, #0
 80169f8:	f040 808e 	bne.w	8016b18 <_printf_i+0x210>
 80169fc:	4665      	mov	r5, ip
 80169fe:	2a08      	cmp	r2, #8
 8016a00:	d10b      	bne.n	8016a1a <_printf_i+0x112>
 8016a02:	6823      	ldr	r3, [r4, #0]
 8016a04:	07db      	lsls	r3, r3, #31
 8016a06:	d508      	bpl.n	8016a1a <_printf_i+0x112>
 8016a08:	6923      	ldr	r3, [r4, #16]
 8016a0a:	6862      	ldr	r2, [r4, #4]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	bfde      	ittt	le
 8016a10:	2330      	movle	r3, #48	; 0x30
 8016a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016a1a:	ebac 0305 	sub.w	r3, ip, r5
 8016a1e:	6123      	str	r3, [r4, #16]
 8016a20:	f8cd 8000 	str.w	r8, [sp]
 8016a24:	463b      	mov	r3, r7
 8016a26:	aa03      	add	r2, sp, #12
 8016a28:	4621      	mov	r1, r4
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	f7ff fef6 	bl	801681c <_printf_common>
 8016a30:	3001      	adds	r0, #1
 8016a32:	d14d      	bne.n	8016ad0 <_printf_i+0x1c8>
 8016a34:	f04f 30ff 	mov.w	r0, #4294967295
 8016a38:	b005      	add	sp, #20
 8016a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a3e:	4839      	ldr	r0, [pc, #228]	; (8016b24 <_printf_i+0x21c>)
 8016a40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016a44:	6813      	ldr	r3, [r2, #0]
 8016a46:	6821      	ldr	r1, [r4, #0]
 8016a48:	1d1d      	adds	r5, r3, #4
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	6015      	str	r5, [r2, #0]
 8016a4e:	060a      	lsls	r2, r1, #24
 8016a50:	d50b      	bpl.n	8016a6a <_printf_i+0x162>
 8016a52:	07ca      	lsls	r2, r1, #31
 8016a54:	bf44      	itt	mi
 8016a56:	f041 0120 	orrmi.w	r1, r1, #32
 8016a5a:	6021      	strmi	r1, [r4, #0]
 8016a5c:	b91b      	cbnz	r3, 8016a66 <_printf_i+0x15e>
 8016a5e:	6822      	ldr	r2, [r4, #0]
 8016a60:	f022 0220 	bic.w	r2, r2, #32
 8016a64:	6022      	str	r2, [r4, #0]
 8016a66:	2210      	movs	r2, #16
 8016a68:	e7b7      	b.n	80169da <_printf_i+0xd2>
 8016a6a:	064d      	lsls	r5, r1, #25
 8016a6c:	bf48      	it	mi
 8016a6e:	b29b      	uxthmi	r3, r3
 8016a70:	e7ef      	b.n	8016a52 <_printf_i+0x14a>
 8016a72:	4665      	mov	r5, ip
 8016a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8016a78:	fb02 3311 	mls	r3, r2, r1, r3
 8016a7c:	5cc3      	ldrb	r3, [r0, r3]
 8016a7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016a82:	460b      	mov	r3, r1
 8016a84:	2900      	cmp	r1, #0
 8016a86:	d1f5      	bne.n	8016a74 <_printf_i+0x16c>
 8016a88:	e7b9      	b.n	80169fe <_printf_i+0xf6>
 8016a8a:	6813      	ldr	r3, [r2, #0]
 8016a8c:	6825      	ldr	r5, [r4, #0]
 8016a8e:	6961      	ldr	r1, [r4, #20]
 8016a90:	1d18      	adds	r0, r3, #4
 8016a92:	6010      	str	r0, [r2, #0]
 8016a94:	0628      	lsls	r0, r5, #24
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	d501      	bpl.n	8016a9e <_printf_i+0x196>
 8016a9a:	6019      	str	r1, [r3, #0]
 8016a9c:	e002      	b.n	8016aa4 <_printf_i+0x19c>
 8016a9e:	066a      	lsls	r2, r5, #25
 8016aa0:	d5fb      	bpl.n	8016a9a <_printf_i+0x192>
 8016aa2:	8019      	strh	r1, [r3, #0]
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	6123      	str	r3, [r4, #16]
 8016aa8:	4665      	mov	r5, ip
 8016aaa:	e7b9      	b.n	8016a20 <_printf_i+0x118>
 8016aac:	6813      	ldr	r3, [r2, #0]
 8016aae:	1d19      	adds	r1, r3, #4
 8016ab0:	6011      	str	r1, [r2, #0]
 8016ab2:	681d      	ldr	r5, [r3, #0]
 8016ab4:	6862      	ldr	r2, [r4, #4]
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f7e9 fb91 	bl	80001e0 <memchr>
 8016abe:	b108      	cbz	r0, 8016ac4 <_printf_i+0x1bc>
 8016ac0:	1b40      	subs	r0, r0, r5
 8016ac2:	6060      	str	r0, [r4, #4]
 8016ac4:	6863      	ldr	r3, [r4, #4]
 8016ac6:	6123      	str	r3, [r4, #16]
 8016ac8:	2300      	movs	r3, #0
 8016aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ace:	e7a7      	b.n	8016a20 <_printf_i+0x118>
 8016ad0:	6923      	ldr	r3, [r4, #16]
 8016ad2:	462a      	mov	r2, r5
 8016ad4:	4639      	mov	r1, r7
 8016ad6:	4630      	mov	r0, r6
 8016ad8:	47c0      	blx	r8
 8016ada:	3001      	adds	r0, #1
 8016adc:	d0aa      	beq.n	8016a34 <_printf_i+0x12c>
 8016ade:	6823      	ldr	r3, [r4, #0]
 8016ae0:	079b      	lsls	r3, r3, #30
 8016ae2:	d413      	bmi.n	8016b0c <_printf_i+0x204>
 8016ae4:	68e0      	ldr	r0, [r4, #12]
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	4298      	cmp	r0, r3
 8016aea:	bfb8      	it	lt
 8016aec:	4618      	movlt	r0, r3
 8016aee:	e7a3      	b.n	8016a38 <_printf_i+0x130>
 8016af0:	2301      	movs	r3, #1
 8016af2:	464a      	mov	r2, r9
 8016af4:	4639      	mov	r1, r7
 8016af6:	4630      	mov	r0, r6
 8016af8:	47c0      	blx	r8
 8016afa:	3001      	adds	r0, #1
 8016afc:	d09a      	beq.n	8016a34 <_printf_i+0x12c>
 8016afe:	3501      	adds	r5, #1
 8016b00:	68e3      	ldr	r3, [r4, #12]
 8016b02:	9a03      	ldr	r2, [sp, #12]
 8016b04:	1a9b      	subs	r3, r3, r2
 8016b06:	42ab      	cmp	r3, r5
 8016b08:	dcf2      	bgt.n	8016af0 <_printf_i+0x1e8>
 8016b0a:	e7eb      	b.n	8016ae4 <_printf_i+0x1dc>
 8016b0c:	2500      	movs	r5, #0
 8016b0e:	f104 0919 	add.w	r9, r4, #25
 8016b12:	e7f5      	b.n	8016b00 <_printf_i+0x1f8>
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d1ac      	bne.n	8016a72 <_printf_i+0x16a>
 8016b18:	7803      	ldrb	r3, [r0, #0]
 8016b1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b22:	e76c      	b.n	80169fe <_printf_i+0xf6>
 8016b24:	0801ae69 	.word	0x0801ae69
 8016b28:	0801ae7a 	.word	0x0801ae7a

08016b2c <memmove>:
 8016b2c:	4288      	cmp	r0, r1
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	eb01 0302 	add.w	r3, r1, r2
 8016b34:	d807      	bhi.n	8016b46 <memmove+0x1a>
 8016b36:	1e42      	subs	r2, r0, #1
 8016b38:	4299      	cmp	r1, r3
 8016b3a:	d00a      	beq.n	8016b52 <memmove+0x26>
 8016b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016b44:	e7f8      	b.n	8016b38 <memmove+0xc>
 8016b46:	4283      	cmp	r3, r0
 8016b48:	d9f5      	bls.n	8016b36 <memmove+0xa>
 8016b4a:	1881      	adds	r1, r0, r2
 8016b4c:	1ad2      	subs	r2, r2, r3
 8016b4e:	42d3      	cmn	r3, r2
 8016b50:	d100      	bne.n	8016b54 <memmove+0x28>
 8016b52:	bd10      	pop	{r4, pc}
 8016b54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016b5c:	e7f7      	b.n	8016b4e <memmove+0x22>

08016b5e <_realloc_r>:
 8016b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b60:	4607      	mov	r7, r0
 8016b62:	4614      	mov	r4, r2
 8016b64:	460e      	mov	r6, r1
 8016b66:	b921      	cbnz	r1, 8016b72 <_realloc_r+0x14>
 8016b68:	4611      	mov	r1, r2
 8016b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016b6e:	f7ff bc6f 	b.w	8016450 <_malloc_r>
 8016b72:	b922      	cbnz	r2, 8016b7e <_realloc_r+0x20>
 8016b74:	f7ff fc1e 	bl	80163b4 <_free_r>
 8016b78:	4625      	mov	r5, r4
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b7e:	f000 f814 	bl	8016baa <_malloc_usable_size_r>
 8016b82:	42a0      	cmp	r0, r4
 8016b84:	d20f      	bcs.n	8016ba6 <_realloc_r+0x48>
 8016b86:	4621      	mov	r1, r4
 8016b88:	4638      	mov	r0, r7
 8016b8a:	f7ff fc61 	bl	8016450 <_malloc_r>
 8016b8e:	4605      	mov	r5, r0
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0f2      	beq.n	8016b7a <_realloc_r+0x1c>
 8016b94:	4631      	mov	r1, r6
 8016b96:	4622      	mov	r2, r4
 8016b98:	f7ff fbf9 	bl	801638e <memcpy>
 8016b9c:	4631      	mov	r1, r6
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	f7ff fc08 	bl	80163b4 <_free_r>
 8016ba4:	e7e9      	b.n	8016b7a <_realloc_r+0x1c>
 8016ba6:	4635      	mov	r5, r6
 8016ba8:	e7e7      	b.n	8016b7a <_realloc_r+0x1c>

08016baa <_malloc_usable_size_r>:
 8016baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bae:	1f18      	subs	r0, r3, #4
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	bfbc      	itt	lt
 8016bb4:	580b      	ldrlt	r3, [r1, r0]
 8016bb6:	18c0      	addlt	r0, r0, r3
 8016bb8:	4770      	bx	lr
	...

08016bbc <_init>:
 8016bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bbe:	bf00      	nop
 8016bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bc2:	bc08      	pop	{r3}
 8016bc4:	469e      	mov	lr, r3
 8016bc6:	4770      	bx	lr

08016bc8 <_fini>:
 8016bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bca:	bf00      	nop
 8016bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bce:	bc08      	pop	{r3}
 8016bd0:	469e      	mov	lr, r3
 8016bd2:	4770      	bx	lr
