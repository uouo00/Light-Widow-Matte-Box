
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017944  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042f0  08017ae4  08017ae4  00027ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bdd4  0801bdd4  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801bdd4  0801bdd4  0002bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bddc  0801bddc  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bddc  0801bddc  0002bddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bde0  0801bde0  0002bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801bde4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002620  20000238  0801c01c  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002858  0801c01c  00032858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3f5  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000804a  00000000  00000000  0006c65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  000746a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f98  00000000  00000000  000769c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000126c4  00000000  00000000  00078958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b2a5  00000000  00000000  0008b01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1bd6  00000000  00000000  000b62c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167e97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009130  00000000  00000000  00167f14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017acc 	.word	0x08017acc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08017acc 	.word	0x08017acc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <DWT_Init+0x2c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <DWT_Init+0x2c>)
 8000d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <DWT_Init+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <DWT_Init+0x30>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <DWT_Init+0x30>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
    //}
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000edf0 	.word	0xe000edf0
 8000dac:	e0001000 	.word	0xe0001000

08000db0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <DWT_Delay+0x40>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <DWT_Delay+0x44>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <DWT_Delay+0x48>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9a      	lsrs	r2, r3, #18
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000dd2:	bf00      	nop
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <DWT_Delay+0x40>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d8f8      	bhi.n	8000dd4 <DWT_Delay+0x24>
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e0001000 	.word	0xe0001000
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	773b      	strb	r3, [r7, #28]
 8000e1e:	e07d      	b.n	8000f1c <updateFilterSection+0x120>
		UIDMatched = false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	777b      	strb	r3, [r7, #29]
 8000e28:	e02f      	b.n	8000e8a <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e2a:	7f7a      	ldrb	r2, [r7, #29]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	1c58      	adds	r0, r3, #1
 8000e3a:	7f3a      	ldrb	r2, [r7, #28]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	3308      	adds	r3, #8
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	f016 fa15 	bl	8017280 <memcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000e5c:	7f7a      	ldrb	r2, [r7, #29]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f107 010c 	add.w	r1, r7, #12
 8000e70:	2208      	movs	r2, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f016 fa04 	bl	8017280 <memcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	77bb      	strb	r3, [r7, #30]
					break;
 8000e82:	e005      	b.n	8000e90 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	3301      	adds	r3, #1
 8000e88:	777b      	strb	r3, [r7, #29]
 8000e8a:	7f7b      	ldrb	r3, [r7, #29]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d9cc      	bls.n	8000e2a <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000e90:	7fbb      	ldrb	r3, [r7, #30]
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d03c      	beq.n	8000f16 <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000e9c:	7f3a      	ldrb	r2, [r7, #28]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	3303      	adds	r3, #3
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f016 f9e2 	bl	8017280 <memcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d029      	beq.n	8000f16 <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000ec2:	7f3a      	ldrb	r2, [r7, #28]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	3308      	adds	r3, #8
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f016 f9ea 	bl	80172b4 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000ee0:	7f3a      	ldrb	r2, [r7, #28]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f016 f9dc 	bl	80172b4 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000efc:	7f3a      	ldrb	r2, [r7, #28]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3313      	adds	r3, #19
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000f12:	2301      	movs	r3, #1
 8000f14:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000f16:	7f3b      	ldrb	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	773b      	strb	r3, [r7, #28]
 8000f1c:	7f3b      	ldrb	r3, [r7, #28]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	f67f af7e 	bls.w	8000e20 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	777b      	strb	r3, [r7, #29]
 8000f28:	e0bc      	b.n	80010a4 <updateFilterSection+0x2a8>
		UIDMatched = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	773b      	strb	r3, [r7, #28]
 8000f32:	e01e      	b.n	8000f72 <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000f34:	7f7a      	ldrb	r2, [r7, #29]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	1c58      	adds	r0, r3, #1
 8000f44:	7f3a      	ldrb	r2, [r7, #28]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3308      	adds	r3, #8
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	3303      	adds	r3, #3
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f016 f990 	bl	8017280 <memcmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000f66:	2301      	movs	r3, #1
 8000f68:	77bb      	strb	r3, [r7, #30]
				break;
 8000f6a:	e005      	b.n	8000f78 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f6c:	7f3b      	ldrb	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	773b      	strb	r3, [r7, #28]
 8000f72:	7f3b      	ldrb	r3, [r7, #28]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d9dd      	bls.n	8000f34 <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000f78:	7fbb      	ldrb	r3, [r7, #30]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 808c 	beq.w	800109e <updateFilterSection+0x2a2>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000f86:	7f7a      	ldrb	r2, [r7, #29]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 010c 	add.w	r1, r7, #12
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f016 f96f 	bl	8017280 <memcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d07a      	beq.n	800109e <updateFilterSection+0x2a2>
				// A new filter has been installed.
				bool stageEmpty; // Holder for the empty stage
				uint8_t stagePos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000fa8:	7f7a      	ldrb	r2, [r7, #29]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f107 010c 	add.w	r1, r7, #12
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f016 f95d 	bl	8017280 <memcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d066      	beq.n	800109a <updateFilterSection+0x29e>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000fcc:	2300      	movs	r3, #0
 8000fce:	76bb      	strb	r3, [r7, #26]
 8000fd0:	e021      	b.n	8001016 <updateFilterSection+0x21a>
						stageEmpty = true; // Assume the stage is empty
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	767b      	strb	r3, [r7, #25]
 8000fda:	e013      	b.n	8001004 <updateFilterSection+0x208>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000fdc:	7e7a      	ldrb	r2, [r7, #25]
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	3313      	adds	r3, #19
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	7ebb      	ldrb	r3, [r7, #26]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d101      	bne.n	8000ffe <updateFilterSection+0x202>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000ffe:	7e7b      	ldrb	r3, [r7, #25]
 8001000:	3301      	adds	r3, #1
 8001002:	767b      	strb	r3, [r7, #25]
 8001004:	7e7b      	ldrb	r3, [r7, #25]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d9e8      	bls.n	8000fdc <updateFilterSection+0x1e0>
							}
						}

						if (stageEmpty) {
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <updateFilterSection+0x222>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8001010:	7ebb      	ldrb	r3, [r7, #26]
 8001012:	3301      	adds	r3, #1
 8001014:	76bb      	strb	r3, [r7, #26]
 8001016:	7ebb      	ldrb	r3, [r7, #26]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d9da      	bls.n	8000fd2 <updateFilterSection+0x1d6>
 800101c:	e000      	b.n	8001020 <updateFilterSection+0x224>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 800101e:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[stagePos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 8001020:	7eba      	ldrb	r2, [r7, #26]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	3308      	adds	r3, #8
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	1cd8      	adds	r0, r3, #3
 8001034:	7f7a      	ldrb	r2, [r7, #29]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	3301      	adds	r3, #1
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	f016 f929 	bl	801729e <memcpy>
					memcpy(currentFilters->filter[stagePos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 800104c:	7eba      	ldrb	r2, [r7, #26]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	1c58      	adds	r0, r3, #1
 800105e:	7f7a      	ldrb	r2, [r7, #29]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3308      	adds	r3, #8
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	3301      	adds	r3, #1
 8001070:	220a      	movs	r2, #10
 8001072:	4619      	mov	r1, r3
 8001074:	f016 f913 	bl	801729e <memcpy>
					currentFilters->filter[stagePos].position = stagePos + 1;
 8001078:	7eba      	ldrb	r2, [r7, #26]
 800107a:	7ebb      	ldrb	r3, [r7, #26]
 800107c:	3301      	adds	r3, #1
 800107e:	b2d8      	uxtb	r0, r3
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	440b      	add	r3, r1
 800108e:	3313      	adds	r3, #19
 8001090:	4602      	mov	r2, r0
 8001092:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 8001094:	2302      	movs	r3, #2
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	e001      	b.n	800109e <updateFilterSection+0x2a2>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 800109a:	2303      	movs	r3, #3
 800109c:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 800109e:	7f7b      	ldrb	r3, [r7, #29]
 80010a0:	3301      	adds	r3, #1
 80010a2:	777b      	strb	r3, [r7, #29]
 80010a4:	7f7b      	ldrb	r3, [r7, #29]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	f67f af3f 	bls.w	8000f2a <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	701a      	strb	r2, [r3, #0]

	return status;
 80010b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8

	// Initialize the temperature sensor
	LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 80010c6:	2220      	movs	r2, #32
 80010c8:	4921      	ldr	r1, [pc, #132]	; (8001150 <setupIOs+0x90>)
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <setupIOs+0x94>)
 80010cc:	f002 fc46 	bl	800395c <LM75B_Init>

	// Initialize and Setup the E-Paper Display
	EPD_Init(EPD_2_0, &hspi2, &epd1);
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <setupIOs+0x98>)
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <setupIOs+0x9c>)
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 fdc9 	bl	8001c6c <EPD_Init>

	// Initialize the GFX Library for the EPD
	Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <setupIOs+0x98>)
 80010dc:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <setupIOs+0x98>)
 80010e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010e2:	461a      	mov	r2, r3
 80010e4:	481e      	ldr	r0, [pc, #120]	; (8001160 <setupIOs+0xa0>)
 80010e6:	f001 ff7f 	bl	8002fe8 <Canvas_Init>
	// Text rotation for a vertical display orientation
	canvas_SetRotate(&canvas1, ROTATE_90);
 80010ea:	2101      	movs	r1, #1
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <setupIOs+0xa0>)
 80010ee:	f002 f9a5 	bl	800343c <canvas_SetRotate>

	// Clear the EPD
	EPD_begin(&epd1);
 80010f2:	4819      	ldr	r0, [pc, #100]	; (8001158 <setupIOs+0x98>)
 80010f4:	f000 feee 	bl	8001ed4 <EPD_begin>
	EPD_clear(&epd1);
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <setupIOs+0x98>)
 80010fa:	f001 fa77 	bl	80025ec <EPD_clear>
	EPD_end(&epd1);
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <setupIOs+0x98>)
 8001100:	f001 f958 	bl	80023b4 <EPD_end>

	// Render a string of text to the buffer image
	canvas_setBGImage(&canvas1, image_background);
 8001104:	4917      	ldr	r1, [pc, #92]	; (8001164 <setupIOs+0xa4>)
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <setupIOs+0xa0>)
 8001108:	f002 fb81 	bl	800380e <canvas_setBGImage>
	canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <setupIOs+0xa8>)
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <setupIOs+0xac>)
 8001116:	2203      	movs	r2, #3
 8001118:	210a      	movs	r1, #10
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <setupIOs+0xa0>)
 800111c:	f002 fb31 	bl	8003782 <canvas_DrawStringAt>
	// Update the EPD with the new image
	canvas_PrintEPD(&canvas1, &epd1);
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <setupIOs+0x98>)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <setupIOs+0xa0>)
 8001124:	f002 fb5e 	bl	80037e4 <canvas_PrintEPD>
	//  BQ27441_Init(&hi2c1, &lipo1);
	//  // Setup the Fuel Gauge
	//  BQ27441_Setup(&lipo1);

	// Initialize the SD Card
	dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <setupIOs+0xb0>)
 800112c:	f000 fb9a 	bl	8001864 <dataLoggerInit>

	HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2108      	movs	r1, #8
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <setupIOs+0xb4>)
 8001136:	f004 fd01 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800113a:	2005      	movs	r0, #5
 800113c:	f004 fa0e 	bl	800555c <HAL_Delay>
	spiInit(&hspi1);
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <setupIOs+0xb8>)
 8001142:	f003 fa55 	bl	80045f0 <spiInit>

	rfidControllerInit();
 8001146:	f003 f92f 	bl	80043a8 <rfidControllerInit>
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	20000fec 	.word	0x20000fec
 8001158:	20000eec 	.word	0x20000eec
 800115c:	20000f94 	.word	0x20000f94
 8001160:	20000f78 	.word	0x20000f78
 8001164:	08017d00 	.word	0x08017d00
 8001168:	2000003c 	.word	0x2000003c
 800116c:	08017ae4 	.word	0x08017ae4
 8001170:	40020800 	.word	0x40020800
 8001174:	40020000 	.word	0x40020000
 8001178:	200010e4 	.word	0x200010e4

0800117c <processIOs>:


void processIOs(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

//		HAL_GPIO_WritePin(DBG_OUT_TX_GPIO_Port, DBG_OUT_TX_Pin, 0);
//		HAL_GPIO_WritePin(DBG_OUT_RX_GPIO_Port, DBG_OUT_RX_Pin, 0);

		// Keep the RFAL Happy
		rfalWorker();
 8001182:	f00d fae5 	bl	800e750 <rfalWorker>

		// Check ISR events
		checkISREvents();
 8001186:	f000 f8a7 	bl	80012d8 <checkISREvents>

		switch (processState) {
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <processIOs+0x13c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d8f7      	bhi.n	8001182 <processIOs+0x6>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <processIOs+0x1c>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011ad 	.word	0x080011ad
 800119c:	0800121b 	.word	0x0800121b
 80011a0:	0800124b 	.word	0x0800124b
 80011a4:	08001253 	.word	0x08001253
 80011a8:	08001271 	.word	0x08001271

				// Check on the CLI to see if any new commands are present
				//checkCliStatus();

				// Find filters present in the matte box
				checkFilterTags(&dTags);
 80011ac:	4843      	ldr	r0, [pc, #268]	; (80012bc <processIOs+0x140>)
 80011ae:	f003 f91b 	bl	80043e8 <checkFilterTags>

				// Compare found filter tags with previous filter section
				filterStatus = updateFilterSection(&dTags, &fSection);
 80011b2:	4943      	ldr	r1, [pc, #268]	; (80012c0 <processIOs+0x144>)
 80011b4:	4841      	ldr	r0, [pc, #260]	; (80012bc <processIOs+0x140>)
 80011b6:	f7ff fe21 	bl	8000dfc <updateFilterSection>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				switch (filterStatus) {
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d819      	bhi.n	80011fc <processIOs+0x80>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <processIOs+0x54>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011fd 	.word	0x080011fd
 80011d4:	080011e1 	.word	0x080011e1
 80011d8:	080011e1 	.word	0x080011e1
 80011dc:	080011f5 	.word	0x080011f5
						break;

					case FILTER_REMOVED:
					case FILTER_INSTALLED:
						// Update the EPD with the new filter line up.
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80011e0:	2300      	movs	r3, #0
 80011e2:	4a37      	ldr	r2, [pc, #220]	; (80012c0 <processIOs+0x144>)
 80011e4:	4937      	ldr	r1, [pc, #220]	; (80012c4 <processIOs+0x148>)
 80011e6:	4838      	ldr	r0, [pc, #224]	; (80012c8 <processIOs+0x14c>)
 80011e8:	f001 ff42 	bl	8003070 <canvas_DrawFilters>
						// Log to the SD Card
						SDDataLog(&fSection);
 80011ec:	4834      	ldr	r0, [pc, #208]	; (80012c0 <processIOs+0x144>)
 80011ee:	f000 fcd1 	bl	8001b94 <SDDataLog>
						break;
 80011f2:	e003      	b.n	80011fc <processIOs+0x80>

					case UNKNOWN_FILTER_NAME:
						// Change state
						processState = UPDATE_FILTER_NAME;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <processIOs+0x13c>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
						break;
 80011fa:	bf00      	nop
				}

				// Set the RFID Chip into Wake Up Mode
				ReturnCode err = startWakeUpMode();
 80011fc:	f003 f9c0 	bl	8004580 <startWakeUpMode>
 8001200:	4603      	mov	r3, r0
 8001202:	84bb      	strh	r3, [r7, #36]	; 0x24
				if (err == ERR_NONE) {
 8001204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <processIOs+0x94>
					processState = RFID_WAKEUP_MODE;
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <processIOs+0x13c>)
 800120c:	2203      	movs	r2, #3
 800120e:	701a      	strb	r2, [r3, #0]
				}

//				gotoSleep();
//				SystemClock_Config();

				HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f004 f9a2 	bl	800555c <HAL_Delay>
				break;
 8001218:	e04d      	b.n	80012b6 <processIOs+0x13a>

			case CHANGE_FILTER_POS:
				// Wait for another button press. Timeout after X amount of time.
				if (timeoutCtr >= FILTER_POSITION_TIMEOUT) {
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <processIOs+0x150>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001222:	d308      	bcc.n	8001236 <processIOs+0xba>
					// Draw stored
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001224:	2300      	movs	r3, #0
 8001226:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <processIOs+0x144>)
 8001228:	4926      	ldr	r1, [pc, #152]	; (80012c4 <processIOs+0x148>)
 800122a:	4827      	ldr	r0, [pc, #156]	; (80012c8 <processIOs+0x14c>)
 800122c:	f001 ff20 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <processIOs+0x13c>)
 8001232:	2203      	movs	r2, #3
 8001234:	701a      	strb	r2, [r3, #0]
				}

				HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f004 f990 	bl	800555c <HAL_Delay>
				timeoutCtr++;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <processIOs+0x150>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <processIOs+0x150>)
 8001246:	801a      	strh	r2, [r3, #0]
				break;
 8001248:	e035      	b.n	80012b6 <processIOs+0x13a>

			case UPDATE_FILTER_NAME:

				// Place Holder
				processState = NORMAL_OPERATION;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <processIOs+0x13c>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
				break;
 8001250:	e031      	b.n	80012b6 <processIOs+0x13a>

			case RFID_WAKEUP_MODE:
				// Handle an external wake up from the RFID chip
				if (rfalWakeUpModeHasWoke()){
 8001252:	f00e fcad 	bl	800fbb0 <rfalWakeUpModeHasWoke>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d02b      	beq.n	80012b4 <processIOs+0x138>
					rfalWakeUpModeStop();
 800125c:	f00e fd94 	bl	800fd88 <rfalWakeUpModeStop>
					processState = NORMAL_OPERATION;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <processIOs+0x13c>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS("INTERRUPT\r\n", 11);
 8001266:	210b      	movs	r1, #11
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <processIOs+0x154>)
 800126a:	f015 fb8d 	bl	8016988 <CDC_Transmit_FS>
				}
				break;
 800126e:	e021      	b.n	80012b4 <processIOs+0x138>
			case TEST_MODE:

				st25r3916MeasureAmplitude(&ampMeas);
 8001270:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001274:	4618      	mov	r0, r3
 8001276:	f00e ff5e 	bl	8010136 <st25r3916MeasureAmplitude>
				st25r3916MeasurePhase(&phsMeas);
 800127a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800127e:	4618      	mov	r0, r3
 8001280:	f00e ff68 	bl	8010154 <st25r3916MeasurePhase>

				sprintf(tmpStr, "Amplitude: %d, Phase: %d\r\n", ampMeas, phsMeas);
 8001284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001288:	461a      	mov	r2, r3
 800128a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800128e:	1d38      	adds	r0, r7, #4
 8001290:	4910      	ldr	r1, [pc, #64]	; (80012d4 <processIOs+0x158>)
 8001292:	f016 f8cf 	bl	8017434 <siprintf>

				CDC_Transmit_FS(tmpStr, strlen((char *)tmpStr));
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ffa1 	bl	80001e0 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f015 fb6e 	bl	8016988 <CDC_Transmit_FS>
				HAL_Delay(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f004 f955 	bl	800555c <HAL_Delay>
				break;
 80012b2:	e000      	b.n	80012b6 <processIOs+0x13a>
				break;
 80012b4:	bf00      	nop
		rfalWorker();
 80012b6:	e764      	b.n	8001182 <processIOs+0x6>
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000eb4 	.word	0x20000eb4
 80012c0:	20000f3c 	.word	0x20000f3c
 80012c4:	20000eec 	.word	0x20000eec
 80012c8:	20000f78 	.word	0x20000f78
 80012cc:	20000f86 	.word	0x20000f86
 80012d0:	08017aec 	.word	0x08017aec
 80012d4:	08017af8 	.word	0x08017af8

080012d8 <checkISREvents>:
}

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
void checkISREvents(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	bool posFound;
//	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1};

	if (isr_flags > 0){
 80012de:	4ba4      	ldr	r3, [pc, #656]	; (8001570 <checkISREvents+0x298>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 81c4 	beq.w	8001670 <checkISREvents+0x398>
		if (isr_flags & INIT_FAT_FS) {
 80012e8:	4ba1      	ldr	r3, [pc, #644]	; (8001570 <checkISREvents+0x298>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <checkISREvents+0x24>
			// An SD Card was inserted, Re-initialize FatFs and DataLogger
			dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	489f      	ldr	r0, [pc, #636]	; (8001574 <checkISREvents+0x29c>)
 80012f8:	f000 fab4 	bl	8001864 <dataLoggerInit>
		}

		if (isr_flags & DEINIT_FAT_FS) {
 80012fc:	4b9c      	ldr	r3, [pc, #624]	; (8001570 <checkISREvents+0x298>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <checkISREvents+0x34>
			// An SD Card was removed, De-initialize FatFs and DataLogger
			dataLoggerDeInit();
 8001308:	f000 fafe 	bl	8001908 <dataLoggerDeInit>
		}

		if (isr_flags & BTN_1_SH_PRESS) {
 800130c:	4b98      	ldr	r3, [pc, #608]	; (8001570 <checkISREvents+0x298>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d055      	beq.n	80013c4 <checkISREvents+0xec>
			// Button 1 was short pressed.
			switch (processState) {
 8001318:	4b97      	ldr	r3, [pc, #604]	; (8001578 <checkISREvents+0x2a0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d851      	bhi.n	80013c4 <checkISREvents+0xec>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <checkISREvents+0x50>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	0800133d 	.word	0x0800133d
 800132c:	08001395 	.word	0x08001395
 8001330:	080013c5 	.word	0x080013c5
 8001334:	0800133d 	.word	0x0800133d
 8001338:	080013c5 	.word	0x080013c5
				case RFID_WAKEUP_MODE:
					// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 800133c:	2300      	movs	r3, #0
 800133e:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001340:	2300      	movs	r3, #0
 8001342:	71bb      	strb	r3, [r7, #6]
 8001344:	e010      	b.n	8001368 <checkISREvents+0x90>

						if (fSection.filter[i].position == 1) {
 8001346:	79ba      	ldrb	r2, [r7, #6]
 8001348:	498c      	ldr	r1, [pc, #560]	; (800157c <checkISREvents+0x2a4>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	440b      	add	r3, r1
 8001356:	3313      	adds	r3, #19
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <checkISREvents+0x8a>
							posFound = true;
 800135e:	2301      	movs	r3, #1
 8001360:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	3301      	adds	r3, #1
 8001366:	71bb      	strb	r3, [r7, #6]
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d9eb      	bls.n	8001346 <checkISREvents+0x6e>
						}
					}

					if (posFound) {
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d026      	beq.n	80013c2 <checkISREvents+0xea>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 1;			// Log Button 1 as the first Selected Filter
 8001374:	4b82      	ldr	r3, [pc, #520]	; (8001580 <checkISREvents+0x2a8>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 800137a:	4b82      	ldr	r3, [pc, #520]	; (8001584 <checkISREvents+0x2ac>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 1);
 8001380:	2301      	movs	r3, #1
 8001382:	4a7e      	ldr	r2, [pc, #504]	; (800157c <checkISREvents+0x2a4>)
 8001384:	4980      	ldr	r1, [pc, #512]	; (8001588 <checkISREvents+0x2b0>)
 8001386:	4881      	ldr	r0, [pc, #516]	; (800158c <checkISREvents+0x2b4>)
 8001388:	f001 fe72 	bl	8003070 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 800138c:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <checkISREvents+0x2a0>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001392:	e016      	b.n	80013c2 <checkISREvents+0xea>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 8001394:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <checkISREvents+0x2a8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <checkISREvents+0xd0>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 800139c:	4b78      	ldr	r3, [pc, #480]	; (8001580 <checkISREvents+0x2a8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f976 	bl	8001694 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <checkISREvents+0x2a8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80013ae:	2300      	movs	r3, #0
 80013b0:	4a72      	ldr	r2, [pc, #456]	; (800157c <checkISREvents+0x2a4>)
 80013b2:	4975      	ldr	r1, [pc, #468]	; (8001588 <checkISREvents+0x2b0>)
 80013b4:	4875      	ldr	r0, [pc, #468]	; (800158c <checkISREvents+0x2b4>)
 80013b6:	f001 fe5b 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <checkISREvents+0x2a0>)
 80013bc:	2203      	movs	r2, #3
 80013be:	701a      	strb	r2, [r3, #0]
					break;
 80013c0:	e000      	b.n	80013c4 <checkISREvents+0xec>
					break;
 80013c2:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_1_LG_PRESS) {
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <checkISREvents+0x298>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d028      	beq.n	8001422 <checkISREvents+0x14a>
			// Button 1 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <checkISREvents+0x2a0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d824      	bhi.n	8001422 <checkISREvents+0x14a>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <checkISREvents+0x108>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001423 	.word	0x08001423
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	08001423 	.word	0x08001423
 80013ec:	08001423 	.word	0x08001423
 80013f0:	08001423 	.word	0x08001423
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 80013f4:	4b62      	ldr	r3, [pc, #392]	; (8001580 <checkISREvents+0x2a8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <checkISREvents+0x130>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 80013fc:	4b60      	ldr	r3, [pc, #384]	; (8001580 <checkISREvents+0x2a8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f946 	bl	8001694 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001408:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <checkISREvents+0x2a8>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 800140e:	2300      	movs	r3, #0
 8001410:	4a5a      	ldr	r2, [pc, #360]	; (800157c <checkISREvents+0x2a4>)
 8001412:	495d      	ldr	r1, [pc, #372]	; (8001588 <checkISREvents+0x2b0>)
 8001414:	485d      	ldr	r0, [pc, #372]	; (800158c <checkISREvents+0x2b4>)
 8001416:	f001 fe2b 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <checkISREvents+0x2a0>)
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
					break;
 8001420:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_2_SH_PRESS) {
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <checkISREvents+0x298>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d054      	beq.n	80014d8 <checkISREvents+0x200>
			// Button 2 was short pressed. Update state to Change Filter Position
			switch (processState) {
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <checkISREvents+0x2a0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d850      	bhi.n	80014d8 <checkISREvents+0x200>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <checkISREvents+0x164>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	08001451 	.word	0x08001451
 8001440:	080014a9 	.word	0x080014a9
 8001444:	080014d9 	.word	0x080014d9
 8001448:	08001451 	.word	0x08001451
 800144c:	080014d9 	.word	0x080014d9
				case RFID_WAKEUP_MODE:
				// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001450:	2300      	movs	r3, #0
 8001452:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001454:	2300      	movs	r3, #0
 8001456:	717b      	strb	r3, [r7, #5]
 8001458:	e010      	b.n	800147c <checkISREvents+0x1a4>

						if (fSection.filter[i].position == 2) {
 800145a:	797a      	ldrb	r2, [r7, #5]
 800145c:	4947      	ldr	r1, [pc, #284]	; (800157c <checkISREvents+0x2a4>)
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	440b      	add	r3, r1
 800146a:	3313      	adds	r3, #19
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d101      	bne.n	8001476 <checkISREvents+0x19e>
							posFound = true;
 8001472:	2301      	movs	r3, #1
 8001474:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	3301      	adds	r3, #1
 800147a:	717b      	strb	r3, [r7, #5]
 800147c:	797b      	ldrb	r3, [r7, #5]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d9eb      	bls.n	800145a <checkISREvents+0x182>
						}
					}

					if (posFound) {
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d026      	beq.n	80014d6 <checkISREvents+0x1fe>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 2;			// Log Button 2 as the first Selected Filter
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <checkISREvents+0x2a8>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <checkISREvents+0x2ac>)
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 2);
 8001494:	2302      	movs	r3, #2
 8001496:	4a39      	ldr	r2, [pc, #228]	; (800157c <checkISREvents+0x2a4>)
 8001498:	493b      	ldr	r1, [pc, #236]	; (8001588 <checkISREvents+0x2b0>)
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <checkISREvents+0x2b4>)
 800149c:	f001 fde8 	bl	8003070 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <checkISREvents+0x2a0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80014a6:	e016      	b.n	80014d6 <checkISREvents+0x1fe>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <checkISREvents+0x2a8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d005      	beq.n	80014bc <checkISREvents+0x1e4>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <checkISREvents+0x2a8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f8ec 	bl	8001694 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <checkISREvents+0x2a8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80014c2:	2300      	movs	r3, #0
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <checkISREvents+0x2a4>)
 80014c6:	4930      	ldr	r1, [pc, #192]	; (8001588 <checkISREvents+0x2b0>)
 80014c8:	4830      	ldr	r0, [pc, #192]	; (800158c <checkISREvents+0x2b4>)
 80014ca:	f001 fdd1 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <checkISREvents+0x2a0>)
 80014d0:	2203      	movs	r2, #3
 80014d2:	701a      	strb	r2, [r3, #0]
					break;
 80014d4:	e000      	b.n	80014d8 <checkISREvents+0x200>
					break;
 80014d6:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_2_LG_PRESS) {
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <checkISREvents+0x298>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d028      	beq.n	8001536 <checkISREvents+0x25e>
			// Button 2 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <checkISREvents+0x2a0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d824      	bhi.n	8001536 <checkISREvents+0x25e>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <checkISREvents+0x21c>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001537 	.word	0x08001537
 80014f8:	08001509 	.word	0x08001509
 80014fc:	08001537 	.word	0x08001537
 8001500:	08001537 	.word	0x08001537
 8001504:	08001537 	.word	0x08001537
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <checkISREvents+0x2a8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d005      	beq.n	800151c <checkISREvents+0x244>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <checkISREvents+0x2a8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2102      	movs	r1, #2
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f8bc 	bl	8001694 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <checkISREvents+0x2a8>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001522:	2300      	movs	r3, #0
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <checkISREvents+0x2a4>)
 8001526:	4918      	ldr	r1, [pc, #96]	; (8001588 <checkISREvents+0x2b0>)
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <checkISREvents+0x2b4>)
 800152a:	f001 fda1 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <checkISREvents+0x2a0>)
 8001530:	2203      	movs	r2, #3
 8001532:	701a      	strb	r2, [r3, #0]
					break;
 8001534:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_3_SH_PRESS) {
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <checkISREvents+0x298>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d065      	beq.n	800160e <checkISREvents+0x336>
			// Button 3 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <checkISREvents+0x2a0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d861      	bhi.n	800160e <checkISREvents+0x336>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <checkISREvents+0x278>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	08001565 	.word	0x08001565
 8001554:	080015df 	.word	0x080015df
 8001558:	0800160f 	.word	0x0800160f
 800155c:	08001565 	.word	0x08001565
 8001560:	0800160f 	.word	0x0800160f
				case RFID_WAKEUP_MODE:
				// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001564:	2300      	movs	r3, #0
 8001566:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
 800156c:	e021      	b.n	80015b2 <checkISREvents+0x2da>
 800156e:	bf00      	nop
 8001570:	20000eb0 	.word	0x20000eb0
 8001574:	40020800 	.word	0x40020800
 8001578:	20000254 	.word	0x20000254
 800157c:	20000f3c 	.word	0x20000f3c
 8001580:	20000f84 	.word	0x20000f84
 8001584:	20000f86 	.word	0x20000f86
 8001588:	20000eec 	.word	0x20000eec
 800158c:	20000f78 	.word	0x20000f78

						if (fSection.filter[i].position == 3) {
 8001590:	793a      	ldrb	r2, [r7, #4]
 8001592:	4939      	ldr	r1, [pc, #228]	; (8001678 <checkISREvents+0x3a0>)
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	3313      	adds	r3, #19
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d101      	bne.n	80015ac <checkISREvents+0x2d4>
							posFound = true;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	713b      	strb	r3, [r7, #4]
 80015b2:	793b      	ldrb	r3, [r7, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d9eb      	bls.n	8001590 <checkISREvents+0x2b8>
						}
					}

					if (posFound) {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d026      	beq.n	800160c <checkISREvents+0x334>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 3;			// Log Button 3 as the first Selected Filter
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <checkISREvents+0x3a4>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <checkISREvents+0x3a8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 3);
 80015ca:	2303      	movs	r3, #3
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <checkISREvents+0x3a0>)
 80015ce:	492d      	ldr	r1, [pc, #180]	; (8001684 <checkISREvents+0x3ac>)
 80015d0:	482d      	ldr	r0, [pc, #180]	; (8001688 <checkISREvents+0x3b0>)
 80015d2:	f001 fd4d 	bl	8003070 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <checkISREvents+0x3b4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
					}
					break;
 80015dc:	e016      	b.n	800160c <checkISREvents+0x334>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <checkISREvents+0x3a4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d005      	beq.n	80015f2 <checkISREvents+0x31a>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <checkISREvents+0x3a4>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2103      	movs	r1, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f851 	bl	8001694 <changeFilterPosition>
					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <checkISREvents+0x3a4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80015f8:	2300      	movs	r3, #0
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <checkISREvents+0x3a0>)
 80015fc:	4921      	ldr	r1, [pc, #132]	; (8001684 <checkISREvents+0x3ac>)
 80015fe:	4822      	ldr	r0, [pc, #136]	; (8001688 <checkISREvents+0x3b0>)
 8001600:	f001 fd36 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <checkISREvents+0x3b4>)
 8001606:	2203      	movs	r2, #3
 8001608:	701a      	strb	r2, [r3, #0]
					break;
 800160a:	e000      	b.n	800160e <checkISREvents+0x336>
					break;
 800160c:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_3_LG_PRESS) {
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <checkISREvents+0x3b8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	da28      	bge.n	800166a <checkISREvents+0x392>
			// Button 3 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <checkISREvents+0x3b4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d824      	bhi.n	800166a <checkISREvents+0x392>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <checkISREvents+0x350>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	0800166b 	.word	0x0800166b
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800166b 	.word	0x0800166b
 8001634:	0800166b 	.word	0x0800166b
 8001638:	0800166b 	.word	0x0800166b
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <checkISREvents+0x3a4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d005      	beq.n	8001650 <checkISREvents+0x378>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <checkISREvents+0x3a4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2103      	movs	r1, #3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f822 	bl	8001694 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <checkISREvents+0x3a4>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001656:	2300      	movs	r3, #0
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <checkISREvents+0x3a0>)
 800165a:	490a      	ldr	r1, [pc, #40]	; (8001684 <checkISREvents+0x3ac>)
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <checkISREvents+0x3b0>)
 800165e:	f001 fd07 	bl	8003070 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <checkISREvents+0x3b4>)
 8001664:	2203      	movs	r2, #3
 8001666:	701a      	strb	r2, [r3, #0]
					break;
 8001668:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		isr_flags = 0;	// Reset the flag after handling
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <checkISREvents+0x3b8>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	}
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000f3c 	.word	0x20000f3c
 800167c:	20000f84 	.word	0x20000f84
 8001680:	20000f86 	.word	0x20000f86
 8001684:	20000eec 	.word	0x20000eec
 8001688:	20000f78 	.word	0x20000f78
 800168c:	20000254 	.word	0x20000254
 8001690:	20000eb0 	.word	0x20000eb0

08001694 <changeFilterPosition>:

void changeFilterPosition(uint8_t firstBtn, uint8_t secondBtn) {
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1, -1, -1};
 80016a4:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <changeFilterPosition+0x184>)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	4611      	mov	r1, r2
 80016ae:	8019      	strh	r1, [r3, #0]
 80016b0:	3302      	adds	r3, #2
 80016b2:	0c12      	lsrs	r2, r2, #16
 80016b4:	701a      	strb	r2, [r3, #0]

	// The filter position switch is done with 2 steps.
	// Step 1. Loop through the filter positions, and transfer the positions into the proper slotIndex
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e022      	b.n	8001702 <changeFilterPosition+0x6e>
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	73bb      	strb	r3, [r7, #14]
 80016c0:	e019      	b.n	80016f6 <changeFilterPosition+0x62>
			// Look for the filter in the associated slot index
			if (fSection.filter[j].position == i + 1) {
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	4955      	ldr	r1, [pc, #340]	; (800181c <changeFilterPosition+0x188>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	3313      	adds	r3, #19
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	3301      	adds	r3, #1
 80016dc:	429a      	cmp	r2, r3
 80016de:	d107      	bne.n	80016f0 <changeFilterPosition+0x5c>
				slotIndex[i] = j;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016e6:	f107 0110 	add.w	r1, r7, #16
 80016ea:	440b      	add	r3, r1
 80016ec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	3301      	adds	r3, #1
 80016f4:	73bb      	strb	r3, [r7, #14]
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d9e2      	bls.n	80016c2 <changeFilterPosition+0x2e>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3301      	adds	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d9d9      	bls.n	80016bc <changeFilterPosition+0x28>
		}
	}

	// Step 2. If there are any open spots, they will be represented as -1 within slotIndex.
	// We need to overwrite any -1's with usable filter indexes. That is what this loop is doing.
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	737b      	strb	r3, [r7, #13]
 800170c:	e030      	b.n	8001770 <changeFilterPosition+0xdc>
		// Look for the filter in the associated slot index
		if (fSection.filter[i].position == 0) {
 800170e:	7b7a      	ldrb	r2, [r7, #13]
 8001710:	4942      	ldr	r1, [pc, #264]	; (800181c <changeFilterPosition+0x188>)
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	440b      	add	r3, r1
 800171e:	3313      	adds	r3, #19
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d121      	bne.n	800176a <changeFilterPosition+0xd6>
			// Find the first empty position
			uint8_t j = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 800172a:	e002      	b.n	8001732 <changeFilterPosition+0x9e>
				j++;
 800172c:	7b3b      	ldrb	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	f107 0210 	add.w	r2, r7, #16
 8001738:	4413      	add	r3, r2
 800173a:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 800173e:	43db      	mvns	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	09db      	lsrs	r3, r3, #7
 8001744:	b2da      	uxtb	r2, r3
 8001746:	7b3b      	ldrb	r3, [r7, #12]
 8001748:	2b02      	cmp	r3, #2
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e8      	bne.n	800172c <changeFilterPosition+0x98>
			}
			slotIndex[j] = i;
 800175a:	7b3b      	ldrb	r3, [r7, #12]
 800175c:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001760:	f107 0110 	add.w	r1, r7, #16
 8001764:	440b      	add	r3, r1
 8001766:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	3301      	adds	r3, #1
 800176e:	737b      	strb	r3, [r7, #13]
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d9cb      	bls.n	800170e <changeFilterPosition+0x7a>
	// FYI. slotIndex is the place holder for the fSection.filter index. EG -> It is to be used within fSection.filter[slotIndex]

	// Now, we have a slotIndex that is referencing the proper filter order and we just need to reposition the filters now:
	// 1st button pressed goes to 2nd button slot
	// Check to see if there is a tag in the position
	if (fSection.filter[slotIndex[firstBtn - 1]].position > 0) {
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3b01      	subs	r3, #1
 800177a:	f107 0210 	add.w	r2, r7, #16
 800177e:	4413      	add	r3, r2
 8001780:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001784:	461a      	mov	r2, r3
 8001786:	4925      	ldr	r1, [pc, #148]	; (800181c <changeFilterPosition+0x188>)
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	440b      	add	r3, r1
 8001794:	3313      	adds	r3, #19
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d011      	beq.n	80017c0 <changeFilterPosition+0x12c>
		fSection.filter[slotIndex[firstBtn - 1]].position = secondBtn;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	4413      	add	r3, r2
 80017a6:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017aa:	461a      	mov	r2, r3
 80017ac:	491b      	ldr	r1, [pc, #108]	; (800181c <changeFilterPosition+0x188>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	3313      	adds	r3, #19
 80017bc:	79ba      	ldrb	r2, [r7, #6]
 80017be:	701a      	strb	r2, [r3, #0]
	}

	// 2nd button pressed goes to 1st button slot
	if (fSection.filter[slotIndex[secondBtn - 1]].position > 0) {
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f107 0210 	add.w	r2, r7, #16
 80017c8:	4413      	add	r3, r2
 80017ca:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4912      	ldr	r1, [pc, #72]	; (800181c <changeFilterPosition+0x188>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	440b      	add	r3, r1
 80017de:	3313      	adds	r3, #19
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <changeFilterPosition+0x176>
		fSection.filter[slotIndex[secondBtn - 1]].position = firstBtn;
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	f107 0210 	add.w	r2, r7, #16
 80017ee:	4413      	add	r3, r2
 80017f0:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4909      	ldr	r1, [pc, #36]	; (800181c <changeFilterPosition+0x188>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	440b      	add	r3, r1
 8001804:	3313      	adds	r3, #19
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	701a      	strb	r2, [r3, #0]
	}
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	08017b14 	.word	0x08017b14
 800181c:	20000f3c 	.word	0x20000f3c

08001820 <isLogDirValid>:
static uint16_t sdPowerPin;

/******************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
bool isLogDirValid(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
	bool retVal = false;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DIR logDir;

	// Try to open the directory
	FRESULT res = f_opendir(&logDir, DL_LOG_DIR_PATH);
 800182c:	463b      	mov	r3, r7
 800182e:	490c      	ldr	r1, [pc, #48]	; (8001860 <isLogDirValid+0x40>)
 8001830:	4618      	mov	r0, r3
 8001832:	f013 ffd6 	bl	80157e2 <f_opendir>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (FR_OK == res)
 800183c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001840:	2b00      	cmp	r3, #0
 8001842:	d106      	bne.n	8001852 <isLogDirValid+0x32>
	{
		// The directory exists, close it back up
		f_closedir(&logDir);
 8001844:	463b      	mov	r3, r7
 8001846:	4618      	mov	r0, r3
 8001848:	f014 f83e 	bl	80158c8 <f_closedir>
		retVal = true;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return retVal;
 8001852:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001856:	4618      	mov	r0, r3
 8001858:	3738      	adds	r7, #56	; 0x38
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08017b18 	.word	0x08017b18

08001864 <dataLoggerInit>:

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/

DL_error dataLoggerInit(GPIO_TypeDef* sd_Port, uint16_t sd_Pin) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
	DL_error retVal = DATALOG_ERR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]

	// Check RTC. Initialize if needed.
	if (!rtcModuleIsInit()) {
 8001874:	f002 ff6a 	bl	800474c <rtcModuleIsInit>
 8001878:	4603      	mov	r3, r0
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <dataLoggerInit+0x26>
		rtcModuleInit(&hrtc);
 8001884:	481b      	ldr	r0, [pc, #108]	; (80018f4 <dataLoggerInit+0x90>)
 8001886:	f002 ff4d 	bl	8004724 <rtcModuleInit>
	}

	//Bind GPIO Port and Pin
	if (sdPowerPort == NULL) {
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <dataLoggerInit+0x94>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <dataLoggerInit+0x3a>
		sdPowerPort = sd_Port;
 8001892:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <dataLoggerInit+0x94>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]
		sdPowerPin = sd_Pin;
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <dataLoggerInit+0x98>)
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	8013      	strh	r3, [r2, #0]
	}

	if (startSDCard() != DATALOG_OK) {
 800189e:	f000 f83f 	bl	8001920 <startSDCard>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <dataLoggerInit+0x48>
		return DATALOG_ERR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e01f      	b.n	80018ec <dataLoggerInit+0x88>
	}

	// Verify that FatFs is initialized
	if (FatFsIsModuleInit()) {
 80018ac:	f00b f8f2 	bl	800ca94 <FatFsIsModuleInit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d014      	beq.n	80018e0 <dataLoggerInit+0x7c>
		if (!isLogDirValid()) {
 80018b6:	f7ff ffb3 	bl	8001820 <isLogDirValid>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00e      	beq.n	80018e4 <dataLoggerInit+0x80>
			// Create the new directory and file
			FRESULT fr;
			fr = f_mkdir(DL_LOG_DIR_PATH);
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <dataLoggerInit+0x9c>)
 80018c8:	f014 f824 	bl	8015914 <f_mkdir>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73bb      	strb	r3, [r7, #14]
			if (fr == FR_OK) {
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <dataLoggerInit+0x78>
				// The directory was created successfully
				retVal = DATALOG_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e003      	b.n	80018e4 <dataLoggerInit+0x80>
			} else {
				// FatFs Error
				return retVal;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	e005      	b.n	80018ec <dataLoggerInit+0x88>
			}
		}
	} else {
		// FatFs Not Initialized
		return retVal;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	e003      	b.n	80018ec <dataLoggerInit+0x88>
	}

	dlModInit = true;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <dataLoggerInit+0xa0>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
	return retVal;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20001040 	.word	0x20001040
 80018f8:	20000258 	.word	0x20000258
 80018fc:	2000025c 	.word	0x2000025c
 8001900:	08017b18 	.word	0x08017b18
 8001904:	20000255 	.word	0x20000255

08001908 <dataLoggerDeInit>:

DL_error dataLoggerDeInit(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	dlModInit = false;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <dataLoggerDeInit+0x14>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
	return stopSDCard();
 8001912:	f000 f837 	bl	8001984 <stopSDCard>
 8001916:	4603      	mov	r3, r0
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000255 	.word	0x20000255

08001920 <startSDCard>:

DL_error startSDCard(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	// See if a card is installed
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET){
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <startSDCard+0x58>)
 800192a:	f004 f8ef 	bl	8005b0c <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <startSDCard+0x18>
		// No card is installed.
		return DATALOG_ERR;
 8001934:	2301      	movs	r3, #1
 8001936:	e01a      	b.n	800196e <startSDCard+0x4e>
	}

	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_SET);
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <startSDCard+0x5c>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <startSDCard+0x60>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	f004 f8fa 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001948:	2005      	movs	r0, #5
 800194a:	f003 fe07 	bl	800555c <HAL_Delay>
	DL_error ret = FatFsInit();
 800194e:	f00b f85b 	bl	800ca08 <FatFsInit>
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]

	// If there is a problem with the FatFs, turn off the power.
	if (ret != DATALOG_OK) {
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <startSDCard+0x4c>
		HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <startSDCard+0x5c>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <startSDCard+0x60>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	f004 f8e8 	bl	8005b3c <HAL_GPIO_WritePin>
	}
	return ret;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020800 	.word	0x40020800
 800197c:	20000258 	.word	0x20000258
 8001980:	2000025c 	.word	0x2000025c

08001984 <stopSDCard>:

DL_error stopSDCard(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	// Unlink the FatFs and turn off the SD Card
	DL_error ret = FatFsDeInit();
 800198a:	f00b f873 	bl	800ca74 <FatFsDeInit>
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <stopSDCard+0x28>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <stopSDCard+0x2c>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	f004 f8cd 	bl	8005b3c <HAL_GPIO_WritePin>
	return ret;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000258 	.word	0x20000258
 80019b0:	2000025c 	.word	0x2000025c

080019b4 <logDataToSD>:
/*	This function get's called from the FilterMachine whenever there's
 * a filter change. It first fills out a Log Record, then sends it to
 * this function to be copied to the SD Card.
 * */

DL_error logDataToSD(sdLog_record_t *sdLog) {
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b0ba      	sub	sp, #232	; 0xe8
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	6078      	str	r0, [r7, #4]

	// Ensure the modules are initialized
	if (dlModInit) {
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <logDataToSD+0x1bc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80d0 	beq.w	8001b66 <logDataToSD+0x1b2>

		// Verify that the directory has been initialized
		if (!isLogDirValid()) {
 80019c6:	f7ff ff2b 	bl	8001820 <isLogDirValid>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <logDataToSD+0x26>
			return DATALOG_ERR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0c6      	b.n	8001b68 <logDataToSD+0x1b4>
		}

		// The log directory is valid. Start organizing the data.
		// Convert all non-string fields
		char dateStamp_s[11] = {0};
 80019da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	f8c3 2007 	str.w	r2, [r3, #7]
		char logFileName_s[35] = {0};
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2223      	movs	r2, #35	; 0x23
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f015 fc5f 	bl	80172b4 <memset>
		char timeStamp_s[11] = {0};
 80019f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	f8c3 2007 	str.w	r2, [r3, #7]

		// Compile the Date
		sprintf(dateStamp_s, "%02d-%02d-%d",
				sdLog->dateTimeStamp.month,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a08:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.day,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a0e:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.year);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a14:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4955      	ldr	r1, [pc, #340]	; (8001b74 <logDataToSD+0x1c0>)
 8001a1e:	f015 fd09 	bl	8017434 <siprintf>

		// File Name Format: FilterLog_Date_Matte Box ID
		// Example: FilterLog_01-01-2020_LBSA0100P
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
				dateStamp_s,
				sdLog->matteBoxID);
 8001a22:	687b      	ldr	r3, [r7, #4]
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
 8001a24:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001a28:	f107 0008 	add.w	r0, r7, #8
 8001a2c:	4952      	ldr	r1, [pc, #328]	; (8001b78 <logDataToSD+0x1c4>)
 8001a2e:	f015 fd01 	bl	8017434 <siprintf>

		// Compile the time
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
				sdLog->dateTimeStamp.hours,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a36:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.minutes,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7adb      	ldrb	r3, [r3, #11]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a3c:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.seconds);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a42:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	494c      	ldr	r1, [pc, #304]	; (8001b7c <logDataToSD+0x1c8>)
 8001a4c:	f015 fcf2 	bl	8017434 <siprintf>

		// Prepare to write the file
		FRESULT fr;
		FIL* logFil = malloc(sizeof(FIL));
 8001a50:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001a54:	f015 fc04 	bl	8017260 <malloc>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		// Change to the directory
		fr = f_chdir(DL_LOG_DIR_PATH);
 8001a5e:	4848      	ldr	r0, [pc, #288]	; (8001b80 <logDataToSD+0x1cc>)
 8001a60:	f013 fe75 	bl	801574e <f_chdir>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		// If the file exists, open it. Otherwise, create the log file.
		fr = f_open(logFil, (const TCHAR*) logFileName_s, FA_OPEN_APPEND | FA_WRITE);
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	2232      	movs	r2, #50	; 0x32
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001a76:	f013 fa8f 	bl	8014f98 <f_open>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		if (fr != FR_OK) {
 8001a80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <logDataToSD+0xd8>
			// Can't open the file
			return DATALOG_ERR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e06d      	b.n	8001b68 <logDataToSD+0x1b4>
		}

		// The file is open and ready. Write the fields to the file.
		// Check to see if the file is empty
		if (logFil->fptr == 0){
 8001a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d12b      	bne.n	8001aee <logDataToSD+0x13a>
			// Brand New File. Make the Headers
			char headers[100] = {0};
 8001a96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a9a:	2264      	movs	r2, #100	; 0x64
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f015 fc08 	bl	80172b4 <memset>

			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
					sdLog->matteBoxID,
 8001aa4:	687a      	ldr	r2, [r7, #4]
			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
 8001aa6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aaa:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001aae:	4935      	ldr	r1, [pc, #212]	; (8001b84 <logDataToSD+0x1d0>)
 8001ab0:	f015 fcc0 	bl	8017434 <siprintf>
					dateStamp_s);
			const char tmpStr[50] = "Time,Filter Slot 1,Filter Slot 2,Filter Slot 3\n";
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <logDataToSD+0x1d4>)
 8001ab6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001aba:	461d      	mov	r5, r3
 8001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			f_puts(headers, (FIL*) logFil);
 8001ad2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ad6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ada:	4618      	mov	r0, r3
 8001adc:	f014 fcd2 	bl	8016484 <f_puts>
			f_puts(tmpStr, (FIL*) logFil);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f014 fccb 	bl	8016484 <f_puts>
		}

		// Write the Time Stamp
		f_puts(timeStamp_s, (FIL*) logFil);
 8001aee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001af2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001af6:	4618      	mov	r0, r3
 8001af8:	f014 fcc4 	bl	8016484 <f_puts>

		// Write the Filter Name in Slot 1
		f_puts(sdLog->filterNames[0].filterName, (FIL*) logFil);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3312      	adds	r3, #18
 8001b00:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b04:	4618      	mov	r0, r3
 8001b06:	f014 fcbd 	bl	8016484 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001b0a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b0e:	481f      	ldr	r0, [pc, #124]	; (8001b8c <logDataToSD+0x1d8>)
 8001b10:	f014 fcb8 	bl	8016484 <f_puts>

		// Write the Filter Name in Slot 2
		f_puts(sdLog->filterNames[1].filterName, (FIL*) logFil);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	331d      	adds	r3, #29
 8001b18:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f014 fcb1 	bl	8016484 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001b22:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b26:	4819      	ldr	r0, [pc, #100]	; (8001b8c <logDataToSD+0x1d8>)
 8001b28:	f014 fcac 	bl	8016484 <f_puts>

		// Write the Filter Name in Slot 3
		f_puts(sdLog->filterNames[2].filterName, (FIL*) logFil);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3328      	adds	r3, #40	; 0x28
 8001b30:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b34:	4618      	mov	r0, r3
 8001b36:	f014 fca5 	bl	8016484 <f_puts>

		// Make a new line
		f_puts(DL_ENDL, (FIL*) logFil);
 8001b3a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <logDataToSD+0x1dc>)
 8001b40:	f014 fca0 	bl	8016484 <f_puts>

		// Finish and Close the file
		fr = f_close((FIL*) logFil);
 8001b44:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001b48:	f013 fdd7 	bl	80156fa <f_close>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		// De-allocate the FatFs
		free(logFil);
 8001b52:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001b56:	f015 fb8b 	bl	8017270 <free>

		if (fr == FR_OK) {
 8001b5a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <logDataToSD+0x1b2>
			// The file closed successfully
			return DATALOG_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <logDataToSD+0x1b4>
		}
	}
	return DATALOG_ERR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	37e0      	adds	r7, #224	; 0xe0
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b70:	20000255 	.word	0x20000255
 8001b74:	08017b28 	.word	0x08017b28
 8001b78:	08017b38 	.word	0x08017b38
 8001b7c:	08017b4c 	.word	0x08017b4c
 8001b80:	08017b18 	.word	0x08017b18
 8001b84:	08017b5c 	.word	0x08017b5c
 8001b88:	08017ba0 	.word	0x08017ba0
 8001b8c:	08017b98 	.word	0x08017b98
 8001b90:	08017b9c 	.word	0x08017b9c

08001b94 <SDDataLog>:

DL_error SDDataLog(filterSection_t *fSection) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b096      	sub	sp, #88	; 0x58
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef dateStamp;
	RTC_TimeTypeDef timeStamp;
	sdLog_record_t sdLog = {0};
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	2234      	movs	r2, #52	; 0x34
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f015 fb85 	bl	80172b4 <memset>

	if (!dlModInit) {
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <SDDataLog+0xd0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SDDataLog+0x28>
		return DATALOG_ERR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04f      	b.n	8001c5c <SDDataLog+0xc8>
	}

	// See if FATFS and SD Card are ready


	strcpy(sdLog.matteBoxID, MATTE_BOX_HW_ID);
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <SDDataLog+0xd4>)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc4:	c303      	stmia	r3!, {r0, r1}
 8001bc6:	801a      	strh	r2, [r3, #0]

	// Get the Time and Store it
	rtcGetDateTime(&dateStamp, &timeStamp);
 8001bc8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fdc6 	bl	8004764 <rtcGetDateTime>

	// Load the DateTime results into the DataLog structure
	sdLog.dateTimeStamp.month = dateStamp.Month;
 8001bd8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001bdc:	75fb      	strb	r3, [r7, #23]
	sdLog.dateTimeStamp.day = dateStamp.Date;
 8001bde:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001be2:	75bb      	strb	r3, [r7, #22]
	sdLog.dateTimeStamp.year = dateStamp.Year + 2000;
 8001be4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	833b      	strh	r3, [r7, #24]

	sdLog.dateTimeStamp.hours = timeStamp.Hours;
 8001bf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001bf6:	74bb      	strb	r3, [r7, #18]
	sdLog.dateTimeStamp.minutes = timeStamp.Minutes;
 8001bf8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bfc:	74fb      	strb	r3, [r7, #19]
	sdLog.dateTimeStamp.seconds = timeStamp.Seconds;
 8001bfe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c02:	753b      	strb	r3, [r7, #20]

	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001c0a:	e01d      	b.n	8001c48 <SDDataLog+0xb4>
		strcpy(&sdLog.filterNames[i].filterName, fSection->filter[i].filterName);
 8001c0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c10:	f107 0108 	add.w	r1, r7, #8
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3310      	adds	r3, #16
 8001c20:	440b      	add	r3, r1
 8001c22:	1c98      	adds	r0, r3, #2
 8001c24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f015 fc1b 	bl	8017474 <strcpy>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c42:	3301      	adds	r3, #1
 8001c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d9dd      	bls.n	8001c0c <SDDataLog+0x78>
	}

	// Log to the SD Card
	return logDataToSD(&sdLog);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fead 	bl	80019b4 <logDataToSD>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3758      	adds	r7, #88	; 0x58
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000255 	.word	0x20000255
 8001c68:	08017bd4 	.word	0x08017bd4

08001c6c <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001c7a:	f7ff f87f 	bl	8000d7c <DWT_Init>

	epd->status = EPD_OK;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a81      	ldr	r2, [pc, #516]	; (8001eb8 <EPD_Init+0x24c>)
 8001cb2:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <EPD_Init+0x250>)
 8001cb8:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <EPD_Init+0x250>)
 8001cbe:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <EPD_Init+0x250>)
 8001cc4:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a7b      	ldr	r2, [pc, #492]	; (8001eb8 <EPD_Init+0x24c>)
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cd2:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d80b      	bhi.n	8001cf4 <EPD_Init+0x88>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <EPD_Init+0x78>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001d33 	.word	0x08001d33
 8001ce8:	08001d71 	.word	0x08001d71
 8001cec:	08001daf 	.word	0x08001daf
 8001cf0:	08001df5 	.word	0x08001df5
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2260      	movs	r2, #96	; 0x60
 8001cf8:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2210      	movs	r2, #16
 8001d04:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2218      	movs	r2, #24
 8001d0a:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a6c      	ldr	r2, [pc, #432]	; (8001ec0 <EPD_Init+0x254>)
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2209      	movs	r2, #9
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001d30:	e080      	b.n	8001e34 <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2290      	movs	r2, #144	; 0x90
 8001d3c:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2212      	movs	r2, #18
 8001d42:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2210      	movs	r2, #16
 8001d50:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <EPD_Init+0x258>)
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2209      	movs	r2, #9
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001d6e:	e061      	b.n	8001e34 <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2260      	movs	r2, #96	; 0x60
 8001d74:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	22c8      	movs	r2, #200	; 0xc8
 8001d7a:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2219      	movs	r2, #25
 8001d80:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2218      	movs	r2, #24
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <EPD_Init+0x25c>)
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2209      	movs	r2, #9
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001dac:	e042      	b.n	8001e34 <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f240 2276 	movw	r2, #630	; 0x276
 8001db4:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	22e8      	movs	r2, #232	; 0xe8
 8001dc0:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	221d      	movs	r2, #29
 8001dc6:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <EPD_Init+0x260>)
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2209      	movs	r2, #9
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001df2:	e01f      	b.n	8001e34 <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f240 2276 	movw	r2, #630	; 0x276
 8001dfa:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	22b0      	movs	r2, #176	; 0xb0
 8001e00:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001e08:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2221      	movs	r2, #33	; 0x21
 8001e0e:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	222c      	movs	r2, #44	; 0x2c
 8001e14:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <EPD_Init+0x264>)
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2209      	movs	r2, #9
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001e32:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 8001e3c:	2119      	movs	r1, #25
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fbaa 	bl	8002598 <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e52:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001e58:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	649a      	str	r2, [r3, #72]	; 0x48
 8001e62:	e00a      	b.n	8001e7a <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e68:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001e72:	3303      	adds	r3, #3
 8001e74:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	4618      	mov	r0, r3
 8001e84:	f015 f9ec 	bl	8017260 <malloc>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f015 fa0a 	bl	80172b4 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb4d 	bl	8002540 <power_off>

	// COG state for partial update
	epd->COG_on = false;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000024 	.word	0x20000024
 8001ed0:	20000030 	.word	0x20000030

08001ed4 <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0a8      	sub	sp, #160	; 0xa0
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 823f 	bne.w	8002366 <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <EPD_begin+0x1d4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 8001ef0:	f107 030f 	add.w	r3, r7, #15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fd75 	bl	80039e4 <LM75B_ReadTemp>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 8001f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fb46 	bl	8002598 <EPD_set_temperature>
 8001f0c:	e003      	b.n	8001f16 <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 8001f0e:	2119      	movs	r1, #25
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb41 	bl	8002598 <EPD_set_temperature>
		}
		setTemp = false;
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <EPD_begin+0x1d4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6958      	ldr	r0, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8a1b      	ldrh	r3, [r3, #16]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f003 fe05 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6858      	ldr	r0, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	885b      	ldrh	r3, [r3, #2]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f003 fdfd 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68d8      	ldr	r0, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	891b      	ldrh	r3, [r3, #8]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f003 fdf5 	bl	8005b3c <HAL_GPIO_WritePin>

	Delay_ms(5);
 8001f52:	2005      	movs	r0, #5
 8001f54:	f003 fb02 	bl	800555c <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8c1b      	ldrh	r3, [r3, #32]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4619      	mov	r1, r3
 8001f64:	f003 fdea 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6858      	ldr	r0, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4619      	mov	r1, r3
 8001f74:	f003 fde2 	bl	8005b3c <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001f78:	200a      	movs	r0, #10
 8001f7a:	f003 faef 	bl	800555c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6958      	ldr	r0, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8a1b      	ldrh	r3, [r3, #16]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f003 fdd7 	bl	8005b3c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f003 fae4 	bl	800555c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6958      	ldr	r0, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8a1b      	ldrh	r3, [r3, #16]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f003 fdcc 	bl	8005b3c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001fa4:	2005      	movs	r0, #5
 8001fa6:	f003 fad9 	bl	800555c <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6958      	ldr	r0, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8a1b      	ldrh	r3, [r3, #16]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f003 fdc1 	bl	8005b3c <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f003 face 	bl	800555c <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001fc0:	e002      	b.n	8001fc8 <EPD_begin+0xf4>
		Delay_us(10);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f7fe fef4 	bl	8000db0 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8b1b      	ldrh	r3, [r3, #24]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f003 fd9a 	bl	8005b0c <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d0f1      	beq.n	8001fc2 <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001fde:	2371      	movs	r3, #113	; 0x71
 8001fe0:	743b      	strb	r3, [r7, #16]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	747b      	strb	r3, [r7, #17]
 8001fe6:	f107 020c 	add.w	r2, r7, #12
 8001fea:	f107 0110 	add.w	r1, r7, #16
 8001fee:	2302      	movs	r3, #2
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 ffcf 	bl	8002f94 <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001ff6:	2371      	movs	r3, #113	; 0x71
 8001ff8:	753b      	strb	r3, [r7, #20]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	757b      	strb	r3, [r7, #21]
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	f107 0114 	add.w	r1, r7, #20
 8002006:	2302      	movs	r3, #2
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 ffc3 	bl	8002f94 <SPI_read>
	int cog_id = receive_buffer[1];
 800200e:	7b7b      	ldrb	r3, [r7, #13]
 8002010:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 8002014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	2b02      	cmp	r3, #2
 800201e:	d006      	beq.n	800202e <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa8a 	bl	8002540 <power_off>
		return;
 800202c:	e19c      	b.n	8002368 <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <EPD_begin+0x1d8>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	833b      	strh	r3, [r7, #24]
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	2202      	movs	r2, #2
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 ff83 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <EPD_begin+0x1dc>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	83bb      	strh	r3, [r7, #28]
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2202      	movs	r2, #2
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 ff79 	bl	8002f48 <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <EPD_begin+0x1e0>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	843b      	strh	r3, [r7, #32]
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	2202      	movs	r2, #2
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 ff6f 	bl	8002f48 <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 800206a:	2373      	movs	r3, #115	; 0x73
 800206c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800207e:	2302      	movs	r3, #2
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 ff87 	bl	8002f94 <SPI_read>
	int broken_panel = receive_buffer[1];
 8002086:	7b7b      	ldrb	r3, [r7, #13]
 8002088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 800208c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa4e 	bl	8002540 <power_off>
		return;
 80020a4:	e160      	b.n	8002368 <EPD_begin+0x494>
 80020a6:	bf00      	nop
 80020a8:	2000025e 	.word	0x2000025e
 80020ac:	08017c04 	.word	0x08017c04
 80020b0:	08017c08 	.word	0x08017c08
 80020b4:	08017c0c 	.word	0x08017c0c
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 80020b8:	4bad      	ldr	r3, [pc, #692]	; (8002370 <EPD_begin+0x49c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80020be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c2:	2202      	movs	r2, #2
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 ff3e 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 80020cc:	4ba9      	ldr	r3, [pc, #676]	; (8002374 <EPD_begin+0x4a0>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	2202      	movs	r2, #2
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 ff34 	bl	8002f48 <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 80020e0:	4ba5      	ldr	r3, [pc, #660]	; (8002378 <EPD_begin+0x4a4>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	863b      	strh	r3, [r7, #48]	; 0x30
 80020e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ea:	2202      	movs	r2, #2
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 ff2a 	bl	8002f48 <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 ff21 	bl	8002f48 <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8002106:	4b9d      	ldr	r3, [pc, #628]	; (800237c <EPD_begin+0x4a8>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800210c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002110:	2202      	movs	r2, #2
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 ff17 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 800211a:	4b99      	ldr	r3, [pc, #612]	; (8002380 <EPD_begin+0x4ac>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002124:	2202      	movs	r2, #2
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 ff0d 	bl	8002f48 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 800212e:	4b95      	ldr	r3, [pc, #596]	; (8002384 <EPD_begin+0x4b0>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002138:	2202      	movs	r2, #2
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 ff03 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8002142:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <EPD_begin+0x4a0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800214a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800214e:	2202      	movs	r2, #2
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fef8 	bl	8002f48 <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 8002158:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <EPD_begin+0x4b4>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002164:	2202      	movs	r2, #2
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 feed 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 800216e:	4b87      	ldr	r3, [pc, #540]	; (800238c <EPD_begin+0x4b8>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800217a:	2202      	movs	r2, #2
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fee2 	bl	8002f48 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8002184:	4b82      	ldr	r3, [pc, #520]	; (8002390 <EPD_begin+0x4bc>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800218c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002190:	2202      	movs	r2, #2
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fed7 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 800219a:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <EPD_begin+0x4c0>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80021a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021a6:	2202      	movs	r2, #2
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fecc 	bl	8002f48 <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <EPD_begin+0x4c4>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80021b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021bc:	2202      	movs	r2, #2
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fec1 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80021c6:	4b75      	ldr	r3, [pc, #468]	; (800239c <EPD_begin+0x4c8>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80021ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021d2:	2202      	movs	r2, #2
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 feb6 	bl	8002f48 <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80021dc:	4b6e      	ldr	r3, [pc, #440]	; (8002398 <EPD_begin+0x4c4>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80021e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021e8:	2202      	movs	r2, #2
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 feab 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 80021f2:	2372      	movs	r3, #114	; 0x72
 80021f4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80021fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002202:	2202      	movs	r2, #2
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fe9e 	bl	8002f48 <SPI_send>

	Delay_ms(5);
 800220c:	2005      	movs	r0, #5
 800220e:	f003 f9a5 	bl	800555c <HAL_Delay>

	bool dc_ok = false;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800221e:	e075      	b.n	800230c <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002220:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <EPD_begin+0x4cc>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800222c:	2202      	movs	r2, #2
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fe89 	bl	8002f48 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <EPD_begin+0x4c8>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800223e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002242:	2202      	movs	r2, #2
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fe7e 	bl	8002f48 <SPI_send>

		Delay_ms(240);
 800224c:	20f0      	movs	r0, #240	; 0xf0
 800224e:	f003 f985 	bl	800555c <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <EPD_begin+0x4cc>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800225a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800225e:	2202      	movs	r2, #2
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fe70 	bl	8002f48 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 8002268:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <EPD_begin+0x4c0>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002270:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002274:	2202      	movs	r2, #2
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fe65 	bl	8002f48 <SPI_send>

		Delay_ms(40);
 800227e:	2028      	movs	r0, #40	; 0x28
 8002280:	f003 f96c 	bl	800555c <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <EPD_begin+0x4cc>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800228c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002290:	2202      	movs	r2, #2
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fe57 	bl	8002f48 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 800229a:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <EPD_begin+0x4d0>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80022a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022a6:	2202      	movs	r2, #2
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fe4c 	bl	8002f48 <SPI_send>

		Delay_ms(40);
 80022b0:	2028      	movs	r0, #40	; 0x28
 80022b2:	f003 f953 	bl	800555c <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <EPD_begin+0x4d4>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80022be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022c2:	2202      	movs	r2, #2
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fe3e 	bl	8002f48 <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 80022cc:	2373      	movs	r3, #115	; 0x73
 80022ce:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80022d8:	f107 020c 	add.w	r2, r7, #12
 80022dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80022e0:	2302      	movs	r3, #2
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fe56 	bl	8002f94 <SPI_read>
		int dc_state = receive_buffer[1];
 80022e8:	7b7b      	ldrb	r3, [r7, #13]
 80022ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 80022ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <EPD_begin+0x42e>
			dc_ok = true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 8002300:	e008      	b.n	8002314 <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 8002302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002306:	3301      	adds	r3, #1
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	2b03      	cmp	r3, #3
 8002312:	dd85      	ble.n	8002220 <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 8002314:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f909 	bl	8002540 <power_off>
		return;
 800232e:	e01b      	b.n	8002368 <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <EPD_begin+0x4d8>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002338:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800233c:	2202      	movs	r2, #2
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fe01 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <EPD_begin+0x4dc>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800234e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002352:	2202      	movs	r2, #2
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fdf6 	bl	8002f48 <SPI_send>

	epd->COG_on = true;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002364:	e000      	b.n	8002368 <EPD_begin+0x494>
		return;
 8002366:	bf00      	nop
}
 8002368:	37a0      	adds	r7, #160	; 0xa0
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08017c10 	.word	0x08017c10
 8002374:	08017c14 	.word	0x08017c14
 8002378:	08017c18 	.word	0x08017c18
 800237c:	08017c1c 	.word	0x08017c1c
 8002380:	08017c20 	.word	0x08017c20
 8002384:	08017c24 	.word	0x08017c24
 8002388:	08017c28 	.word	0x08017c28
 800238c:	08017c2c 	.word	0x08017c2c
 8002390:	08017c30 	.word	0x08017c30
 8002394:	08017c34 	.word	0x08017c34
 8002398:	08017c38 	.word	0x08017c38
 800239c:	08017c3c 	.word	0x08017c3c
 80023a0:	08017c40 	.word	0x08017c40
 80023a4:	08017c44 	.word	0x08017c44
 80023a8:	08017c0c 	.word	0x08017c0c
 80023ac:	08017c04 	.word	0x08017c04
 80023b0:	08017c48 	.word	0x08017c48

080023b4 <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b090      	sub	sp, #64	; 0x40
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fa48 	bl	8002852 <nothing_frame>

	if (EPD_2_7 == epd->size) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d103      	bne.n	80023d2 <EPD_end+0x1e>
		dummy_line(epd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa60 	bl	8002890 <dummy_line>
 80023d0:	e005      	b.n	80023de <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa6f 	bl	80028b6 <border_dummy_line>
		Delay_ms(200);
 80023d8:	20c8      	movs	r0, #200	; 0xc8
 80023da:	f003 f8bf 	bl	800555c <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 80023de:	4b50      	ldr	r3, [pc, #320]	; (8002520 <EPD_end+0x16c>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	813b      	strh	r3, [r7, #8]
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	2202      	movs	r2, #2
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fdab 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 80023f2:	2372      	movs	r3, #114	; 0x72
 80023f4:	733b      	strb	r3, [r7, #12]
 80023f6:	2300      	movs	r3, #0
 80023f8:	737b      	strb	r3, [r7, #13]
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2202      	movs	r2, #2
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fda0 	bl	8002f48 <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <EPD_end+0x170>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	823b      	strh	r3, [r7, #16]
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	2202      	movs	r2, #2
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fd96 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <EPD_end+0x174>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	82bb      	strh	r3, [r7, #20]
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	2202      	movs	r2, #2
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fd8c 	bl	8002f48 <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <EPD_end+0x178>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	833b      	strh	r3, [r7, #24]
 8002436:	f107 0318 	add.w	r3, r7, #24
 800243a:	2202      	movs	r2, #2
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fd82 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <EPD_end+0x17c>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	83bb      	strh	r3, [r7, #28]
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	2202      	movs	r2, #2
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fd78 	bl	8002f48 <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <EPD_end+0x178>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	843b      	strh	r3, [r7, #32]
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2202      	movs	r2, #2
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fd6e 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 800246c:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <EPD_end+0x174>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	2202      	movs	r2, #2
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fd64 	bl	8002f48 <SPI_send>

	Delay_ms(120);
 8002480:	2078      	movs	r0, #120	; 0x78
 8002482:	f003 f86b 	bl	800555c <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <EPD_end+0x180>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	853b      	strh	r3, [r7, #40]	; 0x28
 800248c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002490:	2202      	movs	r2, #2
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fd57 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <EPD_end+0x184>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	2202      	movs	r2, #2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fd4d 	bl	8002f48 <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <EPD_end+0x178>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	863b      	strh	r3, [r7, #48]	; 0x30
 80024b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b8:	2202      	movs	r2, #2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fd43 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 80024c2:	2372      	movs	r3, #114	; 0x72
 80024c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80024ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024d2:	2202      	movs	r2, #2
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fd36 	bl	8002f48 <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <EPD_end+0x188>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80024e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024e6:	2202      	movs	r2, #2
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fd2c 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <EPD_end+0x174>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80024f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024fa:	2202      	movs	r2, #2
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fd22 	bl	8002f48 <SPI_send>

	Delay_ms(50);
 8002504:	2032      	movs	r0, #50	; 0x32
 8002506:	f003 f829 	bl	800555c <HAL_Delay>

	power_off(epd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f818 	bl	8002540 <power_off>

	epd->COG_on = false;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002518:	bf00      	nop
 800251a:	3740      	adds	r7, #64	; 0x40
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08017c10 	.word	0x08017c10
 8002524:	08017c38 	.word	0x08017c38
 8002528:	08017c3c 	.word	0x08017c3c
 800252c:	08017c40 	.word	0x08017c40
 8002530:	08017c34 	.word	0x08017c34
 8002534:	08017c30 	.word	0x08017c30
 8002538:	08017c4c 	.word	0x08017c4c
 800253c:	08017c1c 	.word	0x08017c1c

08002540 <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6958      	ldr	r0, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8a1b      	ldrh	r3, [r3, #16]
 8002550:	2200      	movs	r2, #0
 8002552:	4619      	mov	r1, r3
 8002554:	f003 faf2 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6858      	ldr	r0, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	f003 faea 	bl	8005b3c <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68d8      	ldr	r0, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	891b      	ldrh	r3, [r3, #8]
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	f003 fae2 	bl	8005b3c <HAL_GPIO_WritePin>
	Delay_ms(150);
 8002578:	2096      	movs	r0, #150	; 0x96
 800257a:	f002 ffef 	bl	800555c <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68d8      	ldr	r0, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	891b      	ldrh	r3, [r3, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	f003 fad7 	bl	8005b3c <HAL_GPIO_WritePin>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025a6:	461c      	mov	r4, r3
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f000 f86a 	bl	8002682 <temperature_to_factor_10x>
 80025ae:	4603      	mov	r3, r0
 80025b0:	fb03 f304 	mul.w	r3, r3, r4
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <EPD_set_temperature+0x38>)
 80025b6:	fb82 1203 	smull	r1, r2, r2, r3
 80025ba:	1092      	asrs	r2, r2, #2
 80025bc:	17db      	asrs	r3, r3, #31
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	66666667 	.word	0x66666667

080025d4 <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	setTemp = true;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <EPD_set_enable_temperature+0x14>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	2000025e 	.word	0x2000025e

080025ec <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 80025f4:	2200      	movs	r2, #0
 80025f6:	21ff      	movs	r1, #255	; 0xff
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8e5 	bl	80027c8 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 80025fe:	2201      	movs	r2, #1
 8002600:	21ff      	movs	r1, #255	; 0xff
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8e0 	bl	80027c8 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 8002608:	2202      	movs	r2, #2
 800260a:	21aa      	movs	r1, #170	; 0xaa
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f8db 	bl	80027c8 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 8002612:	2203      	movs	r2, #3
 8002614:	21aa      	movs	r1, #170	; 0xaa
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8d6 	bl	80027c8 <frame_fixed_repeat>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 800262e:	2200      	movs	r2, #0
 8002630:	21aa      	movs	r1, #170	; 0xaa
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8c8 	bl	80027c8 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 8002638:	2201      	movs	r2, #1
 800263a:	21aa      	movs	r1, #170	; 0xaa
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f8c3 	bl	80027c8 <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 8002642:	2302      	movs	r3, #2
 8002644:	2200      	movs	r2, #0
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8e0 	bl	800280e <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 800264e:	2303      	movs	r3, #3
 8002650:	2200      	movs	r2, #0
 8002652:	6839      	ldr	r1, [r7, #0]
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8da 	bl	800280e <frame_data_repeat>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 800266e:	2303      	movs	r3, #3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f8ca 	bl	800280e <frame_data_repeat>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f113 0f09 	cmn.w	r3, #9
 8002690:	da01      	bge.n	8002696 <temperature_to_factor_10x+0x14>
		return 170;
 8002692:	23aa      	movs	r3, #170	; 0xaa
 8002694:	e01f      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f113 0f04 	cmn.w	r3, #4
 800269c:	da01      	bge.n	80026a2 <temperature_to_factor_10x+0x20>
		return 120;
 800269e:	2378      	movs	r3, #120	; 0x78
 80026a0:	e019      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	dc01      	bgt.n	80026ac <temperature_to_factor_10x+0x2a>
		return 80;
 80026a8:	2350      	movs	r3, #80	; 0x50
 80026aa:	e014      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	dc01      	bgt.n	80026b6 <temperature_to_factor_10x+0x34>
		return 40;
 80026b2:	2328      	movs	r3, #40	; 0x28
 80026b4:	e00f      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	dc01      	bgt.n	80026c0 <temperature_to_factor_10x+0x3e>
		return 30;
 80026bc:	231e      	movs	r3, #30
 80026be:	e00a      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b14      	cmp	r3, #20
 80026c4:	dc01      	bgt.n	80026ca <temperature_to_factor_10x+0x48>
		return 20;
 80026c6:	2314      	movs	r3, #20
 80026c8:	e005      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b28      	cmp	r3, #40	; 0x28
 80026ce:	dc01      	bgt.n	80026d4 <temperature_to_factor_10x+0x52>
		return 10;
 80026d0:	230a      	movs	r3, #10
 80026d2:	e000      	b.n	80026d6 <temperature_to_factor_10x+0x54>
	}
	return 7;
 80026d4:	2307      	movs	r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af02      	add	r7, sp, #8
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	70fb      	strb	r3, [r7, #3]
 80026ee:	4613      	mov	r3, r2
 80026f0:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e00e      	b.n	8002716 <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b299      	uxth	r1, r3
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	78bb      	ldrb	r3, [r7, #2]
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	2200      	movs	r2, #0
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb06 	bl	8002d1c <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	3301      	adds	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800271e:	429a      	cmp	r2, r3
 8002720:	d3ea      	bcc.n	80026f8 <frame_fixed+0x16>
	}
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11e      	bne.n	800277c <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e014      	b.n	800276e <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	b299      	uxth	r1, r3
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	441a      	add	r2, r3
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2300      	movs	r3, #0
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fada 	bl	8002d1c <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	3301      	adds	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002776:	429a      	cmp	r2, r3
 8002778:	d3e4      	bcc.n	8002744 <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 800277a:	e021      	b.n	80027c0 <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800277c:	2300      	movs	r3, #0
 800277e:	75bb      	strb	r3, [r7, #22]
 8002780:	e018      	b.n	80027b4 <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 8002782:	7dbb      	ldrb	r3, [r7, #22]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 800278e:	7dbb      	ldrb	r3, [r7, #22]
 8002790:	b299      	uxth	r1, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	18d0      	adds	r0, r2, r3
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	4602      	mov	r2, r0
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fab7 	bl	8002d1c <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80027ae:	7dbb      	ldrb	r3, [r7, #22]
 80027b0:	3301      	adds	r3, #1
 80027b2:	75bb      	strb	r3, [r7, #22]
 80027b4:	7dbb      	ldrb	r3, [r7, #22]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3e0      	bcc.n	8002782 <frame_data+0x58>
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
 80027d4:	4613      	mov	r3, r2
 80027d6:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 80027dc:	f002 feb2 	bl	8005544 <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 80027e2:	78ba      	ldrb	r2, [r7, #2]
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff7a 	bl	80026e2 <frame_fixed>
		iters++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 80027f4:	f002 fea6 	bl	8005544 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002802:	4293      	cmp	r3, r2
 8002804:	d3ed      	bcc.n	80027e2 <frame_fixed_repeat+0x1a>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 8002820:	f002 fe90 	bl	8005544 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff7c 	bl	800272a <frame_data>
		iters++;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002838:	f002 fe84 	bl	8005544 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002846:	4293      	cmp	r3, r2
 8002848:	d3ed      	bcc.n	8002826 <frame_data_repeat+0x18>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af02      	add	r7, sp, #8
 8002858:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e00d      	b.n	800287c <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8002860:	2300      	movs	r3, #0
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	2300      	movs	r3, #0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	2200      	movs	r2, #0
 800286c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fa53 	bl	8002d1c <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4293      	cmp	r3, r2
 8002886:	dbeb      	blt.n	8002860 <nothing_frame+0xe>
	}
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af02      	add	r7, sp, #8
 8002896:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8002898:	2300      	movs	r3, #0
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2300      	movs	r3, #0
 80028a2:	2200      	movs	r2, #0
 80028a4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fa37 	bl	8002d1c <one_line>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 80028be:	2303      	movs	r3, #3
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2300      	movs	r3, #0
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	2200      	movs	r2, #0
 80028ca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa24 	bl	8002d1c <one_line>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	82fb      	strh	r3, [r7, #22]
 80028ee:	e098      	b.n	8002a22 <even_pixels+0x146>
		if (NULL != data) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 808b 	beq.w	8002a0e <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 80028f8:	8afb      	ldrh	r3, [r7, #22]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002904:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002906:	23ff      	movs	r3, #255	; 0xff
 8002908:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 8002910:	8afb      	ldrh	r3, [r7, #22]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	4413      	add	r3, r2
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	7d7b      	ldrb	r3, [r7, #21]
 800291a:	4053      	eors	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002922:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 8002924:	7d3b      	ldrb	r3, [r7, #20]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	b2da      	uxtb	r2, r3
 800292a:	7d3b      	ldrb	r3, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8002930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002934:	2b03      	cmp	r3, #3
 8002936:	d82e      	bhi.n	8002996 <even_pixels+0xba>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <even_pixels+0x64>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	08002965 	.word	0x08002965
 8002948:	08002977 	.word	0x08002977
 800294c:	08002989 	.word	0x08002989
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 8002950:	7d7b      	ldrb	r3, [r7, #21]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002960:	757b      	strb	r3, [r7, #21]
				break;
 8002962:	e018      	b.n	8002996 <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 8002964:	7d7b      	ldrb	r3, [r7, #21]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3355      	adds	r3, #85	; 0x55
 8002972:	757b      	strb	r3, [r7, #21]
				break;
 8002974:	e00f      	b.n	8002996 <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 8002976:	7d7b      	ldrb	r3, [r7, #21]
 8002978:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800297c:	43db      	mvns	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002984:	757b      	strb	r3, [r7, #21]
				break;
 8002986:	e006      	b.n	8002996 <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 8002988:	7d7b      	ldrb	r3, [r7, #21]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002992:	757b      	strb	r3, [r7, #21]
				break;
 8002994:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002996:	7d7a      	ldrb	r2, [r7, #21]
 8002998:	7d3b      	ldrb	r3, [r7, #20]
 800299a:	4013      	ands	r3, r2
 800299c:	b2db      	uxtb	r3, r3
 800299e:	b25a      	sxtb	r2, r3
 80029a0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 80029b4:	7d7b      	ldrb	r3, [r7, #21]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 80029ba:	7d7b      	ldrb	r3, [r7, #21]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 80029c6:	7d7b      	ldrb	r3, [r7, #21]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 80029d2:	7d7b      	ldrb	r3, [r7, #21]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 80029da:	7cbb      	ldrb	r3, [r7, #18]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	b25a      	sxtb	r2, r3
 80029e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b25a      	sxtb	r2, r3
 80029e8:	7c7b      	ldrb	r3, [r7, #17]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b25a      	sxtb	r2, r3
 80029f2:	7c3b      	ldrb	r3, [r7, #16]
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	6011      	str	r1, [r2, #0]
 8002a08:	7d7a      	ldrb	r2, [r7, #21]
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e006      	b.n	8002a1c <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	6011      	str	r1, [r2, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 8002a1c:	8afb      	ldrh	r3, [r7, #22]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	82fb      	strh	r3, [r7, #22]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a26:	8afa      	ldrh	r2, [r7, #22]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f4ff af61 	bcc.w	80028f0 <even_pixels+0x14>
		}
	}
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a4e:	82fb      	strh	r3, [r7, #22]
 8002a50:	e072      	b.n	8002b38 <odd_pixels+0xfc>
		if (NULL != data) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d065      	beq.n	8002b24 <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 8002a58:	8afb      	ldrh	r3, [r7, #22]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002a66:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002a68:	23ff      	movs	r3, #255	; 0xff
 8002a6a:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	7d7b      	ldrb	r3, [r7, #21]
 8002a7e:	4053      	eors	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002a86:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 8002a88:	7d3b      	ldrb	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8002a98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d82a      	bhi.n	8002af6 <odd_pixels+0xba>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <odd_pixels+0x6c>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	08002ad7 	.word	0x08002ad7
 8002ab4:	08002aed 	.word	0x08002aed
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 8002ab8:	7d7b      	ldrb	r3, [r7, #21]
 8002aba:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002ac4:	757b      	strb	r3, [r7, #21]
				break;
 8002ac6:	e016      	b.n	8002af6 <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 8002ac8:	7d7b      	ldrb	r3, [r7, #21]
 8002aca:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3355      	adds	r3, #85	; 0x55
 8002ad2:	757b      	strb	r3, [r7, #21]
				break;
 8002ad4:	e00f      	b.n	8002af6 <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 8002ad6:	7d7b      	ldrb	r3, [r7, #21]
 8002ad8:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	757b      	strb	r3, [r7, #21]
				break;
 8002aea:	e004      	b.n	8002af6 <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 8002aec:	7d7b      	ldrb	r3, [r7, #21]
 8002aee:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002af2:	757b      	strb	r3, [r7, #21]
				break;
 8002af4:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002af6:	7d7a      	ldrb	r2, [r7, #21]
 8002af8:	7d3b      	ldrb	r3, [r7, #20]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	b25a      	sxtb	r2, r3
 8002b00:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1c59      	adds	r1, r3, #1
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	6011      	str	r1, [r2, #0]
 8002b1e:	7d7a      	ldrb	r2, [r7, #21]
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e006      	b.n	8002b32 <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	82fb      	strh	r3, [r7, #22]
 8002b38:	8afb      	ldrh	r3, [r7, #22]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d189      	bne.n	8002a52 <odd_pixels+0x16>
		}
	}
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	b21a      	sxth	r2, r3
 8002b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f243 3333 	movw	r3, #13107	; 0x3333
 8002b82:	4013      	ands	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f245 5355 	movw	r3, #21845	; 0x5555
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
	return value;
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002bbe:	82fb      	strh	r3, [r7, #22]
 8002bc0:	e0a1      	b.n	8002d06 <all_pixels+0x15a>
		if (NULL != data) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 808d 	beq.w	8002ce4 <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ffb8 	bl	8002b4c <interleave_bits>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 8002be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be4:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01a      	beq.n	8002c22 <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 8002bec:	8afb      	ldrh	r3, [r7, #22]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ffa7 	bl	8002b4c <interleave_bits>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 8002c02:	8a3a      	ldrh	r2, [r7, #16]
 8002c04:	8abb      	ldrh	r3, [r7, #20]
 8002c06:	4053      	eors	r3, r2
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f245 5355 	movw	r3, #21845	; 0x5555
 8002c0e:	4013      	ands	r3, r2
 8002c10:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 8002c12:	8a3b      	ldrh	r3, [r7, #16]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 8002c22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d839      	bhi.n	8002c9e <all_pixels+0xf2>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <all_pixels+0x84>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c55 	.word	0x08002c55
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c89 	.word	0x08002c89
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 8002c40:	8abb      	ldrh	r3, [r7, #20]
 8002c42:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c46:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <all_pixels+0x16c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	82bb      	strh	r3, [r7, #20]
				break;
 8002c52:	e024      	b.n	8002c9e <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 8002c54:	8abb      	ldrh	r3, [r7, #20]
 8002c56:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c5a:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002c64:	3355      	adds	r3, #85	; 0x55
 8002c66:	82bb      	strh	r3, [r7, #20]
				break;
 8002c68:	e019      	b.n	8002c9e <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002c6a:	8abb      	ldrh	r3, [r7, #20]
 8002c6c:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c70:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002c7e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	82bb      	strh	r3, [r7, #20]
				break;
 8002c86:	e00a      	b.n	8002c9e <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002c88:	8abb      	ldrh	r3, [r7, #20]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002c96:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8002c9a:	82bb      	strh	r3, [r7, #20]
				break;
 8002c9c:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 8002c9e:	8aba      	ldrh	r2, [r7, #20]
 8002ca0:	8a7b      	ldrh	r3, [r7, #18]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	b219      	sxth	r1, r3
 8002cb0:	f245 5355 	movw	r3, #21845	; 0x5555
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 8002cbe:	8abb      	ldrh	r3, [r7, #20]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1c59      	adds	r1, r3, #1
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	b2c2      	uxtb	r2, r0
 8002cd0:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	1c59      	adds	r1, r3, #1
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	6011      	str	r1, [r2, #0]
 8002cdc:	8aba      	ldrh	r2, [r7, #20]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e00d      	b.n	8002d00 <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c59      	adds	r1, r3, #1
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1c59      	adds	r1, r3, #1
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	6011      	str	r1, [r2, #0]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	82fb      	strh	r3, [r7, #22]
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f af5a 	bne.w	8002bc2 <all_pixels+0x16>
		}
	}
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	ffffaaaa 	.word	0xffffaaaa

08002d1c <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	460b      	mov	r3, r1
 8002d2a:	817b      	strh	r3, [r7, #10]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 8002d30:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <one_line+0x220>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	833b      	strh	r3, [r7, #24]
 8002d36:	f107 0318 	add.w	r3, r7, #24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f902 	bl	8002f48 <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	617a      	str	r2, [r7, #20]
 8002d50:	2272      	movs	r2, #114	; 0x72
 8002d52:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <one_line+0x4c>
		*p++ = 0x00;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	617a      	str	r2, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03e      	beq.n	8002df0 <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 8002d72:	7a7a      	ldrb	r2, [r7, #9]
 8002d74:	f107 0114 	add.w	r1, r7, #20
 8002d78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff fe58 	bl	8002a3c <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d92:	e01c      	b.n	8002dce <one_line+0xb2>
			if (line / 4 == b - 1) {
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10c      	bne.n	8002dbe <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f103 	lsl.w	r1, r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	617a      	str	r2, [r7, #20]
 8002db8:	b2ca      	uxtb	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e004      	b.n	8002dc8 <one_line+0xac>
			} else {
				*p++ = 0x00;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	617a      	str	r2, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002dc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1df      	bne.n	8002d94 <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 8002dd4:	7a7a      	ldrb	r2, [r7, #9]
 8002dd6:	f107 0114 	add.w	r1, r7, #20
 8002dda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fd77 	bl	80028dc <even_pixels>
 8002dee:	e05b      	b.n	8002ea8 <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002df4:	e01e      	b.n	8002e34 <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d011      	beq.n	8002e24 <one_line+0x108>
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	08db      	lsrs	r3, r3, #3
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10b      	bne.n	8002e24 <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 8002e0c:	897b      	ldrh	r3, [r7, #10]
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	22c0      	movs	r2, #192	; 0xc0
 8002e14:	fa42 f103 	asr.w	r1, r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	617a      	str	r2, [r7, #20]
 8002e1e:	b2ca      	uxtb	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e004      	b.n	8002e2e <one_line+0x112>
			} else {
				*p++ = 0x00;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	617a      	str	r2, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e30:	3301      	adds	r3, #1
 8002e32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3db      	bcc.n	8002df6 <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 8002e3e:	7a7a      	ldrb	r2, [r7, #9]
 8002e40:	f107 0114 	add.w	r1, r7, #20
 8002e44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff feaa 	bl	8002bac <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e5e:	e020      	b.n	8002ea2 <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <one_line+0x176>
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e74:	3b01      	subs	r3, #1
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d10b      	bne.n	8002e92 <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	f003 0306 	and.w	r3, r3, #6
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f103 	lsl.w	r1, r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	617a      	str	r2, [r7, #20]
 8002e8c:	b2ca      	uxtb	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e004      	b.n	8002e9c <one_line+0x180>
			} else {
				*p++ = 0x00;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	617a      	str	r2, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1db      	bne.n	8002e60 <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d003      	beq.n	8002eba <one_line+0x19e>
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d007      	beq.n	8002ec6 <one_line+0x1aa>
 8002eb6:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 8002eb8:	e01b      	b.n	8002ef2 <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	617a      	str	r2, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
		break;
 8002ec4:	e015      	b.n	8002ef2 <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 8002ec6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db10      	blt.n	8002ef0 <one_line+0x1d4>
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	dd02      	ble.n	8002ed8 <one_line+0x1bc>
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d006      	beq.n	8002ee4 <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 8002ed6:	e00b      	b.n	8002ef0 <one_line+0x1d4>
			*p++ = 0x00;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	617a      	str	r2, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
			break;
 8002ee2:	e005      	b.n	8002ef0 <one_line+0x1d4>
			*p++ = 0xaa;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	617a      	str	r2, [r7, #20]
 8002eea:	22aa      	movs	r2, #170	; 0xaa
 8002eec:	701a      	strb	r2, [r3, #0]
			break;
 8002eee:	bf00      	nop
		break;
 8002ef0:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f81f 	bl	8002f48 <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <one_line+0x224>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	83bb      	strh	r3, [r7, #28]
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	2202      	movs	r2, #2
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f815 	bl	8002f48 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <one_line+0x228>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	843b      	strh	r3, [r7, #32]
 8002f24:	f107 0320 	add.w	r3, r7, #32
 8002f28:	2202      	movs	r2, #2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f80b 	bl	8002f48 <SPI_send>

	//Delay_ms(1);
}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08017c50 	.word	0x08017c50
 8002f40:	08017c04 	.word	0x08017c04
 8002f44:	08017c54 	.word	0x08017c54

08002f48 <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8c1b      	ldrh	r3, [r3, #32]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4619      	mov	r1, r3
 8002f62:	f002 fdeb 	bl	8005b3c <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	f007 f8a3 	bl	800a0bc <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8c1b      	ldrh	r3, [r3, #32]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	f002 fddb 	bl	8005b3c <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002f86:	200a      	movs	r0, #10
 8002f88:	f7fd ff12 	bl	8000db0 <DWT_Delay>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8c1b      	ldrh	r3, [r3, #32]
 8002faa:	2200      	movs	r2, #0
 8002fac:	4619      	mov	r1, r3
 8002fae:	f002 fdc5 	bl	8005b3c <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	f007 f9ae 	bl	800a324 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8c1b      	ldrh	r3, [r3, #32]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f002 fdb2 	bl	8005b3c <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f7fd fee9 	bl	8000db0 <DWT_Delay>
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <Canvas_Init>:

/************************************************************************************************
 * GLOBAL FUNCTIONS
 ***********************************************************************************************/

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	883a      	ldrh	r2, [r7, #0]
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	4618      	mov	r0, r3
 8003002:	f014 f92d 	bl	8017260 <malloc>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <Canvas_Init+0x84>)
 800300c:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <Canvas_Init+0x84>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	883a      	ldrh	r2, [r7, #0]
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	461a      	mov	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f014 f949 	bl	80172b4 <memset>

	if (b_canvas == NULL){
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <Canvas_Init+0x84>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01a      	b.n	8003064 <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <Canvas_Init+0x84>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <Canvas_Init+0x6e>
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	b29b      	uxth	r3, r3
 8003050:	3308      	adds	r3, #8
 8003052:	b29b      	uxth	r3, r3
 8003054:	e000      	b.n	8003058 <Canvas_Init+0x70>
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	883a      	ldrh	r2, [r7, #0]
 8003060:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000f88 	.word	0x20000f88

08003070 <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters, uint8_t invPosition) {
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 8003076:	af02      	add	r7, sp, #8
 8003078:	f107 040c 	add.w	r4, r7, #12
 800307c:	6020      	str	r0, [r4, #0]
 800307e:	f107 0008 	add.w	r0, r7, #8
 8003082:	6001      	str	r1, [r0, #0]
 8003084:	1d39      	adds	r1, r7, #4
 8003086:	600a      	str	r2, [r1, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	1cfb      	adds	r3, r7, #3
 800308c:	701a      	strb	r2, [r3, #0]
	// If it has been refreshed 5+ times, perform a full refresh
// invPosition inverts the color/filter name on a specific position. 0 = no invert, >0 = position is inverted

// TODO - Find out how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 800308e:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80030ae:	461a      	mov	r2, r3
 80030b0:	f014 f8f5 	bl	801729e <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	497f      	ldr	r1, [pc, #508]	; (80032b8 <canvas_DrawFilters+0x248>)
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	f000 fba7 	bl	800380e <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 80030c0:	f107 000c 	add.w	r0, r7, #12
 80030c4:	2301      	movs	r3, #1
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <canvas_DrawFilters+0x24c>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <canvas_DrawFilters+0x250>)
 80030ce:	2203      	movs	r2, #3
 80030d0:	210a      	movs	r1, #10
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	f000 fb55 	bl	8003782 <canvas_DrawStringAt>

	// If a position is inverted, draw a filled rectangle in that position
	if (invPosition > 0) {
 80030d8:	1cfb      	adds	r3, r7, #3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02e      	beq.n	800313e <canvas_DrawFilters+0xce>
		switch (invPosition) {
 80030e0:	1cfb      	adds	r3, r7, #3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d010      	beq.n	800310a <canvas_DrawFilters+0x9a>
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d01b      	beq.n	8003124 <canvas_DrawFilters+0xb4>
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d126      	bne.n	800313e <canvas_DrawFilters+0xce>
			case 1:
				canvas_DrawFilledRectangle(canvas, 2, 19, 93, 75, false);
 80030f0:	f107 000c 	add.w	r0, r7, #12
 80030f4:	2300      	movs	r3, #0
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	234b      	movs	r3, #75	; 0x4b
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	235d      	movs	r3, #93	; 0x5d
 80030fe:	2213      	movs	r2, #19
 8003100:	2102      	movs	r1, #2
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	f000 fbb1 	bl	800386a <canvas_DrawFilledRectangle>
				break;
 8003108:	e019      	b.n	800313e <canvas_DrawFilters+0xce>
			case 2:
				canvas_DrawFilledRectangle(canvas, 2, 82, 93, 137, false);
 800310a:	f107 000c 	add.w	r0, r7, #12
 800310e:	2300      	movs	r3, #0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2389      	movs	r3, #137	; 0x89
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	235d      	movs	r3, #93	; 0x5d
 8003118:	2252      	movs	r2, #82	; 0x52
 800311a:	2102      	movs	r1, #2
 800311c:	6800      	ldr	r0, [r0, #0]
 800311e:	f000 fba4 	bl	800386a <canvas_DrawFilledRectangle>
				break;
 8003122:	e00c      	b.n	800313e <canvas_DrawFilters+0xce>
			case 3:
				canvas_DrawFilledRectangle(canvas, 2, 144, 93, 198, false);
 8003124:	f107 000c 	add.w	r0, r7, #12
 8003128:	2300      	movs	r3, #0
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	23c6      	movs	r3, #198	; 0xc6
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	235d      	movs	r3, #93	; 0x5d
 8003132:	2290      	movs	r2, #144	; 0x90
 8003134:	2102      	movs	r1, #2
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	f000 fb97 	bl	800386a <canvas_DrawFilledRectangle>
				break;
 800313c:	bf00      	nop
		}
	}

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8003144:	e148      	b.n	80033d8 <canvas_DrawFilters+0x368>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 800314c:	e13a      	b.n	80033c4 <canvas_DrawFilters+0x354>
			if (currentFilters->filter[filter].position == filterStage){
 800314e:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	440b      	add	r3, r1
 8003162:	3313      	adds	r3, #19
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 800316a:	429a      	cmp	r2, r3
 800316c:	f040 8125 	bne.w	80033ba <canvas_DrawFilters+0x34a>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 8003170:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8003174:	1d39      	adds	r1, r7, #4
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	680a      	ldr	r2, [r1, #0]
 8003182:	4413      	add	r3, r2
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	f607 1384 	addw	r3, r7, #2436	; 0x984
 800318a:	6810      	ldr	r0, [r2, #0]
 800318c:	6851      	ldr	r1, [r2, #4]
 800318e:	c303      	stmia	r3!, {r0, r1}
 8003190:	8912      	ldrh	r2, [r2, #8]
 8003192:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 800319a:	e00d      	b.n	80031b8 <canvas_DrawFilters+0x148>
					if (tmpName[nameLen] == 0x00){
 800319c:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80031a0:	f607 1298 	addw	r2, r7, #2456	; 0x998
 80031a4:	4413      	add	r3, r2
 80031a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <canvas_DrawFilters+0x152>
				for (nameLen = 0; nameLen < 10; nameLen++){
 80031ae:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80031b2:	3301      	adds	r3, #1
 80031b4:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 80031b8:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d9ed      	bls.n	800319c <canvas_DrawFilters+0x12c>
 80031c0:	e000      	b.n	80031c4 <canvas_DrawFilters+0x154>
						break;
 80031c2:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 80031c4:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d85f      	bhi.n	800328c <canvas_DrawFilters+0x21c>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3b0f      	subs	r3, #15
 80031d8:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 80031dc:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <canvas_DrawFilters+0x254>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 80031ec:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 80031f8:	fb12 f303 	smulbb	r3, r2, r3
 80031fc:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8003200:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800320c:	4413      	add	r3, r2
 800320e:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 8003212:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003216:	3b0c      	subs	r3, #12
 8003218:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 800321c:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003220:	330f      	adds	r3, #15
 8003222:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 8003236:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	0fda      	lsrs	r2, r3, #31
 8003242:	4413      	add	r3, r2
 8003244:	105b      	asrs	r3, r3, #1
 8003246:	425b      	negs	r3, r3
 8003248:	b2da      	uxtb	r2, r3
 800324a:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 800324e:	4413      	add	r3, r2
 8003250:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw Text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, filterStage == invPosition ? 1 : 0);
 8003254:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 8003258:	b299      	uxth	r1, r3
 800325a:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800325e:	b29c      	uxth	r4, r3
 8003260:	1cfb      	adds	r3, r7, #3
 8003262:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f607 1284 	addw	r2, r7, #2436	; 0x984
 8003276:	f107 000c 	add.w	r0, r7, #12
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <canvas_DrawFilters+0x258>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	4622      	mov	r2, r4
 8003284:	6800      	ldr	r0, [r0, #0]
 8003286:	f000 fa7c 	bl	8003782 <canvas_DrawStringAt>
 800328a:	e096      	b.n	80033ba <canvas_DrawFilters+0x34a>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 80032a0:	f607 1184 	addw	r1, r7, #2436	; 0x984
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	2205      	movs	r2, #5
 80032aa:	4618      	mov	r0, r3
 80032ac:	f013 fff7 	bl	801729e <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 80032b0:	2305      	movs	r3, #5
 80032b2:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 80032b6:	e01b      	b.n	80032f0 <canvas_DrawFilters+0x280>
 80032b8:	08018660 	.word	0x08018660
 80032bc:	2000003c 	.word	0x2000003c
 80032c0:	08017c58 	.word	0x08017c58
 80032c4:	aaaaaaab 	.word	0xaaaaaaab
 80032c8:	20000044 	.word	0x20000044
						botLine[i - 5] = tmpName[i];
 80032cc:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 80032d0:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032d4:	3b05      	subs	r3, #5
 80032d6:	f607 1198 	addw	r1, r7, #2456	; 0x998
 80032da:	440a      	add	r2, r1
 80032dc:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80032e0:	f107 0214 	add.w	r2, r7, #20
 80032e4:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 80032e6:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032ea:	3301      	adds	r3, #1
 80032ec:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 80032f0:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d9e9      	bls.n	80032cc <canvas_DrawFilters+0x25c>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 80032f8:	f107 0308 	add.w	r3, r7, #8
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3b0f      	subs	r3, #15
 8003304:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8003308:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 800330c:	4a48      	ldr	r2, [pc, #288]	; (8003430 <canvas_DrawFilters+0x3c0>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8003318:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 800331c:	3b01      	subs	r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 8003324:	fb12 f303 	smulbb	r3, r2, r3
 8003328:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 800332c:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	b2da      	uxtb	r2, r3
 8003334:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003338:	4413      	add	r3, r2
 800333a:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 800333e:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003342:	3b18      	subs	r3, #24
 8003344:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8003348:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800334c:	330f      	adds	r3, #15
 800334e:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, filterStage == invPosition ? 1 : 0);
 8003352:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003356:	b299      	uxth	r1, r3
 8003358:	1cfb      	adds	r3, r7, #3
 800335a:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f107 021c 	add.w	r2, r7, #28
 800336e:	f107 000c 	add.w	r0, r7, #12
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <canvas_DrawFilters+0x3c4>)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	460a      	mov	r2, r1
 800337c:	2106      	movs	r1, #6
 800337e:	6800      	ldr	r0, [r0, #0]
 8003380:	f000 f9ff 	bl	8003782 <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, filterStage == invPosition ? 1 : 0);
 8003384:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003388:	b29b      	uxth	r3, r3
 800338a:	3318      	adds	r3, #24
 800338c:	b299      	uxth	r1, r3
 800338e:	1cfb      	adds	r3, r7, #3
 8003390:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f107 0214 	add.w	r2, r7, #20
 80033a4:	f107 000c 	add.w	r0, r7, #12
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <canvas_DrawFilters+0x3c4>)
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	460a      	mov	r2, r1
 80033b2:	2106      	movs	r1, #6
 80033b4:	6800      	ldr	r0, [r0, #0]
 80033b6:	f000 f9e4 	bl	8003782 <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 80033ba:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 80033be:	3301      	adds	r3, #1
 80033c0:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 80033c4:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	f67f aec0 	bls.w	800314e <canvas_DrawFilters+0xde>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 80033ce:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80033d2:	3301      	adds	r3, #1
 80033d4:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 80033d8:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80033dc:	2b03      	cmp	r3, #3
 80033de:	f67f aeb2 	bls.w	8003146 <canvas_DrawFilters+0xd6>
	}


	// Right now, it just does a complete refresh - Need to change in the future
	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <canvas_DrawFilters+0x3c8>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d810      	bhi.n	800340c <canvas_DrawFilters+0x39c>
		canvas_UpdateEPD(canvas, epd, prevImage);
 80033ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033ee:	f107 0108 	add.w	r1, r7, #8
 80033f2:	f107 030c 	add.w	r3, r7, #12
 80033f6:	6809      	ldr	r1, [r1, #0]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	f000 fa1f 	bl	800383c <canvas_UpdateEPD>
		refreshCount++;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <canvas_DrawFilters+0x3c8>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <canvas_DrawFilters+0x3c8>)
 8003408:	701a      	strb	r2, [r3, #0]
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}


}
 800340a:	e00c      	b.n	8003426 <canvas_DrawFilters+0x3b6>
		EPD_set_enable_temperature();
 800340c:	f7ff f8e2 	bl	80025d4 <EPD_set_enable_temperature>
		canvas_PrintEPD(canvas, epd);
 8003410:	f107 0208 	add.w	r2, r7, #8
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	6811      	ldr	r1, [r2, #0]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f000 f9e2 	bl	80037e4 <canvas_PrintEPD>
		refreshCount = 0;
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <canvas_DrawFilters+0x3c8>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}
 8003430:	aaaaaaab 	.word	0xaaaaaaab
 8003434:	20000044 	.word	0x20000044
 8003438:	2000025f 	.word	0x2000025f

0800343c <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	721a      	strb	r2, [r3, #8]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	4613      	mov	r3, r2
 800346c:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b07      	cmp	r3, #7
 800347c:	d82a      	bhi.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <canvas_DrawAbsolutePixel+0x28>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a5 	.word	0x080034a5
 8003488:	080034ab 	.word	0x080034ab
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b7 	.word	0x080034b7
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034c9 	.word	0x080034c9
 80034a0:	080034cf 	.word	0x080034cf
		case 0:
			bit_pos = 7;
 80034a4:	2307      	movs	r3, #7
 80034a6:	75fb      	strb	r3, [r7, #23]
			break;
 80034a8:	e014      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 80034aa:	2306      	movs	r3, #6
 80034ac:	75fb      	strb	r3, [r7, #23]
			break;
 80034ae:	e011      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 80034b0:	2305      	movs	r3, #5
 80034b2:	75fb      	strb	r3, [r7, #23]
			break;
 80034b4:	e00e      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 80034b6:	2304      	movs	r3, #4
 80034b8:	75fb      	strb	r3, [r7, #23]
			break;
 80034ba:	e00b      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 80034bc:	2303      	movs	r3, #3
 80034be:	75fb      	strb	r3, [r7, #23]
			break;
 80034c0:	e008      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 80034c2:	2302      	movs	r3, #2
 80034c4:	75fb      	strb	r3, [r7, #23]
			break;
 80034c6:	e005      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
			break;
 80034cc:	e002      	b.n	80034d4 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]
			break;
 80034d2:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	889b      	ldrh	r3, [r3, #4]
 80034d8:	897a      	ldrh	r2, [r7, #10]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d249      	bcs.n	8003572 <canvas_DrawAbsolutePixel+0x116>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88db      	ldrh	r3, [r3, #6]
 80034e2:	893a      	ldrh	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d244      	bcs.n	8003572 <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d021      	beq.n	8003532 <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	893b      	ldrh	r3, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	8880      	ldrh	r0, [r0, #4]
 80034fa:	fb00 f303 	mul.w	r3, r0, r3
 80034fe:	440b      	add	r3, r1
 8003500:	2b00      	cmp	r3, #0
 8003502:	da00      	bge.n	8003506 <canvas_DrawAbsolutePixel+0xaa>
 8003504:	3307      	adds	r3, #7
 8003506:	10db      	asrs	r3, r3, #3
 8003508:	4618      	mov	r0, r3
 800350a:	4603      	mov	r3, r0
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b25a      	sxtb	r2, r3
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2180      	movs	r1, #128	; 0x80
 8003516:	fa41 f303 	asr.w	r3, r1, r3
 800351a:	b25b      	sxtb	r3, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	b25b      	sxtb	r3, r3
 8003520:	4013      	ands	r3, r2
 8003522:	b25a      	sxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4601      	mov	r1, r0
 800352a:	440b      	add	r3, r1
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e020      	b.n	8003574 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	893b      	ldrh	r3, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	8880      	ldrh	r0, [r0, #4]
 800353e:	fb00 f303 	mul.w	r3, r0, r3
 8003542:	440b      	add	r3, r1
 8003544:	2b00      	cmp	r3, #0
 8003546:	da00      	bge.n	800354a <canvas_DrawAbsolutePixel+0xee>
 8003548:	3307      	adds	r3, #7
 800354a:	10db      	asrs	r3, r3, #3
 800354c:	4618      	mov	r0, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b25a      	sxtb	r2, r3
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	fa41 f303 	asr.w	r3, r1, r3
 800355e:	b25b      	sxtb	r3, r3
 8003560:	4313      	orrs	r3, r2
 8003562:	b25a      	sxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4601      	mov	r1, r0
 800356a:	440b      	add	r3, r1
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e000      	b.n	8003574 <canvas_DrawAbsolutePixel+0x118>
        return;
 8003572:	bf00      	nop
        }
    }
}
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop

08003580 <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	4613      	mov	r3, r2
 8003590:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	7a1b      	ldrb	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d110      	bne.n	80035bc <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	897a      	ldrh	r2, [r7, #10]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d267      	bcs.n	8003674 <canvas_DrawPixel+0xf4>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88db      	ldrh	r3, [r3, #6]
 80035a8:	893a      	ldrh	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d262      	bcs.n	8003674 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80035ae:	893a      	ldrh	r2, [r7, #8]
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff ff51 	bl	800345c <canvas_DrawAbsolutePixel>
 80035ba:	e062      	b.n	8003682 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	7a1b      	ldrb	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d119      	bne.n	80035f8 <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88db      	ldrh	r3, [r3, #6]
 80035c8:	897a      	ldrh	r2, [r7, #10]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d254      	bcs.n	8003678 <canvas_DrawPixel+0xf8>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	889b      	ldrh	r3, [r3, #4]
 80035d2:	893a      	ldrh	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d24f      	bcs.n	8003678 <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	889a      	ldrh	r2, [r3, #4]
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80035ea:	893a      	ldrh	r2, [r7, #8]
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff ff33 	bl	800345c <canvas_DrawAbsolutePixel>
 80035f6:	e044      	b.n	8003682 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	7a1b      	ldrb	r3, [r3, #8]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11a      	bne.n	8003636 <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	889b      	ldrh	r3, [r3, #4]
 8003604:	897a      	ldrh	r2, [r7, #10]
 8003606:	429a      	cmp	r2, r3
 8003608:	d238      	bcs.n	800367c <canvas_DrawPixel+0xfc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88db      	ldrh	r3, [r3, #6]
 800360e:	893a      	ldrh	r2, [r7, #8]
 8003610:	429a      	cmp	r2, r3
 8003612:	d233      	bcs.n	800367c <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	889a      	ldrh	r2, [r3, #4]
 8003618:	897b      	ldrh	r3, [r7, #10]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88da      	ldrh	r2, [r3, #6]
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff ff14 	bl	800345c <canvas_DrawAbsolutePixel>
 8003634:	e025      	b.n	8003682 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	7a1b      	ldrb	r3, [r3, #8]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d121      	bne.n	8003682 <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88db      	ldrh	r3, [r3, #6]
 8003642:	897a      	ldrh	r2, [r7, #10]
 8003644:	429a      	cmp	r2, r3
 8003646:	d21b      	bcs.n	8003680 <canvas_DrawPixel+0x100>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	889b      	ldrh	r3, [r3, #4]
 800364c:	893a      	ldrh	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d216      	bcs.n	8003680 <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	617b      	str	r3, [r7, #20]
        x = y;
 8003656:	893b      	ldrh	r3, [r7, #8]
 8003658:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88da      	ldrh	r2, [r3, #6]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	b29b      	uxth	r3, r3
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003666:	893a      	ldrh	r2, [r7, #8]
 8003668:	8979      	ldrh	r1, [r7, #10]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff fef5 	bl	800345c <canvas_DrawAbsolutePixel>
 8003672:	e006      	b.n	8003682 <canvas_DrawPixel+0x102>
            return;
 8003674:	bf00      	nop
 8003676:	e004      	b.n	8003682 <canvas_DrawPixel+0x102>
          return;
 8003678:	bf00      	nop
 800367a:	e002      	b.n	8003682 <canvas_DrawPixel+0x102>
          return;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <canvas_DrawPixel+0x102>
          return;
 8003680:	bf00      	nop
    }
}
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	3b20      	subs	r3, #32
 80036a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a8:	88d2      	ldrh	r2, [r2, #6]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b0:	8892      	ldrh	r2, [r2, #4]
 80036b2:	08d2      	lsrs	r2, r2, #3
 80036b4:	b292      	uxth	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ba:	8892      	ldrh	r2, [r2, #4]
 80036bc:	f002 0207 	and.w	r2, r2, #7
 80036c0:	b292      	uxth	r2, r2
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2201      	movne	r2, #1
 80036c8:	2200      	moveq	r2, #0
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440a      	add	r2, r1
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e044      	b.n	800376e <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e02e      	b.n	8003748 <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	425a      	negs	r2, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	f002 0207 	and.w	r2, r2, #7
 80036fc:	bf58      	it	pl
 80036fe:	4253      	negpl	r3, r2
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	fa42 f303 	asr.w	r3, r2, r3
 8003706:	400b      	ands	r3, r1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	b29a      	uxth	r2, r3
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	4413      	add	r3, r2
 8003714:	b299      	uxth	r1, r3
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	b29a      	uxth	r2, r3
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	b29a      	uxth	r2, r3
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff2c 	bl	8003580 <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	425a      	negs	r2, r3
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	f002 0207 	and.w	r2, r2, #7
 8003734:	bf58      	it	pl
 8003736:	4253      	negpl	r3, r2
 8003738:	2b07      	cmp	r3, #7
 800373a:	d102      	bne.n	8003742 <canvas_DrawCharAt+0xba>
                ptr++;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	889b      	ldrh	r3, [r3, #4]
 800374c:	461a      	mov	r2, r3
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4293      	cmp	r3, r2
 8003752:	dbca      	blt.n	80036ea <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <canvas_DrawCharAt+0xe0>
            ptr++;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	3301      	adds	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	88db      	ldrh	r3, [r3, #6]
 8003772:	461a      	mov	r2, r3
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4293      	cmp	r3, r2
 8003778:	dbb4      	blt.n	80036e4 <canvas_DrawCharAt+0x5c>
        }
    }
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 8003782:	b580      	push	{r7, lr}
 8003784:	b08a      	sub	sp, #40	; 0x28
 8003786:	af02      	add	r7, sp, #8
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	817b      	strh	r3, [r7, #10]
 8003790:	4613      	mov	r3, r2
 8003792:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 80037a0:	e018      	b.n	80037d4 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	b299      	uxth	r1, r3
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	7818      	ldrb	r0, [r3, #0]
 80037aa:	893a      	ldrh	r2, [r7, #8]
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4603      	mov	r3, r0
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ff66 	bl	8003688 <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	889b      	ldrh	r3, [r3, #4]
 80037c0:	461a      	mov	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4413      	add	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
        counter++;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e2      	bne.n	80037a2 <canvas_DrawStringAt+0x20>
    }
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	f7fe fb70 	bl	8001ed4 <EPD_begin>
	EPD_image_0(epd, canvas->image);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	6838      	ldr	r0, [r7, #0]
 80037fc:	f7fe ff12 	bl	8002624 <EPD_image_0>
	EPD_end(epd);
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f7fe fdd7 	bl	80023b4 <EPD_end>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	889a      	ldrh	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	88db      	ldrh	r3, [r3, #6]
 8003820:	fb12 f303 	smulbb	r3, r2, r3
 8003824:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	89fa      	ldrh	r2, [r7, #14]
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f013 fd35 	bl	801729e <memcpy>
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 8003848:	68b8      	ldr	r0, [r7, #8]
 800384a:	f7fe fb43 	bl	8001ed4 <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	68b8      	ldr	r0, [r7, #8]
 8003858:	f7fe ff03 	bl	8002662 <EPD_partial_image>
	EPD_end(epd);
 800385c:	68b8      	ldr	r0, [r7, #8]
 800385e:	f7fe fda9 	bl	80023b4 <EPD_end>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <canvas_DrawFilledRectangle>:
 ***********************************************************************************************/

/**
*  @brief: this draws a filled rectangle
*/
void canvas_DrawFilledRectangle(Canvas* canvas, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t colored) {
 800386a:	b580      	push	{r7, lr}
 800386c:	b08a      	sub	sp, #40	; 0x28
 800386e:	af02      	add	r7, sp, #8
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	4608      	mov	r0, r1
 8003874:	4611      	mov	r1, r2
 8003876:	461a      	mov	r2, r3
 8003878:	4603      	mov	r3, r0
 800387a:	70fb      	strb	r3, [r7, #3]
 800387c:	460b      	mov	r3, r1
 800387e:	70bb      	strb	r3, [r7, #2]
 8003880:	4613      	mov	r3, r2
 8003882:	707b      	strb	r3, [r7, #1]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 8003884:	787a      	ldrb	r2, [r7, #1]
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	429a      	cmp	r2, r3
 800388a:	d901      	bls.n	8003890 <canvas_DrawFilledRectangle+0x26>
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	e000      	b.n	8003892 <canvas_DrawFilledRectangle+0x28>
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	61bb      	str	r3, [r7, #24]
    max_x = x1 > x0 ? x1 : x0;
 8003894:	787a      	ldrb	r2, [r7, #1]
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	429a      	cmp	r2, r3
 800389a:	d901      	bls.n	80038a0 <canvas_DrawFilledRectangle+0x36>
 800389c:	787b      	ldrb	r3, [r7, #1]
 800389e:	e000      	b.n	80038a2 <canvas_DrawFilledRectangle+0x38>
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	617b      	str	r3, [r7, #20]
    min_y = y1 > y0 ? y0 : y1;
 80038a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80038a8:	78bb      	ldrb	r3, [r7, #2]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d901      	bls.n	80038b2 <canvas_DrawFilledRectangle+0x48>
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	e001      	b.n	80038b6 <canvas_DrawFilledRectangle+0x4c>
 80038b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038b6:	613b      	str	r3, [r7, #16]
    max_y = y1 > y0 ? y1 : y0;
 80038b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80038bc:	78bb      	ldrb	r3, [r7, #2]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d902      	bls.n	80038c8 <canvas_DrawFilledRectangle+0x5e>
 80038c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038c6:	e000      	b.n	80038ca <canvas_DrawFilledRectangle+0x60>
 80038c8:	78bb      	ldrb	r3, [r7, #2]
 80038ca:	60fb      	str	r3, [r7, #12]

    for (i = min_x; i <= max_x; i++) {
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e016      	b.n	8003900 <canvas_DrawFilledRectangle+0x96>
      canvas_DrawVerticalLine(canvas, i, min_y, max_y - min_y + 1, colored);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	b2d9      	uxtb	r1, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	b2d8      	uxtb	r0, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	4602      	mov	r2, r0
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f80b 	bl	8003910 <canvas_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	429a      	cmp	r2, r3
 8003906:	dde4      	ble.n	80038d2 <canvas_DrawFilledRectangle+0x68>
    }
}
 8003908:	bf00      	nop
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <canvas_DrawVerticalLine>:


/**
*  @brief: this draws a vertical line on the frame buffer
*/
void canvas_DrawVerticalLine(Canvas* canvas, uint8_t x, uint8_t y, uint8_t line_height, uint8_t colored) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	461a      	mov	r2, r3
 800391e:	4603      	mov	r3, r0
 8003920:	70fb      	strb	r3, [r7, #3]
 8003922:	460b      	mov	r3, r1
 8003924:	70bb      	strb	r3, [r7, #2]
 8003926:	4613      	mov	r3, r2
 8003928:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = y; i < y + line_height; i++) {
 800392a:	78bb      	ldrb	r3, [r7, #2]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e00a      	b.n	8003946 <canvas_DrawVerticalLine+0x36>
        canvas_DrawPixel(canvas, x, i, colored);
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	b299      	uxth	r1, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	b29a      	uxth	r2, r3
 8003938:	7e3b      	ldrb	r3, [r7, #24]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fe20 	bl	8003580 <canvas_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	78ba      	ldrb	r2, [r7, #2]
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	4413      	add	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	dbee      	blt.n	8003930 <canvas_DrawVerticalLine+0x20>
    }
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <LM75B_Init+0x78>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <LM75B_Init+0x7c>)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <LM75B_Init+0x80>)
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 800397c:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <LM75B_Init+0x7c>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4b16      	ldr	r3, [pc, #88]	; (80039dc <LM75B_Init+0x80>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	4619      	mov	r1, r3
 8003988:	f002 f8d8 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 800398c:	2001      	movs	r0, #1
 800398e:	f001 fde5 	bl	800555c <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 8003992:	f107 0316 	add.w	r3, r7, #22
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f88a 	bl	8003ab0 <readConfigReg>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <LM75B_Init+0x7c>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <LM75B_Init+0x80>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	4619      	mov	r1, r3
 80039ac:	f002 f8c6 	bl	8005b3c <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <LM75B_Init+0x5e>
		return LM75B_ERR;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e008      	b.n	80039cc <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 80039ba:	7dbb      	ldrb	r3, [r7, #22]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <LM75B_Init+0x6e>
		LM75BInitialized = true;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <LM75B_Init+0x84>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000260 	.word	0x20000260
 80039d8:	20000f90 	.word	0x20000f90
 80039dc:	20000f8c 	.word	0x20000f8c
 80039e0:	20000264 	.word	0x20000264

080039e4 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <LM75B_ReadTemp+0xc0>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e04d      	b.n	8003a9a <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <LM75B_ReadTemp+0xc4>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <LM75B_ReadTemp+0xc8>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f002 f897 	bl	8005b3c <HAL_GPIO_WritePin>
	HAL_Delay(10); // Small delay to ensure stable power
 8003a0e:	200a      	movs	r0, #10
 8003a10:	f001 fda4 	bl	800555c <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 8003a14:	2300      	movs	r3, #0
 8003a16:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	2000      	movs	r0, #0
 8003a22:	f000 f853 	bl	8003acc <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <LM75B_ReadTemp+0xc4>)
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <LM75B_ReadTemp+0xc8>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	f002 f883 	bl	8005b3c <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 8003a36:	7a3b      	ldrb	r3, [r7, #8]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	7a7b      	ldrb	r3, [r7, #9]
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 8003a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a48:	115b      	asrs	r3, r3, #5
 8003a4a:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 8003a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fd6f 	bl	8000534 <__aeabi_i2d>
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a5e:	f7fc fdd3 	bl	8000608 <__aeabi_dmul>
 8003a62:	4603      	mov	r3, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4618      	mov	r0, r3
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7fc ffdf 	bl	8000a2c <__aeabi_d2iz>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 8003a72:	89fb      	ldrh	r3, [r7, #14]
 8003a74:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 8003a76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da09      	bge.n	8003a92 <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	425b      	negs	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	b25a      	sxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e002      	b.n	8003a98 <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7b7a      	ldrb	r2, [r7, #13]
 8003a96:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 8003a98:	2301      	movs	r3, #1
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000264 	.word	0x20000264
 8003aa8:	20000f90 	.word	0x20000f90
 8003aac:	20000f8c 	.word	0x20000f8c

08003ab0 <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	2001      	movs	r0, #1
 8003abe:	f000 f805 	bl	8003acc <LM75B_i2cReadBytes>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <LM75B_i2cReadBytes+0x4c>)
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	b299      	uxth	r1, r3
 8003ae4:	79bb      	ldrb	r3, [r7, #6]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2301      	movs	r3, #1
 8003af6:	460a      	mov	r2, r1
 8003af8:	2190      	movs	r1, #144	; 0x90
 8003afa:	f002 f995 	bl	8005e28 <HAL_I2C_Mem_Read>
 8003afe:	4603      	mov	r3, r0
 8003b00:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 8003b0c:	2301      	movs	r3, #1
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000260 	.word	0x20000260

08003b1c <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	460a      	mov	r2, r1
 8003b26:	71fb      	strb	r3, [r7, #7]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <iso15693Initialize+0x1a>
 8003b32:	21ed      	movs	r1, #237	; 0xed
 8003b34:	e000      	b.n	8003b38 <iso15693Initialize+0x1c>
 8003b36:	21ec      	movs	r1, #236	; 0xec
 8003b38:	79bb      	ldrb	r3, [r7, #6]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <iso15693Initialize+0x26>
 8003b3e:	23eb      	movs	r3, #235	; 0xeb
 8003b40:	e000      	b.n	8003b44 <iso15693Initialize+0x28>
 8003b42:	23ec      	movs	r3, #236	; 0xec
 8003b44:	461a      	mov	r2, r3
 8003b46:	2007      	movs	r0, #7
 8003b48:	f009 fe9e 	bl	800d888 <rfalSetMode>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8003b50:	2001      	movs	r0, #1
 8003b52:	f00a fac5 	bl	800e0e0 <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 8003b56:	4809      	ldr	r0, [pc, #36]	; (8003b7c <iso15693Initialize+0x60>)
 8003b58:	f00a fb0e 	bl	800e178 <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 8003b5c:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8003b60:	f00a faf6 	bl	800e150 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8003b64:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8003b68:	f00a fadc 	bl	800e124 <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 8003b6c:	f00a fb32 	bl	800e1d4 <rfalFieldOnAndStartGT>

    return err;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	000108d8 	.word	0x000108d8

08003b80 <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8003b90:	f00a fb88 	bl	800e2a4 <rfalFieldOff>
 8003b94:	4603      	mov	r3, r0
 8003b96:	e000      	b.n	8003b9a <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8003ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	b091      	sub	sp, #68	; 0x44
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	60ba      	str	r2, [r7, #8]
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8003bc0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003bcc:	e2f8      	b.n	80041c0 <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	48aa      	ldr	r0, [pc, #680]	; (8003e7c <iso15693Inventory+0x2d8>)
 8003bd4:	f013 fb6e 	bl	80172b4 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 8003bd8:	4ba9      	ldr	r3, [pc, #676]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003bda:	2204      	movs	r2, #4
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003be4:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	f043 0320 	orr.w	r3, r3, #32
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4ba4      	ldr	r3, [pc, #656]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003bf0:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8003bf2:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 8003bf8:	4aa1      	ldr	r2, [pc, #644]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003bfe:	7bbb      	ldrb	r3, [r7, #14]
 8003c00:	08db      	lsrs	r3, r3, #3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	7bba      	ldrb	r2, [r7, #14]
 8003c06:	f002 0207 	and.w	r2, r2, #7
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	bfcc      	ite	gt
 8003c0e:	2201      	movgt	r2, #1
 8003c10:	2200      	movle	r2, #0
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	4413      	add	r3, r2
 8003c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 8003c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c1e:	3303      	adds	r3, #3
 8003c20:	2b48      	cmp	r3, #72	; 0x48
 8003c22:	dd02      	ble.n	8003c2a <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8003c24:	2301      	movs	r3, #1
 8003c26:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003c28:	e2ca      	b.n	80041c0 <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 8003c2a:	7bbb      	ldrb	r3, [r7, #14]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d017      	beq.n	8003c64 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 8003c34:	7bbb      	ldrb	r3, [r7, #14]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 8003c46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4413      	add	r3, r2
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c56:	3b01      	subs	r3, #1
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	7eba      	ldrb	r2, [r7, #26]
 8003c5e:	400a      	ands	r2, r1
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 8003c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	4885      	ldr	r0, [pc, #532]	; (8003e84 <iso15693Inventory+0x2e0>)
 8003c6e:	f013 fb16 	bl	801729e <memcpy>

    slotNumPos = maskLength & 7;
 8003c72:	7bbb      	ldrb	r3, [r7, #14]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8003c90:	23ff      	movs	r3, #255	; 0xff
 8003c92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <iso15693Inventory+0xfe>
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e000      	b.n	8003ca4 <iso15693Inventory+0x100>
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <iso15693Inventory+0x112>
 8003cae:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d10e      	bne.n	8003cd4 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 8003cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cba:	3303      	adds	r3, #3
 8003cbc:	b2d9      	uxtb	r1, r3
 8003cbe:	f107 0316 	add.w	r3, r7, #22
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	486d      	ldr	r0, [pc, #436]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003cca:	f00b fc93 	bl	800f5f4 <rfalISO15693TransceiveAnticollisionFrame>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cd2:	e00b      	b.n	8003cec <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8003cd4:	2005      	movs	r0, #5
 8003cd6:	f001 fc41 	bl	800555c <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 8003cda:	f107 0316 	add.w	r3, r7, #22
 8003cde:	461a      	mov	r2, r3
 8003ce0:	210c      	movs	r1, #12
 8003ce2:	69f8      	ldr	r0, [r7, #28]
 8003ce4:	f00b fd3e 	bl	800f764 <rfalISO15693TransceiveEOFAnticollision>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8003cec:	8afb      	ldrh	r3, [r7, #22]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 8003cf6:	8afb      	ldrh	r3, [r7, #22]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 8003cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d00:	2b1d      	cmp	r3, #29
 8003d02:	f040 80a1 	bne.w	8003e48 <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 8003d06:	8afb      	ldrh	r3, [r7, #22]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d802      	bhi.n	8003d12 <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 8003d0c:	231d      	movs	r3, #29
 8003d0e:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003d10:	e256      	b.n	80041c0 <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	3b02      	subs	r3, #2
 8003d16:	7e3a      	ldrb	r2, [r7, #24]
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2201      	movne	r2, #1
 8003d1e:	2200      	moveq	r2, #0
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	441a      	add	r2, r3
 8003d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	da02      	bge.n	8003d32 <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 8003d30:	e08a      	b.n	8003e48 <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d17a      	bne.n	8003e2e <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 8003d38:	8afb      	ldrh	r3, [r7, #22]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3b02      	subs	r3, #2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	7e3b      	ldrb	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003d50:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 8003d52:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003d54:	789b      	ldrb	r3, [r3, #2]
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d902      	bls.n	8003d60 <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 8003d5e:	e073      	b.n	8003e48 <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 8003d60:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003d62:	789b      	ldrb	r3, [r3, #2]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 8003d6a:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003d6e:	f04f 0201 	mov.w	r2, #1
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f1a1 0620 	sub.w	r6, r1, #32
 8003d7a:	f1c1 0020 	rsb	r0, r1, #32
 8003d7e:	fa03 f501 	lsl.w	r5, r3, r1
 8003d82:	fa02 f606 	lsl.w	r6, r2, r6
 8003d86:	4335      	orrs	r5, r6
 8003d88:	fa22 f000 	lsr.w	r0, r2, r0
 8003d8c:	4305      	orrs	r5, r0
 8003d8e:	fa02 f401 	lsl.w	r4, r2, r1
 8003d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d96:	ea42 0004 	orr.w	r0, r2, r4
 8003d9a:	ea43 0105 	orr.w	r1, r3, r5
 8003d9e:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 8003da2:	8afb      	ldrh	r3, [r7, #22]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3302      	adds	r3, #2
 8003db0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003db4:	4619      	mov	r1, r3
 8003db6:	4833      	ldr	r0, [pc, #204]	; (8003e84 <iso15693Inventory+0x2e0>)
 8003db8:	f013 fa71 	bl	801729e <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 8003dbc:	7e3b      	ldrb	r3, [r7, #24]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 8003dca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dce:	3302      	adds	r3, #2
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003dd2:	5cd1      	ldrb	r1, [r2, r3]
 8003dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dd8:	3302      	adds	r3, #2
 8003dda:	7eba      	ldrb	r2, [r7, #26]
 8003ddc:	400a      	ands	r2, r1
 8003dde:	b2d1      	uxtb	r1, r2
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003de2:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 8003de4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <iso15693Inventory+0x2d8>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d115      	bne.n	8003e1c <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003df4:	3302      	adds	r3, #2
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	b25a      	sxtb	r2, r3
 8003dfc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b25a      	sxtb	r2, r3
 8003e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e14:	3302      	adds	r3, #2
 8003e16:	b2d1      	uxtb	r1, r2
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <iso15693Inventory+0x2dc>)
 8003e1a:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 8003e1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <iso15693Inventory+0x2d8>)
 8003e22:	5cd2      	ldrb	r2, [r2, r3]
 8003e24:	3201      	adds	r2, #1
 8003e26:	b2d1      	uxtb	r1, r2
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <iso15693Inventory+0x2d8>)
 8003e2a:	54d1      	strb	r1, [r2, r3]
 8003e2c:	e00c      	b.n	8003e48 <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 8003e2e:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003e32:	f1c3 030f 	rsb	r3, r3, #15
 8003e36:	2201      	movs	r2, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 8003e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e4a:	2b1d      	cmp	r3, #29
 8003e4c:	f000 80c8 	beq.w	8003fe0 <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 8003e50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 8003e56:	7efb      	ldrb	r3, [r7, #27]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 8003e5c:	7efa      	ldrb	r2, [r7, #27]
 8003e5e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f080 81a9 	bcs.w	80041ba <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 80b5 	bne.w	8003fe0 <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 8003e7a:	e091      	b.n	8003fa0 <iso15693Inventory+0x3fc>
 8003e7c:	200002b4 	.word	0x200002b4
 8003e80:	20000268 	.word	0x20000268
 8003e84:	2000026b 	.word	0x2000026b
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 8003e88:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e8e:	f1c1 0620 	rsb	r6, r1, #32
 8003e92:	f1a1 0020 	sub.w	r0, r1, #32
 8003e96:	fa22 f801 	lsr.w	r8, r2, r1
 8003e9a:	fa03 f606 	lsl.w	r6, r3, r6
 8003e9e:	ea48 0806 	orr.w	r8, r8, r6
 8003ea2:	fa23 f000 	lsr.w	r0, r3, r0
 8003ea6:	ea48 0800 	orr.w	r8, r8, r0
 8003eaa:	fa23 f901 	lsr.w	r9, r3, r1
 8003eae:	f04f 0201 	mov.w	r2, #1
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea02 0008 	and.w	r0, r2, r8
 8003eba:	ea03 0109 	and.w	r1, r3, r9
 8003ebe:	ea50 0301 	orrs.w	r3, r0, r1
 8003ec2:	d06d      	beq.n	8003fa0 <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 8003ec4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ec6:	4ab2      	ldr	r2, [pc, #712]	; (8004190 <iso15693Inventory+0x5ec>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d939      	bls.n	8003f42 <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 8003ece:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003ed0:	f04f 0201 	mov.w	r2, #1
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f1a1 0620 	sub.w	r6, r1, #32
 8003edc:	f1c1 0020 	rsb	r0, r1, #32
 8003ee0:	fa03 fb01 	lsl.w	fp, r3, r1
 8003ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8003ee8:	ea4b 0b06 	orr.w	fp, fp, r6
 8003eec:	fa22 f000 	lsr.w	r0, r2, r0
 8003ef0:	ea4b 0b00 	orr.w	fp, fp, r0
 8003ef4:	fa02 fa01 	lsl.w	sl, r2, r1
 8003ef8:	ea6f 020a 	mvn.w	r2, sl
 8003efc:	ea6f 030b 	mvn.w	r3, fp
 8003f00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f04:	ea02 0200 	and.w	r2, r2, r0
 8003f08:	ea03 0301 	and.w	r3, r3, r1
 8003f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003f10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f12:	4a9f      	ldr	r2, [pc, #636]	; (8004190 <iso15693Inventory+0x5ec>)
 8003f14:	2100      	movs	r1, #0
 8003f16:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 8003f18:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	db3f      	blt.n	8003fa0 <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003f20:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f24:	2201      	movs	r2, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003f34:	4013      	ands	r3, r2
 8003f36:	b21b      	sxth	r3, r3
 8003f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 8003f3a:	23ff      	movs	r3, #255	; 0xff
 8003f3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003f40:	e02e      	b.n	8003fa0 <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 8003f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 8003f48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b90      	ldr	r3, [pc, #576]	; (8004194 <iso15693Inventory+0x5f0>)
 8003f52:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 8003f54:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f66:	3302      	adds	r3, #2
 8003f68:	4a8a      	ldr	r2, [pc, #552]	; (8004194 <iso15693Inventory+0x5f0>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b25a      	sxtb	r2, r3
 8003f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f86:	3302      	adds	r3, #2
 8003f88:	b2d1      	uxtb	r1, r2
 8003f8a:	4a82      	ldr	r2, [pc, #520]	; (8004194 <iso15693Inventory+0x5f0>)
 8003f8c:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 8003f8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f92:	4a7f      	ldr	r2, [pc, #508]	; (8004190 <iso15693Inventory+0x5ec>)
 8003f94:	5cd2      	ldrb	r2, [r2, r3]
 8003f96:	3201      	adds	r2, #1
 8003f98:	b2d1      	uxtb	r1, r2
 8003f9a:	4a7d      	ldr	r2, [pc, #500]	; (8004190 <iso15693Inventory+0x5ec>)
 8003f9c:	54d1      	strb	r1, [r2, r3]
                                break;
 8003f9e:	e005      	b.n	8003fac <iso15693Inventory+0x408>
                    while (i--)
 8003fa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f af6e 	bne.w	8003e88 <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 8003fac:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db15      	blt.n	8003fe0 <iso15693Inventory+0x43c>
 8003fb4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fb8:	4a75      	ldr	r2, [pc, #468]	; (8004190 <iso15693Inventory+0x5ec>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10f      	bne.n	8003fe0 <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 8003fc0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	b21b      	sxth	r3, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	b21a      	sxth	r2, r3
 8003fd0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b21b      	sxth	r3, r3
 8003fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 8003fda:	23ff      	movs	r3, #255	; 0xff
 8003fdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 8003fe0:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db06      	blt.n	8003ff6 <iso15693Inventory+0x452>
            {
                slot--;
 8003fe8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 8003ff6:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f6bf ae54 	bge.w	8003ca8 <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d108      	bne.n	8004018 <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 800400a:	4b62      	ldr	r3, [pc, #392]	; (8004194 <iso15693Inventory+0x5f0>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	b2da      	uxtb	r2, r3
 8004014:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <iso15693Inventory+0x5f0>)
 8004016:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 8004018:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800401c:	4313      	orrs	r3, r2
 800401e:	f040 80c2 	bne.w	80041a6 <iso15693Inventory+0x602>
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f040 80be 	bne.w	80041a6 <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800402e:	e0b6      	b.n	800419e <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 8004030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004032:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004034:	fa42 f303 	asr.w	r3, r2, r3
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80ab 	beq.w	8004198 <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8004042:	7bbb      	ldrb	r3, [r7, #14]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	7bba      	ldrb	r2, [r7, #14]
 800404a:	f002 0207 	and.w	r2, r2, #7
 800404e:	2a00      	cmp	r2, #0
 8004050:	bfcc      	ite	gt
 8004052:	2201      	movgt	r2, #1
 8004054:	2200      	movle	r2, #0
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	4413      	add	r3, r2
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 800405e:	7e7b      	ldrb	r3, [r7, #25]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 8004064:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004068:	3301      	adds	r3, #1
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 800406e:	7e7b      	ldrb	r3, [r7, #25]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d95b      	bls.n	800412c <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 8004074:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004078:	3301      	adds	r3, #1
 800407a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 800407e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004082:	3302      	adds	r3, #2
 8004084:	4a43      	ldr	r2, [pc, #268]	; (8004194 <iso15693Inventory+0x5f0>)
 8004086:	5cd3      	ldrb	r3, [r2, r3]
 8004088:	b25a      	sxtb	r2, r3
 800408a:	7e7b      	ldrb	r3, [r7, #25]
 800408c:	f1c3 0308 	rsb	r3, r3, #8
 8004090:	2101      	movs	r1, #1
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	425b      	negs	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	b25b      	sxtb	r3, r3
 800409e:	4013      	ands	r3, r2
 80040a0:	b25a      	sxtb	r2, r3
 80040a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040a6:	3302      	adds	r3, #2
 80040a8:	b2d1      	uxtb	r1, r2
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <iso15693Inventory+0x5f0>)
 80040ac:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 80040ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040b2:	3302      	adds	r3, #2
 80040b4:	4a37      	ldr	r2, [pc, #220]	; (8004194 <iso15693Inventory+0x5f0>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80040bc:	7e7b      	ldrb	r3, [r7, #25]
 80040be:	f1c3 0308 	rsb	r3, r3, #8
 80040c2:	fa41 f303 	asr.w	r3, r1, r3
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b25a      	sxtb	r2, r3
 80040cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040d0:	3302      	adds	r3, #2
 80040d2:	b2d1      	uxtb	r1, r2
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <iso15693Inventory+0x5f0>)
 80040d6:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 80040d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040dc:	3301      	adds	r3, #1
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <iso15693Inventory+0x5f0>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	b25a      	sxtb	r2, r3
 80040e4:	7e7b      	ldrb	r3, [r7, #25]
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	4013      	ands	r3, r2
 80040f6:	b25a      	sxtb	r2, r3
 80040f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040fc:	3301      	adds	r3, #1
 80040fe:	b2d1      	uxtb	r1, r2
 8004100:	4a24      	ldr	r2, [pc, #144]	; (8004194 <iso15693Inventory+0x5f0>)
 8004102:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 8004104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004108:	3301      	adds	r3, #1
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <iso15693Inventory+0x5f0>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	b25a      	sxtb	r2, r3
 8004110:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004112:	7e7b      	ldrb	r3, [r7, #25]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	b25b      	sxtb	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b25a      	sxtb	r2, r3
 800411e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004122:	3301      	adds	r3, #1
 8004124:	b2d1      	uxtb	r1, r2
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <iso15693Inventory+0x5f0>)
 8004128:	54d1      	strb	r1, [r2, r3]
 800412a:	e028      	b.n	800417e <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 800412c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004130:	3302      	adds	r3, #2
 8004132:	4a18      	ldr	r2, [pc, #96]	; (8004194 <iso15693Inventory+0x5f0>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	b25a      	sxtb	r2, r3
 8004138:	7e7b      	ldrb	r3, [r7, #25]
 800413a:	2101      	movs	r1, #1
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	b25b      	sxtb	r3, r3
 8004148:	4013      	ands	r3, r2
 800414a:	b25a      	sxtb	r2, r3
 800414c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004150:	3302      	adds	r3, #2
 8004152:	b2d1      	uxtb	r1, r2
 8004154:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <iso15693Inventory+0x5f0>)
 8004156:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 8004158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800415c:	3302      	adds	r3, #2
 800415e:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <iso15693Inventory+0x5f0>)
 8004160:	5cd3      	ldrb	r3, [r2, r3]
 8004162:	b25a      	sxtb	r2, r3
 8004164:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004166:	7e7b      	ldrb	r3, [r7, #25]
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	b25b      	sxtb	r3, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	b25a      	sxtb	r2, r3
 8004172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004176:	3302      	adds	r3, #2
 8004178:	b2d1      	uxtb	r1, r2
 800417a:	4a06      	ldr	r2, [pc, #24]	; (8004194 <iso15693Inventory+0x5f0>)
 800417c:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 800417e:	7bbb      	ldrb	r3, [r7, #14]
 8004180:	3304      	adds	r3, #4
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <iso15693Inventory+0x5f0>)
 8004186:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 8004188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800418a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 800418e:	e00a      	b.n	80041a6 <iso15693Inventory+0x602>
 8004190:	200002b4 	.word	0x200002b4
 8004194:	20000268 	.word	0x20000268
            for (i = 0; i < 16; i++)
 8004198:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800419a:	3301      	adds	r3, #1
 800419c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800419e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	f67f af45 	bls.w	8004030 <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 80041a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f47f ad7c 	bne.w	8003ca8 <iso15693Inventory+0x104>
 80041b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f47f ad78 	bne.w	8003ca8 <iso15693Inventory+0x104>

out_max_cards:
 80041b8:	e000      	b.n	80041bc <iso15693Inventory+0x618>
                        goto out_max_cards;
 80041ba:	bf00      	nop
    err = ERR_NONE;
 80041bc:	2300      	movs	r3, #0
 80041be:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 80041c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c2:	7efa      	ldrb	r2, [r7, #27]
 80041c4:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 80041c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 80041ce:	2316      	movs	r3, #22
 80041d0:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 80041d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	373c      	adds	r7, #60	; 0x3c
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop

080041e0 <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af06      	add	r7, sp, #24
 80041e6:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <iso15693SelectPicc+0x54>)
 80041ea:	7819      	ldrb	r1, [r3, #0]
 80041ec:	2351      	movs	r3, #81	; 0x51
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9303      	str	r3, [sp, #12]
 80041f4:	2300      	movs	r3, #0
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	2304      	movs	r3, #4
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <iso15693SelectPicc+0x58>)
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	2025      	movs	r0, #37	; 0x25
 8004208:	f000 f876 	bl	80042f8 <iso15693SendRequest>
 800420c:	4603      	mov	r3, r0
 800420e:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004210:	89fb      	ldrh	r3, [r7, #14]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <iso15693SelectPicc+0x58>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 800421e:	2306      	movs	r3, #6
 8004220:	81fb      	strh	r3, [r7, #14]
 8004222:	e002      	b.n	800422a <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <iso15693SelectPicc+0x4a>
    }

out:
 8004228:	bf00      	nop
    return err;
 800422a:	89fb      	ldrh	r3, [r7, #14]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200002f4 	.word	0x200002f4
 8004238:	20000268 	.word	0x20000268

0800423c <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af06      	add	r7, sp, #24
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	72fb      	strb	r3, [r7, #11]
 800424a:	4613      	mov	r3, r2
 800424c:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 8004252:	7abb      	ldrb	r3, [r7, #10]
 8004254:	3b01      	subs	r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <iso15693ReadMultipleBlocks+0xb0>)
 800425c:	7819      	ldrb	r1, [r3, #0]
 800425e:	2351      	movs	r3, #81	; 0x51
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	2302      	movs	r3, #2
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	f107 0310 	add.w	r3, r7, #16
 800426a:	9302      	str	r3, [sp, #8]
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	2348      	movs	r3, #72	; 0x48
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <iso15693ReadMultipleBlocks+0xb4>)
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	2023      	movs	r0, #35	; 0x23
 800427c:	f000 f83c 	bl	80042f8 <iso15693SendRequest>
 8004280:	4603      	mov	r3, r0
 8004282:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004284:	8afb      	ldrh	r3, [r7, #22]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d128      	bne.n	80042dc <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 800428a:	8abb      	ldrh	r3, [r7, #20]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d927      	bls.n	80042e0 <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <iso15693ReadMultipleBlocks+0xb4>)
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	2200      	movs	r2, #0
 80042a8:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <iso15693ReadMultipleBlocks+0xb4>)
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	82fb      	strh	r3, [r7, #22]
 80042b0:	e017      	b.n	80042e2 <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 80042b2:	8abb      	ldrh	r3, [r7, #20]
 80042b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d203      	bcs.n	80042c2 <iso15693ReadMultipleBlocks+0x86>
 80042ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29b      	uxth	r3, r3
 80042c0:	e002      	b.n	80042c8 <iso15693ReadMultipleBlocks+0x8c>
 80042c2:	8abb      	ldrh	r3, [r7, #20]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ca:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4908      	ldr	r1, [pc, #32]	; (80042f4 <iso15693ReadMultipleBlocks+0xb8>)
 80042d4:	6a38      	ldr	r0, [r7, #32]
 80042d6:	f012 ffe2 	bl	801729e <memcpy>
 80042da:	e002      	b.n	80042e2 <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 80042e0:	bf00      	nop
    return err;
 80042e2:	8afb      	ldrh	r3, [r7, #22]

}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200002f4 	.word	0x200002f4
 80042f0:	20000268 	.word	0x20000268
 80042f4:	20000269 	.word	0x20000269

080042f8 <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60ba      	str	r2, [r7, #8]
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	4603      	mov	r3, r0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	460b      	mov	r3, r1
 8004308:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 800430a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800430e:	330a      	adds	r3, #10
 8004310:	2b48      	cmp	r3, #72	; 0x48
 8004312:	dd01      	ble.n	8004318 <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 8004314:	2301      	movs	r3, #1
 8004316:	e03f      	b.n	8004398 <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800431e:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 8004326:	7bbb      	ldrb	r3, [r7, #14]
 8004328:	f043 0310 	orr.w	r3, r3, #16
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <iso15693SendRequest+0xa8>)
 8004330:	701a      	strb	r2, [r3, #0]
        length = 2;
 8004332:	2302      	movs	r3, #2
 8004334:	75fb      	strb	r3, [r7, #23]
 8004336:	e00e      	b.n	8004356 <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 8004338:	7bbb      	ldrb	r3, [r7, #14]
 800433a:	f043 0320 	orr.w	r3, r3, #32
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <iso15693SendRequest+0xa8>)
 8004342:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	3302      	adds	r3, #2
 8004348:	2208      	movs	r2, #8
 800434a:	4619      	mov	r1, r3
 800434c:	4815      	ldr	r0, [pc, #84]	; (80043a4 <iso15693SendRequest+0xac>)
 800434e:	f012 ffa6 	bl	801729e <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 8004352:	230a      	movs	r3, #10
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <iso15693SendRequest+0xa8>)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <iso15693SendRequest+0xa8>)
 8004360:	4413      	add	r3, r2
 8004362:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004368:	4618      	mov	r0, r3
 800436a:	f012 ff98 	bl	801729e <memcpy>
    length += addSendDataLength;
 800436e:	7dfa      	ldrb	r2, [r7, #23]
 8004370:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004374:	4413      	add	r3, r2
 8004376:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	b299      	uxth	r1, r3
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	8c3a      	ldrh	r2, [r7, #32]
 8004382:	9302      	str	r3, [sp, #8]
 8004384:	2300      	movs	r3, #0
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4803      	ldr	r0, [pc, #12]	; (80043a0 <iso15693SendRequest+0xa8>)
 8004392:	f00a f965 	bl	800e660 <rfalTransceiveBlockingTxRx>
 8004396:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000268 	.word	0x20000268
 80043a4:	2000026a 	.word	0x2000026a

080043a8 <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	80fb      	strh	r3, [r7, #6]
	struct st25r3916AatTuneResult tuningStatus;

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 80043b2:	f008 fd11 	bl	800cdd8 <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 80043b6:	f009 f9f1 	bl	800d79c <rfalInitialize>
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <rfidControllerInit+0x22>
		rfidInitialized = true;
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <rfidControllerInit+0x3c>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
	}

	err = st25r3916AatTune(NULL, &tuningStatus);
 80043ca:	463b      	mov	r3, r7
 80043cc:	4619      	mov	r1, r3
 80043ce:	2000      	movs	r0, #0
 80043d0:	f00c f8e4 	bl	801059c <st25r3916AatTune>
 80043d4:	4603      	mov	r3, r0
 80043d6:	80fb      	strh	r3, [r7, #6]

	return err;
 80043d8:	88fb      	ldrh	r3, [r7, #6]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200002f5 	.word	0x200002f5

080043e8 <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	; 0x38
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 80043f4:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <checkFilterTags+0x18c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <checkFilterTags+0x1e>
 8004402:	2307      	movs	r3, #7
 8004404:	e0b1      	b.n	800456a <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004412:	e021      	b.n	8004458 <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 8004414:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3301      	adds	r3, #1
 8004426:	2208      	movs	r2, #8
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f012 ff42 	bl	80172b4 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 8004430:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	3308      	adds	r3, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	3301      	adds	r3, #1
 8004444:	220a      	movs	r2, #10
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f012 ff33 	bl	80172b4 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800444e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004452:	3301      	adds	r3, #1
 8004454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004458:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800445c:	2b02      	cmp	r3, #2
 800445e:	d9d9      	bls.n	8004414 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8004464:	2100      	movs	r1, #0
 8004466:	2000      	movs	r0, #0
 8004468:	f7ff fb58 	bl	8003b1c <iso15693Initialize>
 800446c:	4603      	mov	r3, r0
 800446e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004472:	2b00      	cmp	r3, #0
 8004474:	d16e      	bne.n	8004554 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8004476:	4b40      	ldr	r3, [pc, #256]	; (8004578 <checkFilterTags+0x190>)
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	2303      	movs	r3, #3
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4b3f      	ldr	r3, [pc, #252]	; (800457c <checkFilterTags+0x194>)
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	2000      	movs	r0, #0
 8004486:	f7ff fb8d 	bl	8003ba4 <iso15693Inventory>
 800448a:	4603      	mov	r3, r0
 800448c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800448e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004490:	2b00      	cmp	r3, #0
 8004492:	d161      	bne.n	8004558 <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800449a:	e050      	b.n	800453e <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 800449c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4a34      	ldr	r2, [pc, #208]	; (800457c <checkFilterTags+0x194>)
 80044aa:	4413      	add	r3, r2
 80044ac:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 80044ae:	6a38      	ldr	r0, [r7, #32]
 80044b0:	f7ff fe96 	bl	80041e0 <iso15693SelectPicc>
 80044b4:	4603      	mov	r3, r0
 80044b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d14e      	bne.n	800455c <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 80044be:	f107 021f 	add.w	r2, r7, #31
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	2311      	movs	r3, #17
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	2204      	movs	r2, #4
 80044d6:	2100      	movs	r1, #0
 80044d8:	6a38      	ldr	r0, [r7, #32]
 80044da:	f7ff feaf 	bl	800423c <iso15693ReadMultipleBlocks>
 80044de:	4603      	mov	r3, r0
 80044e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d13b      	bne.n	8004560 <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 80044e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	1c58      	adds	r0, r3, #1
 80044fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <checkFilterTags+0x194>)
 8004508:	4413      	add	r3, r2
 800450a:	3302      	adds	r3, #2
 800450c:	2208      	movs	r2, #8
 800450e:	4619      	mov	r1, r3
 8004510:	f012 fec5 	bl	801729e <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 8004514:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	3308      	adds	r3, #8
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	3301      	adds	r3, #1
 8004528:	f107 010c 	add.w	r1, r7, #12
 800452c:	220a      	movs	r2, #10
 800452e:	4618      	mov	r0, r3
 8004530:	f012 feb5 	bl	801729e <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <checkFilterTags+0x190>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004546:	429a      	cmp	r2, r3
 8004548:	d3a8      	bcc.n	800449c <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <checkFilterTags+0x190>)
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e006      	b.n	8004562 <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8004554:	bf00      	nop
 8004556:	e004      	b.n	8004562 <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8004558:	bf00      	nop
 800455a:	e002      	b.n	8004562 <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 800455c:	bf00      	nop
 800455e:	e000      	b.n	8004562 <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8004560:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 8004562:	2000      	movs	r0, #0
 8004564:	f7ff fb0c 	bl	8003b80 <iso15693Deinitialize>

	return err;
 8004568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800456a:	4618      	mov	r0, r3
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200002f5 	.word	0x200002f5
 8004578:	200002f6 	.word	0x200002f6
 800457c:	200002f8 	.word	0x200002f8

08004580 <startWakeUpMode>:

ReturnCode startWakeUpMode(void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
	rfalWakeUpConfig wkupConfig;

	// Set up the Wake Up Configuration
	wkupConfig.period = RFAL_WUM_PERIOD_100MS;
 8004586:	2310      	movs	r3, #16
 8004588:	703b      	strb	r3, [r7, #0]
	wkupConfig.irqTout = false;
 800458a:	2300      	movs	r3, #0
 800458c:	707b      	strb	r3, [r7, #1]
	wkupConfig.swTagDetect = true;
 800458e:	2301      	movs	r3, #1
 8004590:	70bb      	strb	r3, [r7, #2]

	// Inductive Amplitude Wake Up
	wkupConfig.indAmp.enabled = false;
 8004592:	2300      	movs	r3, #0
 8004594:	70fb      	strb	r3, [r7, #3]
	wkupConfig.indAmp.delta = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	713b      	strb	r3, [r7, #4]
	wkupConfig.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800459a:	23ff      	movs	r3, #255	; 0xff
 800459c:	717b      	strb	r3, [r7, #5]
	wkupConfig.indAmp.autoAvg = true;
 800459e:	2301      	movs	r3, #1
 80045a0:	71bb      	strb	r3, [r7, #6]
	wkupConfig.indAmp.aaInclMeas = true;
 80045a2:	2301      	movs	r3, #1
 80045a4:	71fb      	strb	r3, [r7, #7]
	wkupConfig.indAmp.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 80045a6:	2302      	movs	r3, #2
 80045a8:	723b      	strb	r3, [r7, #8]

	// Inductive Phase Wake Up - Disabled
	wkupConfig.indPha.enabled = true;
 80045aa:	2301      	movs	r3, #1
 80045ac:	727b      	strb	r3, [r7, #9]
	wkupConfig.indPha.delta = 4;
 80045ae:	2304      	movs	r3, #4
 80045b0:	72bb      	strb	r3, [r7, #10]
	wkupConfig.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 80045b2:	23ff      	movs	r3, #255	; 0xff
 80045b4:	72fb      	strb	r3, [r7, #11]
	wkupConfig.indPha.autoAvg = true;
 80045b6:	2301      	movs	r3, #1
 80045b8:	733b      	strb	r3, [r7, #12]
	wkupConfig.indPha.aaInclMeas = true;
 80045ba:	2301      	movs	r3, #1
 80045bc:	737b      	strb	r3, [r7, #13]
	wkupConfig.indPha.aaWeight = RFAL_WUM_AA_WEIGHT_8;
 80045be:	2301      	movs	r3, #1
 80045c0:	73bb      	strb	r3, [r7, #14]

//	// Capacitive Wake Up - Disabled
	wkupConfig.cap.enabled = false;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
	wkupConfig.cap.delta = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	743b      	strb	r3, [r7, #16]
	wkupConfig.cap.reference = RFAL_WUM_REFERENCE_AUTO;
 80045ca:	23ff      	movs	r3, #255	; 0xff
 80045cc:	747b      	strb	r3, [r7, #17]
	wkupConfig.cap.autoAvg = true;
 80045ce:	2301      	movs	r3, #1
 80045d0:	74bb      	strb	r3, [r7, #18]
	wkupConfig.cap.aaInclMeas = true;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
	wkupConfig.cap.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 80045d6:	2302      	movs	r3, #2
 80045d8:	753b      	strb	r3, [r7, #20]

	ReturnCode err = rfalWakeUpModeStart(&wkupConfig);
 80045da:	463b      	mov	r3, r7
 80045dc:	4618      	mov	r0, r3
 80045de:	f00b f8e1 	bl	800f7a4 <rfalWakeUpModeStart>
 80045e2:	4603      	mov	r3, r0
 80045e4:	82fb      	strh	r3, [r7, #22]

	return err;
 80045e6:	8afb      	ldrh	r3, [r7, #22]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <spiInit+0x2c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	2000071c 	.word	0x2000071c

08004620 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	2200      	movs	r2, #0
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fa82 	bl	8005b3c <HAL_GPIO_WritePin>
}     
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2201      	movs	r2, #1
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 fa72 	bl	8005b3c <HAL_GPIO_WritePin>
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <spiTxRx+0x70>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <spiTxRx+0x1a>
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e026      	b.n	80046c8 <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d901      	bls.n	8004686 <spiTxRx+0x26>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e020      	b.n	80046c8 <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	461a      	mov	r2, r3
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4810      	ldr	r0, [pc, #64]	; (80046d4 <spiTxRx+0x74>)
 8004694:	f012 fe03 	bl	801729e <memcpy>
 8004698:	e005      	b.n	80046a6 <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	461a      	mov	r2, r3
 800469e:	2100      	movs	r1, #0
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <spiTxRx+0x74>)
 80046a2:	f012 fe07 	bl	80172b4 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <spiTxRx+0x70>)
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <spiTxRx+0x54>
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	e000      	b.n	80046b6 <spiTxRx+0x56>
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <spiTxRx+0x78>)
 80046b6:	88f9      	ldrh	r1, [r7, #6]
 80046b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	460b      	mov	r3, r1
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <spiTxRx+0x74>)
 80046c2:	f005 fe2f 	bl	800a324 <HAL_SPI_TransmitReceive>
 80046c6:	4603      	mov	r3, r0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000071c 	.word	0x2000071c
 80046d4:	2000031c 	.word	0x2000031c
 80046d8:	2000051c 	.word	0x2000051c

080046dc <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 80046e6:	f000 ff2d 	bl	8005544 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	4413      	add	r3, r2
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8004700:	f000 ff20 	bl	8005544 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da01      	bge.n	800471a <timerIsExpired+0x22>
  {
    return true;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <timerIsExpired+0x24>
  }
  
  return false;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <rtcModuleInit>:
 *******************************************************************************/

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
void rtcModuleInit(RTC_HandleTypeDef *hrtc) {
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	// Register the Handle
	pRtcHandle = hrtc;
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <rtcModuleInit+0x20>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
	rtcModInit = true;
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <rtcModuleInit+0x24>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	20000720 	.word	0x20000720
 8004748:	20000724 	.word	0x20000724

0800474c <rtcModuleIsInit>:

bool rtcModuleIsInit( void ) {
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	return rtcModInit;
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <rtcModuleIsInit+0x14>)
 8004752:	781b      	ldrb	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000724 	.word	0x20000724

08004764 <rtcGetDateTime>:
	}

	return RTC_OK;
}

RTC_error rtcGetDateTime(RTC_DateTypeDef* dateRet, RTC_TimeTypeDef* timeRet) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	// Check If Module is Initialized
	if (!rtcModInit) {
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <rtcGetDateTime+0x58>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f083 0301 	eor.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <rtcGetDateTime+0x1c>
		return RTC_ERR;
 800477c:	2301      	movs	r3, #1
 800477e:	e018      	b.n	80047b2 <rtcGetDateTime+0x4e>
	}

	// Get the Time
	if (HAL_RTC_GetTime(pRtcHandle, timeRet, RTC_FORMAT_BIN) != HAL_OK) {
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <rtcGetDateTime+0x5c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2200      	movs	r2, #0
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f004 f80b 	bl	80087a4 <HAL_RTC_GetTime>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <rtcGetDateTime+0x34>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 8004794:	2301      	movs	r3, #1
 8004796:	e00c      	b.n	80047b2 <rtcGetDateTime+0x4e>
	}

	// Get the Date
	if (HAL_RTC_GetDate(pRtcHandle, dateRet, RTC_FORMAT_BIN) != HAL_OK) {
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <rtcGetDateTime+0x5c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f004 f904 	bl	80089ae <HAL_RTC_GetDate>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <rtcGetDateTime+0x4c>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <rtcGetDateTime+0x4e>
	}

	return RTC_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000724 	.word	0x20000724
 80047c0:	20000720 	.word	0x20000720

080047c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047c8:	f000 fe56 	bl	8005478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047cc:	f000 f814 	bl	80047f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047d0:	f000 f9a8 	bl	8004b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80047d4:	f000 f892 	bl	80048fc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80047d8:	f000 f918 	bl	8004a0c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80047dc:	f000 f936 	bl	8004a4c <MX_SPI1_Init>
  MX_SPI2_Init();
 80047e0:	f000 f96a 	bl	8004ab8 <MX_SPI2_Init>
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 80047e4:	f011 fffa 	bl	80167dc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80047e8:	f000 f8b6 	bl	8004958 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 80047ec:	f7fc fc68 	bl	80010c0 <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 80047f0:	f7fc fcc4 	bl	800117c <processIOs>
 80047f4:	e7fc      	b.n	80047f0 <main+0x2c>
	...

080047f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b09a      	sub	sp, #104	; 0x68
 80047fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004802:	2230      	movs	r2, #48	; 0x30
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f012 fd54 	bl	80172b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800480c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
 800482c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <SystemClock_Config+0xfc>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <SystemClock_Config+0xfc>)
 8004838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <SystemClock_Config+0xfc>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <SystemClock_Config+0x100>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <SystemClock_Config+0x100>)
 8004854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <SystemClock_Config+0x100>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004866:	230a      	movs	r3, #10
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800486a:	2301      	movs	r3, #1
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800486e:	2310      	movs	r3, #16
 8004870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004872:	2301      	movs	r3, #1
 8004874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004876:	2302      	movs	r3, #2
 8004878:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800487a:	2300      	movs	r3, #0
 800487c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 800487e:	2308      	movs	r3, #8
 8004880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004882:	2348      	movs	r3, #72	; 0x48
 8004884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004886:	2302      	movs	r3, #2
 8004888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800488a:	2303      	movs	r3, #3
 800488c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800488e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004892:	4618      	mov	r0, r3
 8004894:	f003 f8fa 	bl	8007a8c <HAL_RCC_OscConfig>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800489e:	f000 fa31 	bl	8004d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048a2:	230f      	movs	r3, #15
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048a6:	2302      	movs	r3, #2
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 fb54 	bl	8007f6c <HAL_RCC_ClockConfig>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80048ca:	f000 fa1b 	bl	8004d04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80048ce:	2302      	movs	r3, #2
 80048d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80048d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048d8:	f107 030c 	add.w	r3, r7, #12
 80048dc:	4618      	mov	r0, r3
 80048de:	f003 fd23 	bl	8008328 <HAL_RCCEx_PeriphCLKConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80048e8:	f000 fa0c 	bl	8004d04 <Error_Handler>
  }
}
 80048ec:	bf00      	nop
 80048ee:	3768      	adds	r7, #104	; 0x68
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000

080048fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <MX_I2C1_Init+0x50>)
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <MX_I2C1_Init+0x54>)
 8004904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <MX_I2C1_Init+0x50>)
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <MX_I2C1_Init+0x58>)
 800490a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <MX_I2C1_Init+0x50>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004912:	4b0e      	ldr	r3, [pc, #56]	; (800494c <MX_I2C1_Init+0x50>)
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <MX_I2C1_Init+0x50>)
 800491a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800491e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <MX_I2C1_Init+0x50>)
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <MX_I2C1_Init+0x50>)
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <MX_I2C1_Init+0x50>)
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <MX_I2C1_Init+0x50>)
 8004934:	2200      	movs	r2, #0
 8004936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004938:	4804      	ldr	r0, [pc, #16]	; (800494c <MX_I2C1_Init+0x50>)
 800493a:	f001 f93d 	bl	8005bb8 <HAL_I2C_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004944:	f000 f9de 	bl	8004d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000fec 	.word	0x20000fec
 8004950:	40005400 	.word	0x40005400
 8004954:	00061a80 	.word	0x00061a80

08004958 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800496c:	2300      	movs	r3, #0
 800496e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <MX_RTC_Init+0xac>)
 8004972:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <MX_RTC_Init+0xb0>)
 8004974:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004976:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <MX_RTC_Init+0xac>)
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <MX_RTC_Init+0xac>)
 800497e:	227f      	movs	r2, #127	; 0x7f
 8004980:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <MX_RTC_Init+0xac>)
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <MX_RTC_Init+0xac>)
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <MX_RTC_Init+0xac>)
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <MX_RTC_Init+0xac>)
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800499a:	481a      	ldr	r0, [pc, #104]	; (8004a04 <MX_RTC_Init+0xac>)
 800499c:	f003 fdb4 	bl	8008508 <HAL_RTC_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80049a6:	f000 f9ad 	bl	8004d04 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2201      	movs	r2, #1
 80049c2:	4619      	mov	r1, r3
 80049c4:	480f      	ldr	r0, [pc, #60]	; (8004a04 <MX_RTC_Init+0xac>)
 80049c6:	f003 fe30 	bl	800862a <HAL_RTC_SetTime>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80049d0:	f000 f998 	bl	8004d04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80049d4:	2301      	movs	r3, #1
 80049d6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80049d8:	2301      	movs	r3, #1
 80049da:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80049dc:	2301      	movs	r3, #1
 80049de:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80049e4:	463b      	mov	r3, r7
 80049e6:	2201      	movs	r2, #1
 80049e8:	4619      	mov	r1, r3
 80049ea:	4806      	ldr	r0, [pc, #24]	; (8004a04 <MX_RTC_Init+0xac>)
 80049ec:	f003 ff38 	bl	8008860 <HAL_RTC_SetDate>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80049f6:	f000 f985 	bl	8004d04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20001040 	.word	0x20001040
 8004a08:	40002800 	.word	0x40002800

08004a0c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <MX_SDIO_SD_Init+0x3c>)
 8004a14:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <MX_SDIO_SD_Init+0x38>)
 8004a36:	2202      	movs	r2, #2
 8004a38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20001060 	.word	0x20001060
 8004a48:	40012c00 	.word	0x40012c00

08004a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a50:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <MX_SPI1_Init+0x68>)
 8004a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a80:	2210      	movs	r2, #16
 8004a82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a98:	220a      	movs	r2, #10
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a9c:	4804      	ldr	r0, [pc, #16]	; (8004ab0 <MX_SPI1_Init+0x64>)
 8004a9e:	f005 faa9 	bl	8009ff4 <HAL_SPI_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004aa8:	f000 f92c 	bl	8004d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	200010e4 	.word	0x200010e4
 8004ab4:	40013000 	.word	0x40013000

08004ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <MX_SPI2_Init+0x68>)
 8004ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004aca:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004aec:	2208      	movs	r2, #8
 8004aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004b04:	220a      	movs	r2, #10
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b08:	4804      	ldr	r0, [pc, #16]	; (8004b1c <MX_SPI2_Init+0x64>)
 8004b0a:	f005 fa73 	bl	8009ff4 <HAL_SPI_Init>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004b14:	f000 f8f6 	bl	8004d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000f94 	.word	0x20000f94
 8004b20:	40003800 	.word	0x40003800

08004b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	4b6b      	ldr	r3, [pc, #428]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a6a      	ldr	r2, [pc, #424]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b68      	ldr	r3, [pc, #416]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4b64      	ldr	r3, [pc, #400]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a63      	ldr	r2, [pc, #396]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b61      	ldr	r3, [pc, #388]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4a55      	ldr	r2, [pc, #340]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9e:	4b53      	ldr	r3, [pc, #332]	; (8004cec <MX_GPIO_Init+0x1c8>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2143      	movs	r1, #67	; 0x43
 8004bae:	4850      	ldr	r0, [pc, #320]	; (8004cf0 <MX_GPIO_Init+0x1cc>)
 8004bb0:	f000 ffc4 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f240 711b 	movw	r1, #1819	; 0x71b
 8004bba:	484e      	ldr	r0, [pc, #312]	; (8004cf4 <MX_GPIO_Init+0x1d0>)
 8004bbc:	f000 ffbe 	bl	8005b3c <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2123      	movs	r1, #35	; 0x23
 8004bc4:	484c      	ldr	r0, [pc, #304]	; (8004cf8 <MX_GPIO_Init+0x1d4>)
 8004bc6:	f000 ffb9 	bl	8005b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8004bca:	2343      	movs	r3, #67	; 0x43
 8004bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	4619      	mov	r1, r3
 8004be0:	4843      	ldr	r0, [pc, #268]	; (8004cf0 <MX_GPIO_Init+0x1cc>)
 8004be2:	f000 fe11 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin DBG_OUT_TX_Pin DBG_OUT_RX_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004be6:	f240 731b 	movw	r3, #1819	; 0x71b
 8004bea:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bec:	2301      	movs	r3, #1
 8004bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	483d      	ldr	r0, [pc, #244]	; (8004cf4 <MX_GPIO_Init+0x1d0>)
 8004c00:	f000 fe02 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8004c04:	2304      	movs	r3, #4
 8004c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4619      	mov	r1, r3
 8004c16:	4837      	ldr	r0, [pc, #220]	; (8004cf4 <MX_GPIO_Init+0x1d0>)
 8004c18:	f000 fdf6 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c20:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <MX_GPIO_Init+0x1d8>)
 8004c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4830      	ldr	r0, [pc, #192]	; (8004cf0 <MX_GPIO_Init+0x1cc>)
 8004c30:	f000 fdea 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8004c34:	2323      	movs	r3, #35	; 0x23
 8004c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c40:	2300      	movs	r3, #0
 8004c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	4619      	mov	r1, r3
 8004c4a:	482b      	ldr	r0, [pc, #172]	; (8004cf8 <MX_GPIO_Init+0x1d4>)
 8004c4c:	f000 fddc 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin;
 8004c50:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <MX_GPIO_Init+0x1dc>)
 8004c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	4824      	ldr	r0, [pc, #144]	; (8004cf8 <MX_GPIO_Init+0x1d4>)
 8004c66:	f000 fdcf 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <MX_GPIO_Init+0x1dc>)
 8004c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c72:	2301      	movs	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	481c      	ldr	r0, [pc, #112]	; (8004cf0 <MX_GPIO_Init+0x1cc>)
 8004c7e:	f000 fdc3 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8004c82:	2310      	movs	r3, #16
 8004c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004c8e:	f107 0314 	add.w	r3, r7, #20
 8004c92:	4619      	mov	r1, r3
 8004c94:	4818      	ldr	r0, [pc, #96]	; (8004cf8 <MX_GPIO_Init+0x1d4>)
 8004c96:	f000 fdb7 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_IRQ_Pin LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = TEMP_IRQ_Pin|LOW_BAT_IRQ_Pin;
 8004c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <MX_GPIO_Init+0x1d8>)
 8004ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	4812      	ldr	r0, [pc, #72]	; (8004cf8 <MX_GPIO_Init+0x1d4>)
 8004cb0:	f000 fdaa 	bl	8005808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	200a      	movs	r0, #10
 8004cba:	f000 fd4c 	bl	8005756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004cbe:	200a      	movs	r0, #10
 8004cc0:	f000 fd65 	bl	800578e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	2017      	movs	r0, #23
 8004cca:	f000 fd44 	bl	8005756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004cce:	2017      	movs	r0, #23
 8004cd0:	f000 fd5d 	bl	800578e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	2028      	movs	r0, #40	; 0x28
 8004cda:	f000 fd3c 	bl	8005756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004cde:	2028      	movs	r0, #40	; 0x28
 8004ce0:	f000 fd55 	bl	800578e <HAL_NVIC_EnableIRQ>

}
 8004ce4:	bf00      	nop
 8004ce6:	3728      	adds	r7, #40	; 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40020800 	.word	0x40020800
 8004cf4:	40020000 	.word	0x40020000
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	10110000 	.word	0x10110000
 8004d00:	10310000 	.word	0x10310000

08004d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d28:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_MspInit+0x4c>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800

08004d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_I2C_MspInit+0x84>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d12b      	bne.n	8004dde <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 8004da2:	23c0      	movs	r3, #192	; 0xc0
 8004da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da6:	2312      	movs	r3, #18
 8004da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004daa:	2301      	movs	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dae:	2303      	movs	r3, #3
 8004db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004db2:	2304      	movs	r3, #4
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	4619      	mov	r1, r3
 8004dbc:	480c      	ldr	r0, [pc, #48]	; (8004df0 <HAL_I2C_MspInit+0x8c>)
 8004dbe:	f000 fd23 	bl	8005808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_I2C_MspInit+0x88>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	; 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40005400 	.word	0x40005400
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40020400 	.word	0x40020400

08004df4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <HAL_RTC_MspInit+0x24>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d102      	bne.n	8004e0c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RTC_MspInit+0x28>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40002800 	.word	0x40002800
 8004e1c:	42470e3c 	.word	0x42470e3c

08004e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e28:	f107 031c 	add.w	r3, r7, #28
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <HAL_SD_MspInit+0x110>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d171      	bne.n	8004f26 <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	4a3a      	ldr	r2, [pc, #232]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e50:	6453      	str	r3, [r2, #68]	; 0x44
 8004e52:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	4b34      	ldr	r3, [pc, #208]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004ea0:	f043 0308 	orr.w	r3, r3, #8
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea6:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <HAL_SD_MspInit+0x114>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec8:	f107 031c 	add.w	r3, r7, #28
 8004ecc:	4619      	mov	r1, r3
 8004ece:	481a      	ldr	r0, [pc, #104]	; (8004f38 <HAL_SD_MspInit+0x118>)
 8004ed0:	f000 fc9a 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8004ed4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eda:	2302      	movs	r3, #2
 8004edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eea:	f107 031c 	add.w	r3, r7, #28
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4812      	ldr	r0, [pc, #72]	; (8004f3c <HAL_SD_MspInit+0x11c>)
 8004ef2:	f000 fc89 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efa:	2302      	movs	r3, #2
 8004efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f02:	2303      	movs	r3, #3
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f06:	230c      	movs	r3, #12
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f0a:	f107 031c 	add.w	r3, r7, #28
 8004f0e:	4619      	mov	r1, r3
 8004f10:	480b      	ldr	r0, [pc, #44]	; (8004f40 <HAL_SD_MspInit+0x120>)
 8004f12:	f000 fc79 	bl	8005808 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004f16:	2200      	movs	r2, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2031      	movs	r0, #49	; 0x31
 8004f1c:	f000 fc1b 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004f20:	2031      	movs	r0, #49	; 0x31
 8004f22:	f000 fc34 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004f26:	bf00      	nop
 8004f28:	3730      	adds	r7, #48	; 0x30
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40020400 	.word	0x40020400
 8004f3c:	40020800 	.word	0x40020800
 8004f40:	40020c00 	.word	0x40020c00

08004f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 031c 	add.w	r3, r7, #28
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a45      	ldr	r2, [pc, #276]	; (8005078 <HAL_SPI_MspInit+0x134>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d134      	bne.n	8004fd0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	4b44      	ldr	r3, [pc, #272]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4a43      	ldr	r2, [pc, #268]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f74:	6453      	str	r3, [r2, #68]	; 0x44
 8004f76:	4b41      	ldr	r3, [pc, #260]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	4a3c      	ldr	r2, [pc, #240]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6313      	str	r3, [r2, #48]	; 0x30
 8004f92:	4b3a      	ldr	r3, [pc, #232]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 8004f9e:	23e0      	movs	r3, #224	; 0xe0
 8004fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004faa:	2303      	movs	r3, #3
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fae:	2305      	movs	r3, #5
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb2:	f107 031c 	add.w	r3, r7, #28
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4831      	ldr	r0, [pc, #196]	; (8005080 <HAL_SPI_MspInit+0x13c>)
 8004fba:	f000 fc25 	bl	8005808 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	2023      	movs	r0, #35	; 0x23
 8004fc4:	f000 fbc7 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004fc8:	2023      	movs	r0, #35	; 0x23
 8004fca:	f000 fbe0 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fce:	e04f      	b.n	8005070 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <HAL_SPI_MspInit+0x140>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d14a      	bne.n	8005070 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_SPI_MspInit+0x138>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <HAL_SPI_MspInit+0x138>)
 8005000:	f043 0304 	orr.w	r3, r3, #4
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_SPI_MspInit+0x138>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_SPI_MspInit+0x138>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	4a18      	ldr	r2, [pc, #96]	; (800507c <HAL_SPI_MspInit+0x138>)
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	6313      	str	r3, [r2, #48]	; 0x30
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <HAL_SPI_MspInit+0x138>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 800502e:	230c      	movs	r3, #12
 8005030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	2302      	movs	r3, #2
 8005034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503a:	2303      	movs	r3, #3
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800503e:	2305      	movs	r3, #5
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005042:	f107 031c 	add.w	r3, r7, #28
 8005046:	4619      	mov	r1, r3
 8005048:	480f      	ldr	r0, [pc, #60]	; (8005088 <HAL_SPI_MspInit+0x144>)
 800504a:	f000 fbdd 	bl	8005808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800504e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505c:	2303      	movs	r3, #3
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005060:	2305      	movs	r3, #5
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005064:	f107 031c 	add.w	r3, r7, #28
 8005068:	4619      	mov	r1, r3
 800506a:	4808      	ldr	r0, [pc, #32]	; (800508c <HAL_SPI_MspInit+0x148>)
 800506c:	f000 fbcc 	bl	8005808 <HAL_GPIO_Init>
}
 8005070:	bf00      	nop
 8005072:	3730      	adds	r7, #48	; 0x30
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40013000 	.word	0x40013000
 800507c:	40023800 	.word	0x40023800
 8005080:	40020000 	.word	0x40020000
 8005084:	40003800 	.word	0x40003800
 8005088:	40020800 	.word	0x40020800
 800508c:	40020400 	.word	0x40020400

08005090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050a2:	e7fe      	b.n	80050a2 <HardFault_Handler+0x4>

080050a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050a8:	e7fe      	b.n	80050a8 <MemManage_Handler+0x4>

080050aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ae:	e7fe      	b.n	80050ae <BusFault_Handler+0x4>

080050b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050b4:	e7fe      	b.n	80050b4 <UsageFault_Handler+0x4>

080050b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050e4:	f000 fa1a 	bl	800551c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}

080050ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80050f0:	2010      	movs	r0, #16
 80050f2:	f000 fd3d 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 80050f6:	f00c f883 	bl	8011200 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t irq5tickCnt;
	static uint32_t irq5tickOffset = 0;
	// Software Debounce
	irq5tickCnt = HAL_GetTick();
 8005106:	f000 fa1d 	bl	8005544 <HAL_GetTick>
 800510a:	6078      	str	r0, [r7, #4]

	if ((irq5tickCnt - irq5tickOffset) > 10) {
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <EXTI9_5_IRQHandler+0x68>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b0a      	cmp	r3, #10
 8005116:	d918      	bls.n	800514a <EXTI9_5_IRQHandler+0x4a>
		irq5tickOffset = irq5tickCnt;
 8005118:	4a13      	ldr	r2, [pc, #76]	; (8005168 <EXTI9_5_IRQHandler+0x68>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
		// Service the SD Card Insert/Remove
		if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET) {
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	4812      	ldr	r0, [pc, #72]	; (800516c <EXTI9_5_IRQHandler+0x6c>)
 8005122:	f000 fcf3 	bl	8005b0c <HAL_GPIO_ReadPin>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d107      	bne.n	800513c <EXTI9_5_IRQHandler+0x3c>
			// The card has been inserted. Init FatFs/Logger.
			isr_flags |= (isr_flags_t) INIT_FAT_FS;
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <EXTI9_5_IRQHandler+0x70>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <EXTI9_5_IRQHandler+0x70>)
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e006      	b.n	800514a <EXTI9_5_IRQHandler+0x4a>
		} else {
			// The card has been removed.  Deinit FatFs/Logger.
			isr_flags |= (isr_flags_t) DEINIT_FAT_FS;
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <EXTI9_5_IRQHandler+0x70>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <EXTI9_5_IRQHandler+0x70>)
 8005148:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800514a:	2080      	movs	r0, #128	; 0x80
 800514c:	f000 fd10 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005150:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005154:	f000 fd0c 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005158:	f44f 7000 	mov.w	r0, #512	; 0x200
 800515c:	f000 fd08 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000728 	.word	0x20000728
 800516c:	40020800 	.word	0x40020800
 8005170:	20000eb0 	.word	0x20000eb0

08005174 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <SPI1_IRQHandler+0x10>)
 800517a:	f005 fa75 	bl	800a668 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200010e4 	.word	0x200010e4

08005188 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static uint32_t tickStart, tickEnd = 0; // Interval Tracking
	static uint8_t btn1flag, btn2flag, btn3flag = 0;

	// Check Pin States
	if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_SET) {
 800518c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005190:	4872      	ldr	r0, [pc, #456]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 8005192:	f000 fcbb 	bl	8005b0c <HAL_GPIO_ReadPin>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10b      	bne.n	80051b4 <EXTI15_10_IRQHandler+0x2c>
		// Button 1 Initial Press
		btn1flag = 1;
 800519c:	4b70      	ldr	r3, [pc, #448]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 80051a2:	f000 f9cf 	bl	8005544 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051aa:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 80051ac:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6d      	ldr	r2, [pc, #436]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 80051b2:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_SET) {
 80051b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b8:	4868      	ldr	r0, [pc, #416]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 80051ba:	f000 fca7 	bl	8005b0c <HAL_GPIO_ReadPin>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10b      	bne.n	80051dc <EXTI15_10_IRQHandler+0x54>
		// Button 2 Initial Press
		btn2flag = 1;
 80051c4:	4b69      	ldr	r3, [pc, #420]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 80051ca:	f000 f9bb 	bl	8005544 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	4b64      	ldr	r3, [pc, #400]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051d2:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 80051d4:	4b63      	ldr	r3, [pc, #396]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a63      	ldr	r2, [pc, #396]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 80051da:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_SET) {
 80051dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051e0:	485e      	ldr	r0, [pc, #376]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 80051e2:	f000 fc93 	bl	8005b0c <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10b      	bne.n	8005204 <EXTI15_10_IRQHandler+0x7c>
		// Button 3 Initial Press
		btn3flag = 1;
 80051ec:	4b60      	ldr	r3, [pc, #384]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 80051f2:	f000 f9a7 	bl	8005544 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b5a      	ldr	r3, [pc, #360]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051fa:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 80051fc:	4b59      	ldr	r3, [pc, #356]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a59      	ldr	r2, [pc, #356]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 8005202:	6013      	str	r3, [r2, #0]
	}

	if (btn1flag) {
 8005204:	4b56      	ldr	r3, [pc, #344]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <EXTI15_10_IRQHandler+0x9e>
		if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_RESET) {
 800520c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005210:	4852      	ldr	r0, [pc, #328]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 8005212:	f000 fc7b 	bl	8005b0c <HAL_GPIO_ReadPin>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <EXTI15_10_IRQHandler+0x9e>
			// Button 1 was released
			tickEnd = HAL_GetTick();
 800521c:	f000 f992 	bl	8005544 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	4b51      	ldr	r3, [pc, #324]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 8005224:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn2flag) {
 8005226:	4b51      	ldr	r3, [pc, #324]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <EXTI15_10_IRQHandler+0xc0>
		if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_RESET) {
 800522e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005232:	484a      	ldr	r0, [pc, #296]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 8005234:	f000 fc6a 	bl	8005b0c <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <EXTI15_10_IRQHandler+0xc0>
			// Button 2 was released
			tickEnd = HAL_GetTick();
 800523e:	f000 f981 	bl	8005544 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	4b48      	ldr	r3, [pc, #288]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 8005246:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn3flag) {
 8005248:	4b49      	ldr	r3, [pc, #292]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <EXTI15_10_IRQHandler+0xe2>
		if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_RESET) {
 8005250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005254:	4841      	ldr	r0, [pc, #260]	; (800535c <EXTI15_10_IRQHandler+0x1d4>)
 8005256:	f000 fc59 	bl	8005b0c <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <EXTI15_10_IRQHandler+0xe2>
			// Button 3 was released
			tickEnd = HAL_GetTick();
 8005260:	f000 f970 	bl	8005544 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	4b40      	ldr	r3, [pc, #256]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 8005268:	601a      	str	r2, [r3, #0]
		}
	}

	// Evaluate Results
	if (tickEnd - tickStart > 0) {
 800526a:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d064      	beq.n	8005340 <EXTI15_10_IRQHandler+0x1b8>
		// Avoid 1st event
		if (tickEnd - tickStart <= 1000) {
 8005276:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <EXTI15_10_IRQHandler+0x1e0>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005284:	d829      	bhi.n	80052da <EXTI15_10_IRQHandler+0x152>
			// Short press
			if (btn1flag) {
 8005286:	4b36      	ldr	r3, [pc, #216]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <EXTI15_10_IRQHandler+0x11a>
				isr_flags |= (isr_flags_t) BTN_1_SH_PRESS;
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f043 0304 	orr.w	r3, r3, #4
 8005296:	b2da      	uxtb	r2, r3
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 800529a:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 80052a2:	4b32      	ldr	r3, [pc, #200]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <EXTI15_10_IRQHandler+0x136>
				isr_flags |= (isr_flags_t) BTN_2_SH_PRESS;
 80052aa:	4b32      	ldr	r3, [pc, #200]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f043 0310 	orr.w	r3, r3, #16
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 80052b6:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 80052be:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <EXTI15_10_IRQHandler+0x152>
				isr_flags |= (isr_flags_t) BTN_3_SH_PRESS;
 80052c6:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 80052d2:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (HAL_GetTick() - tickStart > 1000) {
 80052da:	f000 f933 	bl	8005544 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <EXTI15_10_IRQHandler+0x1dc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ea:	d929      	bls.n	8005340 <EXTI15_10_IRQHandler+0x1b8>
			// Long press
			if (btn1flag) {
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <EXTI15_10_IRQHandler+0x180>
				isr_flags |= (isr_flags_t) BTN_1_LG_PRESS;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 8005300:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <EXTI15_10_IRQHandler+0x1d8>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <EXTI15_10_IRQHandler+0x19c>
				isr_flags |= (isr_flags_t) BTN_2_LG_PRESS;
 8005310:	4b18      	ldr	r3, [pc, #96]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f043 0320 	orr.w	r3, r3, #32
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b16      	ldr	r3, [pc, #88]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 800531c:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <EXTI15_10_IRQHandler+0x1e4>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <EXTI15_10_IRQHandler+0x1b8>
				isr_flags |= (isr_flags_t) BTN_3_LG_PRESS;
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <EXTI15_10_IRQHandler+0x1ec>)
 8005338:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <EXTI15_10_IRQHandler+0x1e8>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005340:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005344:	f000 fc14 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800534c:	f000 fc10 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005350:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005354:	f000 fc0c 	bl	8005b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40020400 	.word	0x40020400
 8005360:	2000072c 	.word	0x2000072c
 8005364:	20000730 	.word	0x20000730
 8005368:	20000734 	.word	0x20000734
 800536c:	20000738 	.word	0x20000738
 8005370:	20000739 	.word	0x20000739
 8005374:	20000eb0 	.word	0x20000eb0

08005378 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <SDIO_IRQHandler+0x10>)
 800537e:	f004 f821 	bl	80093c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20001060 	.word	0x20001060

0800538c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <OTG_FS_IRQHandler+0x10>)
 8005392:	f001 fb41 	bl	8006a18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	2000244c 	.word	0x2000244c

080053a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <_sbrk+0x50>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <_sbrk+0x16>
		heap_end = &end;
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <_sbrk+0x50>)
 80053b2:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <_sbrk+0x54>)
 80053b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053b6:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <_sbrk+0x50>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <_sbrk+0x50>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	466a      	mov	r2, sp
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d907      	bls.n	80053da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80053ca:	f011 ff1f 	bl	801720c <__errno>
 80053ce:	4602      	mov	r2, r0
 80053d0:	230c      	movs	r3, #12
 80053d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	e006      	b.n	80053e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <_sbrk+0x50>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	4a03      	ldr	r2, [pc, #12]	; (80053f0 <_sbrk+0x50>)
 80053e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000073c 	.word	0x2000073c
 80053f4:	20002858 	.word	0x20002858

080053f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <SystemInit+0x28>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <SystemInit+0x28>)
 8005404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <SystemInit+0x28>)
 800540e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005412:	609a      	str	r2, [r3, #8]
#endif
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <Reset_Handler>:
 8005424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800545c <LoopFillZerobss+0x14>
 8005428:	2100      	movs	r1, #0
 800542a:	e003      	b.n	8005434 <LoopCopyDataInit>

0800542c <CopyDataInit>:
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <LoopFillZerobss+0x18>)
 800542e:	585b      	ldr	r3, [r3, r1]
 8005430:	5043      	str	r3, [r0, r1]
 8005432:	3104      	adds	r1, #4

08005434 <LoopCopyDataInit>:
 8005434:	480b      	ldr	r0, [pc, #44]	; (8005464 <LoopFillZerobss+0x1c>)
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <LoopFillZerobss+0x20>)
 8005438:	1842      	adds	r2, r0, r1
 800543a:	429a      	cmp	r2, r3
 800543c:	d3f6      	bcc.n	800542c <CopyDataInit>
 800543e:	4a0b      	ldr	r2, [pc, #44]	; (800546c <LoopFillZerobss+0x24>)
 8005440:	e002      	b.n	8005448 <LoopFillZerobss>

08005442 <FillZerobss>:
 8005442:	2300      	movs	r3, #0
 8005444:	f842 3b04 	str.w	r3, [r2], #4

08005448 <LoopFillZerobss>:
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <LoopFillZerobss+0x28>)
 800544a:	429a      	cmp	r2, r3
 800544c:	d3f9      	bcc.n	8005442 <FillZerobss>
 800544e:	f7ff ffd3 	bl	80053f8 <SystemInit>
 8005452:	f011 fee1 	bl	8017218 <__libc_init_array>
 8005456:	f7ff f9b5 	bl	80047c4 <main>
 800545a:	4770      	bx	lr
 800545c:	20020000 	.word	0x20020000
 8005460:	0801bde4 	.word	0x0801bde4
 8005464:	20000000 	.word	0x20000000
 8005468:	20000238 	.word	0x20000238
 800546c:	20000238 	.word	0x20000238
 8005470:	20002858 	.word	0x20002858

08005474 <ADC_IRQHandler>:
 8005474:	e7fe      	b.n	8005474 <ADC_IRQHandler>
	...

08005478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <HAL_Init+0x40>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_Init+0x40>)
 8005482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_Init+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_Init+0x40>)
 800548e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_Init+0x40>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <HAL_Init+0x40>)
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f000 f94d 	bl	8005740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f000 f808 	bl	80054bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054ac:	f7ff fc32 	bl	8004d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00

080054bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_InitTick+0x54>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_InitTick+0x58>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f965 	bl	80057aa <HAL_SYSTICK_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00e      	b.n	8005508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d80a      	bhi.n	8005506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f0:	2200      	movs	r2, #0
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	f000 f92d 	bl	8005756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054fc:	4a06      	ldr	r2, [pc, #24]	; (8005518 <HAL_InitTick+0x5c>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	2000004c 	.word	0x2000004c
 8005514:	20000054 	.word	0x20000054
 8005518:	20000050 	.word	0x20000050

0800551c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_IncTick+0x20>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_IncTick+0x24>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4413      	add	r3, r2
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <HAL_IncTick+0x24>)
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000054 	.word	0x20000054
 8005540:	2000113c 	.word	0x2000113c

08005544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return uwTick;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_GetTick+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	2000113c 	.word	0x2000113c

0800555c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7ff ffee 	bl	8005544 <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d005      	beq.n	8005582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_Delay+0x40>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005582:	bf00      	nop
 8005584:	f7ff ffde 	bl	8005544 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d8f7      	bhi.n	8005584 <HAL_Delay+0x28>
  {
  }
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000054 	.word	0x20000054

080055a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__NVIC_GetPriorityGrouping+0x18>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 0307 	and.w	r3, r3, #7
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db0b      	blt.n	800562e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <__NVIC_EnableIRQ+0x38>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2001      	movs	r0, #1
 8005626:	fa00 f202 	lsl.w	r2, r0, r2
 800562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100

08005640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db0a      	blt.n	800566a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	490c      	ldr	r1, [pc, #48]	; (800568c <__NVIC_SetPriority+0x4c>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	440b      	add	r3, r1
 8005664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005668:	e00a      	b.n	8005680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4908      	ldr	r1, [pc, #32]	; (8005690 <__NVIC_SetPriority+0x50>)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	3b04      	subs	r3, #4
 8005678:	0112      	lsls	r2, r2, #4
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	440b      	add	r3, r1
 800567e:	761a      	strb	r2, [r3, #24]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000e100 	.word	0xe000e100
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf28      	it	cs
 80056b2:	2304      	movcs	r3, #4
 80056b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d902      	bls.n	80056c4 <NVIC_EncodePriority+0x30>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3b03      	subs	r3, #3
 80056c2:	e000      	b.n	80056c6 <NVIC_EncodePriority+0x32>
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	401a      	ands	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	43d9      	mvns	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ec:	4313      	orrs	r3, r2
         );
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800570c:	d301      	bcc.n	8005712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800570e:	2301      	movs	r3, #1
 8005710:	e00f      	b.n	8005732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <SysTick_Config+0x40>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800571a:	210f      	movs	r1, #15
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	f7ff ff8e 	bl	8005640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <SysTick_Config+0x40>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <SysTick_Config+0x40>)
 800572c:	2207      	movs	r2, #7
 800572e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	e000e010 	.word	0xe000e010

08005740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff29 	bl	80055a0 <__NVIC_SetPriorityGrouping>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	4603      	mov	r3, r0
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005768:	f7ff ff3e 	bl	80055e8 <__NVIC_GetPriorityGrouping>
 800576c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff8e 	bl	8005694 <NVIC_EncodePriority>
 8005778:	4602      	mov	r2, r0
 800577a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ff5d 	bl	8005640 <__NVIC_SetPriority>
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	4603      	mov	r3, r0
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff31 	bl	8005604 <__NVIC_EnableIRQ>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ffa2 	bl	80056fc <SysTick_Config>
 80057b8:	4603      	mov	r3, r0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d004      	beq.n	80057e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e00c      	b.n	80057fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2205      	movs	r2, #5
 80057e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e159      	b.n	8005ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4013      	ands	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	429a      	cmp	r2, r3
 800583e:	f040 8148 	bne.w	8005ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00b      	beq.n	8005862 <HAL_GPIO_Init+0x5a>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d007      	beq.n	8005862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005856:	2b11      	cmp	r3, #17
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b12      	cmp	r3, #18
 8005860:	d130      	bne.n	80058c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2203      	movs	r2, #3
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005898:	2201      	movs	r2, #1
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 0201 	and.w	r2, r3, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	2203      	movs	r2, #3
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d003      	beq.n	8005904 <HAL_GPIO_Init+0xfc>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b12      	cmp	r3, #18
 8005902:	d123      	bne.n	800594c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	08da      	lsrs	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3208      	adds	r2, #8
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	220f      	movs	r2, #15
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	08da      	lsrs	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3208      	adds	r2, #8
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2203      	movs	r2, #3
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0203 	and.w	r2, r3, #3
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a2 	beq.w	8005ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4b56      	ldr	r3, [pc, #344]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	4a55      	ldr	r2, [pc, #340]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 8005998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800599c:	6453      	str	r3, [r2, #68]	; 0x44
 800599e:	4b53      	ldr	r3, [pc, #332]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059aa:	4a51      	ldr	r2, [pc, #324]	; (8005af0 <HAL_GPIO_Init+0x2e8>)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	3302      	adds	r3, #2
 80059b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	220f      	movs	r2, #15
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a48      	ldr	r2, [pc, #288]	; (8005af4 <HAL_GPIO_Init+0x2ec>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d019      	beq.n	8005a0a <HAL_GPIO_Init+0x202>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a47      	ldr	r2, [pc, #284]	; (8005af8 <HAL_GPIO_Init+0x2f0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_GPIO_Init+0x1fe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a46      	ldr	r2, [pc, #280]	; (8005afc <HAL_GPIO_Init+0x2f4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00d      	beq.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a45      	ldr	r2, [pc, #276]	; (8005b00 <HAL_GPIO_Init+0x2f8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <HAL_GPIO_Init+0x1f6>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a44      	ldr	r2, [pc, #272]	; (8005b04 <HAL_GPIO_Init+0x2fc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d101      	bne.n	80059fa <HAL_GPIO_Init+0x1f2>
 80059f6:	2304      	movs	r3, #4
 80059f8:	e008      	b.n	8005a0c <HAL_GPIO_Init+0x204>
 80059fa:	2307      	movs	r3, #7
 80059fc:	e006      	b.n	8005a0c <HAL_GPIO_Init+0x204>
 80059fe:	2303      	movs	r3, #3
 8005a00:	e004      	b.n	8005a0c <HAL_GPIO_Init+0x204>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e002      	b.n	8005a0c <HAL_GPIO_Init+0x204>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_GPIO_Init+0x204>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	f002 0203 	and.w	r2, r2, #3
 8005a12:	0092      	lsls	r2, r2, #2
 8005a14:	4093      	lsls	r3, r2
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a1c:	4934      	ldr	r1, [pc, #208]	; (8005af0 <HAL_GPIO_Init+0x2e8>)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	3302      	adds	r3, #2
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a2a:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a54:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a78:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a7e:	4b22      	ldr	r3, [pc, #136]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aa2:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005acc:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	f67f aea2 	bls.w	8005824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3724      	adds	r7, #36	; 0x24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40020000 	.word	0x40020000
 8005af8:	40020400 	.word	0x40020400
 8005afc:	40020800 	.word	0x40020800
 8005b00:	40020c00 	.word	0x40020c00
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40013c00 	.word	0x40013c00

08005b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	887b      	ldrh	r3, [r7, #2]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
 8005b28:	e001      	b.n	8005b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b58:	e003      	b.n	8005b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b5a:	887b      	ldrh	r3, [r7, #2]
 8005b5c:	041a      	lsls	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	619a      	str	r2, [r3, #24]
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b86:	4a05      	ldr	r2, [pc, #20]	; (8005b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f806 	bl	8005ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40013c00 	.word	0x40013c00

08005ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e11f      	b.n	8005e0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff f8c0 	bl	8004d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	; 0x24
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f002 fb70 	bl	8008300 <HAL_RCC_GetPCLK1Freq>
 8005c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a7b      	ldr	r2, [pc, #492]	; (8005e14 <HAL_I2C_Init+0x25c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d807      	bhi.n	8005c3c <HAL_I2C_Init+0x84>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a7a      	ldr	r2, [pc, #488]	; (8005e18 <HAL_I2C_Init+0x260>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bf94      	ite	ls
 8005c34:	2301      	movls	r3, #1
 8005c36:	2300      	movhi	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e006      	b.n	8005c4a <HAL_I2C_Init+0x92>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a77      	ldr	r2, [pc, #476]	; (8005e1c <HAL_I2C_Init+0x264>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	bf94      	ite	ls
 8005c44:	2301      	movls	r3, #1
 8005c46:	2300      	movhi	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0db      	b.n	8005e0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a72      	ldr	r2, [pc, #456]	; (8005e20 <HAL_I2C_Init+0x268>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	0c9b      	lsrs	r3, r3, #18
 8005c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a64      	ldr	r2, [pc, #400]	; (8005e14 <HAL_I2C_Init+0x25c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d802      	bhi.n	8005c8c <HAL_I2C_Init+0xd4>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	e009      	b.n	8005ca0 <HAL_I2C_Init+0xe8>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	4a63      	ldr	r2, [pc, #396]	; (8005e24 <HAL_I2C_Init+0x26c>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4956      	ldr	r1, [pc, #344]	; (8005e14 <HAL_I2C_Init+0x25c>)
 8005cbc:	428b      	cmp	r3, r1
 8005cbe:	d80d      	bhi.n	8005cdc <HAL_I2C_Init+0x124>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e59      	subs	r1, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	bf38      	it	cc
 8005cd8:	2304      	movcc	r3, #4
 8005cda:	e04f      	b.n	8005d7c <HAL_I2C_Init+0x1c4>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d111      	bne.n	8005d08 <HAL_I2C_Init+0x150>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1e58      	subs	r0, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	440b      	add	r3, r1
 8005cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e012      	b.n	8005d2e <HAL_I2C_Init+0x176>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1e58      	subs	r0, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	0099      	lsls	r1, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Init+0x17e>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e022      	b.n	8005d7c <HAL_I2C_Init+0x1c4>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10e      	bne.n	8005d5c <HAL_I2C_Init+0x1a4>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1e58      	subs	r0, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	440b      	add	r3, r1
 8005d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d50:	3301      	adds	r3, #1
 8005d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	e00f      	b.n	8005d7c <HAL_I2C_Init+0x1c4>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1e58      	subs	r0, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	0099      	lsls	r1, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d72:	3301      	adds	r3, #1
 8005d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	6809      	ldr	r1, [r1, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6911      	ldr	r1, [r2, #16]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68d2      	ldr	r2, [r2, #12]
 8005db6:	4311      	orrs	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	000186a0 	.word	0x000186a0
 8005e18:	001e847f 	.word	0x001e847f
 8005e1c:	003d08ff 	.word	0x003d08ff
 8005e20:	431bde83 	.word	0x431bde83
 8005e24:	10624dd3 	.word	0x10624dd3

08005e28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08c      	sub	sp, #48	; 0x30
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	817b      	strh	r3, [r7, #10]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	813b      	strh	r3, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e42:	f7ff fb7f 	bl	8005544 <HAL_GetTick>
 8005e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 8208 	bne.w	8006266 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2319      	movs	r3, #25
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	497b      	ldr	r1, [pc, #492]	; (800604c <HAL_I2C_Mem_Read+0x224>)
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 faed 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e1fb      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2C_Mem_Read+0x56>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e1f4      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d007      	beq.n	8005ea4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2222      	movs	r2, #34	; 0x22
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2240      	movs	r2, #64	; 0x40
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a5b      	ldr	r2, [pc, #364]	; (8006050 <HAL_I2C_Mem_Read+0x228>)
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee6:	88f8      	ldrh	r0, [r7, #6]
 8005ee8:	893a      	ldrh	r2, [r7, #8]
 8005eea:	8979      	ldrh	r1, [r7, #10]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f9bc 	bl	8006274 <I2C_RequestMemoryRead>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1b0      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e184      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d11b      	bne.n	8005f76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e164      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d11b      	bne.n	8005fb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	e144      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fcc:	e138      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	f200 80f1 	bhi.w	80061ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d123      	bne.n	8006028 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fb42 	bl	800666e <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e139      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006026:	e10b      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	2b02      	cmp	r3, #2
 800602e:	d14e      	bne.n	80060ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	2200      	movs	r2, #0
 8006038:	4906      	ldr	r1, [pc, #24]	; (8006054 <HAL_I2C_Mem_Read+0x22c>)
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fa00 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e10e      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
 800604a:	bf00      	nop
 800604c:	00100002 	.word	0x00100002
 8006050:	ffff0000 	.word	0xffff0000
 8006054:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060cc:	e0b8      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2200      	movs	r2, #0
 80060d6:	4966      	ldr	r1, [pc, #408]	; (8006270 <HAL_I2C_Mem_Read+0x448>)
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f9b1 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0bf      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2200      	movs	r2, #0
 8006132:	494f      	ldr	r1, [pc, #316]	; (8006270 <HAL_I2C_Mem_Read+0x448>)
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f983 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e091      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b8:	e042      	b.n	8006240 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa55 	bl	800666e <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e04c      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b04      	cmp	r3, #4
 800620c:	d118      	bne.n	8006240 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f aec2 	bne.w	8005fce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006266:	2302      	movs	r3, #2
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	00010004 	.word	0x00010004

08006274 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800629c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f8c0 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e0a9      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062e0:	897b      	ldrh	r3, [r7, #10]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	6a3a      	ldr	r2, [r7, #32]
 80062f4:	4951      	ldr	r1, [pc, #324]	; (800643c <I2C_RequestMemoryRead+0x1c8>)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f8f9 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e096      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631e:	6a39      	ldr	r1, [r7, #32]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f963 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b04      	cmp	r3, #4
 8006332:	d107      	bne.n	8006344 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006342:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e075      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800634e:	893b      	ldrh	r3, [r7, #8]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	611a      	str	r2, [r3, #16]
 8006358:	e021      	b.n	800639e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800635a:	893b      	ldrh	r3, [r7, #8]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	b29b      	uxth	r3, r3
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	6a39      	ldr	r1, [r7, #32]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f93d 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00d      	beq.n	8006394 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2b04      	cmp	r3, #4
 800637e:	d107      	bne.n	8006390 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e04f      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006394:	893b      	ldrh	r3, [r7, #8]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a0:	6a39      	ldr	r1, [r7, #32]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f922 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d107      	bne.n	80063c6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e034      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f82a 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e013      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <I2C_RequestMemoryRead+0x1c8>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f863 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010002 	.word	0x00010002

08006440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006450:	e025      	b.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d021      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7ff f873 	bl	8005544 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d116      	bne.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e023      	b.n	80064e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10d      	bne.n	80064c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	43da      	mvns	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	e00c      	b.n	80064de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d0b6      	beq.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064fc:	e051      	b.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650c:	d123      	bne.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0204 	orr.w	r2, r3, #4
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e046      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d021      	beq.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fe fff1 	bl	8005544 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e020      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10c      	bne.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e00b      	b.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d18d      	bne.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f8:	e02d      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f88d 	bl	800671a <I2C_IsAcknowledgeFailed>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e02d      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d021      	beq.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fe ff97 	bl	8005544 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d116      	bne.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e007      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d1ca      	bne.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800667a:	e042      	b.n	8006702 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b10      	cmp	r3, #16
 8006688:	d119      	bne.n	80066be <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0210 	mvn.w	r2, #16
 8006692:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e029      	b.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fe ff41 	bl	8005544 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d116      	bne.n	8006702 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0220 	orr.w	r2, r3, #32
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e007      	b.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d1b5      	bne.n	800667c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d11b      	bne.n	800676a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800673a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0204 	orr.w	r2, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677a:	b08f      	sub	sp, #60	; 0x3c
 800677c:	af0a      	add	r7, sp, #40	; 0x28
 800677e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e10f      	b.n	80069aa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f010 fa23 	bl	8016bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 ff4e 	bl	800b66a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	687e      	ldr	r6, [r7, #4]
 80067d6:	466d      	mov	r5, sp
 80067d8:	f106 0410 	add.w	r4, r6, #16
 80067dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80067ec:	1d33      	adds	r3, r6, #4
 80067ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067f0:	6838      	ldr	r0, [r7, #0]
 80067f2:	f004 fe25 	bl	800b440 <USB_CoreInit>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0d0      	b.n	80069aa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f004 ff3c 	bl	800b68c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
 8006818:	e04a      	b.n	80068b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800681a:	7bfa      	ldrb	r2, [r7, #15]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	333d      	adds	r3, #61	; 0x3d
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800682e:	7bfa      	ldrb	r2, [r7, #15]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006842:	7bfa      	ldrb	r2, [r7, #15]
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	b298      	uxth	r0, r3
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3342      	adds	r3, #66	; 0x42
 8006856:	4602      	mov	r2, r0
 8006858:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800685a:	7bfa      	ldrb	r2, [r7, #15]
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	333f      	adds	r3, #63	; 0x3f
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3344      	adds	r3, #68	; 0x44
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3348      	adds	r3, #72	; 0x48
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3350      	adds	r3, #80	; 0x50
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	3301      	adds	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3af      	bcc.n	800681a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	e044      	b.n	800694a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068ec:	7bfa      	ldrb	r2, [r7, #15]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006902:	7bfa      	ldrb	r2, [r7, #15]
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006918:	7bfa      	ldrb	r2, [r7, #15]
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	3301      	adds	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	7bfa      	ldrb	r2, [r7, #15]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d3b5      	bcc.n	80068c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	687e      	ldr	r6, [r7, #4]
 800695c:	466d      	mov	r5, sp
 800695e:	f106 0410 	add.w	r4, r6, #16
 8006962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800696a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800696e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006972:	1d33      	adds	r3, r6, #4
 8006974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f004 feb2 	bl	800b6e0 <USB_DevInit>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e00d      	b.n	80069aa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f005 fea7 	bl	800c6f6 <USB_DevDisconnect>

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_PCD_Start+0x1c>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e020      	b.n	8006a10 <HAL_PCD_Start+0x5e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d109      	bne.n	80069f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d005      	beq.n	80069f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f005 fe65 	bl	800c6c6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f004 fe21 	bl	800b648 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b08d      	sub	sp, #52	; 0x34
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f005 ff0c 	bl	800c84c <USB_GetMode>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 838e 	bne.w	8007158 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f005 fe70 	bl	800c726 <USB_ReadInterrupts>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8384 	beq.w	8007156 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f005 fe67 	bl	800c726 <USB_ReadInterrupts>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d107      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f002 0202 	and.w	r2, r2, #2
 8006a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f005 fe55 	bl	800c726 <USB_ReadInterrupts>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a86:	d17b      	bne.n	8006b80 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f005 fe5b 	bl	800c74c <USB_ReadDevAllOutEpInterrupt>
 8006a96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006a98:	e06f      	b.n	8006b7a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d064      	beq.n	8006b6e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f005 fe80 	bl	800c7b4 <USB_ReadDevOutEPInterrupt>
 8006ab4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	461a      	mov	r2, r3
 8006ace:	2301      	movs	r3, #1
 8006ad0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fe0d 	bl	80076f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 ff0c 	bl	8007904 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	461a      	mov	r2, r3
 8006afa:	2308      	movs	r3, #8
 8006afc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	461a      	mov	r2, r3
 8006b16:	2310      	movs	r3, #16
 8006b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d108      	bne.n	8006b3e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b36:	461a      	mov	r2, r3
 8006b38:	2101      	movs	r1, #1
 8006b3a:	f005 fecb 	bl	800c8d4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b66:	461a      	mov	r2, r3
 8006b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	3301      	adds	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d18c      	bne.n	8006a9a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f005 fdce 	bl	800c726 <USB_ReadInterrupts>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b94:	f040 80c4 	bne.w	8006d20 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f005 fdef 	bl	800c780 <USB_ReadDevAllInEpInterrupt>
 8006ba2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ba8:	e0b6      	b.n	8006d18 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80ab 	beq.w	8006d0c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f005 fe15 	bl	800c7f0 <USB_ReadDevInEPInterrupt>
 8006bc6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d05b      	beq.n	8006c8a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2201      	movs	r2, #1
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69f9      	ldr	r1, [r7, #28]
 8006bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	461a      	mov	r2, r3
 8006c04:	2301      	movs	r3, #1
 8006c06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d11b      	bne.n	8006c48 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	4613      	mov	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3348      	adds	r3, #72	; 0x48
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4403      	add	r3, r0
 8006c30:	3344      	adds	r3, #68	; 0x44
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4419      	add	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4403      	add	r3, r0
 8006c44:	3348      	adds	r3, #72	; 0x48
 8006c46:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f010 f867 	bl	8016d22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d116      	bne.n	8006c8a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d113      	bne.n	8006c8a <HAL_PCD_IRQHandler+0x272>
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c66:	4613      	mov	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3350      	adds	r3, #80	; 0x50
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c82:	461a      	mov	r2, r3
 8006c84:	2101      	movs	r1, #1
 8006c86:	f005 fe25 	bl	800c8d4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fc67 	bl	80075da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	3301      	adds	r3, #1
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f47f af45 	bne.w	8006baa <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f005 fcfe 	bl	800c726 <USB_ReadInterrupts>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d34:	d122      	bne.n	8006d7c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d108      	bne.n	8006d66 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fe88 	bl	8007a74 <HAL_PCDEx_LPM_Callback>
 8006d64:	e002      	b.n	8006d6c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f010 f848 	bl	8016dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f005 fcd0 	bl	800c726 <USB_ReadInterrupts>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d90:	d112      	bne.n	8006db8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f010 f804 	bl	8016db0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006db6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f005 fcb2 	bl	800c726 <USB_ReadInterrupts>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dcc:	f040 80a7 	bne.w	8006f1e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2110      	movs	r1, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f004 fdea 	bl	800b9c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df4:	e036      	b.n	8006e64 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	461a      	mov	r2, r3
 8006e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	461a      	mov	r2, r3
 8006e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	3301      	adds	r3, #1
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d3c3      	bcc.n	8006df6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006e80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e9a:	f043 030b 	orr.w	r3, r3, #11
 8006e9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb0:	f043 030b 	orr.w	r3, r3, #11
 8006eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006eb6:	e015      	b.n	8006ee4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006eca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006ece:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ede:	f043 030b 	orr.w	r3, r3, #11
 8006ee2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ef6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f005 fce3 	bl	800c8d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f005 fbff 	bl	800c726 <USB_ReadInterrupts>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	d124      	bne.n	8006f7e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f005 fc95 	bl	800c868 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f004 fd9f 	bl	800ba86 <USB_GetDevSpeed>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681c      	ldr	r4, [r3, #0]
 8006f54:	f001 f9c8 	bl	80082e8 <HAL_RCC_GetHCLKFreq>
 8006f58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	4620      	mov	r0, r4
 8006f64:	f004 face 	bl	800b504 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f00f ff02 	bl	8016d72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f005 fbcf 	bl	800c726 <USB_ReadInterrupts>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d161      	bne.n	8007056 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0210 	bic.w	r2, r2, #16
 8006fa0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	0c5b      	lsrs	r3, r3, #17
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d124      	bne.n	8007018 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d035      	beq.n	8007046 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	091b      	lsrs	r3, r3, #4
 8006fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	6a38      	ldr	r0, [r7, #32]
 8006fee:	f005 fa47 	bl	800c480 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffe:	441a      	add	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	619a      	str	r2, [r3, #24]
 8007016:	e016      	b.n	8007046 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	0c5b      	lsrs	r3, r3, #17
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	2b06      	cmp	r3, #6
 8007022:	d110      	bne.n	8007046 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800702a:	2208      	movs	r2, #8
 800702c:	4619      	mov	r1, r3
 800702e:	6a38      	ldr	r0, [r7, #32]
 8007030:	f005 fa26 	bl	800c480 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0210 	orr.w	r2, r2, #16
 8007054:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f005 fb63 	bl	800c726 <USB_ReadInterrupts>
 8007060:	4603      	mov	r3, r0
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b08      	cmp	r3, #8
 8007068:	d10a      	bne.n	8007080 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f00f fe73 	bl	8016d56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f002 0208 	and.w	r2, r2, #8
 800707e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f005 fb4e 	bl	800c726 <USB_ReadInterrupts>
 800708a:	4603      	mov	r3, r0
 800708c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007094:	d10f      	bne.n	80070b6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	b2db      	uxtb	r3, r3
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f00f fecb 	bl	8016e3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80070b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f005 fb33 	bl	800c726 <USB_ReadInterrupts>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ca:	d10f      	bne.n	80070ec <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f00f fe9e 	bl	8016e18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f005 fb18 	bl	800c726 <USB_ReadInterrupts>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d10a      	bne.n	8007118 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f00f feac 	bl	8016e60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f005 fb02 	bl	800c726 <USB_ReadInterrupts>
 8007122:	4603      	mov	r3, r0
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d115      	bne.n	8007158 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f00f fe9c 	bl	8016e7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	e000      	b.n	8007158 <HAL_PCD_IRQHandler+0x740>
      return;
 8007156:	bf00      	nop
    }
  }
}
 8007158:	3734      	adds	r7, #52	; 0x34
 800715a:	46bd      	mov	sp, r7
 800715c:	bd90      	pop	{r4, r7, pc}

0800715e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_PCD_SetAddress+0x1a>
 8007174:	2302      	movs	r3, #2
 8007176:	e013      	b.n	80071a0 <HAL_PCD_SetAddress+0x42>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f005 fa72 	bl	800c67a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	70fb      	strb	r3, [r7, #3]
 80071ba:	460b      	mov	r3, r1
 80071bc:	803b      	strh	r3, [r7, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da0f      	bge.n	80071ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	3338      	adds	r3, #56	; 0x38
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	3304      	adds	r3, #4
 80071e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	705a      	strb	r2, [r3, #1]
 80071ec:	e00f      	b.n	800720e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	4613      	mov	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	3304      	adds	r3, #4
 8007206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800721a:	883a      	ldrh	r2, [r7, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	78ba      	ldrb	r2, [r7, #2]
 8007224:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007238:	78bb      	ldrb	r3, [r7, #2]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d102      	bne.n	8007244 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_PCD_EP_Open+0xaa>
 800724e:	2302      	movs	r3, #2
 8007250:	e00e      	b.n	8007270 <HAL_PCD_EP_Open+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	4618      	mov	r0, r3
 8007262:	f004 fc35 	bl	800bad0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800726e:	7afb      	ldrb	r3, [r7, #11]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007288:	2b00      	cmp	r3, #0
 800728a:	da0f      	bge.n	80072ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	f003 020f 	and.w	r2, r3, #15
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	3338      	adds	r3, #56	; 0x38
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4413      	add	r3, r2
 80072a0:	3304      	adds	r3, #4
 80072a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	705a      	strb	r2, [r3, #1]
 80072aa:	e00f      	b.n	80072cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	f003 020f 	and.w	r2, r3, #15
 80072b2:	4613      	mov	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	3304      	adds	r3, #4
 80072c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_PCD_EP_Close+0x6e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e00e      	b.n	8007304 <HAL_PCD_EP_Close+0x8c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f004 fc73 	bl	800bbe0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	460b      	mov	r3, r1
 800731a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	3304      	adds	r3, #4
 8007334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	b2da      	uxtb	r2, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d102      	bne.n	8007368 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	f004 fef6 	bl	800c170 <USB_EP0StartXfer>
 8007384:	e008      	b.n	8007398 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	f004 fca8 	bl	800bce8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80073c4:	681b      	ldr	r3, [r3, #0]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	460b      	mov	r3, r1
 80073e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	f003 020f 	and.w	r2, r3, #15
 80073e8:	4613      	mov	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	3338      	adds	r3, #56	; 0x38
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	3304      	adds	r3, #4
 80073f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2201      	movs	r2, #1
 8007410:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	b2da      	uxtb	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d102      	bne.n	800742c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800742c:	7afb      	ldrb	r3, [r7, #11]
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	6979      	ldr	r1, [r7, #20]
 8007444:	f004 fe94 	bl	800c170 <USB_EP0StartXfer>
 8007448:	e008      	b.n	800745c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	f004 fc46 	bl	800bce8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d901      	bls.n	8007484 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e050      	b.n	8007526 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007488:	2b00      	cmp	r3, #0
 800748a:	da0f      	bge.n	80074ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	f003 020f 	and.w	r2, r3, #15
 8007492:	4613      	mov	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3338      	adds	r3, #56	; 0x38
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	3304      	adds	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	705a      	strb	r2, [r3, #1]
 80074aa:	e00d      	b.n	80074c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	4613      	mov	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_PCD_EP_SetStall+0x82>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e01e      	b.n	8007526 <HAL_PCD_EP_SetStall+0xc0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f004 ffeb 	bl	800c4d2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007516:	461a      	mov	r2, r3
 8007518:	f005 f9dc 	bl	800c8d4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	d901      	bls.n	800754c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e042      	b.n	80075d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800754c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007550:	2b00      	cmp	r3, #0
 8007552:	da0f      	bge.n	8007574 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 020f 	and.w	r2, r3, #15
 800755a:	4613      	mov	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	3338      	adds	r3, #56	; 0x38
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	3304      	adds	r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	705a      	strb	r2, [r3, #1]
 8007572:	e00f      	b.n	8007594 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	f003 020f 	and.w	r2, r3, #15
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_PCD_EP_ClrStall+0x86>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e00e      	b.n	80075d2 <HAL_PCD_EP_ClrStall+0xa4>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f004 fff3 	bl	800c5ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b08a      	sub	sp, #40	; 0x28
 80075de:	af02      	add	r7, sp, #8
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	3338      	adds	r3, #56	; 0x38
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	429a      	cmp	r2, r3
 800760c:	d901      	bls.n	8007612 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e06c      	b.n	80076ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	429a      	cmp	r2, r3
 8007626:	d902      	bls.n	800762e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3303      	adds	r3, #3
 8007632:	089b      	lsrs	r3, r3, #2
 8007634:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007636:	e02b      	b.n	8007690 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	429a      	cmp	r2, r3
 800764c:	d902      	bls.n	8007654 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	3303      	adds	r3, #3
 8007658:	089b      	lsrs	r3, r3, #2
 800765a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68d9      	ldr	r1, [r3, #12]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800766c:	b2db      	uxtb	r3, r3
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	6978      	ldr	r0, [r7, #20]
 8007674:	f004 fecf 	bl	800c416 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	441a      	add	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	441a      	add	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d809      	bhi.n	80076ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1be      	bne.n	8007638 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d811      	bhi.n	80076ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	2201      	movs	r2, #1
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	43db      	mvns	r3, r3
 80076e0:	6939      	ldr	r1, [r7, #16]
 80076e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e6:	4013      	ands	r3, r2
 80076e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	333c      	adds	r3, #60	; 0x3c
 800770c:	3304      	adds	r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b01      	cmp	r3, #1
 8007728:	f040 80b3 	bne.w	8007892 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d028      	beq.n	8007788 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a70      	ldr	r2, [pc, #448]	; (80078fc <PCD_EP_OutXfrComplete_int+0x208>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d90e      	bls.n	800775c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	461a      	mov	r2, r3
 8007756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f00f fab3 	bl	8016cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800776c:	461a      	mov	r2, r3
 800776e:	2101      	movs	r1, #1
 8007770:	f005 f8b0 	bl	800c8d4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	461a      	mov	r2, r3
 8007782:	2308      	movs	r3, #8
 8007784:	6093      	str	r3, [r2, #8]
 8007786:	e0b3      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779e:	461a      	mov	r2, r3
 80077a0:	2320      	movs	r3, #32
 80077a2:	6093      	str	r3, [r2, #8]
 80077a4:	e0a4      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 809f 	bne.w	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a51      	ldr	r2, [pc, #324]	; (80078fc <PCD_EP_OutXfrComplete_int+0x208>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d90f      	bls.n	80077da <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d0:	461a      	mov	r2, r3
 80077d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d6:	6093      	str	r3, [r2, #8]
 80077d8:	e08a      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80077ec:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	0159      	lsls	r1, r3, #5
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	440b      	add	r3, r1
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007800:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4403      	add	r3, r0
 8007810:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007814:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007828:	6819      	ldr	r1, [r3, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4403      	add	r3, r0
 8007838:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4419      	add	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4403      	add	r3, r0
 800784e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007852:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f00f fa46 	bl	8016cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d144      	bne.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d138      	bne.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007888:	461a      	mov	r2, r3
 800788a:	2101      	movs	r1, #1
 800788c:	f005 f822 	bl	800c8d4 <USB_EP0_OutStart>
 8007890:	e02e      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4a1a      	ldr	r2, [pc, #104]	; (8007900 <PCD_EP_OutXfrComplete_int+0x20c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d124      	bne.n	80078e4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b6:	6093      	str	r3, [r2, #8]
 80078b8:	e01a      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	461a      	mov	r2, r3
 80078d2:	2320      	movs	r3, #32
 80078d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f00f fa05 	bl	8016cec <HAL_PCD_DataOutStageCallback>
 80078e2:	e005      	b.n	80078f0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f00f f9fe 	bl	8016cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	4f54300a 	.word	0x4f54300a
 8007900:	4f54310a 	.word	0x4f54310a

08007904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	333c      	adds	r3, #60	; 0x3c
 800791c:	3304      	adds	r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d113      	bne.n	8007962 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <PCD_EP_OutSetupPacket_int+0xb8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d922      	bls.n	8007988 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01d      	beq.n	8007988 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	461a      	mov	r2, r3
 800795a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795e:	6093      	str	r3, [r2, #8]
 8007960:	e012      	b.n	8007988 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10e      	bne.n	8007988 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	461a      	mov	r2, r3
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f00f f99d 	bl	8016cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <PCD_EP_OutSetupPacket_int+0xb8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d90c      	bls.n	80079b0 <PCD_EP_OutSetupPacket_int+0xac>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d108      	bne.n	80079b0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079a8:	461a      	mov	r2, r3
 80079aa:	2101      	movs	r1, #1
 80079ac:	f004 ff92 	bl	800c8d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	4f54300a 	.word	0x4f54300a
 80079c0:	4f54310a 	.word	0x4f54310a

080079c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
 80079d0:	4613      	mov	r3, r2
 80079d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80079e2:	883b      	ldrh	r3, [r7, #0]
 80079e4:	0419      	lsls	r1, r3, #16
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28
 80079f0:	e028      	b.n	8007a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
 8007a04:	e00d      	b.n	8007a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	3340      	adds	r3, #64	; 0x40
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	0c1b      	lsrs	r3, r3, #16
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	7bfa      	ldrb	r2, [r7, #15]
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3ec      	bcc.n	8007a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a2c:	883b      	ldrh	r3, [r7, #0]
 8007a2e:	0418      	lsls	r0, r3, #16
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4302      	orrs	r2, r0
 8007a3c:	3340      	adds	r3, #64	; 0x40
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	887a      	ldrh	r2, [r7, #2]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e25b      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d075      	beq.n	8007b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007aaa:	4ba3      	ldr	r3, [pc, #652]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 030c 	and.w	r3, r3, #12
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d00c      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ab6:	4ba0      	ldr	r3, [pc, #640]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d112      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ac2:	4b9d      	ldr	r3, [pc, #628]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ace:	d10b      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad0:	4b99      	ldr	r3, [pc, #612]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d05b      	beq.n	8007b94 <HAL_RCC_OscConfig+0x108>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d157      	bne.n	8007b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e236      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af0:	d106      	bne.n	8007b00 <HAL_RCC_OscConfig+0x74>
 8007af2:	4b91      	ldr	r3, [pc, #580]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a90      	ldr	r2, [pc, #576]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	e01d      	b.n	8007b3c <HAL_RCC_OscConfig+0xb0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCC_OscConfig+0x98>
 8007b0a:	4b8b      	ldr	r3, [pc, #556]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a8a      	ldr	r2, [pc, #552]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	4b88      	ldr	r3, [pc, #544]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a87      	ldr	r2, [pc, #540]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	e00b      	b.n	8007b3c <HAL_RCC_OscConfig+0xb0>
 8007b24:	4b84      	ldr	r3, [pc, #528]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a83      	ldr	r2, [pc, #524]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4b81      	ldr	r3, [pc, #516]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a80      	ldr	r2, [pc, #512]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d013      	beq.n	8007b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b44:	f7fd fcfe 	bl	8005544 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b4c:	f7fd fcfa 	bl	8005544 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b64      	cmp	r3, #100	; 0x64
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e1fb      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5e:	4b76      	ldr	r3, [pc, #472]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCC_OscConfig+0xc0>
 8007b6a:	e014      	b.n	8007b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6c:	f7fd fcea 	bl	8005544 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b74:	f7fd fce6 	bl	8005544 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	; 0x64
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e1e7      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b86:	4b6c      	ldr	r3, [pc, #432]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0xe8>
 8007b92:	e000      	b.n	8007b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d063      	beq.n	8007c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ba2:	4b65      	ldr	r3, [pc, #404]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bae:	4b62      	ldr	r3, [pc, #392]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d11c      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bba:	4b5f      	ldr	r3, [pc, #380]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d116      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bc6:	4b5c      	ldr	r3, [pc, #368]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_RCC_OscConfig+0x152>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d001      	beq.n	8007bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e1bb      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bde:	4b56      	ldr	r3, [pc, #344]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4952      	ldr	r1, [pc, #328]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf2:	e03a      	b.n	8007c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d020      	beq.n	8007c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bfc:	4b4f      	ldr	r3, [pc, #316]	; (8007d3c <HAL_RCC_OscConfig+0x2b0>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c02:	f7fd fc9f 	bl	8005544 <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c0a:	f7fd fc9b 	bl	8005544 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e19c      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1c:	4b46      	ldr	r3, [pc, #280]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f0      	beq.n	8007c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c28:	4b43      	ldr	r3, [pc, #268]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4940      	ldr	r1, [pc, #256]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	600b      	str	r3, [r1, #0]
 8007c3c:	e015      	b.n	8007c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c3e:	4b3f      	ldr	r3, [pc, #252]	; (8007d3c <HAL_RCC_OscConfig+0x2b0>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fd fc7e 	bl	8005544 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c4c:	f7fd fc7a 	bl	8005544 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e17b      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c5e:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d030      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d016      	beq.n	8007cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c7e:	4b30      	ldr	r3, [pc, #192]	; (8007d40 <HAL_RCC_OscConfig+0x2b4>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c84:	f7fd fc5e 	bl	8005544 <HAL_GetTick>
 8007c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c8c:	f7fd fc5a 	bl	8005544 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e15b      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c9e:	4b26      	ldr	r3, [pc, #152]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f0      	beq.n	8007c8c <HAL_RCC_OscConfig+0x200>
 8007caa:	e015      	b.n	8007cd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cac:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <HAL_RCC_OscConfig+0x2b4>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cb2:	f7fd fc47 	bl	8005544 <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cba:	f7fd fc43 	bl	8005544 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e144      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ccc:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f0      	bne.n	8007cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a0 	beq.w	8007e26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10f      	bne.n	8007d16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60bb      	str	r3, [r7, #8]
 8007cfa:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	4a0e      	ldr	r2, [pc, #56]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d04:	6413      	str	r3, [r2, #64]	; 0x40
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <HAL_RCC_OscConfig+0x2ac>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d16:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <HAL_RCC_OscConfig+0x2b8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d121      	bne.n	8007d66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <HAL_RCC_OscConfig+0x2b8>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <HAL_RCC_OscConfig+0x2b8>)
 8007d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d2e:	f7fd fc09 	bl	8005544 <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d34:	e011      	b.n	8007d5a <HAL_RCC_OscConfig+0x2ce>
 8007d36:	bf00      	nop
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	42470000 	.word	0x42470000
 8007d40:	42470e80 	.word	0x42470e80
 8007d44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d48:	f7fd fbfc 	bl	8005544 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e0fd      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d5a:	4b81      	ldr	r3, [pc, #516]	; (8007f60 <HAL_RCC_OscConfig+0x4d4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d106      	bne.n	8007d7c <HAL_RCC_OscConfig+0x2f0>
 8007d6e:	4b7d      	ldr	r3, [pc, #500]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	4a7c      	ldr	r2, [pc, #496]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7a:	e01c      	b.n	8007db6 <HAL_RCC_OscConfig+0x32a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	d10c      	bne.n	8007d9e <HAL_RCC_OscConfig+0x312>
 8007d84:	4b77      	ldr	r3, [pc, #476]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d88:	4a76      	ldr	r2, [pc, #472]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d8a:	f043 0304 	orr.w	r3, r3, #4
 8007d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d90:	4b74      	ldr	r3, [pc, #464]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d94:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007d96:	f043 0301 	orr.w	r3, r3, #1
 8007d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d9c:	e00b      	b.n	8007db6 <HAL_RCC_OscConfig+0x32a>
 8007d9e:	4b71      	ldr	r3, [pc, #452]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	4a70      	ldr	r2, [pc, #448]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	6713      	str	r3, [r2, #112]	; 0x70
 8007daa:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dae:	4a6d      	ldr	r2, [pc, #436]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007db0:	f023 0304 	bic.w	r3, r3, #4
 8007db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d015      	beq.n	8007dea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbe:	f7fd fbc1 	bl	8005544 <HAL_GetTick>
 8007dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc4:	e00a      	b.n	8007ddc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc6:	f7fd fbbd 	bl	8005544 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e0bc      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ddc:	4b61      	ldr	r3, [pc, #388]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0ee      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x33a>
 8007de8:	e014      	b.n	8007e14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dea:	f7fd fbab 	bl	8005544 <HAL_GetTick>
 8007dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df0:	e00a      	b.n	8007e08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007df2:	f7fd fba7 	bl	8005544 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d901      	bls.n	8007e08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e0a6      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e08:	4b56      	ldr	r3, [pc, #344]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1ee      	bne.n	8007df2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d105      	bne.n	8007e26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e1a:	4b52      	ldr	r3, [pc, #328]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	4a51      	ldr	r2, [pc, #324]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8092 	beq.w	8007f54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 030c 	and.w	r3, r3, #12
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d05c      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d141      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e44:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <HAL_RCC_OscConfig+0x4dc>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e4a:	f7fd fb7b 	bl	8005544 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e52:	f7fd fb77 	bl	8005544 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e078      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f0      	bne.n	8007e52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	019b      	lsls	r3, r3, #6
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	041b      	lsls	r3, r3, #16
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	061b      	lsls	r3, r3, #24
 8007e94:	4933      	ldr	r1, [pc, #204]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e9a:	4b33      	ldr	r3, [pc, #204]	; (8007f68 <HAL_RCC_OscConfig+0x4dc>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea0:	f7fd fb50 	bl	8005544 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ea8:	f7fd fb4c 	bl	8005544 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e04d      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eba:	4b2a      	ldr	r3, [pc, #168]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x41c>
 8007ec6:	e045      	b.n	8007f54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec8:	4b27      	ldr	r3, [pc, #156]	; (8007f68 <HAL_RCC_OscConfig+0x4dc>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ece:	f7fd fb39 	bl	8005544 <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed6:	f7fd fb35 	bl	8005544 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e036      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f0      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x44a>
 8007ef4:	e02e      	b.n	8007f54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e029      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f02:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <HAL_RCC_OscConfig+0x4d8>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d11c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d115      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d10d      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d106      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40007000 	.word	0x40007000
 8007f64:	40023800 	.word	0x40023800
 8007f68:	42470060 	.word	0x42470060

08007f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0cc      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f80:	4b68      	ldr	r3, [pc, #416]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d90c      	bls.n	8007fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b65      	ldr	r3, [pc, #404]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f96:	4b63      	ldr	r3, [pc, #396]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d001      	beq.n	8007fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0b8      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fc0:	4b59      	ldr	r3, [pc, #356]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4a58      	ldr	r2, [pc, #352]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fd8:	4b53      	ldr	r3, [pc, #332]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4a52      	ldr	r2, [pc, #328]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe4:	4b50      	ldr	r3, [pc, #320]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	494d      	ldr	r1, [pc, #308]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d044      	beq.n	800808c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d107      	bne.n	800801a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800a:	4b47      	ldr	r3, [pc, #284]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d119      	bne.n	800804a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e07f      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d003      	beq.n	800802a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008026:	2b03      	cmp	r3, #3
 8008028:	d107      	bne.n	800803a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802a:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e06f      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803a:	4b3b      	ldr	r3, [pc, #236]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e067      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f023 0203 	bic.w	r2, r3, #3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	4934      	ldr	r1, [pc, #208]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 8008058:	4313      	orrs	r3, r2
 800805a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800805c:	f7fd fa72 	bl	8005544 <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008062:	e00a      	b.n	800807a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008064:	f7fd fa6e 	bl	8005544 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e04f      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807a:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 020c 	and.w	r2, r3, #12
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	429a      	cmp	r2, r3
 800808a:	d1eb      	bne.n	8008064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800808c:	4b25      	ldr	r3, [pc, #148]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d20c      	bcs.n	80080b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080a2:	4b20      	ldr	r3, [pc, #128]	; (8008124 <HAL_RCC_ClockConfig+0x1b8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d001      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e032      	b.n	800811a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080c0:	4b19      	ldr	r3, [pc, #100]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	4916      	ldr	r1, [pc, #88]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080de:	4b12      	ldr	r3, [pc, #72]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	490e      	ldr	r1, [pc, #56]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080f2:	f000 f821 	bl	8008138 <HAL_RCC_GetSysClockFreq>
 80080f6:	4601      	mov	r1, r0
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <HAL_RCC_ClockConfig+0x1bc>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	4a0a      	ldr	r2, [pc, #40]	; (800812c <HAL_RCC_ClockConfig+0x1c0>)
 8008104:	5cd3      	ldrb	r3, [r2, r3]
 8008106:	fa21 f303 	lsr.w	r3, r1, r3
 800810a:	4a09      	ldr	r2, [pc, #36]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 800810c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7fd f9d2 	bl	80054bc <HAL_InitTick>

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40023c00 	.word	0x40023c00
 8008128:	40023800 	.word	0x40023800
 800812c:	0801b658 	.word	0x0801b658
 8008130:	2000004c 	.word	0x2000004c
 8008134:	20000050 	.word	0x20000050

08008138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	2300      	movs	r3, #0
 8008148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800814e:	4b63      	ldr	r3, [pc, #396]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 030c 	and.w	r3, r3, #12
 8008156:	2b04      	cmp	r3, #4
 8008158:	d007      	beq.n	800816a <HAL_RCC_GetSysClockFreq+0x32>
 800815a:	2b08      	cmp	r3, #8
 800815c:	d008      	beq.n	8008170 <HAL_RCC_GetSysClockFreq+0x38>
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 80b4 	bne.w	80082cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008164:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008166:	60bb      	str	r3, [r7, #8]
       break;
 8008168:	e0b3      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800816a:	4b5e      	ldr	r3, [pc, #376]	; (80082e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800816c:	60bb      	str	r3, [r7, #8]
      break;
 800816e:	e0b0      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008170:	4b5a      	ldr	r3, [pc, #360]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800817a:	4b58      	ldr	r3, [pc, #352]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04a      	beq.n	800821c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008186:	4b55      	ldr	r3, [pc, #340]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	099b      	lsrs	r3, r3, #6
 800818c:	f04f 0400 	mov.w	r4, #0
 8008190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	ea03 0501 	and.w	r5, r3, r1
 800819c:	ea04 0602 	and.w	r6, r4, r2
 80081a0:	4629      	mov	r1, r5
 80081a2:	4632      	mov	r2, r6
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	f04f 0400 	mov.w	r4, #0
 80081ac:	0154      	lsls	r4, r2, #5
 80081ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081b2:	014b      	lsls	r3, r1, #5
 80081b4:	4619      	mov	r1, r3
 80081b6:	4622      	mov	r2, r4
 80081b8:	1b49      	subs	r1, r1, r5
 80081ba:	eb62 0206 	sbc.w	r2, r2, r6
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	f04f 0400 	mov.w	r4, #0
 80081c6:	0194      	lsls	r4, r2, #6
 80081c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081cc:	018b      	lsls	r3, r1, #6
 80081ce:	1a5b      	subs	r3, r3, r1
 80081d0:	eb64 0402 	sbc.w	r4, r4, r2
 80081d4:	f04f 0100 	mov.w	r1, #0
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	00e2      	lsls	r2, r4, #3
 80081de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80081e2:	00d9      	lsls	r1, r3, #3
 80081e4:	460b      	mov	r3, r1
 80081e6:	4614      	mov	r4, r2
 80081e8:	195b      	adds	r3, r3, r5
 80081ea:	eb44 0406 	adc.w	r4, r4, r6
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	f04f 0200 	mov.w	r2, #0
 80081f6:	0262      	lsls	r2, r4, #9
 80081f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80081fc:	0259      	lsls	r1, r3, #9
 80081fe:	460b      	mov	r3, r1
 8008200:	4614      	mov	r4, r2
 8008202:	4618      	mov	r0, r3
 8008204:	4621      	mov	r1, r4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f04f 0400 	mov.w	r4, #0
 800820c:	461a      	mov	r2, r3
 800820e:	4623      	mov	r3, r4
 8008210:	f7f8 fc34 	bl	8000a7c <__aeabi_uldivmod>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e049      	b.n	80082b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800821c:	4b2f      	ldr	r3, [pc, #188]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	099b      	lsrs	r3, r3, #6
 8008222:	f04f 0400 	mov.w	r4, #0
 8008226:	f240 11ff 	movw	r1, #511	; 0x1ff
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	ea03 0501 	and.w	r5, r3, r1
 8008232:	ea04 0602 	and.w	r6, r4, r2
 8008236:	4629      	mov	r1, r5
 8008238:	4632      	mov	r2, r6
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	f04f 0400 	mov.w	r4, #0
 8008242:	0154      	lsls	r4, r2, #5
 8008244:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008248:	014b      	lsls	r3, r1, #5
 800824a:	4619      	mov	r1, r3
 800824c:	4622      	mov	r2, r4
 800824e:	1b49      	subs	r1, r1, r5
 8008250:	eb62 0206 	sbc.w	r2, r2, r6
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	f04f 0400 	mov.w	r4, #0
 800825c:	0194      	lsls	r4, r2, #6
 800825e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008262:	018b      	lsls	r3, r1, #6
 8008264:	1a5b      	subs	r3, r3, r1
 8008266:	eb64 0402 	sbc.w	r4, r4, r2
 800826a:	f04f 0100 	mov.w	r1, #0
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	00e2      	lsls	r2, r4, #3
 8008274:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008278:	00d9      	lsls	r1, r3, #3
 800827a:	460b      	mov	r3, r1
 800827c:	4614      	mov	r4, r2
 800827e:	195b      	adds	r3, r3, r5
 8008280:	eb44 0406 	adc.w	r4, r4, r6
 8008284:	f04f 0100 	mov.w	r1, #0
 8008288:	f04f 0200 	mov.w	r2, #0
 800828c:	02a2      	lsls	r2, r4, #10
 800828e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008292:	0299      	lsls	r1, r3, #10
 8008294:	460b      	mov	r3, r1
 8008296:	4614      	mov	r4, r2
 8008298:	4618      	mov	r0, r3
 800829a:	4621      	mov	r1, r4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f04f 0400 	mov.w	r4, #0
 80082a2:	461a      	mov	r2, r3
 80082a4:	4623      	mov	r3, r4
 80082a6:	f7f8 fbe9 	bl	8000a7c <__aeabi_uldivmod>
 80082aa:	4603      	mov	r3, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	0c1b      	lsrs	r3, r3, #16
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	3301      	adds	r3, #1
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	60bb      	str	r3, [r7, #8]
      break;
 80082ca:	e002      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80082ce:	60bb      	str	r3, [r7, #8]
      break;
 80082d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082d2:	68bb      	ldr	r3, [r7, #8]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	40023800 	.word	0x40023800
 80082e0:	00f42400 	.word	0x00f42400
 80082e4:	007a1200 	.word	0x007a1200

080082e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <HAL_RCC_GetHCLKFreq+0x14>)
 80082ee:	681b      	ldr	r3, [r3, #0]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	2000004c 	.word	0x2000004c

08008300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008304:	f7ff fff0 	bl	80082e8 <HAL_RCC_GetHCLKFreq>
 8008308:	4601      	mov	r1, r0
 800830a:	4b05      	ldr	r3, [pc, #20]	; (8008320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	0a9b      	lsrs	r3, r3, #10
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	4a03      	ldr	r2, [pc, #12]	; (8008324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008316:	5cd3      	ldrb	r3, [r2, r3]
 8008318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800831c:	4618      	mov	r0, r3
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40023800 	.word	0x40023800
 8008324:	0801b668 	.word	0x0801b668

08008328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800834c:	2b00      	cmp	r3, #0
 800834e:	d038      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008350:	4b68      	ldr	r3, [pc, #416]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008356:	f7fd f8f5 	bl	8005544 <HAL_GetTick>
 800835a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800835c:	e008      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800835e:	f7fd f8f1 	bl	8005544 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e0bd      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008370:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	019b      	lsls	r3, r3, #6
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	495a      	ldr	r1, [pc, #360]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008396:	4b57      	ldr	r3, [pc, #348]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008398:	2201      	movs	r2, #1
 800839a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800839c:	f7fd f8d2 	bl	8005544 <HAL_GetTick>
 80083a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083a2:	e008      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083a4:	f7fd f8ce 	bl	8005544 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e09a      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083b6:	4b50      	ldr	r3, [pc, #320]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8083 	beq.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	4b48      	ldr	r3, [pc, #288]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	4a47      	ldr	r2, [pc, #284]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083de:	6413      	str	r3, [r2, #64]	; 0x40
 80083e0:	4b45      	ldr	r3, [pc, #276]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083ec:	4b43      	ldr	r3, [pc, #268]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a42      	ldr	r2, [pc, #264]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083f8:	f7fd f8a4 	bl	8005544 <HAL_GetTick>
 80083fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083fe:	e008      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008400:	f7fd f8a0 	bl	8005544 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d901      	bls.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e06c      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008412:	4b3a      	ldr	r3, [pc, #232]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f0      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008426:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d02f      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	d028      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800843c:	4b2e      	ldr	r3, [pc, #184]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008444:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008446:	4b2e      	ldr	r3, [pc, #184]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800844c:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008452:	4a29      	ldr	r2, [pc, #164]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008458:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d114      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008464:	f7fd f86e 	bl	8005544 <HAL_GetTick>
 8008468:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800846a:	e00a      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800846c:	f7fd f86a 	bl	8005544 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	f241 3288 	movw	r2, #5000	; 0x1388
 800847a:	4293      	cmp	r3, r2
 800847c:	d901      	bls.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e034      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008482:	4b1d      	ldr	r3, [pc, #116]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0ee      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800849a:	d10d      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800849c:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b0:	4911      	ldr	r1, [pc, #68]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	608b      	str	r3, [r1, #8]
 80084b6:	e005      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	4a0e      	ldr	r2, [pc, #56]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084c2:	6093      	str	r3, [r2, #8]
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d0:	4909      	ldr	r1, [pc, #36]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7d1a      	ldrb	r2, [r3, #20]
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80084e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	42470068 	.word	0x42470068
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40007000 	.word	0x40007000
 8008500:	42470e40 	.word	0x42470e40
 8008504:	424711e0 	.word	0x424711e0

08008508 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e083      	b.n	8008622 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7f5b      	ldrb	r3, [r3, #29]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fc fc62 	bl	8004df4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	22ca      	movs	r2, #202	; 0xca
 800853c:	625a      	str	r2, [r3, #36]	; 0x24
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2253      	movs	r2, #83	; 0x53
 8008544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 faa8 	bl	8008a9c <RTC_EnterInitMode>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	22ff      	movs	r2, #255	; 0xff
 8008558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2204      	movs	r2, #4
 800855e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e05e      	b.n	8008622 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008576:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6899      	ldr	r1, [r3, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	68d2      	ldr	r2, [r2, #12]
 800859e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6919      	ldr	r1, [r3, #16]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	041a      	lsls	r2, r3, #16
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa3a 	bl	8008a4c <HAL_RTC_WaitForSynchro>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d008      	beq.n	80085f0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	22ff      	movs	r2, #255	; 0xff
 80085e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e018      	b.n	8008622 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	22ff      	movs	r2, #255	; 0xff
 8008618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008620:	2300      	movs	r3, #0
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800862a:	b590      	push	{r4, r7, lr}
 800862c:	b087      	sub	sp, #28
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	7f1b      	ldrb	r3, [r3, #28]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d101      	bne.n	8008646 <HAL_RTC_SetTime+0x1c>
 8008642:	2302      	movs	r3, #2
 8008644:	e0aa      	b.n	800879c <HAL_RTC_SetTime+0x172>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2201      	movs	r2, #1
 800864a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2202      	movs	r2, #2
 8008650:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d126      	bne.n	80086a6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2200      	movs	r2, #0
 800866a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fa3f 	bl	8008af4 <RTC_ByteToBcd2>
 8008676:	4603      	mov	r3, r0
 8008678:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fa38 	bl	8008af4 <RTC_ByteToBcd2>
 8008684:	4603      	mov	r3, r0
 8008686:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008688:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	789b      	ldrb	r3, [r3, #2]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fa30 	bl	8008af4 <RTC_ByteToBcd2>
 8008694:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008696:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	78db      	ldrb	r3, [r3, #3]
 800869e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e018      	b.n	80086d8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086c6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80086cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	22ca      	movs	r2, #202	; 0xca
 80086de:	625a      	str	r2, [r3, #36]	; 0x24
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2253      	movs	r2, #83	; 0x53
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f9d7 	bl	8008a9c <RTC_EnterInitMode>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	22ff      	movs	r2, #255	; 0xff
 80086fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2204      	movs	r2, #4
 8008700:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e047      	b.n	800879c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008716:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800871a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800872a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6899      	ldr	r1, [r3, #8]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	431a      	orrs	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008752:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d111      	bne.n	8008786 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 f972 	bl	8008a4c <HAL_RTC_WaitForSynchro>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	22ff      	movs	r2, #255	; 0xff
 8008774:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2204      	movs	r2, #4
 800877a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e00a      	b.n	800879c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	22ff      	movs	r2, #255	; 0xff
 800878c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800879a:	2300      	movs	r3, #0
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80087d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80087da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	0c1b      	lsrs	r3, r3, #16
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008804:	b2da      	uxtb	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008814:	b2da      	uxtb	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11a      	bne.n	8008856 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f983 	bl	8008b30 <RTC_Bcd2ToByte>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f97a 	bl	8008b30 <RTC_Bcd2ToByte>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	789b      	ldrb	r3, [r3, #2]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f971 	bl	8008b30 <RTC_Bcd2ToByte>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	7f1b      	ldrb	r3, [r3, #28]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_RTC_SetDate+0x1c>
 8008878:	2302      	movs	r3, #2
 800887a:	e094      	b.n	80089a6 <HAL_RTC_SetDate+0x146>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2202      	movs	r2, #2
 8008886:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10e      	bne.n	80088ac <HAL_RTC_SetDate+0x4c>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	2b00      	cmp	r3, #0
 8008898:	d008      	beq.n	80088ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	f023 0310 	bic.w	r3, r3, #16
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	330a      	adds	r3, #10
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d11c      	bne.n	80088ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	78db      	ldrb	r3, [r3, #3]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f91c 	bl	8008af4 <RTC_ByteToBcd2>
 80088bc:	4603      	mov	r3, r0
 80088be:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f915 	bl	8008af4 <RTC_ByteToBcd2>
 80088ca:	4603      	mov	r3, r0
 80088cc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80088ce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	789b      	ldrb	r3, [r3, #2]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f90d 	bl	8008af4 <RTC_ByteToBcd2>
 80088da:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80088dc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e00e      	b.n	800890a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	78db      	ldrb	r3, [r3, #3]
 80088f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80088f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80088fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	22ca      	movs	r2, #202	; 0xca
 8008910:	625a      	str	r2, [r3, #36]	; 0x24
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2253      	movs	r2, #83	; 0x53
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f8be 	bl	8008a9c <RTC_EnterInitMode>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00b      	beq.n	800893e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	22ff      	movs	r2, #255	; 0xff
 800892c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2204      	movs	r2, #4
 8008932:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e033      	b.n	80089a6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008948:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800894c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d111      	bne.n	8008990 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f86d 	bl	8008a4c <HAL_RTC_WaitForSynchro>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	22ff      	movs	r2, #255	; 0xff
 800897e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2204      	movs	r2, #4
 8008984:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e00a      	b.n	80089a6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80089a4:	2300      	movs	r3, #0
  }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd90      	pop	{r4, r7, pc}

080089ae <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b086      	sub	sp, #24
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	0b5b      	lsrs	r3, r3, #13
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11a      	bne.n	8008a42 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	78db      	ldrb	r3, [r3, #3]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f88d 	bl	8008b30 <RTC_Bcd2ToByte>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f884 	bl	8008b30 <RTC_Bcd2ToByte>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f87b 	bl	8008b30 <RTC_Bcd2ToByte>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a68:	f7fc fd6c 	bl	8005544 <HAL_GetTick>
 8008a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a6e:	e009      	b.n	8008a84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a70:	f7fc fd68 	bl	8005544 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7e:	d901      	bls.n	8008a84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e007      	b.n	8008a94 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0ee      	beq.n	8008a70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d119      	bne.n	8008aea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac0:	f7fc fd40 	bl	8005544 <HAL_GetTick>
 8008ac4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ac6:	e009      	b.n	8008adc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ac8:	f7fc fd3c 	bl	8005544 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ad6:	d901      	bls.n	8008adc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e007      	b.n	8008aec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0ee      	beq.n	8008ac8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008b02:	e005      	b.n	8008b10 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	3b0a      	subs	r3, #10
 8008b0e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	d8f6      	bhi.n	8008b04 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b2db      	uxtb	r3, r3
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b2db      	uxtb	r3, r3
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e022      	b.n	8008bc4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fc f945 	bl	8004e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2203      	movs	r2, #3
 8008b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f814 	bl	8008bcc <HAL_SD_InitCard>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e00a      	b.n	8008bc4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bcc:	b5b0      	push	{r4, r5, r7, lr}
 8008bce:	b08e      	sub	sp, #56	; 0x38
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008be8:	2376      	movs	r3, #118	; 0x76
 8008bea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681d      	ldr	r5, [r3, #0]
 8008bf0:	466c      	mov	r4, sp
 8008bf2:	f107 0314 	add.w	r3, r7, #20
 8008bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c04:	4628      	mov	r0, r5
 8008c06:	f001 fef9 	bl	800a9fc <SDIO_Init>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e031      	b.n	8008c80 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <HAL_SD_InitCard+0xbc>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 ff31 	bl	800aa8e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008c2c:	4b16      	ldr	r3, [pc, #88]	; (8008c88 <HAL_SD_InitCard+0xbc>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f882 	bl	8009d3c <SD_PowerON>
 8008c38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e013      	b.n	8008c80 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 ffa1 	bl	8009ba0 <SD_InitCard>
 8008c5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3728      	adds	r7, #40	; 0x28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bdb0      	pop	{r4, r5, r7, pc}
 8008c88:	422580a0 	.word	0x422580a0

08008c8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b092      	sub	sp, #72	; 0x48
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c9a:	f7fc fc53 	bl	8005544 <HAL_GetTick>
 8008c9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d107      	bne.n	8008cbe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e1d9      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	f040 81cc 	bne.w	8009064 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d907      	bls.n	8008cf0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e1c0      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d002      	beq.n	8008d0e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	025b      	lsls	r3, r3, #9
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 ff4c 	bl	800abb4 <SDMMC_CmdBlockLength>
 8008d1c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00f      	beq.n	8008d44 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a9b      	ldr	r2, [pc, #620]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	431a      	orrs	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e196      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d44:	f04f 33ff 	mov.w	r3, #4294967295
 8008d48:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	025b      	lsls	r3, r3, #9
 8008d4e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d50:	2390      	movs	r3, #144	; 0x90
 8008d52:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008d54:	2302      	movs	r3, #2
 8008d56:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f107 0214 	add.w	r2, r7, #20
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fef6 	bl	800ab5c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d90a      	bls.n	8008d8c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d82:	4618      	mov	r0, r3
 8008d84:	f001 ff5a 	bl	800ac3c <SDMMC_CmdReadMultiBlock>
 8008d88:	6478      	str	r0, [r7, #68]	; 0x44
 8008d8a:	e009      	b.n	8008da0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 ff2d 	bl	800abf8 <SDMMC_CmdReadSingleBlock>
 8008d9e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d012      	beq.n	8008dcc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a7b      	ldr	r2, [pc, #492]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db4:	431a      	orrs	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e152      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008dd0:	e061      	b.n	8008e96 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d03c      	beq.n	8008e5a <HAL_SD_ReadBlocks+0x1ce>
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d039      	beq.n	8008e5a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dea:	e033      	b.n	8008e54 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fe2e 	bl	800aa52 <SDIO_ReadFIFO>
 8008df6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	3301      	adds	r3, #1
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	3301      	adds	r3, #1
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	3301      	adds	r3, #1
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e34:	3b01      	subs	r3, #1
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	0e1b      	lsrs	r3, r3, #24
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	3301      	adds	r3, #1
 8008e46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	3301      	adds	r3, #1
 8008e52:	643b      	str	r3, [r7, #64]	; 0x40
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	2b07      	cmp	r3, #7
 8008e58:	d9c8      	bls.n	8008dec <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e5a:	f7fc fb73 	bl	8005544 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d902      	bls.n	8008e70 <HAL_SD_ReadBlocks+0x1e4>
 8008e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d112      	bne.n	8008e96 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a48      	ldr	r2, [pc, #288]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e0ed      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e9c:	f240 332a 	movw	r3, #810	; 0x32a
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d095      	beq.n	8008dd2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d022      	beq.n	8008efa <HAL_SD_ReadBlocks+0x26e>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d91f      	bls.n	8008efa <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d01b      	beq.n	8008efa <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 ff1e 	bl	800ad08 <SDMMC_CmdStopTransfer>
 8008ecc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d012      	beq.n	8008efa <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2f      	ldr	r2, [pc, #188]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e0bb      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d012      	beq.n	8008f2e <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a22      	ldr	r2, [pc, #136]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	f043 0208 	orr.w	r2, r3, #8
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0a1      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d012      	beq.n	8008f62 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a15      	ldr	r2, [pc, #84]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	f043 0202 	orr.w	r2, r3, #2
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e087      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d064      	beq.n	800903a <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a08      	ldr	r2, [pc, #32]	; (8008f98 <HAL_SD_ReadBlocks+0x30c>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f043 0220 	orr.w	r2, r3, #32
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e06d      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
 8008f96:	bf00      	nop
 8008f98:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fd56 	bl	800aa52 <SDIO_ReadFIFO>
 8008fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	3301      	adds	r3, #1
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	0c1b      	lsrs	r3, r3, #16
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fda:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	3301      	adds	r3, #1
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	0e1b      	lsrs	r3, r3, #24
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008ffe:	f7fc faa1 	bl	8005544 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800900a:	429a      	cmp	r2, r3
 800900c:	d902      	bls.n	8009014 <HAL_SD_ReadBlocks+0x388>
 800900e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009010:	2b00      	cmp	r3, #0
 8009012:	d112      	bne.n	800903a <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a18      	ldr	r2, [pc, #96]	; (800907c <HAL_SD_ReadBlocks+0x3f0>)
 800901a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e01b      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_SD_ReadBlocks+0x3c2>
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1a6      	bne.n	8008f9c <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f240 523a 	movw	r2, #1338	; 0x53a
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e006      	b.n	8009072 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3748      	adds	r7, #72	; 0x48
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	004005ff 	.word	0x004005ff

08009080 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b092      	sub	sp, #72	; 0x48
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800908e:	f7fc fa59 	bl	8005544 <HAL_GetTick>
 8009092:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e184      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	f040 8177 	bne.w	80093ae <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d907      	bls.n	80090e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e16b      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2203      	movs	r2, #3
 80090e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2200      	movs	r2, #0
 80090f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d002      	beq.n	8009102 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	025b      	lsls	r3, r3, #9
 8009100:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800910a:	4618      	mov	r0, r3
 800910c:	f001 fd52 	bl	800abb4 <SDMMC_CmdBlockLength>
 8009110:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8009112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00f      	beq.n	8009138 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a9d      	ldr	r2, [pc, #628]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009126:	431a      	orrs	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e141      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009138:	f04f 33ff 	mov.w	r3, #4294967295
 800913c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	025b      	lsls	r3, r3, #9
 8009142:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009144:	2390      	movs	r3, #144	; 0x90
 8009146:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009148:	2300      	movs	r3, #0
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800914c:	2300      	movs	r3, #0
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009150:	2301      	movs	r3, #1
 8009152:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f107 0218 	add.w	r2, r7, #24
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fcfc 	bl	800ab5c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d90a      	bls.n	8009180 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fda4 	bl	800acc4 <SDMMC_CmdWriteMultiBlock>
 800917c:	6478      	str	r0, [r7, #68]	; 0x44
 800917e:	e009      	b.n	8009194 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2210      	movs	r2, #16
 8009184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800918c:	4618      	mov	r0, r3
 800918e:	f001 fd77 	bl	800ac80 <SDMMC_CmdWriteSingleBlock>
 8009192:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009196:	2b00      	cmp	r3, #0
 8009198:	d012      	beq.n	80091c0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a7d      	ldr	r2, [pc, #500]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a8:	431a      	orrs	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e0fd      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80091c4:	e065      	b.n	8009292 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d040      	beq.n	8009256 <HAL_SD_WriteBlocks+0x1d6>
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d03d      	beq.n	8009256 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80091da:	2300      	movs	r3, #0
 80091dc:	643b      	str	r3, [r7, #64]	; 0x40
 80091de:	e037      	b.n	8009250 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80091e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	3301      	adds	r3, #1
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ee:	3b01      	subs	r3, #1
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	021a      	lsls	r2, r3, #8
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	3301      	adds	r3, #1
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	3b01      	subs	r3, #1
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	041a      	lsls	r2, r3, #16
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	3301      	adds	r3, #1
 800921a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800921c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921e:	3b01      	subs	r3, #1
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	061a      	lsls	r2, r3, #24
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	3301      	adds	r3, #1
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009236:	3b01      	subs	r3, #1
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f107 0214 	add.w	r2, r7, #20
 8009242:	4611      	mov	r1, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f001 fc11 	bl	800aa6c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800924a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924c:	3301      	adds	r3, #1
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
 8009250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009252:	2b07      	cmp	r3, #7
 8009254:	d9c4      	bls.n	80091e0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009256:	f7fc f975 	bl	8005544 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009262:	429a      	cmp	r2, r3
 8009264:	d902      	bls.n	800926c <HAL_SD_WriteBlocks+0x1ec>
 8009266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009268:	2b00      	cmp	r3, #0
 800926a:	d112      	bne.n	8009292 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a48      	ldr	r2, [pc, #288]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800927a:	431a      	orrs	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e094      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009298:	f240 331a 	movw	r3, #794	; 0x31a
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d091      	beq.n	80091c6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d022      	beq.n	80092f6 <HAL_SD_WriteBlocks+0x276>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d91f      	bls.n	80092f6 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d01b      	beq.n	80092f6 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 fd20 	bl	800ad08 <SDMMC_CmdStopTransfer>
 80092c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80092ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d012      	beq.n	80092f6 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2f      	ldr	r2, [pc, #188]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	431a      	orrs	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e062      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b00      	cmp	r3, #0
 8009302:	d012      	beq.n	800932a <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a22      	ldr	r2, [pc, #136]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	f043 0208 	orr.w	r2, r3, #8
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e048      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d012      	beq.n	800935e <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a15      	ldr	r2, [pc, #84]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	f043 0202 	orr.w	r2, r3, #2
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e02e      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	d015      	beq.n	8009398 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a08      	ldr	r2, [pc, #32]	; (8009394 <HAL_SD_WriteBlocks+0x314>)
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	f043 0210 	orr.w	r2, r3, #16
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e014      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
 8009392:	bf00      	nop
 8009394:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f240 523a 	movw	r2, #1338	; 0x53a
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e006      	b.n	80093bc <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
  }
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3748      	adds	r7, #72	; 0x48
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <HAL_SD_IRQHandler+0x2e>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fd5c 	bl	8009ea8 <SD_Read_IT>
 80093f0:	e165      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 808f 	beq.w	8009520 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800941a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800941e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d039      	beq.n	80094ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_SD_IRQHandler+0x8a>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d011      	beq.n	8009472 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fc58 	bl	800ad08 <SDMMC_CmdStopTransfer>
 8009458:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d008      	beq.n	8009472 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f92f 	bl	80096d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f240 523a 	movw	r2, #1338	; 0x53a
 800947a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d104      	bne.n	800949e <HAL_SD_IRQHandler+0xda>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f003 fb8a 	bl	800cbb8 <HAL_SD_RxCpltCallback>
 80094a4:	e10b      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f003 fb7c 	bl	800cba4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80094ac:	e107      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 8102 	beq.w	80096be <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d011      	beq.n	80094e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 fc1d 	bl	800ad08 <SDMMC_CmdStopTransfer>
 80094ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d008      	beq.n	80094e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f8f4 	bl	80096d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f040 80e5 	bne.w	80096be <HAL_SD_IRQHandler+0x2fa>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f040 80df 	bne.w	80096be <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0208 	bic.w	r2, r2, #8
 800950e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f003 fb43 	bl	800cba4 <HAL_SD_TxCpltCallback>
}
 800951e:	e0ce      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_SD_IRQHandler+0x17c>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fd06 	bl	8009f4a <SD_Write_IT>
 800953e:	e0be      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009546:	f240 233a 	movw	r3, #570	; 0x23a
 800954a:	4013      	ands	r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80b6 	beq.w	80096be <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f043 0202 	orr.w	r2, r3, #2
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	f003 0308 	and.w	r3, r3, #8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	f043 0208 	orr.w	r2, r3, #8
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a6:	f003 0310 	and.w	r3, r3, #16
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	f043 0210 	orr.w	r2, r3, #16
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	f043 0208 	orr.w	r2, r3, #8
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f240 723a 	movw	r2, #1850	; 0x73a
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80095ec:	f023 0302 	bic.w	r3, r3, #2
 80095f0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fb86 	bl	800ad08 <SDMMC_CmdStopTransfer>
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f855 	bl	80096d0 <HAL_SD_ErrorCallback>
}
 8009626:	e04a      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962e:	2b00      	cmp	r3, #0
 8009630:	d045      	beq.n	80096be <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <HAL_SD_IRQHandler+0x282>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d011      	beq.n	800966a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	4a1f      	ldr	r2, [pc, #124]	; (80096c8 <HAL_SD_IRQHandler+0x304>)
 800964c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	4618      	mov	r0, r3
 8009654:	f7fc f8b5 	bl	80057c2 <HAL_DMA_Abort_IT>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d02f      	beq.n	80096be <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fa2e 	bl	8009ac4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009668:	e029      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d104      	bne.n	800967e <HAL_SD_IRQHandler+0x2ba>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	4a12      	ldr	r2, [pc, #72]	; (80096cc <HAL_SD_IRQHandler+0x308>)
 8009684:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	4618      	mov	r0, r3
 800968c:	f7fc f899 	bl	80057c2 <HAL_DMA_Abort_IT>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d013      	beq.n	80096be <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fa49 	bl	8009b32 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80096a0:	e00d      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f003 fa6a 	bl	800cb90 <HAL_SD_AbortCallback>
}
 80096bc:	e7ff      	b.n	80096be <HAL_SD_IRQHandler+0x2fa>
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	08009ac5 	.word	0x08009ac5
 80096cc:	08009b33 	.word	0x08009b33

080096d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f2:	0f9b      	lsrs	r3, r3, #30
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fe:	0e9b      	lsrs	r3, r3, #26
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	b2da      	uxtb	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	b2da      	uxtb	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	b2da      	uxtb	r2, r3
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	b2da      	uxtb	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800973a:	b2da      	uxtb	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009744:	0d1b      	lsrs	r3, r3, #20
 8009746:	b29a      	uxth	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009750:	0c1b      	lsrs	r3, r3, #16
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009762:	0bdb      	lsrs	r3, r3, #15
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	b2da      	uxtb	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009774:	0b9b      	lsrs	r3, r3, #14
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009786:	0b5b      	lsrs	r3, r3, #13
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	b2da      	uxtb	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009798:	0b1b      	lsrs	r3, r3, #12
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d163      	bne.n	800987c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b8:	009a      	lsls	r2, r3, #2
 80097ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80097be:	4013      	ands	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80097c4:	0f92      	lsrs	r2, r2, #30
 80097c6:	431a      	orrs	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d0:	0edb      	lsrs	r3, r3, #27
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0307 	and.w	r3, r3, #7
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e2:	0e1b      	lsrs	r3, r3, #24
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f4:	0d5b      	lsrs	r3, r3, #21
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009806:	0c9b      	lsrs	r3, r3, #18
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	b2da      	uxtb	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009818:	0bdb      	lsrs	r3, r3, #15
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	b2da      	uxtb	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	7e1b      	ldrb	r3, [r3, #24]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	3302      	adds	r3, #2
 800983c:	2201      	movs	r2, #1
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009846:	fb02 f203 	mul.w	r2, r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	7a1b      	ldrb	r3, [r3, #8]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	2201      	movs	r2, #1
 800985a:	409a      	lsls	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009868:	0a52      	lsrs	r2, r2, #9
 800986a:	fb02 f203 	mul.w	r2, r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009878:	661a      	str	r2, [r3, #96]	; 0x60
 800987a:	e031      	b.n	80098e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	2b01      	cmp	r3, #1
 8009882:	d11d      	bne.n	80098c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009892:	0c1b      	lsrs	r3, r3, #16
 8009894:	431a      	orrs	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	3301      	adds	r3, #1
 80098a0:	029a      	lsls	r2, r3, #10
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
 80098be:	e00f      	b.n	80098e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a58      	ldr	r2, [pc, #352]	; (8009a28 <HAL_SD_GetCardCSD+0x344>)
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e09d      	b.n	8009a1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e4:	0b9b      	lsrs	r3, r3, #14
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f6:	09db      	lsrs	r3, r3, #7
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009908:	b2db      	uxtb	r3, r3
 800990a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800990e:	b2da      	uxtb	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009918:	0fdb      	lsrs	r3, r3, #31
 800991a:	b2da      	uxtb	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009924:	0f5b      	lsrs	r3, r3, #29
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	b2da      	uxtb	r2, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009936:	0e9b      	lsrs	r3, r3, #26
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	b2da      	uxtb	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009948:	0d9b      	lsrs	r3, r3, #22
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	b2da      	uxtb	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	0d5b      	lsrs	r3, r3, #21
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	0c1b      	lsrs	r3, r3, #16
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	0bdb      	lsrs	r3, r3, #15
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	0b9b      	lsrs	r3, r3, #14
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b2:	0b5b      	lsrs	r3, r3, #13
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c6:	0b1b      	lsrs	r3, r3, #12
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	0a9b      	lsrs	r3, r3, #10
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	004005ff 	.word	0x004005ff

08009a2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a90:	f107 030c 	add.w	r3, r7, #12
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f9de 	bl	8009e58 <SD_SendStatus>
 8009a9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	0a5b      	lsrs	r3, r3, #9
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009aba:	693b      	ldr	r3, [r7, #16]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff ffd1 	bl	8009a84 <HAL_SD_GetCardState>
 8009ae2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b06      	cmp	r3, #6
 8009af6:	d002      	beq.n	8009afe <SD_DMATxAbort+0x3a>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d10a      	bne.n	8009b14 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 f900 	bl	800ad08 <SDMMC_CmdStopTransfer>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d103      	bne.n	8009b24 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f003 f837 	bl	800cb90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b22:	e002      	b.n	8009b2a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f7ff fdd3 	bl	80096d0 <HAL_SD_ErrorCallback>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b48:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff ff9a 	bl	8009a84 <HAL_SD_GetCardState>
 8009b50:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2b06      	cmp	r3, #6
 8009b64:	d002      	beq.n	8009b6c <SD_DMARxAbort+0x3a>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b05      	cmp	r3, #5
 8009b6a:	d10a      	bne.n	8009b82 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 f8c9 	bl	800ad08 <SDMMC_CmdStopTransfer>
 8009b76:	4602      	mov	r2, r0
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f003 f800 	bl	800cb90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b90:	e002      	b.n	8009b98 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f7ff fd9c 	bl	80096d0 <HAL_SD_ErrorCallback>
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ba0:	b5b0      	push	{r4, r5, r7, lr}
 8009ba2:	b094      	sub	sp, #80	; 0x50
 8009ba4:	af04      	add	r7, sp, #16
 8009ba6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 ff7b 	bl	800aaac <SDIO_GetPowerState>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009bc0:	e0b7      	b.n	8009d32 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d02f      	beq.n	8009c2a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 f961 	bl	800ae96 <SDMMC_CmdSendCID>
 8009bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <SD_InitCard+0x40>
    {
      return errorstate;
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bde:	e0a8      	b.n	8009d32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2100      	movs	r1, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 ffa5 	bl	800ab36 <SDIO_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2104      	movs	r1, #4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 ff9c 	bl	800ab36 <SDIO_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2108      	movs	r1, #8
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 ff93 	bl	800ab36 <SDIO_GetResponse>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	210c      	movs	r1, #12
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 ff8a 	bl	800ab36 <SDIO_GetResponse>
 8009c22:	4602      	mov	r2, r0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d00d      	beq.n	8009c4e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f107 020e 	add.w	r2, r7, #14
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 f967 	bl	800af10 <SDMMC_CmdSetRelAdd>
 8009c42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <SD_InitCard+0xae>
    {
      return errorstate;
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	e071      	b.n	8009d32 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d036      	beq.n	8009cc4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009c56:	89fb      	ldrh	r3, [r7, #14]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f001 f931 	bl	800aed2 <SDMMC_CmdSendCSD>
 8009c70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7a:	e05a      	b.n	8009d32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 ff57 	bl	800ab36 <SDIO_GetResponse>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2104      	movs	r1, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 ff4e 	bl	800ab36 <SDIO_GetResponse>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2108      	movs	r1, #8
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 ff45 	bl	800ab36 <SDIO_GetResponse>
 8009cac:	4602      	mov	r2, r0
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	210c      	movs	r1, #12
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ff3c 	bl	800ab36 <SDIO_GetResponse>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2104      	movs	r1, #4
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 ff33 	bl	800ab36 <SDIO_GetResponse>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	0d1a      	lsrs	r2, r3, #20
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009cd8:	f107 0310 	add.w	r3, r7, #16
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fd00 	bl	80096e4 <HAL_SD_GetCardCSD>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cee:	e020      	b.n	8009d32 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	f04f 0400 	mov.w	r4, #0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4623      	mov	r3, r4
 8009d02:	4608      	mov	r0, r1
 8009d04:	f001 f822 	bl	800ad4c <SDMMC_CmdSelDesel>
 8009d08:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <SD_InitCard+0x174>
  {
    return errorstate;
 8009d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d12:	e00e      	b.n	8009d32 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681d      	ldr	r5, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	466c      	mov	r4, sp
 8009d1c:	f103 0210 	add.w	r2, r3, #16
 8009d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d26:	3304      	adds	r3, #4
 8009d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 fe66 	bl	800a9fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3740      	adds	r7, #64	; 0x40
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009d3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 f81c 	bl	800ad92 <SDMMC_CmdGoIdleState>
 8009d5a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	e072      	b.n	8009e4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 f82f 	bl	800adce <SDMMC_CmdOperCond>
 8009d70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 f805 	bl	800ad92 <SDMMC_CmdGoIdleState>
 8009d88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	e05b      	b.n	8009e4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d137      	bne.n	8009e12 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f82f 	bl	800ae0c <SDMMC_CmdAppCommand>
 8009dae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d02d      	beq.n	8009e12 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dba:	e047      	b.n	8009e4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 f822 	bl	800ae0c <SDMMC_CmdAppCommand>
 8009dc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e03b      	b.n	8009e4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	491e      	ldr	r1, [pc, #120]	; (8009e54 <SD_PowerON+0x118>)
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 f838 	bl	800ae50 <SDMMC_CmdAppOperCommand>
 8009de0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dec:	e02e      	b.n	8009e4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fe9e 	bl	800ab36 <SDIO_GetResponse>
 8009dfa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	0fdb      	lsrs	r3, r3, #31
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <SD_PowerON+0xcc>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <SD_PowerON+0xce>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]

    count++;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d802      	bhi.n	8009e22 <SD_PowerON+0xe6>
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0cc      	beq.n	8009dbc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d902      	bls.n	8009e32 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e30:	e00c      	b.n	8009e4c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	645a      	str	r2, [r3, #68]	; 0x44
 8009e42:	e002      	b.n	8009e4a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	c1100000 	.word	0xc1100000

08009e58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e6c:	e018      	b.n	8009ea0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f001 f869 	bl	800af52 <SDMMC_CmdSendStatus>
 8009e80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	e009      	b.n	8009ea0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fe4f 	bl	800ab36 <SDIO_GetResponse>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d03f      	beq.n	8009f42 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e033      	b.n	8009f30 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fdc0 	bl	800aa52 <SDIO_ReadFIFO>
 8009ed2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	0c1b      	lsrs	r3, r3, #16
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	0e1b      	lsrs	r3, r3, #24
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b07      	cmp	r3, #7
 8009f34:	d9c8      	bls.n	8009ec8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009f42:	bf00      	nop
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b086      	sub	sp, #24
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d043      	beq.n	8009fec <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e037      	b.n	8009fda <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3301      	adds	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	021a      	lsls	r2, r3, #8
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	041a      	lsls	r2, r3, #16
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	061a      	lsls	r2, r3, #24
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f107 0208 	add.w	r2, r7, #8
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fd4c 	bl	800aa6c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b07      	cmp	r3, #7
 8009fde:	d9c4      	bls.n	8009f6a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009fec:	bf00      	nop
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e056      	b.n	800a0b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d106      	bne.n	800a026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fa ff8f 	bl	8004f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a03c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	ea42 0103 	orr.w	r1, r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	0c1b      	lsrs	r3, r3, #16
 800a084:	f003 0104 	and.w	r1, r3, #4
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69da      	ldr	r2, [r3, #28]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_SPI_Transmit+0x22>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e11e      	b.n	800a31c <HAL_SPI_Transmit+0x260>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0e6:	f7fb fa2d 	bl	8005544 <HAL_GetTick>
 800a0ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d002      	beq.n	800a102 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a100:	e103      	b.n	800a30a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <HAL_SPI_Transmit+0x52>
 800a108:	88fb      	ldrh	r3, [r7, #6]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a112:	e0fa      	b.n	800a30a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2203      	movs	r2, #3
 800a118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	88fa      	ldrh	r2, [r7, #6]
 800a12c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15a:	d107      	bne.n	800a16c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a16a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b40      	cmp	r3, #64	; 0x40
 800a178:	d007      	beq.n	800a18a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a188:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a192:	d14b      	bne.n	800a22c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <HAL_SPI_Transmit+0xe6>
 800a19c:	8afb      	ldrh	r3, [r7, #22]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d13e      	bne.n	800a220 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	1c9a      	adds	r2, r3, #2
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a1c6:	e02b      	b.n	800a220 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0302 	and.w	r3, r3, #2
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d112      	bne.n	800a1fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	881a      	ldrh	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a1fa:	e011      	b.n	800a220 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1fc:	f7fb f9a2 	bl	8005544 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d803      	bhi.n	800a214 <HAL_SPI_Transmit+0x158>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d102      	bne.n	800a21a <HAL_SPI_Transmit+0x15e>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a21e:	e074      	b.n	800a30a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a224:	b29b      	uxth	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1ce      	bne.n	800a1c8 <HAL_SPI_Transmit+0x10c>
 800a22a:	e04c      	b.n	800a2c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <HAL_SPI_Transmit+0x17e>
 800a234:	8afb      	ldrh	r3, [r7, #22]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d140      	bne.n	800a2bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	330c      	adds	r3, #12
 800a244:	7812      	ldrb	r2, [r2, #0]
 800a246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a256:	b29b      	uxth	r3, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a260:	e02c      	b.n	800a2bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d113      	bne.n	800a298 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	330c      	adds	r3, #12
 800a27a:	7812      	ldrb	r2, [r2, #0]
 800a27c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	86da      	strh	r2, [r3, #54]	; 0x36
 800a296:	e011      	b.n	800a2bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a298:	f7fb f954 	bl	8005544 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d803      	bhi.n	800a2b0 <HAL_SPI_Transmit+0x1f4>
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d102      	bne.n	800a2b6 <HAL_SPI_Transmit+0x1fa>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2ba:	e026      	b.n	800a30a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1cd      	bne.n	800a262 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fb54 	bl	800a978 <SPI_EndRxTxTransaction>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	77fb      	strb	r3, [r7, #31]
 800a306:	e000      	b.n	800a30a <HAL_SPI_Transmit+0x24e>
  }

error:
 800a308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a31a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a332:	2301      	movs	r3, #1
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a342:	2b01      	cmp	r3, #1
 800a344:	d101      	bne.n	800a34a <HAL_SPI_TransmitReceive+0x26>
 800a346:	2302      	movs	r3, #2
 800a348:	e18a      	b.n	800a660 <HAL_SPI_TransmitReceive+0x33c>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a352:	f7fb f8f7 	bl	8005544 <HAL_GetTick>
 800a356:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a35e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a368:	887b      	ldrh	r3, [r7, #2]
 800a36a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a36c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a370:	2b01      	cmp	r3, #1
 800a372:	d00f      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x70>
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a37a:	d107      	bne.n	800a38c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d103      	bne.n	800a38c <HAL_SPI_TransmitReceive+0x68>
 800a384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d003      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
 800a38e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a392:	e15b      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <HAL_SPI_TransmitReceive+0x82>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <HAL_SPI_TransmitReceive+0x82>
 800a3a0:	887b      	ldrh	r3, [r7, #2]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d103      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a3ac:	e14e      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	d003      	beq.n	800a3c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2205      	movs	r2, #5
 800a3be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	887a      	ldrh	r2, [r7, #2]
 800a3d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	887a      	ldrh	r2, [r7, #2]
 800a3d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	887a      	ldrh	r2, [r7, #2]
 800a3e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	887a      	ldrh	r2, [r7, #2]
 800a3ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b40      	cmp	r3, #64	; 0x40
 800a404:	d007      	beq.n	800a416 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a41e:	d178      	bne.n	800a512 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <HAL_SPI_TransmitReceive+0x10a>
 800a428:	8b7b      	ldrh	r3, [r7, #26]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d166      	bne.n	800a4fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	881a      	ldrh	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	1c9a      	adds	r2, r3, #2
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a452:	e053      	b.n	800a4fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 0302 	and.w	r3, r3, #2
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d11b      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x176>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d016      	beq.n	800a49a <HAL_SPI_TransmitReceive+0x176>
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d113      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	881a      	ldrh	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	1c9a      	adds	r2, r3, #2
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d119      	bne.n	800a4dc <HAL_SPI_TransmitReceive+0x1b8>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d014      	beq.n	800a4dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	b292      	uxth	r2, r2
 800a4be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	1c9a      	adds	r2, r3, #2
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4dc:	f7fb f832 	bl	8005544 <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d807      	bhi.n	800a4fc <HAL_SPI_TransmitReceive+0x1d8>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d003      	beq.n	800a4fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4fa:	e0a7      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a500:	b29b      	uxth	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1a6      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x130>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1a1      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x130>
 800a510:	e07c      	b.n	800a60c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <HAL_SPI_TransmitReceive+0x1fc>
 800a51a:	8b7b      	ldrh	r3, [r7, #26]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d16b      	bne.n	800a5f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	330c      	adds	r3, #12
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a546:	e057      	b.n	800a5f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 0302 	and.w	r3, r3, #2
 800a552:	2b02      	cmp	r3, #2
 800a554:	d11c      	bne.n	800a590 <HAL_SPI_TransmitReceive+0x26c>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d017      	beq.n	800a590 <HAL_SPI_TransmitReceive+0x26c>
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d114      	bne.n	800a590 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	330c      	adds	r3, #12
 800a570:	7812      	ldrb	r2, [r2, #0]
 800a572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d119      	bne.n	800a5d2 <HAL_SPI_TransmitReceive+0x2ae>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d014      	beq.n	800a5d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5d2:	f7fa ffb7 	bl	8005544 <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d803      	bhi.n	800a5ea <HAL_SPI_TransmitReceive+0x2c6>
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d102      	bne.n	800a5f0 <HAL_SPI_TransmitReceive+0x2cc>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a5f6:	e029      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1a2      	bne.n	800a548 <HAL_SPI_TransmitReceive+0x224>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d19d      	bne.n	800a548 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f9b1 	bl	800a978 <SPI_EndRxTxTransaction>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d006      	beq.n	800a62a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a628:	e010      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a632:	2300      	movs	r3, #0
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	e000      	b.n	800a64c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a64a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a65c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a660:	4618      	mov	r0, r3
 800a662:	3730      	adds	r7, #48	; 0x30
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	099b      	lsrs	r3, r3, #6
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10f      	bne.n	800a6ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	099b      	lsrs	r3, r3, #6
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
    return;
 800a6aa:	e0d8      	b.n	800a85e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <HAL_SPI_IRQHandler+0x66>
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	09db      	lsrs	r3, r3, #7
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
    return;
 800a6cc:	e0c7      	b.n	800a85e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	095b      	lsrs	r3, r3, #5
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10c      	bne.n	800a6f4 <HAL_SPI_IRQHandler+0x8c>
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	099b      	lsrs	r3, r3, #6
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	0a1b      	lsrs	r3, r3, #8
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 80b5 	beq.w	800a85e <HAL_SPI_IRQHandler+0x1f6>
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 80ae 	beq.w	800a85e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	099b      	lsrs	r3, r3, #6
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d023      	beq.n	800a756 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b03      	cmp	r3, #3
 800a718:	d011      	beq.n	800a73e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71e:	f043 0204 	orr.w	r2, r3, #4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a726:	2300      	movs	r3, #0
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	e00b      	b.n	800a756 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	613b      	str	r3, [r7, #16]
 800a752:	693b      	ldr	r3, [r7, #16]
        return;
 800a754:	e083      	b.n	800a85e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	095b      	lsrs	r3, r3, #5
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d014      	beq.n	800a78c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a766:	f043 0201 	orr.w	r2, r3, #1
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79c:	f043 0208 	orr.w	r2, r3, #8
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60bb      	str	r3, [r7, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d050      	beq.n	800a85c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a7c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <HAL_SPI_IRQHandler+0x17e>
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d034      	beq.n	800a850 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f022 0203 	bic.w	r2, r2, #3
 800a7f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d011      	beq.n	800a822 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a802:	4a18      	ldr	r2, [pc, #96]	; (800a864 <HAL_SPI_IRQHandler+0x1fc>)
 800a804:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fa ffd9 	bl	80057c2 <HAL_DMA_Abort_IT>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a826:	2b00      	cmp	r3, #0
 800a828:	d016      	beq.n	800a858 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a82e:	4a0d      	ldr	r2, [pc, #52]	; (800a864 <HAL_SPI_IRQHandler+0x1fc>)
 800a830:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a836:	4618      	mov	r0, r3
 800a838:	f7fa ffc3 	bl	80057c2 <HAL_DMA_Abort_IT>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a84e:	e003      	b.n	800a858 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f809 	bl	800a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a856:	e000      	b.n	800a85a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a858:	bf00      	nop
    return;
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
  }
}
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	0800a87d 	.word	0x0800a87d

0800a868 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f7ff ffe6 	bl	800a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a89c:	bf00      	nop
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8b4:	e04c      	b.n	800a950 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d048      	beq.n	800a950 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a8be:	f7fa fe41 	bl	8005544 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d902      	bls.n	800a8d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d13d      	bne.n	800a950 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8ec:	d111      	bne.n	800a912 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f6:	d004      	beq.n	800a902 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a900:	d107      	bne.n	800a912 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a910:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a91a:	d10f      	bne.n	800a93c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a93a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e00f      	b.n	800a970 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	4013      	ands	r3, r2
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	bf0c      	ite	eq
 800a960:	2301      	moveq	r3, #1
 800a962:	2300      	movne	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d1a3      	bne.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af02      	add	r7, sp, #8
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a984:	4b1b      	ldr	r3, [pc, #108]	; (800a9f4 <SPI_EndRxTxTransaction+0x7c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a1b      	ldr	r2, [pc, #108]	; (800a9f8 <SPI_EndRxTxTransaction+0x80>)
 800a98a:	fba2 2303 	umull	r2, r3, r2, r3
 800a98e:	0d5b      	lsrs	r3, r3, #21
 800a990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9a2:	d112      	bne.n	800a9ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2180      	movs	r1, #128	; 0x80
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff ff78 	bl	800a8a4 <SPI_WaitFlagStateUntilTimeout>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d016      	beq.n	800a9e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	f043 0220 	orr.w	r2, r3, #32
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e00f      	b.n	800a9ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00a      	beq.n	800a9e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d0f2      	beq.n	800a9ca <SPI_EndRxTxTransaction+0x52>
 800a9e4:	e000      	b.n	800a9e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a9e6:	bf00      	nop
  }

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000004c 	.word	0x2000004c
 800a9f8:	165e9f81 	.word	0x165e9f81

0800a9fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	f107 001c 	add.w	r0, r7, #28
 800aa0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa22:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	b004      	add	sp, #16
 800aa50:	4770      	bx	lr

0800aa52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2203      	movs	r2, #3
 800aa9a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aa9c:	2002      	movs	r0, #2
 800aa9e:	f7fa fd5d 	bl	800555c <HAL_Delay>
  
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0303 	and.w	r3, r3, #3
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aae6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aaec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aaf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab02:	f023 030f 	bic.w	r3, r3, #15
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	b2db      	uxtb	r3, r3
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3314      	adds	r3, #20
 800ab44:	461a      	mov	r2, r3
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	4413      	add	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
}  
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab82:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ab88:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ab8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0

}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800abc2:	2310      	movs	r3, #16
 800abc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abc6:	2340      	movs	r3, #64	; 0x40
 800abc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abca:	2300      	movs	r3, #0
 800abcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abd4:	f107 0308 	add.w	r3, r7, #8
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff ff74 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800abe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abe4:	2110      	movs	r1, #16
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f9fe 	bl	800afe8 <SDMMC_GetCmdResp1>
 800abec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abee:	69fb      	ldr	r3, [r7, #28]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3720      	adds	r7, #32
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac06:	2311      	movs	r3, #17
 800ac08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac0a:	2340      	movs	r3, #64	; 0x40
 800ac0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac18:	f107 0308 	add.w	r3, r7, #8
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff ff52 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac28:	2111      	movs	r1, #17
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f9dc 	bl	800afe8 <SDMMC_GetCmdResp1>
 800ac30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac32:	69fb      	ldr	r3, [r7, #28]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac4a:	2312      	movs	r3, #18
 800ac4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac52:	2300      	movs	r3, #0
 800ac54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff ff30 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6c:	2112      	movs	r1, #18
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f9ba 	bl	800afe8 <SDMMC_GetCmdResp1>
 800ac74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac76:	69fb      	ldr	r3, [r7, #28]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac8e:	2318      	movs	r3, #24
 800ac90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac92:	2340      	movs	r3, #64	; 0x40
 800ac94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff ff0e 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800acac:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb0:	2118      	movs	r1, #24
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f998 	bl	800afe8 <SDMMC_GetCmdResp1>
 800acb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acba:	69fb      	ldr	r3, [r7, #28]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acd2:	2319      	movs	r3, #25
 800acd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acda:	2300      	movs	r3, #0
 800acdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ace4:	f107 0308 	add.w	r3, r7, #8
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff feec 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800acf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf4:	2119      	movs	r1, #25
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f976 	bl	800afe8 <SDMMC_GetCmdResp1>
 800acfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acfe:	69fb      	ldr	r3, [r7, #28]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad10:	2300      	movs	r3, #0
 800ad12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad14:	230c      	movs	r3, #12
 800ad16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad18:	2340      	movs	r3, #64	; 0x40
 800ad1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad26:	f107 0308 	add.w	r3, r7, #8
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff fecb 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ad32:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <SDMMC_CmdStopTransfer+0x40>)
 800ad34:	210c      	movs	r1, #12
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f956 	bl	800afe8 <SDMMC_GetCmdResp1>
 800ad3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3720      	adds	r7, #32
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	05f5e100 	.word	0x05f5e100

0800ad4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08a      	sub	sp, #40	; 0x28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad5c:	2307      	movs	r3, #7
 800ad5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad6e:	f107 0310 	add.w	r3, r7, #16
 800ad72:	4619      	mov	r1, r3
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fea7 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ad7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7e:	2107      	movs	r1, #7
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f931 	bl	800afe8 <SDMMC_GetCmdResp1>
 800ad86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3728      	adds	r7, #40	; 0x28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ada2:	2300      	movs	r3, #0
 800ada4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fe86 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f8eb 	bl	800af98 <SDMMC_GetCmdError>
 800adc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc4:	69fb      	ldr	r3, [r7, #28]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b088      	sub	sp, #32
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800add6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800adda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800addc:	2308      	movs	r3, #8
 800adde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ade0:	2340      	movs	r3, #64	; 0x40
 800ade2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ade8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adee:	f107 0308 	add.w	r3, r7, #8
 800adf2:	4619      	mov	r1, r3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff fe67 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fad4 	bl	800b3a8 <SDMMC_GetCmdResp7>
 800ae00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae02:	69fb      	ldr	r3, [r7, #28]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae1a:	2337      	movs	r3, #55	; 0x37
 800ae1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae1e:	2340      	movs	r3, #64	; 0x40
 800ae20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fe48 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ae38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3c:	2137      	movs	r1, #55	; 0x37
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f8d2 	bl	800afe8 <SDMMC_GetCmdResp1>
 800ae44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae66:	2329      	movs	r3, #41	; 0x29
 800ae68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae6a:	2340      	movs	r3, #64	; 0x40
 800ae6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae78:	f107 0308 	add.w	r3, r7, #8
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff fe22 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f9e1 	bl	800b24c <SDMMC_GetCmdResp3>
 800ae8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b088      	sub	sp, #32
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aea2:	2302      	movs	r3, #2
 800aea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aea6:	23c0      	movs	r3, #192	; 0xc0
 800aea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff fe04 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f97d 	bl	800b1c0 <SDMMC_GetCmdResp2>
 800aec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec8:	69fb      	ldr	r3, [r7, #28]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b088      	sub	sp, #32
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aee0:	2309      	movs	r3, #9
 800aee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aee4:	23c0      	movs	r3, #192	; 0xc0
 800aee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aef2:	f107 0308 	add.w	r3, r7, #8
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff fde5 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f95e 	bl	800b1c0 <SDMMC_GetCmdResp2>
 800af04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af06:	69fb      	ldr	r3, [r7, #28]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af1e:	2303      	movs	r3, #3
 800af20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af30:	f107 0308 	add.w	r3, r7, #8
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff fdc6 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	2103      	movs	r1, #3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f9bd 	bl	800b2c0 <SDMMC_GetCmdResp6>
 800af46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af48:	69fb      	ldr	r3, [r7, #28]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af60:	230d      	movs	r3, #13
 800af62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af64:	2340      	movs	r3, #64	; 0x40
 800af66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff fda5 	bl	800aac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800af7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af82:	210d      	movs	r1, #13
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f82f 	bl	800afe8 <SDMMC_GetCmdResp1>
 800af8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af8c:	69fb      	ldr	r3, [r7, #28]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800af98:	b490      	push	{r4, r7}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afa0:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <SDMMC_GetCmdError+0x48>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a0f      	ldr	r2, [pc, #60]	; (800afe4 <SDMMC_GetCmdError+0x4c>)
 800afa6:	fba2 2303 	umull	r2, r3, r2, r3
 800afaa:	0a5b      	lsrs	r3, r3, #9
 800afac:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800afb4:	4623      	mov	r3, r4
 800afb6:	1e5c      	subs	r4, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afc0:	e009      	b.n	800afd6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f2      	beq.n	800afb4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	22c5      	movs	r2, #197	; 0xc5
 800afd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc90      	pop	{r4, r7}
 800afde:	4770      	bx	lr
 800afe0:	2000004c 	.word	0x2000004c
 800afe4:	10624dd3 	.word	0x10624dd3

0800afe8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aff6:	4b6f      	ldr	r3, [pc, #444]	; (800b1b4 <SDMMC_GetCmdResp1+0x1cc>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a6f      	ldr	r2, [pc, #444]	; (800b1b8 <SDMMC_GetCmdResp1+0x1d0>)
 800affc:	fba2 2303 	umull	r2, r3, r2, r3
 800b000:	0a5b      	lsrs	r3, r3, #9
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b008:	4623      	mov	r3, r4
 800b00a:	1e5c      	subs	r4, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b010:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b014:	e0c9      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0f0      	beq.n	800b008 <SDMMC_GetCmdResp1+0x20>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1eb      	bne.n	800b008 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2204      	movs	r2, #4
 800b040:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b042:	2304      	movs	r3, #4
 800b044:	e0b1      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d004      	beq.n	800b05c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b058:	2301      	movs	r3, #1
 800b05a:	e0a6      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	22c5      	movs	r2, #197	; 0xc5
 800b060:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fd5a 	bl	800ab1c <SDIO_GetCommandResponse>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d001      	beq.n	800b076 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b072:	2301      	movs	r3, #1
 800b074:	e099      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b076:	2100      	movs	r1, #0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f7ff fd5c 	bl	800ab36 <SDIO_GetResponse>
 800b07e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4b4e      	ldr	r3, [pc, #312]	; (800b1bc <SDMMC_GetCmdResp1+0x1d4>)
 800b084:	4013      	ands	r3, r2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b08a:	2300      	movs	r3, #0
 800b08c:	e08d      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	da02      	bge.n	800b09a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b098:	e087      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0a4:	2340      	movs	r3, #64	; 0x40
 800b0a6:	e080      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0b2:	2380      	movs	r3, #128	; 0x80
 800b0b4:	e079      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c4:	e071      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0d4:	e069      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e4:	e061      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0f4:	e059      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b104:	e051      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b114:	e049      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b120:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b124:	e041      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b134:	e039      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b144:	e031      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b150:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b154:	e029      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b160:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b164:	e021      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b174:	e019      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b184:	e011      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b190:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b194:	e009      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1a4:	e001      	b.n	800b1aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd90      	pop	{r4, r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	2000004c 	.word	0x2000004c
 800b1b8:	10624dd3 	.word	0x10624dd3
 800b1bc:	fdffe008 	.word	0xfdffe008

0800b1c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b1c0:	b490      	push	{r4, r7}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1c8:	4b1e      	ldr	r3, [pc, #120]	; (800b244 <SDMMC_GetCmdResp2+0x84>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <SDMMC_GetCmdResp2+0x88>)
 800b1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d2:	0a5b      	lsrs	r3, r3, #9
 800b1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1dc:	4623      	mov	r3, r4
 800b1de:	1e5c      	subs	r4, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1e8:	e026      	b.n	800b238 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0f0      	beq.n	800b1dc <SDMMC_GetCmdResp2+0x1c>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1eb      	bne.n	800b1dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2204      	movs	r2, #4
 800b214:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b216:	2304      	movs	r3, #4
 800b218:	e00e      	b.n	800b238 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d004      	beq.n	800b230 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e003      	b.n	800b238 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	22c5      	movs	r2, #197	; 0xc5
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bc90      	pop	{r4, r7}
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	2000004c 	.word	0x2000004c
 800b248:	10624dd3 	.word	0x10624dd3

0800b24c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b24c:	b490      	push	{r4, r7}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b254:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <SDMMC_GetCmdResp3+0x6c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a18      	ldr	r2, [pc, #96]	; (800b2bc <SDMMC_GetCmdResp3+0x70>)
 800b25a:	fba2 2303 	umull	r2, r3, r2, r3
 800b25e:	0a5b      	lsrs	r3, r3, #9
 800b260:	f241 3288 	movw	r2, #5000	; 0x1388
 800b264:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b268:	4623      	mov	r3, r4
 800b26a:	1e5c      	subs	r4, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b274:	e01b      	b.n	800b2ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0f0      	beq.n	800b268 <SDMMC_GetCmdResp3+0x1c>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1eb      	bne.n	800b268 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d004      	beq.n	800b2a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2204      	movs	r2, #4
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2a2:	2304      	movs	r3, #4
 800b2a4:	e003      	b.n	800b2ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	22c5      	movs	r2, #197	; 0xc5
 800b2aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bc90      	pop	{r4, r7}
 800b2b6:	4770      	bx	lr
 800b2b8:	2000004c 	.word	0x2000004c
 800b2bc:	10624dd3 	.word	0x10624dd3

0800b2c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2ce:	4b34      	ldr	r3, [pc, #208]	; (800b3a0 <SDMMC_GetCmdResp6+0xe0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a34      	ldr	r2, [pc, #208]	; (800b3a4 <SDMMC_GetCmdResp6+0xe4>)
 800b2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d8:	0a5b      	lsrs	r3, r3, #9
 800b2da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2e2:	4623      	mov	r3, r4
 800b2e4:	1e5c      	subs	r4, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d102      	bne.n	800b2f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2ee:	e052      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0f0      	beq.n	800b2e2 <SDMMC_GetCmdResp6+0x22>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1eb      	bne.n	800b2e2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2204      	movs	r2, #4
 800b31a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b31c:	2304      	movs	r3, #4
 800b31e:	e03a      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d004      	beq.n	800b336 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2201      	movs	r2, #1
 800b330:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b332:	2301      	movs	r3, #1
 800b334:	e02f      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fbf0 	bl	800ab1c <SDIO_GetCommandResponse>
 800b33c:	4603      	mov	r3, r0
 800b33e:	461a      	mov	r2, r3
 800b340:	7afb      	ldrb	r3, [r7, #11]
 800b342:	4293      	cmp	r3, r2
 800b344:	d001      	beq.n	800b34a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b346:	2301      	movs	r3, #1
 800b348:	e025      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	22c5      	movs	r2, #197	; 0xc5
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b350:	2100      	movs	r1, #0
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff fbef 	bl	800ab36 <SDIO_GetResponse>
 800b358:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	0c1b      	lsrs	r3, r3, #16
 800b368:	b29a      	uxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b36e:	2300      	movs	r3, #0
 800b370:	e011      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b37c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b380:	e009      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b38c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b390:	e001      	b.n	800b396 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b396:	4618      	mov	r0, r3
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd90      	pop	{r4, r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	2000004c 	.word	0x2000004c
 800b3a4:	10624dd3 	.word	0x10624dd3

0800b3a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b3a8:	b490      	push	{r4, r7}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3b0:	4b21      	ldr	r3, [pc, #132]	; (800b438 <SDMMC_GetCmdResp7+0x90>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a21      	ldr	r2, [pc, #132]	; (800b43c <SDMMC_GetCmdResp7+0x94>)
 800b3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ba:	0a5b      	lsrs	r3, r3, #9
 800b3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	1e5c      	subs	r4, r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3d0:	e02c      	b.n	800b42c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0f0      	beq.n	800b3c4 <SDMMC_GetCmdResp7+0x1c>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1eb      	bne.n	800b3c4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d004      	beq.n	800b402 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2204      	movs	r2, #4
 800b3fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3fe:	2304      	movs	r3, #4
 800b400:	e014      	b.n	800b42c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d004      	beq.n	800b418 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b414:	2301      	movs	r3, #1
 800b416:	e009      	b.n	800b42c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2240      	movs	r2, #64	; 0x40
 800b428:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b42a:	2300      	movs	r3, #0
  
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bc90      	pop	{r4, r7}
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	2000004c 	.word	0x2000004c
 800b43c:	10624dd3 	.word	0x10624dd3

0800b440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b440:	b084      	sub	sp, #16
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	f107 001c 	add.w	r0, r7, #28
 800b44e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	2b01      	cmp	r3, #1
 800b456:	d122      	bne.n	800b49e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b482:	2b01      	cmp	r3, #1
 800b484:	d105      	bne.n	800b492 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fa7c 	bl	800c990 <USB_CoreReset>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e01a      	b.n	800b4d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 fa70 	bl	800c990 <USB_CoreReset>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
 800b4c6:	e005      	b.n	800b4d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d10b      	bne.n	800b4f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f043 0206 	orr.w	r2, r3, #6
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f043 0220 	orr.w	r2, r3, #32
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4fe:	b004      	add	sp, #16
 800b500:	4770      	bx	lr
	...

0800b504 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	4613      	mov	r3, r2
 800b510:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d165      	bne.n	800b5e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4a41      	ldr	r2, [pc, #260]	; (800b620 <USB_SetTurnaroundTime+0x11c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d906      	bls.n	800b52e <USB_SetTurnaroundTime+0x2a>
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	4a40      	ldr	r2, [pc, #256]	; (800b624 <USB_SetTurnaroundTime+0x120>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d802      	bhi.n	800b52e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b528:	230f      	movs	r3, #15
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	e062      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	4a3c      	ldr	r2, [pc, #240]	; (800b624 <USB_SetTurnaroundTime+0x120>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d906      	bls.n	800b544 <USB_SetTurnaroundTime+0x40>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	4a3b      	ldr	r2, [pc, #236]	; (800b628 <USB_SetTurnaroundTime+0x124>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d802      	bhi.n	800b544 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b53e:	230e      	movs	r3, #14
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	e057      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	4a38      	ldr	r2, [pc, #224]	; (800b628 <USB_SetTurnaroundTime+0x124>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d906      	bls.n	800b55a <USB_SetTurnaroundTime+0x56>
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	4a37      	ldr	r2, [pc, #220]	; (800b62c <USB_SetTurnaroundTime+0x128>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d802      	bhi.n	800b55a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b554:	230d      	movs	r3, #13
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	e04c      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	4a33      	ldr	r2, [pc, #204]	; (800b62c <USB_SetTurnaroundTime+0x128>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d906      	bls.n	800b570 <USB_SetTurnaroundTime+0x6c>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	4a32      	ldr	r2, [pc, #200]	; (800b630 <USB_SetTurnaroundTime+0x12c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d802      	bhi.n	800b570 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b56a:	230c      	movs	r3, #12
 800b56c:	617b      	str	r3, [r7, #20]
 800b56e:	e041      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4a2f      	ldr	r2, [pc, #188]	; (800b630 <USB_SetTurnaroundTime+0x12c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d906      	bls.n	800b586 <USB_SetTurnaroundTime+0x82>
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	4a2e      	ldr	r2, [pc, #184]	; (800b634 <USB_SetTurnaroundTime+0x130>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d802      	bhi.n	800b586 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b580:	230b      	movs	r3, #11
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e036      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4a2a      	ldr	r2, [pc, #168]	; (800b634 <USB_SetTurnaroundTime+0x130>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d906      	bls.n	800b59c <USB_SetTurnaroundTime+0x98>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4a29      	ldr	r2, [pc, #164]	; (800b638 <USB_SetTurnaroundTime+0x134>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d802      	bhi.n	800b59c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b596:	230a      	movs	r3, #10
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	e02b      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4a26      	ldr	r2, [pc, #152]	; (800b638 <USB_SetTurnaroundTime+0x134>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d906      	bls.n	800b5b2 <USB_SetTurnaroundTime+0xae>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4a25      	ldr	r2, [pc, #148]	; (800b63c <USB_SetTurnaroundTime+0x138>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d802      	bhi.n	800b5b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b5ac:	2309      	movs	r3, #9
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e020      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	4a21      	ldr	r2, [pc, #132]	; (800b63c <USB_SetTurnaroundTime+0x138>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d906      	bls.n	800b5c8 <USB_SetTurnaroundTime+0xc4>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4a20      	ldr	r2, [pc, #128]	; (800b640 <USB_SetTurnaroundTime+0x13c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d802      	bhi.n	800b5c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	617b      	str	r3, [r7, #20]
 800b5c6:	e015      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4a1d      	ldr	r2, [pc, #116]	; (800b640 <USB_SetTurnaroundTime+0x13c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d906      	bls.n	800b5de <USB_SetTurnaroundTime+0xda>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4a1c      	ldr	r2, [pc, #112]	; (800b644 <USB_SetTurnaroundTime+0x140>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d802      	bhi.n	800b5de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b5d8:	2307      	movs	r3, #7
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e00a      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b5de:	2306      	movs	r3, #6
 800b5e0:	617b      	str	r3, [r7, #20]
 800b5e2:	e007      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b5ea:	2309      	movs	r3, #9
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e001      	b.n	800b5f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b5f0:	2309      	movs	r3, #9
 800b5f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	029b      	lsls	r3, r3, #10
 800b608:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b60c:	431a      	orrs	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	371c      	adds	r7, #28
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	00d8acbf 	.word	0x00d8acbf
 800b624:	00e4e1bf 	.word	0x00e4e1bf
 800b628:	00f423ff 	.word	0x00f423ff
 800b62c:	0106737f 	.word	0x0106737f
 800b630:	011a499f 	.word	0x011a499f
 800b634:	01312cff 	.word	0x01312cff
 800b638:	014ca43f 	.word	0x014ca43f
 800b63c:	016e35ff 	.word	0x016e35ff
 800b640:	01a6ab1f 	.word	0x01a6ab1f
 800b644:	01e847ff 	.word	0x01e847ff

0800b648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f043 0201 	orr.w	r2, r3, #1
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f023 0201 	bic.w	r2, r3, #1
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d106      	bne.n	800b6b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60da      	str	r2, [r3, #12]
 800b6b6:	e00b      	b.n	800b6d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6b8:	78fb      	ldrb	r3, [r7, #3]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	60da      	str	r2, [r3, #12]
 800b6ca:	e001      	b.n	800b6d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e003      	b.n	800b6d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b6d0:	2032      	movs	r0, #50	; 0x32
 800b6d2:	f7f9 ff43 	bl	800555c <HAL_Delay>

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	613b      	str	r3, [r7, #16]
 800b6fe:	e009      	b.n	800b714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	3340      	adds	r3, #64	; 0x40
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	3301      	adds	r3, #1
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b0e      	cmp	r3, #14
 800b718:	d9f2      	bls.n	800b700 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d112      	bne.n	800b746 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	639a      	str	r2, [r3, #56]	; 0x38
 800b744:	e00b      	b.n	800b75e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b756:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b764:	461a      	mov	r2, r3
 800b766:	2300      	movs	r3, #0
 800b768:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b770:	4619      	mov	r1, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b778:	461a      	mov	r2, r3
 800b77a:	680b      	ldr	r3, [r1, #0]
 800b77c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	2b01      	cmp	r3, #1
 800b782:	d10c      	bne.n	800b79e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d104      	bne.n	800b794 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b78a:	2100      	movs	r1, #0
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f961 	bl	800ba54 <USB_SetDevSpeed>
 800b792:	e008      	b.n	800b7a6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b794:	2101      	movs	r1, #1
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f95c 	bl	800ba54 <USB_SetDevSpeed>
 800b79c:	e003      	b.n	800b7a6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b79e:	2103      	movs	r1, #3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f957 	bl	800ba54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7a6:	2110      	movs	r1, #16
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f90b 	bl	800b9c4 <USB_FlushTxFifo>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f929 	bl	800ba10 <USB_FlushRxFifo>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7da:	461a      	mov	r2, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	e043      	b.n	800b87a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	015a      	lsls	r2, r3, #5
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b808:	d118      	bne.n	800b83c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	4413      	add	r3, r2
 800b818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81c:	461a      	mov	r2, r3
 800b81e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	e013      	b.n	800b84e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b832:	461a      	mov	r2, r3
 800b834:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	e008      	b.n	800b84e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b848:	461a      	mov	r2, r3
 800b84a:	2300      	movs	r3, #0
 800b84c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	015a      	lsls	r2, r3, #5
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4413      	add	r3, r2
 800b856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85a:	461a      	mov	r2, r3
 800b85c:	2300      	movs	r3, #0
 800b85e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4413      	add	r3, r2
 800b868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b86c:	461a      	mov	r2, r3
 800b86e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	3301      	adds	r3, #1
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d3b7      	bcc.n	800b7f2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b882:	2300      	movs	r3, #0
 800b884:	613b      	str	r3, [r7, #16]
 800b886:	e043      	b.n	800b910 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b89a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b89e:	d118      	bne.n	800b8d2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10a      	bne.n	800b8bc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	e013      	b.n	800b8e4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	e008      	b.n	800b8e4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8de:	461a      	mov	r2, r3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b902:	461a      	mov	r2, r3
 800b904:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b908:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	3301      	adds	r3, #1
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	429a      	cmp	r2, r3
 800b916:	d3b7      	bcc.n	800b888 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b92a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d111      	bne.n	800b956 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b938:	461a      	mov	r2, r3
 800b93a:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <USB_DevInit+0x2dc>)
 800b93c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b950:	f043 0303 	orr.w	r3, r3, #3
 800b954:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b962:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	f043 0210 	orr.w	r2, r3, #16
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699a      	ldr	r2, [r3, #24]
 800b97a:	4b11      	ldr	r3, [pc, #68]	; (800b9c0 <USB_DevInit+0x2e0>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	f043 0208 	orr.w	r2, r3, #8
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b996:	2b01      	cmp	r3, #1
 800b998:	d107      	bne.n	800b9aa <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9a2:	f043 0304 	orr.w	r3, r3, #4
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9b6:	b004      	add	sp, #16
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	00800100 	.word	0x00800100
 800b9c0:	803c3800 	.word	0x803c3800

0800b9c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	019b      	lsls	r3, r3, #6
 800b9d6:	f043 0220 	orr.w	r2, r3, #32
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4a09      	ldr	r2, [pc, #36]	; (800ba0c <USB_FlushTxFifo+0x48>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d901      	bls.n	800b9f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e006      	b.n	800b9fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d0f0      	beq.n	800b9de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3714      	adds	r7, #20
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	00030d40 	.word	0x00030d40

0800ba10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2210      	movs	r2, #16
 800ba20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3301      	adds	r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4a09      	ldr	r2, [pc, #36]	; (800ba50 <USB_FlushRxFifo+0x40>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d901      	bls.n	800ba34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e006      	b.n	800ba42 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b10      	cmp	r3, #16
 800ba3e:	d0f0      	beq.n	800ba22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	00030d40 	.word	0x00030d40

0800ba54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba74:	4313      	orrs	r3, r2
 800ba76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b087      	sub	sp, #28
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0306 	and.w	r3, r3, #6
 800ba9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e00a      	b.n	800bac2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d002      	beq.n	800bab8 <USB_GetDevSpeed+0x32>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b06      	cmp	r3, #6
 800bab6:	d102      	bne.n	800babe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bab8:	2302      	movs	r3, #2
 800baba:	75fb      	strb	r3, [r7, #23]
 800babc:	e001      	b.n	800bac2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800babe:	230f      	movs	r3, #15
 800bac0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	785b      	ldrb	r3, [r3, #1]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d13a      	bne.n	800bb62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	68f9      	ldr	r1, [r7, #12]
 800bb06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d155      	bne.n	800bbd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	78db      	ldrb	r3, [r3, #3]
 800bb3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	059b      	lsls	r3, r3, #22
 800bb46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	e036      	b.n	800bbd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb68:	69da      	ldr	r2, [r3, #28]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f003 030f 	and.w	r3, r3, #15
 800bb72:	2101      	movs	r1, #1
 800bb74:	fa01 f303 	lsl.w	r3, r1, r3
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb80:	4313      	orrs	r3, r2
 800bb82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d11a      	bne.n	800bbd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	015a      	lsls	r2, r3, #5
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4413      	add	r3, r2
 800bba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	78db      	ldrb	r3, [r3, #3]
 800bbb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	0151      	lsls	r1, r2, #5
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	440a      	add	r2, r1
 800bbc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d135      	bne.n	800bc68 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 030f 	and.w	r3, r3, #15
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	43db      	mvns	r3, r3
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc26:	69da      	ldr	r2, [r3, #28]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 030f 	and.w	r3, r3, #15
 800bc30:	2101      	movs	r1, #1
 800bc32:	fa01 f303 	lsl.w	r3, r1, r3
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	43db      	mvns	r3, r3
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc40:	4013      	ands	r3, r2
 800bc42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	0159      	lsls	r1, r3, #5
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	440b      	add	r3, r1
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4b1f      	ldr	r3, [pc, #124]	; (800bce0 <USB_DeactivateEndpoint+0x100>)
 800bc62:	4013      	ands	r3, r2
 800bc64:	600b      	str	r3, [r1, #0]
 800bc66:	e034      	b.n	800bcd2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 030f 	and.w	r3, r3, #15
 800bc78:	2101      	movs	r1, #1
 800bc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	43db      	mvns	r3, r3
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc88:	4013      	ands	r3, r2
 800bc8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	69da      	ldr	r2, [r3, #28]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	f003 030f 	and.w	r3, r3, #15
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bca2:	041b      	lsls	r3, r3, #16
 800bca4:	43db      	mvns	r3, r3
 800bca6:	68f9      	ldr	r1, [r7, #12]
 800bca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcac:	4013      	ands	r3, r2
 800bcae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	0159      	lsls	r1, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	440b      	add	r3, r1
 800bcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcca:	4619      	mov	r1, r3
 800bccc:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <USB_DeactivateEndpoint+0x104>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	ec337800 	.word	0xec337800
 800bce4:	eff37800 	.word	0xeff37800

0800bce8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	; 0x28
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	f040 815c 	bne.w	800bfc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d132      	bne.n	800bd78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	015a      	lsls	r2, r3, #5
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	0151      	lsls	r1, r2, #5
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	440a      	add	r2, r1
 800bd28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	015a      	lsls	r2, r3, #5
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	0151      	lsls	r1, r2, #5
 800bd48:	69fa      	ldr	r2, [r7, #28]
 800bd4a:	440a      	add	r2, r1
 800bd4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	0151      	lsls	r1, r2, #5
 800bd68:	69fa      	ldr	r2, [r7, #28]
 800bd6a:	440a      	add	r2, r1
 800bd6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd70:	0cdb      	lsrs	r3, r3, #19
 800bd72:	04db      	lsls	r3, r3, #19
 800bd74:	6113      	str	r3, [r2, #16]
 800bd76:	e074      	b.n	800be62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	0151      	lsls	r1, r2, #5
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	440a      	add	r2, r1
 800bd8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd92:	0cdb      	lsrs	r3, r3, #19
 800bd94:	04db      	lsls	r3, r3, #19
 800bd96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	0151      	lsls	r1, r2, #5
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	440a      	add	r2, r1
 800bdae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc8:	691a      	ldr	r2, [r3, #16]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	6959      	ldr	r1, [r3, #20]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	440b      	add	r3, r1
 800bdd4:	1e59      	subs	r1, r3, #1
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	fbb1 f3f3 	udiv	r3, r1, r3
 800bdde:	04d9      	lsls	r1, r3, #19
 800bde0:	4b9d      	ldr	r3, [pc, #628]	; (800c058 <USB_EPStartXfer+0x370>)
 800bde2:	400b      	ands	r3, r1
 800bde4:	69b9      	ldr	r1, [r7, #24]
 800bde6:	0148      	lsls	r0, r1, #5
 800bde8:	69f9      	ldr	r1, [r7, #28]
 800bdea:	4401      	add	r1, r0
 800bdec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be00:	691a      	ldr	r2, [r3, #16]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be0a:	69b9      	ldr	r1, [r7, #24]
 800be0c:	0148      	lsls	r0, r1, #5
 800be0e:	69f9      	ldr	r1, [r7, #28]
 800be10:	4401      	add	r1, r0
 800be12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be16:	4313      	orrs	r3, r2
 800be18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	78db      	ldrb	r3, [r3, #3]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d11f      	bne.n	800be62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	0151      	lsls	r1, r2, #5
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	440a      	add	r2, r1
 800be38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800be40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	015a      	lsls	r2, r3, #5
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	4413      	add	r3, r2
 800be4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	69ba      	ldr	r2, [r7, #24]
 800be52:	0151      	lsls	r1, r2, #5
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	440a      	add	r2, r1
 800be58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d14b      	bne.n	800bf00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d009      	beq.n	800be84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	015a      	lsls	r2, r3, #5
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	4413      	add	r3, r2
 800be78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be7c:	461a      	mov	r2, r3
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	78db      	ldrb	r3, [r3, #3]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d128      	bne.n	800bede <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d110      	bne.n	800bebe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	0151      	lsls	r1, r2, #5
 800beae:	69fa      	ldr	r2, [r7, #28]
 800beb0:	440a      	add	r2, r1
 800beb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	e00f      	b.n	800bede <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	015a      	lsls	r2, r3, #5
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	0151      	lsls	r1, r2, #5
 800bed0:	69fa      	ldr	r2, [r7, #28]
 800bed2:	440a      	add	r2, r1
 800bed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bedc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	015a      	lsls	r2, r3, #5
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	4413      	add	r3, r2
 800bee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	0151      	lsls	r1, r2, #5
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	440a      	add	r2, r1
 800bef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	e12f      	b.n	800c160 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	0151      	lsls	r1, r2, #5
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	440a      	add	r2, r1
 800bf16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	78db      	ldrb	r3, [r3, #3]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d015      	beq.n	800bf54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 8117 	beq.w	800c160 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	f003 030f 	and.w	r3, r3, #15
 800bf42:	2101      	movs	r1, #1
 800bf44:	fa01 f303 	lsl.w	r3, r1, r3
 800bf48:	69f9      	ldr	r1, [r7, #28]
 800bf4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	634b      	str	r3, [r1, #52]	; 0x34
 800bf52:	e105      	b.n	800c160 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d110      	bne.n	800bf86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	0151      	lsls	r1, r2, #5
 800bf76:	69fa      	ldr	r2, [r7, #28]
 800bf78:	440a      	add	r2, r1
 800bf7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf82:	6013      	str	r3, [r2, #0]
 800bf84:	e00f      	b.n	800bfa6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	0151      	lsls	r1, r2, #5
 800bf98:	69fa      	ldr	r2, [r7, #28]
 800bf9a:	440a      	add	r2, r1
 800bf9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	68d9      	ldr	r1, [r3, #12]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	b298      	uxth	r0, r3
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4603      	mov	r3, r0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 fa2b 	bl	800c416 <USB_WritePacket>
 800bfc0:	e0ce      	b.n	800c160 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	0151      	lsls	r1, r2, #5
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	440a      	add	r2, r1
 800bfd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfdc:	0cdb      	lsrs	r3, r3, #19
 800bfde:	04db      	lsls	r3, r3, #19
 800bfe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	015a      	lsls	r2, r3, #5
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	4413      	add	r3, r2
 800bfea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	0151      	lsls	r1, r2, #5
 800bff4:	69fa      	ldr	r2, [r7, #28]
 800bff6:	440a      	add	r2, r1
 800bff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c004:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d126      	bne.n	800c05c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4413      	add	r3, r2
 800c016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01a:	691a      	ldr	r2, [r3, #16]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c024:	69b9      	ldr	r1, [r7, #24]
 800c026:	0148      	lsls	r0, r1, #5
 800c028:	69f9      	ldr	r1, [r7, #28]
 800c02a:	4401      	add	r1, r0
 800c02c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c030:	4313      	orrs	r3, r2
 800c032:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c052:	6113      	str	r3, [r2, #16]
 800c054:	e036      	b.n	800c0c4 <USB_EPStartXfer+0x3dc>
 800c056:	bf00      	nop
 800c058:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	695a      	ldr	r2, [r3, #20]
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	4413      	add	r3, r2
 800c066:	1e5a      	subs	r2, r3, #1
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c070:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	8afb      	ldrh	r3, [r7, #22]
 800c082:	04d9      	lsls	r1, r3, #19
 800c084:	4b39      	ldr	r3, [pc, #228]	; (800c16c <USB_EPStartXfer+0x484>)
 800c086:	400b      	ands	r3, r1
 800c088:	69b9      	ldr	r1, [r7, #24]
 800c08a:	0148      	lsls	r0, r1, #5
 800c08c:	69f9      	ldr	r1, [r7, #28]
 800c08e:	4401      	add	r1, r0
 800c090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c094:	4313      	orrs	r3, r2
 800c096:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a4:	691a      	ldr	r2, [r3, #16]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	8af9      	ldrh	r1, [r7, #22]
 800c0ac:	fb01 f303 	mul.w	r3, r1, r3
 800c0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0b4:	69b9      	ldr	r1, [r7, #24]
 800c0b6:	0148      	lsls	r0, r1, #5
 800c0b8:	69f9      	ldr	r1, [r7, #28]
 800c0ba:	4401      	add	r1, r0
 800c0bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d10d      	bne.n	800c0e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	68d9      	ldr	r1, [r3, #12]
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	78db      	ldrb	r3, [r3, #3]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d128      	bne.n	800c140 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d110      	bne.n	800c120 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	015a      	lsls	r2, r3, #5
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	4413      	add	r3, r2
 800c106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	0151      	lsls	r1, r2, #5
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	440a      	add	r2, r1
 800c114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	e00f      	b.n	800c140 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	015a      	lsls	r2, r3, #5
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	4413      	add	r3, r2
 800c128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	0151      	lsls	r1, r2, #5
 800c132:	69fa      	ldr	r2, [r7, #28]
 800c134:	440a      	add	r2, r1
 800c136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c13a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c13e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69ba      	ldr	r2, [r7, #24]
 800c150:	0151      	lsls	r1, r2, #5
 800c152:	69fa      	ldr	r2, [r7, #28]
 800c154:	440a      	add	r2, r1
 800c156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c15a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c15e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3720      	adds	r7, #32
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	1ff80000 	.word	0x1ff80000

0800c170 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	785b      	ldrb	r3, [r3, #1]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	f040 80cd 	bne.w	800c32c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	695b      	ldr	r3, [r3, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d132      	bne.n	800c200 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	0151      	lsls	r1, r2, #5
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	440a      	add	r2, r1
 800c1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f8:	0cdb      	lsrs	r3, r3, #19
 800c1fa:	04db      	lsls	r3, r3, #19
 800c1fc:	6113      	str	r3, [r2, #16]
 800c1fe:	e04e      	b.n	800c29e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	0151      	lsls	r1, r2, #5
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	440a      	add	r2, r1
 800c216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c21a:	0cdb      	lsrs	r3, r3, #19
 800c21c:	04db      	lsls	r3, r3, #19
 800c21e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	0151      	lsls	r1, r2, #5
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	440a      	add	r2, r1
 800c236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c23a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c23e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c242:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	695a      	ldr	r2, [r3, #20]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d903      	bls.n	800c258 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	689a      	ldr	r2, [r3, #8]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	0151      	lsls	r1, r2, #5
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	440a      	add	r2, r1
 800c26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c28e:	6939      	ldr	r1, [r7, #16]
 800c290:	0148      	lsls	r0, r1, #5
 800c292:	6979      	ldr	r1, [r7, #20]
 800c294:	4401      	add	r1, r0
 800c296:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c29a:	4313      	orrs	r3, r2
 800c29c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d11e      	bne.n	800c2e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d009      	beq.n	800c2c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	0151      	lsls	r1, r2, #5
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	440a      	add	r2, r1
 800c2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e092      	b.n	800c408 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c300:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d07e      	beq.n	800c408 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 030f 	and.w	r3, r3, #15
 800c31a:	2101      	movs	r1, #1
 800c31c:	fa01 f303 	lsl.w	r3, r1, r3
 800c320:	6979      	ldr	r1, [r7, #20]
 800c322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c326:	4313      	orrs	r3, r2
 800c328:	634b      	str	r3, [r1, #52]	; 0x34
 800c32a:	e06d      	b.n	800c408 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	440a      	add	r2, r1
 800c342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c346:	0cdb      	lsrs	r3, r3, #19
 800c348:	04db      	lsls	r3, r3, #19
 800c34a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	4413      	add	r3, r2
 800c354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	0151      	lsls	r1, r2, #5
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	440a      	add	r2, r1
 800c362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c36a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c36e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d003      	beq.n	800c380 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	0151      	lsls	r1, r2, #5
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	440a      	add	r2, r1
 800c396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c39a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c39e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	015a      	lsls	r2, r3, #5
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ac:	691a      	ldr	r2, [r3, #16]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3b6:	6939      	ldr	r1, [r7, #16]
 800c3b8:	0148      	lsls	r0, r1, #5
 800c3ba:	6979      	ldr	r1, [r7, #20]
 800c3bc:	4401      	add	r1, r0
 800c3be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d10d      	bne.n	800c3e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	68d9      	ldr	r1, [r3, #12]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e4:	460a      	mov	r2, r1
 800c3e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	015a      	lsls	r2, r3, #5
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	0151      	lsls	r1, r2, #5
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	440a      	add	r2, r1
 800c3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c416:	b480      	push	{r7}
 800c418:	b089      	sub	sp, #36	; 0x24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	4611      	mov	r1, r2
 800c422:	461a      	mov	r2, r3
 800c424:	460b      	mov	r3, r1
 800c426:	71fb      	strb	r3, [r7, #7]
 800c428:	4613      	mov	r3, r2
 800c42a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d11a      	bne.n	800c472 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c43c:	88bb      	ldrh	r3, [r7, #4]
 800c43e:	3303      	adds	r3, #3
 800c440:	089b      	lsrs	r3, r3, #2
 800c442:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c444:	2300      	movs	r3, #0
 800c446:	61bb      	str	r3, [r7, #24]
 800c448:	e00f      	b.n	800c46a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	031a      	lsls	r2, r3, #12
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	4413      	add	r3, r2
 800c452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c456:	461a      	mov	r2, r3
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	3304      	adds	r3, #4
 800c462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	3301      	adds	r3, #1
 800c468:	61bb      	str	r3, [r7, #24]
 800c46a:	69ba      	ldr	r2, [r7, #24]
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d3eb      	bcc.n	800c44a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3724      	adds	r7, #36	; 0x24
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c480:	b480      	push	{r7}
 800c482:	b089      	sub	sp, #36	; 0x24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c496:	88fb      	ldrh	r3, [r7, #6]
 800c498:	3303      	adds	r3, #3
 800c49a:	089b      	lsrs	r3, r3, #2
 800c49c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c49e:	2300      	movs	r3, #0
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e00b      	b.n	800c4bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	69ba      	ldr	r2, [r7, #24]
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d3ef      	bcc.n	800c4a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c4c4:	69fb      	ldr	r3, [r7, #28]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3724      	adds	r7, #36	; 0x24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b085      	sub	sp, #20
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	785b      	ldrb	r3, [r3, #1]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d12c      	bne.n	800c548 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	db12      	blt.n	800c526 <USB_EPSetStall+0x54>
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00f      	beq.n	800c526 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	0151      	lsls	r1, r2, #5
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	440a      	add	r2, r1
 800c51c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c520:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c524:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	015a      	lsls	r2, r3, #5
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	0151      	lsls	r1, r2, #5
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	440a      	add	r2, r1
 800c53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	e02b      	b.n	800c5a0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	db12      	blt.n	800c580 <USB_EPSetStall+0xae>
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00f      	beq.n	800c580 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	0151      	lsls	r1, r2, #5
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	440a      	add	r2, r1
 800c576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c57a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c57e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	0151      	lsls	r1, r2, #5
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	440a      	add	r2, r1
 800c596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c59a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c59e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b085      	sub	sp, #20
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	785b      	ldrb	r3, [r3, #1]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d128      	bne.n	800c61c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	015a      	lsls	r2, r3, #5
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	0151      	lsls	r1, r2, #5
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	440a      	add	r2, r1
 800c5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	78db      	ldrb	r3, [r3, #3]
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d003      	beq.n	800c5fa <USB_EPClearStall+0x4c>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	78db      	ldrb	r3, [r3, #3]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d138      	bne.n	800c66c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	0151      	lsls	r1, r2, #5
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	440a      	add	r2, r1
 800c610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	e027      	b.n	800c66c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	0151      	lsls	r1, r2, #5
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	440a      	add	r2, r1
 800c632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c63a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	78db      	ldrb	r3, [r3, #3]
 800c640:	2b03      	cmp	r3, #3
 800c642:	d003      	beq.n	800c64c <USB_EPClearStall+0x9e>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	78db      	ldrb	r3, [r3, #3]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d10f      	bne.n	800c66c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	0151      	lsls	r1, r2, #5
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	440a      	add	r2, r1
 800c662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c66a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c698:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c69c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c6ae:	68f9      	ldr	r1, [r7, #12]
 800c6b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6e0:	f023 0302 	bic.w	r3, r3, #2
 800c6e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c6e6:	2003      	movs	r0, #3
 800c6e8:	f7f8 ff38 	bl	800555c <HAL_Delay>

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c710:	f043 0302 	orr.w	r3, r3, #2
 800c714:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c716:	2003      	movs	r0, #3
 800c718:	f7f8 ff20 	bl	800555c <HAL_Delay>

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c726:	b480      	push	{r7}
 800c728:	b085      	sub	sp, #20
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4013      	ands	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c73e:	68fb      	ldr	r3, [r7, #12]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	4013      	ands	r3, r2
 800c76e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	0c1b      	lsrs	r3, r3, #16
}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	b29b      	uxth	r3, r3
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c7c4:	78fb      	ldrb	r3, [r7, #3]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	4013      	ands	r3, r2
 800c7e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c812:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	f003 030f 	and.w	r3, r3, #15
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	fa22 f303 	lsr.w	r3, r2, r3
 800c820:	01db      	lsls	r3, r3, #7
 800c822:	b2db      	uxtb	r3, r3
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	4313      	orrs	r3, r2
 800c828:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c82a:	78fb      	ldrb	r3, [r7, #3]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	4013      	ands	r3, r2
 800c83c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c83e:	68bb      	ldr	r3, [r7, #8]
}
 800c840:	4618      	mov	r0, r3
 800c842:	371c      	adds	r7, #28
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	f003 0301 	and.w	r3, r3, #1
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c886:	f023 0307 	bic.w	r3, r3, #7
 800c88a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	f003 0306 	and.w	r3, r3, #6
 800c898:	2b04      	cmp	r3, #4
 800c89a:	d109      	bne.n	800c8b0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8aa:	f043 0303 	orr.w	r3, r3, #3
 800c8ae:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
	...

0800c8d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	333c      	adds	r3, #60	; 0x3c
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	4a26      	ldr	r2, [pc, #152]	; (800c98c <USB_EP0_OutStart+0xb8>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d90a      	bls.n	800c90e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c908:	d101      	bne.n	800c90e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e037      	b.n	800c97e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c914:	461a      	mov	r2, r3
 800c916:	2300      	movs	r3, #0
 800c918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c92c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c93c:	f043 0318 	orr.w	r3, r3, #24
 800c940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c950:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c954:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c956:	7afb      	ldrb	r3, [r7, #11]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d10f      	bne.n	800c97c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c976:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c97a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	4f54300a 	.word	0x4f54300a

0800c990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <USB_CoreReset+0x64>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d901      	bls.n	800c9ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e01b      	b.n	800c9e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	daf2      	bge.n	800c99c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	f043 0201 	orr.w	r2, r3, #1
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a09      	ldr	r2, [pc, #36]	; (800c9f4 <USB_CoreReset+0x64>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d901      	bls.n	800c9d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e006      	b.n	800c9e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d0f0      	beq.n	800c9c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	00030d40 	.word	0x00030d40

0800c9f8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c9fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <FatFsInit>:

/* USER CODE BEGIN Application */
     
SD_error FatFsInit(void) {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af02      	add	r7, sp, #8
	// Initializing Fat Filesystem
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 800ca0e:	4914      	ldr	r1, [pc, #80]	; (800ca60 <FatFsInit+0x58>)
 800ca10:	4814      	ldr	r0, [pc, #80]	; (800ca64 <FatFsInit+0x5c>)
 800ca12:	f009 fda7 	bl	8016564 <FATFS_LinkDriver>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d11c      	bne.n	800ca56 <FatFsInit+0x4e>
		FRESULT res;
		/* Attempt to Mount SD Drive */
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	4910      	ldr	r1, [pc, #64]	; (800ca60 <FatFsInit+0x58>)
 800ca20:	4811      	ldr	r0, [pc, #68]	; (800ca68 <FatFsInit+0x60>)
 800ca22:	f008 fa73 	bl	8014f0c <f_mount>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00f      	beq.n	800ca4c <FatFsInit+0x44>
			 /* Failed to mount drive */
			 res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800ca2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4b0e      	ldr	r3, [pc, #56]	; (800ca6c <FatFsInit+0x64>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	2107      	movs	r1, #7
 800ca38:	4809      	ldr	r0, [pc, #36]	; (800ca60 <FatFsInit+0x58>)
 800ca3a:	f009 f87f 	bl	8015b3c <f_mkfs>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
			 if (res != FR_OK) {
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <FatFsInit+0x44>
				 /* Error, failed to initialize filesystem */
				 return SD_ERR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e005      	b.n	800ca58 <FatFsInit+0x50>
			 }
		 }
		 fatFsModInit = true;
 800ca4c:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <FatFsInit+0x68>)
 800ca4e:	2201      	movs	r2, #1
 800ca50:	701a      	strb	r2, [r3, #0]
	} else {
		// Failed to link SD Driver
		return SD_ERR;
	}
	return SD_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	e000      	b.n	800ca58 <FatFsInit+0x50>
		return SD_ERR;
 800ca56:	2301      	movs	r3, #1
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20001344 	.word	0x20001344
 800ca64:	0801b670 	.word	0x0801b670
 800ca68:	20001578 	.word	0x20001578
 800ca6c:	20001144 	.word	0x20001144
 800ca70:	20000740 	.word	0x20000740

0800ca74 <FatFsDeInit>:

SD_error FatFsDeInit(void) {
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0
	fatFsModInit = false;
 800ca78:	4b04      	ldr	r3, [pc, #16]	; (800ca8c <FatFsDeInit+0x18>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	701a      	strb	r2, [r3, #0]
	return FATFS_UnLinkDriver(SDPath);
 800ca7e:	4804      	ldr	r0, [pc, #16]	; (800ca90 <FatFsDeInit+0x1c>)
 800ca80:	f009 fdb8 	bl	80165f4 <FATFS_UnLinkDriver>
 800ca84:	4603      	mov	r3, r0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000740 	.word	0x20000740
 800ca90:	20001344 	.word	0x20001344

0800ca94 <FatFsIsModuleInit>:

	// Success
	return SD_OK;
}

bool FatFsIsModuleInit(void) {
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
	return fatFsModInit;
 800ca98:	4b03      	ldr	r3, [pc, #12]	; (800caa8 <FatFsIsModuleInit+0x14>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20000740 	.word	0x20000740

0800caac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cab6:	f000 f89e 	bl	800cbf6 <BSP_SD_IsDetected>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d001      	beq.n	800cac4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cac0:	2301      	movs	r3, #1
 800cac2:	e005      	b.n	800cad0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cac4:	4804      	ldr	r0, [pc, #16]	; (800cad8 <BSP_SD_Init+0x2c>)
 800cac6:	f7fc f851 	bl	8008b6c <HAL_SD_Init>
 800caca:	4603      	mov	r3, r0
 800cacc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cace:	79fb      	ldrb	r3, [r7, #7]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20001060 	.word	0x20001060

0800cadc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	68f9      	ldr	r1, [r7, #12]
 800caf8:	4806      	ldr	r0, [pc, #24]	; (800cb14 <BSP_SD_ReadBlocks+0x38>)
 800cafa:	f7fc f8c7 	bl	8008c8c <HAL_SD_ReadBlocks>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20001060 	.word	0x20001060

0800cb18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af02      	add	r7, sp, #8
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	68f9      	ldr	r1, [r7, #12]
 800cb34:	4806      	ldr	r0, [pc, #24]	; (800cb50 <BSP_SD_WriteBlocks+0x38>)
 800cb36:	f7fc faa3 	bl	8009080 <HAL_SD_WriteBlocks>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	20001060 	.word	0x20001060

0800cb54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb58:	4805      	ldr	r0, [pc, #20]	; (800cb70 <BSP_SD_GetCardState+0x1c>)
 800cb5a:	f7fc ff93 	bl	8009a84 <HAL_SD_GetCardState>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	bf14      	ite	ne
 800cb64:	2301      	movne	r3, #1
 800cb66:	2300      	moveq	r3, #0
 800cb68:	b2db      	uxtb	r3, r3
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20001060 	.word	0x20001060

0800cb74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4803      	ldr	r0, [pc, #12]	; (800cb8c <BSP_SD_GetCardInfo+0x18>)
 800cb80:	f7fc ff54 	bl	8009a2c <HAL_SD_GetCardInfo>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	20001060 	.word	0x20001060

0800cb90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cb98:	f000 f818 	bl	800cbcc <BSP_SD_AbortCallback>
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cbac:	f000 f815 	bl	800cbda <BSP_SD_WriteCpltCallback>
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cbc0:	f000 f812 	bl	800cbe8 <BSP_SD_ReadCpltCallback>
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	af00      	add	r7, sp, #0

}
 800cbd0:	bf00      	nop
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800cbda:	b480      	push	{r7}
 800cbdc:	af00      	add	r7, sp, #0

}
 800cbde:	bf00      	nop
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0

}
 800cbec:	bf00      	nop
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b083      	sub	sp, #12
 800cbfa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	b2db      	uxtb	r3, r3
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc1a:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <SD_CheckStatus+0x38>)
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc20:	f7ff ff98 	bl	800cb54 <BSP_SD_GetCardState>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d107      	bne.n	800cc3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc2a:	4b07      	ldr	r3, [pc, #28]	; (800cc48 <SD_CheckStatus+0x38>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f023 0301 	bic.w	r3, r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <SD_CheckStatus+0x38>)
 800cc38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc3a:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <SD_CheckStatus+0x38>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	b2db      	uxtb	r3, r3
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20000055 	.word	0x20000055

0800cc4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800cc56:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <SD_initialize+0x38>)
 800cc58:	2201      	movs	r2, #1
 800cc5a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cc5c:	f7ff ff26 	bl	800caac <BSP_SD_Init>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d107      	bne.n	800cc76 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7ff ffd1 	bl	800cc10 <SD_CheckStatus>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	461a      	mov	r2, r3
 800cc72:	4b04      	ldr	r3, [pc, #16]	; (800cc84 <SD_initialize+0x38>)
 800cc74:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800cc76:	4b03      	ldr	r3, [pc, #12]	; (800cc84 <SD_initialize+0x38>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	b2db      	uxtb	r3, r3
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20000055 	.word	0x20000055

0800cc88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ffbb 	bl	800cc10 <SD_CheckStatus>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ccb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	68b8      	ldr	r0, [r7, #8]
 800ccc2:	f7ff ff0b 	bl	800cadc <BSP_SD_ReadBlocks>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d107      	bne.n	800ccdc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cccc:	bf00      	nop
 800ccce:	f7ff ff41 	bl	800cb54 <BSP_SD_GetCardState>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1fa      	bne.n	800ccce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b086      	sub	sp, #24
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	68b8      	ldr	r0, [r7, #8]
 800cd04:	f7ff ff08 	bl	800cb18 <BSP_SD_WriteBlocks>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d107      	bne.n	800cd1e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cd0e:	bf00      	nop
 800cd10:	f7ff ff20 	bl	800cb54 <BSP_SD_GetCardState>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1fa      	bne.n	800cd10 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08c      	sub	sp, #48	; 0x30
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	603a      	str	r2, [r7, #0]
 800cd32:	71fb      	strb	r3, [r7, #7]
 800cd34:	460b      	mov	r3, r1
 800cd36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd3e:	4b25      	ldr	r3, [pc, #148]	; (800cdd4 <SD_ioctl+0xac>)
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	f003 0301 	and.w	r3, r3, #1
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <SD_ioctl+0x28>
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e03c      	b.n	800cdca <SD_ioctl+0xa2>

  switch (cmd)
 800cd50:	79bb      	ldrb	r3, [r7, #6]
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d834      	bhi.n	800cdc0 <SD_ioctl+0x98>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <SD_ioctl+0x34>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cd6d 	.word	0x0800cd6d
 800cd60:	0800cd75 	.word	0x0800cd75
 800cd64:	0800cd8d 	.word	0x0800cd8d
 800cd68:	0800cda7 	.word	0x0800cda7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd72:	e028      	b.n	800cdc6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd74:	f107 030c 	add.w	r3, r7, #12
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff fefb 	bl	800cb74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd8a:	e01c      	b.n	800cdc6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd8c:	f107 030c 	add.w	r3, r7, #12
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff feef 	bl	800cb74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cda4:	e00f      	b.n	800cdc6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cda6:	f107 030c 	add.w	r3, r7, #12
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fee2 	bl	800cb74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	0a5a      	lsrs	r2, r3, #9
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdbe:	e002      	b.n	800cdc6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cdc0:	2304      	movs	r3, #4
 800cdc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cdc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3730      	adds	r7, #48	; 0x30
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000055 	.word	0x20000055

0800cdd8 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800cddc:	4b07      	ldr	r3, [pc, #28]	; (800cdfc <rfalAnalogConfigInitialize+0x24>)
 800cdde:	4a08      	ldr	r2, [pc, #32]	; (800ce00 <rfalAnalogConfigInitialize+0x28>)
 800cde0:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800cde2:	4b06      	ldr	r3, [pc, #24]	; (800cdfc <rfalAnalogConfigInitialize+0x24>)
 800cde4:	f240 22bb 	movw	r2, #699	; 0x2bb
 800cde8:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800cdea:	4b04      	ldr	r3, [pc, #16]	; (800cdfc <rfalAnalogConfigInitialize+0x24>)
 800cdec:	2201      	movs	r2, #1
 800cdee:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800cdf0:	bf00      	nop
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	20000744 	.word	0x20000744
 800ce00:	0801b684 	.word	0x0801b684

0800ce04 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800ce12:	2300      	movs	r3, #0
 800ce14:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800ce16:	4b4b      	ldr	r3, [pc, #300]	; (800cf44 <rfalSetAnalogConfig+0x140>)
 800ce18:	799b      	ldrb	r3, [r3, #6]
 800ce1a:	f083 0301 	eor.w	r3, r3, #1
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800ce24:	2305      	movs	r3, #5
 800ce26:	e089      	b.n	800cf3c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800ce28:	f107 020e 	add.w	r2, r7, #14
 800ce2c:	88fb      	ldrh	r3, [r7, #6]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f889 	bl	800cf48 <rfalAnalogConfigSearch>
 800ce36:	4603      	mov	r3, r0
 800ce38:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800ce3a:	7d3b      	ldrb	r3, [r7, #20]
 800ce3c:	2bff      	cmp	r3, #255	; 0xff
 800ce3e:	d07b      	beq.n	800cf38 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800ce40:	4b40      	ldr	r3, [pc, #256]	; (800cf44 <rfalSetAnalogConfig+0x140>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	461a      	mov	r2, r3
 800ce46:	89fb      	ldrh	r3, [r7, #14]
 800ce48:	4413      	add	r3, r2
 800ce4a:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800ce4c:	7d3b      	ldrb	r3, [r7, #20]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	89fb      	ldrh	r3, [r7, #14]
 800ce56:	4413      	add	r3, r2
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800ce5c:	4b39      	ldr	r3, [pc, #228]	; (800cf44 <rfalSetAnalogConfig+0x140>)
 800ce5e:	889b      	ldrh	r3, [r3, #4]
 800ce60:	3301      	adds	r3, #1
 800ce62:	89fa      	ldrh	r2, [r7, #14]
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d201      	bcs.n	800ce6c <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e067      	b.n	800cf3c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	757b      	strb	r3, [r7, #21]
 800ce70:	e05d      	b.n	800cf2e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800ce72:	7d7b      	ldrb	r3, [r7, #21]
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	4413      	add	r3, r2
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	021b      	lsls	r3, r3, #8
 800ce7e:	7d7a      	ldrb	r2, [r7, #21]
 800ce80:	0092      	lsls	r2, r2, #2
 800ce82:	6939      	ldr	r1, [r7, #16]
 800ce84:	440a      	add	r2, r1
 800ce86:	7852      	ldrb	r2, [r2, #1]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d026      	beq.n	800cee0 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800ce92:	7d7b      	ldrb	r3, [r7, #21]
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	4413      	add	r3, r2
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	021b      	lsls	r3, r3, #8
 800ce9e:	b21a      	sxth	r2, r3
 800cea0:	7d7b      	ldrb	r3, [r7, #21]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	6939      	ldr	r1, [r7, #16]
 800cea6:	440b      	add	r3, r1
 800cea8:	785b      	ldrb	r3, [r3, #1]
 800ceaa:	b21b      	sxth	r3, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	b21b      	sxth	r3, r3
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceb6:	b298      	uxth	r0, r3
 800ceb8:	7d7b      	ldrb	r3, [r7, #21]
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4413      	add	r3, r2
 800cec0:	7899      	ldrb	r1, [r3, #2]
 800cec2:	7d7b      	ldrb	r3, [r7, #21]
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	4413      	add	r3, r2
 800ceca:	78db      	ldrb	r3, [r3, #3]
 800cecc:	461a      	mov	r2, r3
 800cece:	f002 ffa1 	bl	800fe14 <rfalChipChangeTestRegBits>
 800ced2:	4603      	mov	r3, r0
 800ced4:	82fb      	strh	r3, [r7, #22]
 800ced6:	8afb      	ldrh	r3, [r7, #22]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d025      	beq.n	800cf28 <rfalSetAnalogConfig+0x124>
 800cedc:	8afb      	ldrh	r3, [r7, #22]
 800cede:	e02d      	b.n	800cf3c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800cee0:	7d7b      	ldrb	r3, [r7, #21]
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	4413      	add	r3, r2
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	b21a      	sxth	r2, r3
 800ceee:	7d7b      	ldrb	r3, [r7, #21]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	6939      	ldr	r1, [r7, #16]
 800cef4:	440b      	add	r3, r1
 800cef6:	785b      	ldrb	r3, [r3, #1]
 800cef8:	b21b      	sxth	r3, r3
 800cefa:	4313      	orrs	r3, r2
 800cefc:	b21b      	sxth	r3, r3
 800cefe:	b298      	uxth	r0, r3
 800cf00:	7d7b      	ldrb	r3, [r7, #21]
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4413      	add	r3, r2
 800cf08:	7899      	ldrb	r1, [r3, #2]
 800cf0a:	7d7b      	ldrb	r3, [r7, #21]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	4413      	add	r3, r2
 800cf12:	78db      	ldrb	r3, [r3, #3]
 800cf14:	461a      	mov	r2, r3
 800cf16:	f002 ff5b 	bl	800fdd0 <rfalChipChangeRegBits>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	82fb      	strh	r3, [r7, #22]
 800cf1e:	8afb      	ldrh	r3, [r7, #22]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <rfalSetAnalogConfig+0x124>
 800cf24:	8afb      	ldrh	r3, [r7, #22]
 800cf26:	e009      	b.n	800cf3c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800cf28:	7d7b      	ldrb	r3, [r7, #21]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	757b      	strb	r3, [r7, #21]
 800cf2e:	7d7a      	ldrb	r2, [r7, #21]
 800cf30:	7d3b      	ldrb	r3, [r7, #20]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d39d      	bcc.n	800ce72 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800cf36:	e777      	b.n	800ce28 <rfalSetAnalogConfig+0x24>
            break;
 800cf38:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800cf3a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20000744 	.word	0x20000744

0800cf48 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6039      	str	r1, [r7, #0]
 800cf52:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800cf54:	4b31      	ldr	r3, [pc, #196]	; (800d01c <rfalAnalogConfigSearch+0xd4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800cf60:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00a      	beq.n	800cf7c <rfalAnalogConfigSearch+0x34>
 800cf66:	88fb      	ldrh	r3, [r7, #6]
 800cf68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf74:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	e001      	b.n	800cf80 <rfalAnalogConfigSearch+0x38>
 800cf7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf80:	88fb      	ldrh	r3, [r7, #6]
 800cf82:	f003 030f 	and.w	r3, r3, #15
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <rfalAnalogConfigSearch+0x48>
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	e000      	b.n	800cf92 <rfalAnalogConfigSearch+0x4a>
 800cf90:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800cf92:	4313      	orrs	r3, r2
 800cf94:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800cf96:	88fb      	ldrh	r3, [r7, #6]
 800cf98:	f003 030f 	and.w	r3, r3, #15
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	d102      	bne.n	800cfa8 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800cfa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfa6:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800cfae:	e029      	b.n	800d004 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800cfb0:	8abb      	ldrh	r3, [r7, #20]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	b21a      	sxth	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	b21b      	sxth	r3, r3
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	b21b      	sxth	r3, r3
 800cfcc:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800cfce:	897a      	ldrh	r2, [r7, #10]
 800cfd0:	8afb      	ldrh	r3, [r7, #22]
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	88fa      	ldrh	r2, [r7, #6]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d108      	bne.n	800cfee <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800cfdc:	8abb      	ldrh	r3, [r7, #20]
 800cfde:	3303      	adds	r3, #3
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3302      	adds	r3, #2
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	e010      	b.n	800d010 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3302      	adds	r3, #2
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800cffa:	8abb      	ldrh	r3, [r7, #20]
 800cffc:	4413      	add	r3, r2
 800cffe:	b29b      	uxth	r3, r3
 800d000:	3303      	adds	r3, #3
 800d002:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <rfalAnalogConfigSearch+0xd4>)
 800d006:	889b      	ldrh	r3, [r3, #4]
 800d008:	8aba      	ldrh	r2, [r7, #20]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d3d0      	bcc.n	800cfb0 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800d00e:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800d010:	4618      	mov	r0, r3
 800d012:	371c      	adds	r7, #28
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20000744 	.word	0x20000744

0800d020 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	4603      	mov	r3, r0
 800d028:	6039      	str	r1, [r7, #0]
 800d02a:	80fb      	strh	r3, [r7, #6]
 800d02c:	4613      	mov	r3, r2
 800d02e:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800d030:	88fb      	ldrh	r3, [r7, #6]
 800d032:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800d034:	2300      	movs	r3, #0
 800d036:	81bb      	strh	r3, [r7, #12]
 800d038:	e00d      	b.n	800d056 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800d03a:	89bb      	ldrh	r3, [r7, #12]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4413      	add	r3, r2
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	89fb      	ldrh	r3, [r7, #14]
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f000 f80e 	bl	800d068 <rfalCrcUpdateCcitt>
 800d04c:	4603      	mov	r3, r0
 800d04e:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800d050:	89bb      	ldrh	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	81bb      	strh	r3, [r7, #12]
 800d056:	89ba      	ldrh	r2, [r7, #12]
 800d058:	88bb      	ldrh	r3, [r7, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d3ed      	bcc.n	800d03a <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800d05e:	89fb      	ldrh	r3, [r7, #14]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	4603      	mov	r3, r0
 800d070:	460a      	mov	r2, r1
 800d072:	80fb      	strh	r3, [r7, #6]
 800d074:	4613      	mov	r3, r2
 800d076:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800d078:	88fb      	ldrh	r3, [r7, #6]
 800d07a:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800d07c:	797b      	ldrb	r3, [r7, #5]
 800d07e:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800d080:	89fb      	ldrh	r3, [r7, #14]
 800d082:	b2da      	uxtb	r2, r3
 800d084:	7b7b      	ldrb	r3, [r7, #13]
 800d086:	4053      	eors	r3, r2
 800d088:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800d08a:	7b7b      	ldrb	r3, [r7, #13]
 800d08c:	011b      	lsls	r3, r3, #4
 800d08e:	b25a      	sxtb	r2, r3
 800d090:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d094:	4053      	eors	r3, r2
 800d096:	b25b      	sxtb	r3, r3
 800d098:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800d09a:	89fb      	ldrh	r3, [r7, #14]
 800d09c:	0a1b      	lsrs	r3, r3, #8
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	b21a      	sxth	r2, r3
 800d0a2:	7b7b      	ldrb	r3, [r7, #13]
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	4053      	eors	r3, r2
 800d0aa:	b21a      	sxth	r2, r3
 800d0ac:	7b7b      	ldrb	r3, [r7, #13]
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	b21b      	sxth	r3, r3
 800d0b2:	4053      	eors	r3, r2
 800d0b4:	b21a      	sxth	r2, r3
 800d0b6:	7b7b      	ldrb	r3, [r7, #13]
 800d0b8:	091b      	lsrs	r3, r3, #4
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	b21b      	sxth	r3, r3
 800d0be:	4053      	eors	r3, r2
 800d0c0:	b21b      	sxth	r3, r3
 800d0c2:	81fb      	strh	r3, [r7, #14]

    return crc;
 800d0c4:	89fb      	ldrh	r3, [r7, #14]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
	...

0800d0d4 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800d0de:	2208      	movs	r2, #8
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	480d      	ldr	r0, [pc, #52]	; (800d118 <iso15693PhyConfigure+0x44>)
 800d0e4:	f00a f8db 	bl	801729e <memcpy>
    
    if ( config->speedMode <= 3U)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d808      	bhi.n	800d102 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	f1c3 0303 	rsb	r3, r3, #3
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	4b07      	ldr	r3, [pc, #28]	; (800d11c <iso15693PhyConfigure+0x48>)
 800d0fe:	70da      	strb	r2, [r3, #3]
 800d100:	e002      	b.n	800d108 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800d102:	4b06      	ldr	r3, [pc, #24]	; (800d11c <iso15693PhyConfigure+0x48>)
 800d104:	2203      	movs	r2, #3
 800d106:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	4a04      	ldr	r2, [pc, #16]	; (800d11c <iso15693PhyConfigure+0x48>)
 800d10c:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000074c 	.word	0x2000074c
 800d11c:	20000058 	.word	0x20000058

0800d120 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b08b      	sub	sp, #44	; 0x2c
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	4608      	mov	r0, r1
 800d12a:	4611      	mov	r1, r2
 800d12c:	461a      	mov	r2, r3
 800d12e:	4603      	mov	r3, r0
 800d130:	807b      	strh	r3, [r7, #2]
 800d132:	460b      	mov	r3, r1
 800d134:	707b      	strb	r3, [r7, #1]
 800d136:	4613      	mov	r3, r2
 800d138:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800d142:	787b      	ldrb	r3, [r7, #1]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <iso15693VCDCode+0x2c>
 800d148:	2302      	movs	r3, #2
 800d14a:	e000      	b.n	800d14e <iso15693VCDCode+0x2e>
 800d14c:	2300      	movs	r3, #0
 800d14e:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800d150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d152:	2200      	movs	r2, #0
 800d154:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800d156:	4b94      	ldr	r3, [pc, #592]	; (800d3a8 <iso15693VCDCode+0x288>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d117      	bne.n	800d18e <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800d15e:	2321      	movs	r3, #33	; 0x21
 800d160:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800d164:	2304      	movs	r3, #4
 800d166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800d16a:	4b90      	ldr	r3, [pc, #576]	; (800d3ac <iso15693VCDCode+0x28c>)
 800d16c:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800d16e:	887a      	ldrh	r2, [r7, #2]
 800d170:	7d7b      	ldrb	r3, [r7, #21]
 800d172:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d174:	b29b      	uxth	r3, r3
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	b29b      	uxth	r3, r3
 800d17a:	3302      	adds	r3, #2
 800d17c:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d180:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800d182:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d186:	2b04      	cmp	r3, #4
 800d188:	d823      	bhi.n	800d1d2 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e13a      	b.n	800d404 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800d18e:	2381      	movs	r3, #129	; 0x81
 800d190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800d194:	2304      	movs	r3, #4
 800d196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800d19a:	4b85      	ldr	r3, [pc, #532]	; (800d3b0 <iso15693VCDCode+0x290>)
 800d19c:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800d19e:	887a      	ldrh	r2, [r7, #2]
 800d1a0:	7d7b      	ldrb	r3, [r7, #21]
 800d1a2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	019b      	lsls	r3, r3, #6
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	3302      	adds	r3, #2
 800d1ac:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b0:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800d1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d005      	beq.n	800d1c6 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800d1ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d1be:	2b3f      	cmp	r3, #63	; 0x3f
 800d1c0:	d807      	bhi.n	800d1d2 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e11e      	b.n	800d404 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d1c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d1ca:	2b40      	cmp	r3, #64	; 0x40
 800d1cc:	d801      	bhi.n	800d1d2 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e118      	b.n	800d404 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d102      	bne.n	800d1de <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1da:	2201      	movs	r2, #1
 800d1dc:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d1de:	887b      	ldrh	r3, [r7, #2]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01b      	beq.n	800d21c <iso15693VCDCode+0xfc>
 800d1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d117      	bne.n	800d21c <iso15693VCDCode+0xfc>
 800d1ec:	783b      	ldrb	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d014      	beq.n	800d21c <iso15693VCDCode+0xfc>
 800d1f2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d1f6:	f083 0301 	eor.w	r3, r3, #1
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00d      	beq.n	800d21c <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f043 0302 	orr.w	r3, r3, #2
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	f023 0301 	bic.w	r3, r3, #1
 800d216:	b2da      	uxtb	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d21e:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d224:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d226:	887b      	ldrh	r3, [r7, #2]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d03b      	beq.n	800d2a4 <iso15693VCDCode+0x184>
 800d22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d137      	bne.n	800d2a4 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d23a:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	b29a      	uxth	r2, r3
 800d244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d246:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d248:	8afb      	ldrh	r3, [r7, #22]
 800d24a:	3b01      	subs	r3, #1
 800d24c:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	3301      	adds	r3, #1
 800d252:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d254:	e026      	b.n	800d2a4 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4413      	add	r3, r2
 800d260:	7818      	ldrb	r0, [r3, #0]
 800d262:	f107 030e 	add.w	r3, r7, #14
 800d266:	8afa      	ldrh	r2, [r7, #22]
 800d268:	69fc      	ldr	r4, [r7, #28]
 800d26a:	69b9      	ldr	r1, [r7, #24]
 800d26c:	47a0      	blx	r4
 800d26e:	4603      	mov	r3, r0
 800d270:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d274:	881a      	ldrh	r2, [r3, #0]
 800d276:	89fb      	ldrh	r3, [r7, #14]
 800d278:	4413      	add	r3, r2
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27e:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	461a      	mov	r2, r3
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	4413      	add	r3, r2
 800d288:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d28a:	89fb      	ldrh	r3, [r7, #14]
 800d28c:	8afa      	ldrh	r2, [r7, #22]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d294:	2b00      	cmp	r3, #0
 800d296:	d105      	bne.n	800d2a4 <iso15693VCDCode+0x184>
            (*offset)++;
 800d298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a2:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	887a      	ldrh	r2, [r7, #2]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d902      	bls.n	800d2b4 <iso15693VCDCode+0x194>
 800d2ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d0d0      	beq.n	800d256 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d2b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d063      	beq.n	800d382 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800d2ba:	230d      	movs	r3, #13
 800d2bc:	e0a2      	b.n	800d404 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d2be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d12b      	bne.n	800d31c <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d2c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <iso15693VCDCode+0x1b2>
 800d2cc:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d2d0:	e001      	b.n	800d2d6 <iso15693VCDCode+0x1b6>
 800d2d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d2d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d002      	beq.n	800d2e4 <iso15693VCDCode+0x1c4>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	e000      	b.n	800d2e6 <iso15693VCDCode+0x1c6>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	d003      	beq.n	800d2f6 <iso15693VCDCode+0x1d6>
 800d2ee:	887a      	ldrh	r2, [r7, #2]
 800d2f0:	3a01      	subs	r2, #1
 800d2f2:	b292      	uxth	r2, r2
 800d2f4:	e000      	b.n	800d2f8 <iso15693VCDCode+0x1d8>
 800d2f6:	887a      	ldrh	r2, [r7, #2]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f7ff fe91 	bl	800d020 <rfalCrcCalculateCcitt>
 800d2fe:	4603      	mov	r3, r0
 800d300:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d302:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d306:	f083 0301 	eor.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d003      	beq.n	800d318 <iso15693VCDCode+0x1f8>
 800d310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d312:	43db      	mvns	r3, r3
 800d314:	b29b      	uxth	r3, r3
 800d316:	e000      	b.n	800d31a <iso15693VCDCode+0x1fa>
 800d318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d31a:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d31c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d324:	0a1b      	lsrs	r3, r3, #8
 800d326:	b29b      	uxth	r3, r3
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	887b      	ldrh	r3, [r7, #2]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d33a:	4413      	add	r3, r2
 800d33c:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d340:	f107 030c 	add.w	r3, r7, #12
 800d344:	8afa      	ldrh	r2, [r7, #22]
 800d346:	69fc      	ldr	r4, [r7, #28]
 800d348:	69b9      	ldr	r1, [r7, #24]
 800d34a:	47a0      	blx	r4
 800d34c:	4603      	mov	r3, r0
 800d34e:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d352:	881a      	ldrh	r2, [r3, #0]
 800d354:	89bb      	ldrh	r3, [r7, #12]
 800d356:	4413      	add	r3, r2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d35c:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d35e:	89bb      	ldrh	r3, [r7, #12]
 800d360:	461a      	mov	r2, r3
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	4413      	add	r3, r2
 800d366:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d368:	89bb      	ldrh	r3, [r7, #12]
 800d36a:	8afa      	ldrh	r2, [r7, #22]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d372:	2b00      	cmp	r3, #0
 800d374:	d105      	bne.n	800d382 <iso15693VCDCode+0x262>
            (*offset)++;
 800d376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	3301      	adds	r3, #1
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d380:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <iso15693VCDCode+0x27c>
 800d388:	787b      	ldrb	r3, [r7, #1]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d006      	beq.n	800d39c <iso15693VCDCode+0x27c>
 800d38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	887b      	ldrh	r3, [r7, #2]
 800d396:	3302      	adds	r3, #2
 800d398:	429a      	cmp	r2, r3
 800d39a:	d390      	bcc.n	800d2be <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d39c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d008      	beq.n	800d3b4 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800d3a2:	230d      	movs	r3, #13
 800d3a4:	e02e      	b.n	800d404 <iso15693VCDCode+0x2e4>
 800d3a6:	bf00      	nop
 800d3a8:	2000074c 	.word	0x2000074c
 800d3ac:	0800d649 	.word	0x0800d649
 800d3b0:	0800d6f1 	.word	0x0800d6f1
    }

    if ((!sendCrc && (*offset == length))
 800d3b4:	787b      	ldrb	r3, [r7, #1]
 800d3b6:	f083 0301 	eor.w	r3, r3, #1
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <iso15693VCDCode+0x2aa>
 800d3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	887a      	ldrh	r2, [r7, #2]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d009      	beq.n	800d3de <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800d3ca:	787b      	ldrb	r3, [r7, #1]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d018      	beq.n	800d402 <iso15693VCDCode+0x2e2>
 800d3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	887b      	ldrh	r3, [r7, #2]
 800d3d8:	3302      	adds	r3, #2
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d111      	bne.n	800d402 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d3e4:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f0:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d3f2:	8afb      	ldrh	r3, [r7, #22]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d3fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d400:	e000      	b.n	800d404 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800d402:	230d      	movs	r3, #13
}
 800d404:	4618      	mov	r0, r3
 800d406:	372c      	adds	r7, #44	; 0x2c
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd90      	pop	{r4, r7, pc}

0800d40c <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	607a      	str	r2, [r7, #4]
 800d416:	461a      	mov	r2, r3
 800d418:	460b      	mov	r3, r1
 800d41a:	817b      	strh	r3, [r7, #10]
 800d41c:	4613      	mov	r3, r2
 800d41e:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d420:	2300      	movs	r3, #0
 800d422:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2200      	movs	r2, #0
 800d42e:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 031f 	and.w	r3, r3, #31
 800d438:	2b17      	cmp	r3, #23
 800d43a:	d001      	beq.n	800d440 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d43c:	2309      	movs	r3, #9
 800d43e:	e0ff      	b.n	800d640 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d440:	893b      	ldrh	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d101      	bne.n	800d44a <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d446:	2300      	movs	r3, #0
 800d448:	e0fa      	b.n	800d640 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d44a:	2305      	movs	r3, #5
 800d44c:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d452:	893b      	ldrh	r3, [r7, #8]
 800d454:	461a      	mov	r2, r3
 800d456:	2100      	movs	r1, #0
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f009 ff2b 	bl	80172b4 <memset>

    if (inBufLen == 0U)
 800d45e:	897b      	ldrh	r3, [r7, #10]
 800d460:	2b00      	cmp	r3, #0
 800d462:	f040 808e 	bne.w	800d582 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d466:	2315      	movs	r3, #21
 800d468:	e0ea      	b.n	800d640 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d46a:	2300      	movs	r3, #0
 800d46c:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d46e:	8bbb      	ldrh	r3, [r7, #28]
 800d470:	08db      	lsrs	r3, r3, #3
 800d472:	b29b      	uxth	r3, r3
 800d474:	461a      	mov	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	8bbb      	ldrh	r3, [r7, #28]
 800d480:	f003 0307 	and.w	r3, r3, #7
 800d484:	fa42 f303 	asr.w	r3, r2, r3
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d490:	8bbb      	ldrh	r3, [r7, #28]
 800d492:	3301      	adds	r3, #1
 800d494:	08db      	lsrs	r3, r3, #3
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	461a      	mov	r2, r3
 800d49e:	8bbb      	ldrh	r3, [r7, #28]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	fa42 f303 	asr.w	r3, r2, r3
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	f003 0302 	and.w	r3, r3, #2
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	7e3b      	ldrb	r3, [r7, #24]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d4bc:	7e3b      	ldrb	r3, [r7, #24]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d102      	bne.n	800d4c8 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d4c2:	8b7b      	ldrh	r3, [r7, #26]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d4c8:	7e3b      	ldrb	r3, [r7, #24]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d119      	bne.n	800d502 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d4ce:	8b7b      	ldrh	r3, [r7, #26]
 800d4d0:	08db      	lsrs	r3, r3, #3
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4413      	add	r3, r2
 800d4da:	7819      	ldrb	r1, [r3, #0]
 800d4dc:	8b7b      	ldrh	r3, [r7, #26]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	8b7b      	ldrh	r3, [r7, #26]
 800d4ec:	08db      	lsrs	r3, r3, #3
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4403      	add	r3, r0
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	b2d2      	uxtb	r2, r2
 800d4fa:	701a      	strb	r2, [r3, #0]
            bp++;
 800d4fc:	8b7b      	ldrh	r3, [r7, #26]
 800d4fe:	3301      	adds	r3, #1
 800d500:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d502:	8b7b      	ldrh	r3, [r7, #26]
 800d504:	f003 0307 	and.w	r3, r3, #7
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d115      	bne.n	800d53a <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d50e:	8bbb      	ldrh	r3, [r7, #28]
 800d510:	08db      	lsrs	r3, r3, #3
 800d512:	b29b      	uxth	r3, r3
 800d514:	461a      	mov	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d520:	2ba0      	cmp	r3, #160	; 0xa0
 800d522:	d10a      	bne.n	800d53a <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d524:	8bbb      	ldrh	r3, [r7, #28]
 800d526:	08db      	lsrs	r3, r3, #3
 800d528:	b29b      	uxth	r3, r3
 800d52a:	3301      	adds	r3, #1
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	4413      	add	r3, r2
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b03      	cmp	r3, #3
 800d534:	d101      	bne.n	800d53a <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d536:	2301      	movs	r3, #1
 800d538:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d53a:	7e3b      	ldrb	r3, [r7, #24]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <iso15693VICCDecode+0x13a>
 800d540:	7e3b      	ldrb	r3, [r7, #24]
 800d542:	2b03      	cmp	r3, #3
 800d544:	d10f      	bne.n	800d566 <iso15693VICCDecode+0x15a>
 800d546:	7e7b      	ldrb	r3, [r7, #25]
 800d548:	f083 0301 	eor.w	r3, r3, #1
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d009      	beq.n	800d566 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d552:	8b7a      	ldrh	r2, [r7, #26]
 800d554:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d556:	429a      	cmp	r2, r3
 800d558:	d302      	bcc.n	800d560 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d55a:	231d      	movs	r3, #29
 800d55c:	83fb      	strh	r3, [r7, #30]
 800d55e:	e002      	b.n	800d566 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d560:	8b7b      	ldrh	r3, [r7, #26]
 800d562:	3301      	adds	r3, #1
 800d564:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d566:	8b7a      	ldrh	r2, [r7, #26]
 800d568:	893b      	ldrh	r3, [r7, #8]
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d20f      	bcs.n	800d590 <iso15693VICCDecode+0x184>
 800d570:	8bfb      	ldrh	r3, [r7, #30]
 800d572:	2b1d      	cmp	r3, #29
 800d574:	d00c      	beq.n	800d590 <iso15693VICCDecode+0x184>
 800d576:	7e7b      	ldrb	r3, [r7, #25]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d109      	bne.n	800d590 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d57c:	8bbb      	ldrh	r3, [r7, #28]
 800d57e:	3302      	adds	r3, #2
 800d580:	83bb      	strh	r3, [r7, #28]
 800d582:	8bba      	ldrh	r2, [r7, #28]
 800d584:	897b      	ldrh	r3, [r7, #10]
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	3b02      	subs	r3, #2
 800d58a:	429a      	cmp	r2, r3
 800d58c:	f4ff af6d 	bcc.w	800d46a <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d590:	8b7b      	ldrh	r3, [r7, #26]
 800d592:	08db      	lsrs	r3, r3, #3
 800d594:	b29a      	uxth	r2, r3
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	8b7a      	ldrh	r2, [r7, #26]
 800d59e:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d5a0:	8bfb      	ldrh	r3, [r7, #30]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <iso15693VICCDecode+0x19e>
    {
        return err;
 800d5a6:	8bfb      	ldrh	r3, [r7, #30]
 800d5a8:	e04a      	b.n	800d640 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d5aa:	8b7b      	ldrh	r3, [r7, #26]
 800d5ac:	f003 0307 	and.w	r3, r3, #7
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d5b6:	2315      	movs	r3, #21
 800d5b8:	e042      	b.n	800d640 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d93b      	bls.n	800d63a <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d5c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <iso15693VICCDecode+0x1c4>
 800d5ca:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d5ce:	e001      	b.n	800d5d4 <iso15693VICCDecode+0x1c8>
 800d5d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	3b02      	subs	r3, #2
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	f7ff fd1e 	bl	800d020 <rfalCrcCalculateCcitt>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d5e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d5ec:	f083 0301 	eor.w	r3, r3, #1
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d003      	beq.n	800d5fe <iso15693VICCDecode+0x1f2>
 800d5f6:	8afb      	ldrh	r3, [r7, #22]
 800d5f8:	43db      	mvns	r3, r3
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	e000      	b.n	800d600 <iso15693VICCDecode+0x1f4>
 800d5fe:	8afb      	ldrh	r3, [r7, #22]
 800d600:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d602:	8afb      	ldrh	r3, [r7, #22]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d608:	8812      	ldrh	r2, [r2, #0]
 800d60a:	3a02      	subs	r2, #2
 800d60c:	6879      	ldr	r1, [r7, #4]
 800d60e:	440a      	add	r2, r1
 800d610:	7812      	ldrb	r2, [r2, #0]
 800d612:	4293      	cmp	r3, r2
 800d614:	d10e      	bne.n	800d634 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d616:	8afb      	ldrh	r3, [r7, #22]
 800d618:	0a1b      	lsrs	r3, r3, #8
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d620:	8812      	ldrh	r2, [r2, #0]
 800d622:	3a01      	subs	r2, #1
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	440a      	add	r2, r1
 800d628:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d102      	bne.n	800d634 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	83fb      	strh	r3, [r7, #30]
 800d632:	e004      	b.n	800d63e <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d634:	2315      	movs	r3, #21
 800d636:	83fb      	strh	r3, [r7, #30]
 800d638:	e001      	b.n	800d63e <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d63a:	2315      	movs	r3, #21
 800d63c:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d63e:	8bfb      	ldrh	r3, [r7, #30]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3720      	adds	r7, #32
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d648:	b480      	push	{r7}
 800d64a:	b089      	sub	sp, #36	; 0x24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
 800d656:	4613      	mov	r3, r2
 800d658:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d668:	89bb      	ldrh	r3, [r7, #12]
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d801      	bhi.n	800d672 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d66e:	2301      	movs	r3, #1
 800d670:	e038      	b.n	800d6e4 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
 800d674:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d676:	2300      	movs	r3, #0
 800d678:	83bb      	strh	r3, [r7, #28]
 800d67a:	e02f      	b.n	800d6dc <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d67c:	7ffb      	ldrb	r3, [r7, #31]
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	2b03      	cmp	r3, #3
 800d684:	d81a      	bhi.n	800d6bc <iso15693PhyVCDCode1Of4+0x74>
 800d686:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <iso15693PhyVCDCode1Of4+0x44>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d69d 	.word	0x0800d69d
 800d690:	0800d6a5 	.word	0x0800d6a5
 800d694:	0800d6ad 	.word	0x0800d6ad
 800d698:	0800d6b5 	.word	0x0800d6b5
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	701a      	strb	r2, [r3, #0]
                break;
 800d6a2:	e00c      	b.n	800d6be <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2208      	movs	r2, #8
 800d6a8:	701a      	strb	r2, [r3, #0]
                break;
 800d6aa:	e008      	b.n	800d6be <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	701a      	strb	r2, [r3, #0]
                break;
 800d6b2:	e004      	b.n	800d6be <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	2280      	movs	r2, #128	; 0x80
 800d6b8:	701a      	strb	r2, [r3, #0]
                break;
 800d6ba:	e000      	b.n	800d6be <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d6bc:	bf00      	nop
        }
        outbuf++;
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d6d0:	7ffb      	ldrb	r3, [r7, #31]
 800d6d2:	089b      	lsrs	r3, r3, #2
 800d6d4:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d6d6:	8bbb      	ldrh	r3, [r7, #28]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	83bb      	strh	r3, [r7, #28]
 800d6dc:	8bbb      	ldrh	r3, [r7, #28]
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d9cc      	bls.n	800d67c <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d6e2:	8afb      	ldrh	r3, [r7, #22]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3724      	adds	r7, #36	; 0x24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b089      	sub	sp, #36	; 0x24
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]
 800d6fe:	4613      	mov	r3, r2
 800d700:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d702:	2300      	movs	r3, #0
 800d704:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d710:	89bb      	ldrh	r3, [r7, #12]
 800d712:	2b3f      	cmp	r3, #63	; 0x3f
 800d714:	d801      	bhi.n	800d71a <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d716:	2301      	movs	r3, #1
 800d718:	e039      	b.n	800d78e <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d71e:	2300      	movs	r3, #0
 800d720:	83bb      	strh	r3, [r7, #28]
 800d722:	e030      	b.n	800d786 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d724:	7ffb      	ldrb	r3, [r7, #31]
 800d726:	2b03      	cmp	r3, #3
 800d728:	d81a      	bhi.n	800d760 <iso15693PhyVCDCode1Of256+0x70>
 800d72a:	a201      	add	r2, pc, #4	; (adr r2, 800d730 <iso15693PhyVCDCode1Of256+0x40>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d741 	.word	0x0800d741
 800d734:	0800d749 	.word	0x0800d749
 800d738:	0800d751 	.word	0x0800d751
 800d73c:	0800d759 	.word	0x0800d759
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	2202      	movs	r2, #2
 800d744:	701a      	strb	r2, [r3, #0]
                break;
 800d746:	e00f      	b.n	800d768 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	2208      	movs	r2, #8
 800d74c:	701a      	strb	r2, [r3, #0]
                break;
 800d74e:	e00b      	b.n	800d768 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	2220      	movs	r2, #32
 800d754:	701a      	strb	r2, [r3, #0]
                break;
 800d756:	e007      	b.n	800d768 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2280      	movs	r2, #128	; 0x80
 800d75c:	701a      	strb	r2, [r3, #0]
                break;
 800d75e:	e003      	b.n	800d768 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2200      	movs	r2, #0
 800d764:	701a      	strb	r2, [r3, #0]
                break;               
 800d766:	bf00      	nop
        }
        outbuf++;
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	3301      	adds	r3, #1
 800d76c:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	b29a      	uxth	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d77a:	7ffb      	ldrb	r3, [r7, #31]
 800d77c:	3b04      	subs	r3, #4
 800d77e:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d780:	8bbb      	ldrh	r3, [r7, #28]
 800d782:	3301      	adds	r3, #1
 800d784:	83bb      	strh	r3, [r7, #28]
 800d786:	8bbb      	ldrh	r3, [r7, #28]
 800d788:	2b3f      	cmp	r3, #63	; 0x3f
 800d78a:	d9cb      	bls.n	800d724 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d78c:	8afb      	ldrh	r3, [r7, #22]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3724      	adds	r7, #36	; 0x24
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800d7a2:	f002 fbd9 	bl	800ff58 <st25r3916Initialize>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	80fb      	strh	r3, [r7, #6]
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <rfalInitialize+0x18>
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	e047      	b.n	800d844 <rfalInitialize+0xa8>
    
    st25r3916ClearInterrupts();
 800d7b4:	f003 fe76 	bl	80114a4 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800d7b8:	2140      	movs	r1, #64	; 0x40
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	f003 fb8b 	bl	8010ed6 <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f7ff fb1f 	bl	800ce04 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800d7c6:	2203      	movs	r2, #3
 800d7c8:	2103      	movs	r1, #3
 800d7ca:	2002      	movs	r0, #2
 800d7cc:	f003 fc0c 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d7d0:	f001 feb2 	bl	800f538 <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d7d4:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <rfalInitialize+0xb0>)
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d7da:	4b1c      	ldr	r3, [pc, #112]	; (800d84c <rfalInitialize+0xb0>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d7e0:	4b1a      	ldr	r3, [pc, #104]	; (800d84c <rfalInitialize+0xb0>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d7e6:	4b19      	ldr	r3, [pc, #100]	; (800d84c <rfalInitialize+0xb0>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <rfalInitialize+0xb0>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d7f2:	4b16      	ldr	r3, [pc, #88]	; (800d84c <rfalInitialize+0xb0>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d7f8:	4b14      	ldr	r3, [pc, #80]	; (800d84c <rfalInitialize+0xb0>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <rfalInitialize+0xb0>)
 800d800:	2200      	movs	r2, #0
 800d802:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d804:	4b11      	ldr	r3, [pc, #68]	; (800d84c <rfalInitialize+0xb0>)
 800d806:	2200      	movs	r2, #0
 800d808:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d80a:	4b10      	ldr	r3, [pc, #64]	; (800d84c <rfalInitialize+0xb0>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d810:	4b0e      	ldr	r3, [pc, #56]	; (800d84c <rfalInitialize+0xb0>)
 800d812:	2200      	movs	r2, #0
 800d814:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d816:	4b0d      	ldr	r3, [pc, #52]	; (800d84c <rfalInitialize+0xb0>)
 800d818:	2200      	movs	r2, #0
 800d81a:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800d81c:	4b0b      	ldr	r3, [pc, #44]	; (800d84c <rfalInitialize+0xb0>)
 800d81e:	2200      	movs	r2, #0
 800d820:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d822:	4b0a      	ldr	r3, [pc, #40]	; (800d84c <rfalInitialize+0xb0>)
 800d824:	2200      	movs	r2, #0
 800d826:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800d828:	4b08      	ldr	r3, [pc, #32]	; (800d84c <rfalInitialize+0xb0>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d82e:	4b07      	ldr	r3, [pc, #28]	; (800d84c <rfalInitialize+0xb0>)
 800d830:	2200      	movs	r2, #0
 800d832:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    gRFAL.Lm.iniFlag         = false;
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <rfalInitialize+0xb0>)
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d83e:	f000 f807 	bl	800d850 <rfalCalibrate>
    
    return ERR_NONE;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20000754 	.word	0x20000754

0800d850 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d856:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <rfalCalibrate+0x34>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d85e:	2321      	movs	r3, #33	; 0x21
 800d860:	e00c      	b.n	800d87c <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d862:	2200      	movs	r2, #0
 800d864:	2180      	movs	r1, #128	; 0x80
 800d866:	202c      	movs	r0, #44	; 0x2c
 800d868:	f003 fc42 	bl	80110f0 <st25r3916CheckReg>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800d872:	1dbb      	adds	r3, r7, #6
 800d874:	4618      	mov	r0, r3
 800d876:	f002 fc13 	bl	80100a0 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20000754 	.word	0x20000754

0800d888 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
 800d892:	460b      	mov	r3, r1
 800d894:	71bb      	strb	r3, [r7, #6]
 800d896:	4613      	mov	r3, r2
 800d898:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d89a:	4b99      	ldr	r3, [pc, #612]	; (800db00 <rfalSetMode+0x278>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d8a2:	2321      	movs	r3, #33	; 0x21
 800d8a4:	e127      	b.n	800daf6 <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d8a6:	79bb      	ldrb	r3, [r7, #6]
 800d8a8:	2bff      	cmp	r3, #255	; 0xff
 800d8aa:	d002      	beq.n	800d8b2 <rfalSetMode+0x2a>
 800d8ac:	797b      	ldrb	r3, [r7, #5]
 800d8ae:	2bff      	cmp	r3, #255	; 0xff
 800d8b0:	d101      	bne.n	800d8b6 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d8b2:	2307      	movs	r3, #7
 800d8b4:	e11f      	b.n	800daf6 <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	2b0c      	cmp	r3, #12
 800d8bc:	f200 8107 	bhi.w	800dace <rfalSetMode+0x246>
 800d8c0:	a201      	add	r2, pc, #4	; (adr r2, 800d8c8 <rfalSetMode+0x40>)
 800d8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c6:	bf00      	nop
 800d8c8:	0800d8fd 	.word	0x0800d8fd
 800d8cc:	0800d91f 	.word	0x0800d91f
 800d8d0:	0800d941 	.word	0x0800d941
 800d8d4:	0800d977 	.word	0x0800d977
 800d8d8:	0800d9ad 	.word	0x0800d9ad
 800d8dc:	0800d9e3 	.word	0x0800d9e3
 800d8e0:	0800da05 	.word	0x0800da05
 800d8e4:	0800da05 	.word	0x0800da05
 800d8e8:	0800da1f 	.word	0x0800da1f
 800d8ec:	0800da87 	.word	0x0800da87
 800d8f0:	0800dacb 	.word	0x0800dacb
 800d8f4:	0800daa9 	.word	0x0800daa9
 800d8f8:	0800da53 	.word	0x0800da53
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d8fc:	2104      	movs	r1, #4
 800d8fe:	2002      	movs	r0, #2
 800d900:	f003 fb0e 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800d904:	2108      	movs	r1, #8
 800d906:	2003      	movs	r0, #3
 800d908:	f003 fa20 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d90c:	f240 1001 	movw	r0, #257	; 0x101
 800d910:	f7ff fa78 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d914:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d918:	f7ff fa74 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800d91c:	e0d9      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d91e:	2104      	movs	r1, #4
 800d920:	2002      	movs	r0, #2
 800d922:	f003 fafd 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800d926:	2120      	movs	r1, #32
 800d928:	2003      	movs	r0, #3
 800d92a:	f003 fa0f 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d92e:	f240 1001 	movw	r0, #257	; 0x101
 800d932:	f7ff fa67 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d936:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d93a:	f7ff fa63 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800d93e:	e0c8      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d940:	2104      	movs	r1, #4
 800d942:	2002      	movs	r0, #2
 800d944:	f003 faec 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d948:	2110      	movs	r1, #16
 800d94a:	2003      	movs	r0, #3
 800d94c:	f003 f9fe 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d950:	2200      	movs	r2, #0
 800d952:	21fc      	movs	r1, #252	; 0xfc
 800d954:	2006      	movs	r0, #6
 800d956:	f003 fb47 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d95a:	2200      	movs	r2, #0
 800d95c:	21f0      	movs	r1, #240	; 0xf0
 800d95e:	2007      	movs	r0, #7
 800d960:	f003 fb42 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d964:	f240 2001 	movw	r0, #513	; 0x201
 800d968:	f7ff fa4c 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d96c:	f240 2002 	movw	r0, #514	; 0x202
 800d970:	f7ff fa48 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800d974:	e0ad      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d976:	2104      	movs	r1, #4
 800d978:	2002      	movs	r0, #2
 800d97a:	f003 fad1 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d97e:	2110      	movs	r1, #16
 800d980:	2003      	movs	r0, #3
 800d982:	f003 f9e3 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d986:	2200      	movs	r2, #0
 800d988:	21fc      	movs	r1, #252	; 0xfc
 800d98a:	2006      	movs	r0, #6
 800d98c:	f003 fb2c 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d990:	2220      	movs	r2, #32
 800d992:	21f0      	movs	r1, #240	; 0xf0
 800d994:	2007      	movs	r0, #7
 800d996:	f003 fb27 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d99a:	f240 2001 	movw	r0, #513	; 0x201
 800d99e:	f7ff fa31 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9a2:	f240 2002 	movw	r0, #514	; 0x202
 800d9a6:	f7ff fa2d 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800d9aa:	e092      	b.n	800dad2 <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d9ac:	2104      	movs	r1, #4
 800d9ae:	2002      	movs	r0, #2
 800d9b0:	f003 fab6 	bl	8010f20 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d9b4:	2110      	movs	r1, #16
 800d9b6:	2003      	movs	r0, #3
 800d9b8:	f003 f9c8 	bl	8010d4c <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d9bc:	2200      	movs	r2, #0
 800d9be:	21fc      	movs	r1, #252	; 0xfc
 800d9c0:	2006      	movs	r0, #6
 800d9c2:	f003 fb11 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d9c6:	2230      	movs	r2, #48	; 0x30
 800d9c8:	21f0      	movs	r1, #240	; 0xf0
 800d9ca:	2007      	movs	r0, #7
 800d9cc:	f003 fb0c 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9d0:	f240 2001 	movw	r0, #513	; 0x201
 800d9d4:	f7ff fa16 	bl	800ce04 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9d8:	f240 2002 	movw	r0, #514	; 0x202
 800d9dc:	f7ff fa12 	bl	800ce04 <rfalSetAnalogConfig>
                break;
 800d9e0:	e077      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	2002      	movs	r0, #2
 800d9e6:	f003 fa9b 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800d9ea:	2118      	movs	r1, #24
 800d9ec:	2003      	movs	r0, #3
 800d9ee:	f003 f9ad 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9f2:	f240 4001 	movw	r0, #1025	; 0x401
 800d9f6:	f7ff fa05 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9fa:	f240 4002 	movw	r0, #1026	; 0x402
 800d9fe:	f7ff fa01 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800da02:	e066      	b.n	800dad2 <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da04:	2104      	movs	r1, #4
 800da06:	2002      	movs	r0, #2
 800da08:	f003 fa8a 	bl	8010f20 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da0c:	f241 0001 	movw	r0, #4097	; 0x1001
 800da10:	f7ff f9f8 	bl	800ce04 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da14:	f241 0002 	movw	r0, #4098	; 0x1002
 800da18:	f7ff f9f4 	bl	800ce04 <rfalSetAnalogConfig>
                break;
 800da1c:	e059      	b.n	800dad2 <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800da1e:	2102      	movs	r1, #2
 800da20:	2003      	movs	r0, #3
 800da22:	f003 f993 	bl	8010d4c <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800da26:	2200      	movs	r2, #0
 800da28:	2104      	movs	r1, #4
 800da2a:	2012      	movs	r0, #18
 800da2c:	f003 fadc 	bl	8010fe8 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800da30:	2160      	movs	r1, #96	; 0x60
 800da32:	2040      	movs	r0, #64	; 0x40
 800da34:	f002 fd05 	bl	8010442 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800da38:	2180      	movs	r1, #128	; 0x80
 800da3a:	2015      	movs	r0, #21
 800da3c:	f003 f986 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da40:	f640 0001 	movw	r0, #2049	; 0x801
 800da44:	f7ff f9de 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da48:	f640 0002 	movw	r0, #2050	; 0x802
 800da4c:	f7ff f9da 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800da50:	e03f      	b.n	800dad2 <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800da52:	21ba      	movs	r1, #186	; 0xba
 800da54:	2003      	movs	r0, #3
 800da56:	f003 f979 	bl	8010d4c <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800da5a:	2200      	movs	r2, #0
 800da5c:	2104      	movs	r1, #4
 800da5e:	2012      	movs	r0, #18
 800da60:	f003 fac2 	bl	8010fe8 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800da64:	2160      	movs	r1, #96	; 0x60
 800da66:	2040      	movs	r0, #64	; 0x40
 800da68:	f002 fceb 	bl	8010442 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800da6c:	2180      	movs	r1, #128	; 0x80
 800da6e:	2015      	movs	r0, #21
 800da70:	f003 f96c 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da74:	f648 0001 	movw	r0, #34817	; 0x8801
 800da78:	f7ff f9c4 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da7c:	f648 0002 	movw	r0, #34818	; 0x8802
 800da80:	f7ff f9c0 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800da84:	e025      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da86:	2104      	movs	r1, #4
 800da88:	2002      	movs	r0, #2
 800da8a:	f003 fa49 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800da8e:	2188      	movs	r1, #136	; 0x88
 800da90:	2003      	movs	r0, #3
 800da92:	f003 f95b 	bl	8010d4c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da96:	f248 1001 	movw	r0, #33025	; 0x8101
 800da9a:	f7ff f9b3 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da9e:	f248 1002 	movw	r0, #33026	; 0x8102
 800daa2:	f7ff f9af 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800daa6:	e014      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800daa8:	2104      	movs	r1, #4
 800daaa:	2002      	movs	r0, #2
 800daac:	f003 fa38 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800dab0:	21a0      	movs	r1, #160	; 0xa0
 800dab2:	2003      	movs	r0, #3
 800dab4:	f003 f94a 	bl	8010d4c <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800dab8:	f248 4001 	movw	r0, #33793	; 0x8401
 800dabc:	f7ff f9a2 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800dac0:	f248 4002 	movw	r0, #33794	; 0x8402
 800dac4:	f7ff f99e 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800dac8:	e003      	b.n	800dad2 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800daca:	2318      	movs	r3, #24
 800dacc:	e013      	b.n	800daf6 <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800dace:	230f      	movs	r3, #15
 800dad0:	e011      	b.n	800daf6 <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800dad2:	4b0b      	ldr	r3, [pc, #44]	; (800db00 <rfalSetMode+0x278>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	bf38      	it	cc
 800dada:	2302      	movcc	r3, #2
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	4b08      	ldr	r3, [pc, #32]	; (800db00 <rfalSetMode+0x278>)
 800dae0:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800dae2:	4a07      	ldr	r2, [pc, #28]	; (800db00 <rfalSetMode+0x278>)
 800dae4:	79fb      	ldrb	r3, [r7, #7]
 800dae6:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800dae8:	797a      	ldrb	r2, [r7, #5]
 800daea:	79bb      	ldrb	r3, [r7, #6]
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 f808 	bl	800db04 <rfalSetBitRate>
 800daf4:	4603      	mov	r3, r0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20000754 	.word	0x20000754

0800db04 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af00      	add	r7, sp, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	460a      	mov	r2, r1
 800db0e:	71fb      	strb	r3, [r7, #7]
 800db10:	4613      	mov	r3, r2
 800db12:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800db14:	4ba0      	ldr	r3, [pc, #640]	; (800dd98 <rfalSetBitRate+0x294>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800db1c:	2321      	movs	r3, #33	; 0x21
 800db1e:	e2d2      	b.n	800e0c6 <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	2bff      	cmp	r3, #255	; 0xff
 800db24:	d102      	bne.n	800db2c <rfalSetBitRate+0x28>
 800db26:	4b9c      	ldr	r3, [pc, #624]	; (800dd98 <rfalSetBitRate+0x294>)
 800db28:	789b      	ldrb	r3, [r3, #2]
 800db2a:	e000      	b.n	800db2e <rfalSetBitRate+0x2a>
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	4a9a      	ldr	r2, [pc, #616]	; (800dd98 <rfalSetBitRate+0x294>)
 800db30:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800db32:	79bb      	ldrb	r3, [r7, #6]
 800db34:	2bff      	cmp	r3, #255	; 0xff
 800db36:	d102      	bne.n	800db3e <rfalSetBitRate+0x3a>
 800db38:	4b97      	ldr	r3, [pc, #604]	; (800dd98 <rfalSetBitRate+0x294>)
 800db3a:	78db      	ldrb	r3, [r3, #3]
 800db3c:	e000      	b.n	800db40 <rfalSetBitRate+0x3c>
 800db3e:	79bb      	ldrb	r3, [r7, #6]
 800db40:	4a95      	ldr	r2, [pc, #596]	; (800dd98 <rfalSetBitRate+0x294>)
 800db42:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800db44:	4b94      	ldr	r3, [pc, #592]	; (800dd98 <rfalSetBitRate+0x294>)
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	2b07      	cmp	r3, #7
 800db4a:	d012      	beq.n	800db72 <rfalSetBitRate+0x6e>
 800db4c:	4b92      	ldr	r3, [pc, #584]	; (800dd98 <rfalSetBitRate+0x294>)
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b08      	cmp	r3, #8
 800db52:	d00e      	beq.n	800db72 <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800db54:	4b90      	ldr	r3, [pc, #576]	; (800dd98 <rfalSetBitRate+0x294>)
 800db56:	789a      	ldrb	r2, [r3, #2]
 800db58:	4b8f      	ldr	r3, [pc, #572]	; (800dd98 <rfalSetBitRate+0x294>)
 800db5a:	78db      	ldrb	r3, [r3, #3]
 800db5c:	4619      	mov	r1, r3
 800db5e:	4610      	mov	r0, r2
 800db60:	f002 fb43 	bl	80101ea <st25r3916SetBitrate>
 800db64:	4603      	mov	r3, r0
 800db66:	83fb      	strh	r3, [r7, #30]
 800db68:	8bfb      	ldrh	r3, [r7, #30]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <rfalSetBitRate+0x6e>
 800db6e:	8bfb      	ldrh	r3, [r7, #30]
 800db70:	e2a9      	b.n	800e0c6 <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800db72:	4b89      	ldr	r3, [pc, #548]	; (800dd98 <rfalSetBitRate+0x294>)
 800db74:	785b      	ldrb	r3, [r3, #1]
 800db76:	2b0d      	cmp	r3, #13
 800db78:	f200 82a2 	bhi.w	800e0c0 <rfalSetBitRate+0x5bc>
 800db7c:	a201      	add	r2, pc, #4	; (adr r2, 800db84 <rfalSetBitRate+0x80>)
 800db7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db82:	bf00      	nop
 800db84:	0800e0bd 	.word	0x0800e0bd
 800db88:	0800dbbd 	.word	0x0800dbbd
 800db8c:	0800dbbd 	.word	0x0800dbbd
 800db90:	0800dc45 	.word	0x0800dc45
 800db94:	0800dc45 	.word	0x0800dc45
 800db98:	0800dc45 	.word	0x0800dc45
 800db9c:	0800dcd5 	.word	0x0800dcd5
 800dba0:	0800dd65 	.word	0x0800dd65
 800dba4:	0800dd65 	.word	0x0800dd65
 800dba8:	0800de99 	.word	0x0800de99
 800dbac:	0800dfa9 	.word	0x0800dfa9
 800dbb0:	0800e0bd 	.word	0x0800e0bd
 800dbb4:	0800e03d 	.word	0x0800e03d
 800dbb8:	0800df29 	.word	0x0800df29
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dbbc:	2008      	movs	r0, #8
 800dbbe:	f7ff f921 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dbc2:	4b75      	ldr	r3, [pc, #468]	; (800dd98 <rfalSetBitRate+0x294>)
 800dbc4:	789b      	ldrb	r3, [r3, #2]
 800dbc6:	2bea      	cmp	r3, #234	; 0xea
 800dbc8:	d90c      	bls.n	800dbe4 <rfalSetBitRate+0xe0>
 800dbca:	4b73      	ldr	r3, [pc, #460]	; (800dd98 <rfalSetBitRate+0x294>)
 800dbcc:	789b      	ldrb	r3, [r3, #2]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbdc:	f043 0301 	orr.w	r3, r3, #1
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	e00d      	b.n	800dc00 <rfalSetBitRate+0xfc>
 800dbe4:	4b6c      	ldr	r3, [pc, #432]	; (800dd98 <rfalSetBitRate+0x294>)
 800dbe6:	789b      	ldrb	r3, [r3, #2]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3301      	adds	r3, #1
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	011b      	lsls	r3, r3, #4
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff f8ff 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc06:	4b64      	ldr	r3, [pc, #400]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc08:	78db      	ldrb	r3, [r3, #3]
 800dc0a:	2bea      	cmp	r3, #234	; 0xea
 800dc0c:	d90a      	bls.n	800dc24 <rfalSetBitRate+0x120>
 800dc0e:	4b62      	ldr	r3, [pc, #392]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc10:	78db      	ldrb	r3, [r3, #3]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	011b      	lsls	r3, r3, #4
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	e00b      	b.n	800dc3c <rfalSetBitRate+0x138>
 800dc24:	4b5c      	ldr	r3, [pc, #368]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc26:	78db      	ldrb	r3, [r3, #3]
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff f8e1 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800dc42:	e23f      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dc44:	2008      	movs	r0, #8
 800dc46:	f7ff f8dd 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dc4a:	4b53      	ldr	r3, [pc, #332]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc4c:	789b      	ldrb	r3, [r3, #2]
 800dc4e:	2bea      	cmp	r3, #234	; 0xea
 800dc50:	d90c      	bls.n	800dc6c <rfalSetBitRate+0x168>
 800dc52:	4b51      	ldr	r3, [pc, #324]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc54:	789b      	ldrb	r3, [r3, #2]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	011b      	lsls	r3, r3, #4
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc64:	f043 0301 	orr.w	r3, r3, #1
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	e00d      	b.n	800dc88 <rfalSetBitRate+0x184>
 800dc6c:	4b4a      	ldr	r3, [pc, #296]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc6e:	789b      	ldrb	r3, [r3, #2]
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	3301      	adds	r3, #1
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	011b      	lsls	r3, r3, #4
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc82:	f043 0301 	orr.w	r3, r3, #1
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff f8bb 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc8e:	4b42      	ldr	r3, [pc, #264]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc90:	78db      	ldrb	r3, [r3, #3]
 800dc92:	2bea      	cmp	r3, #234	; 0xea
 800dc94:	d90c      	bls.n	800dcb0 <rfalSetBitRate+0x1ac>
 800dc96:	4b40      	ldr	r3, [pc, #256]	; (800dd98 <rfalSetBitRate+0x294>)
 800dc98:	78db      	ldrb	r3, [r3, #3]
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	011b      	lsls	r3, r3, #4
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dca8:	f043 0302 	orr.w	r3, r3, #2
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	e00d      	b.n	800dccc <rfalSetBitRate+0x1c8>
 800dcb0:	4b39      	ldr	r3, [pc, #228]	; (800dd98 <rfalSetBitRate+0x294>)
 800dcb2:	78db      	ldrb	r3, [r3, #3]
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcc6:	f043 0302 	orr.w	r3, r3, #2
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7ff f899 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800dcd2:	e1f7      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dcd4:	2008      	movs	r0, #8
 800dcd6:	f7ff f895 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dcda:	4b2f      	ldr	r3, [pc, #188]	; (800dd98 <rfalSetBitRate+0x294>)
 800dcdc:	789b      	ldrb	r3, [r3, #2]
 800dcde:	2bea      	cmp	r3, #234	; 0xea
 800dce0:	d90c      	bls.n	800dcfc <rfalSetBitRate+0x1f8>
 800dce2:	4b2d      	ldr	r3, [pc, #180]	; (800dd98 <rfalSetBitRate+0x294>)
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	011b      	lsls	r3, r3, #4
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcf4:	f043 0301 	orr.w	r3, r3, #1
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	e00d      	b.n	800dd18 <rfalSetBitRate+0x214>
 800dcfc:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <rfalSetBitRate+0x294>)
 800dcfe:	789b      	ldrb	r3, [r3, #2]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3301      	adds	r3, #1
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	011b      	lsls	r3, r3, #4
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd12:	f043 0301 	orr.w	r3, r3, #1
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff f873 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dd1e:	4b1e      	ldr	r3, [pc, #120]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd20:	78db      	ldrb	r3, [r3, #3]
 800dd22:	2bea      	cmp	r3, #234	; 0xea
 800dd24:	d90c      	bls.n	800dd40 <rfalSetBitRate+0x23c>
 800dd26:	4b1c      	ldr	r3, [pc, #112]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd28:	78db      	ldrb	r3, [r3, #3]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd38:	f043 0302 	orr.w	r3, r3, #2
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	e00d      	b.n	800dd5c <rfalSetBitRate+0x258>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd42:	78db      	ldrb	r3, [r3, #3]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	3301      	adds	r3, #1
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	011b      	lsls	r3, r3, #4
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd56:	f043 0302 	orr.w	r3, r3, #2
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff f851 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800dd62:	e1af      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800dd64:	4b0c      	ldr	r3, [pc, #48]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd66:	78db      	ldrb	r3, [r3, #3]
 800dd68:	2bec      	cmp	r3, #236	; 0xec
 800dd6a:	d00b      	beq.n	800dd84 <rfalSetBitRate+0x280>
 800dd6c:	4b0a      	ldr	r3, [pc, #40]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd6e:	78db      	ldrb	r3, [r3, #3]
 800dd70:	2beb      	cmp	r3, #235	; 0xeb
 800dd72:	d007      	beq.n	800dd84 <rfalSetBitRate+0x280>
 800dd74:	4b08      	ldr	r3, [pc, #32]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd76:	78db      	ldrb	r3, [r3, #3]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d003      	beq.n	800dd84 <rfalSetBitRate+0x280>
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd7e:	78db      	ldrb	r3, [r3, #3]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d107      	bne.n	800dd94 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800dd84:	4b04      	ldr	r3, [pc, #16]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd86:	789b      	ldrb	r3, [r3, #2]
 800dd88:	2bed      	cmp	r3, #237	; 0xed
 800dd8a:	d007      	beq.n	800dd9c <rfalSetBitRate+0x298>
 800dd8c:	4b02      	ldr	r3, [pc, #8]	; (800dd98 <rfalSetBitRate+0x294>)
 800dd8e:	789b      	ldrb	r3, [r3, #2]
 800dd90:	2bec      	cmp	r3, #236	; 0xec
 800dd92:	d003      	beq.n	800dd9c <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800dd94:	2307      	movs	r3, #7
 800dd96:	e196      	b.n	800e0c6 <rfalSetBitRate+0x5c2>
 800dd98:	20000754 	.word	0x20000754
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800dd9c:	4b9a      	ldr	r3, [pc, #616]	; (800e008 <rfalSetBitRate+0x504>)
 800dd9e:	789b      	ldrb	r3, [r3, #2]
 800dda0:	2bed      	cmp	r3, #237	; 0xed
 800dda2:	bf0c      	ite	eq
 800dda4:	2301      	moveq	r3, #1
 800dda6:	2300      	movne	r3, #0
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800ddac:	4b96      	ldr	r3, [pc, #600]	; (800e008 <rfalSetBitRate+0x504>)
 800ddae:	78db      	ldrb	r3, [r3, #3]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d00a      	beq.n	800ddca <rfalSetBitRate+0x2c6>
 800ddb4:	2beb      	cmp	r3, #235	; 0xeb
 800ddb6:	d002      	beq.n	800ddbe <rfalSetBitRate+0x2ba>
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d003      	beq.n	800ddc4 <rfalSetBitRate+0x2c0>
 800ddbc:	e008      	b.n	800ddd0 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	613b      	str	r3, [r7, #16]
                            break;
 800ddc2:	e008      	b.n	800ddd6 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	613b      	str	r3, [r7, #16]
                            break;
 800ddc8:	e005      	b.n	800ddd6 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	613b      	str	r3, [r7, #16]
                            break;
 800ddce:	e002      	b.n	800ddd6 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	613b      	str	r3, [r7, #16]
                            break;
 800ddd4:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800ddd6:	f107 0218 	add.w	r2, r7, #24
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	4611      	mov	r1, r2
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff f977 	bl	800d0d4 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	789b      	ldrb	r3, [r3, #2]
 800ddf0:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	78db      	ldrb	r3, [r3, #3]
 800ddf6:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800ddfe:	f107 0314 	add.w	r3, r7, #20
 800de02:	4618      	mov	r0, r3
 800de04:	f002 fb5b 	bl	80104be <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800de08:	2008      	movs	r0, #8
 800de0a:	f7fe fffb 	bl	800ce04 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800de0e:	4b7e      	ldr	r3, [pc, #504]	; (800e008 <rfalSetBitRate+0x504>)
 800de10:	789b      	ldrb	r3, [r3, #2]
 800de12:	2bea      	cmp	r3, #234	; 0xea
 800de14:	d90c      	bls.n	800de30 <rfalSetBitRate+0x32c>
 800de16:	4b7c      	ldr	r3, [pc, #496]	; (800e008 <rfalSetBitRate+0x504>)
 800de18:	789b      	ldrb	r3, [r3, #2]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	b29b      	uxth	r3, r3
 800de20:	b2db      	uxtb	r3, r3
 800de22:	b29b      	uxth	r3, r3
 800de24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de28:	f043 0301 	orr.w	r3, r3, #1
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	e00d      	b.n	800de4c <rfalSetBitRate+0x348>
 800de30:	4b75      	ldr	r3, [pc, #468]	; (800e008 <rfalSetBitRate+0x504>)
 800de32:	789b      	ldrb	r3, [r3, #2]
 800de34:	b29b      	uxth	r3, r3
 800de36:	3301      	adds	r3, #1
 800de38:	b29b      	uxth	r3, r3
 800de3a:	011b      	lsls	r3, r3, #4
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	b29b      	uxth	r3, r3
 800de42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de46:	f043 0301 	orr.w	r3, r3, #1
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe ffd9 	bl	800ce04 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800de52:	4b6d      	ldr	r3, [pc, #436]	; (800e008 <rfalSetBitRate+0x504>)
 800de54:	78db      	ldrb	r3, [r3, #3]
 800de56:	2bea      	cmp	r3, #234	; 0xea
 800de58:	d90c      	bls.n	800de74 <rfalSetBitRate+0x370>
 800de5a:	4b6b      	ldr	r3, [pc, #428]	; (800e008 <rfalSetBitRate+0x504>)
 800de5c:	78db      	ldrb	r3, [r3, #3]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	011b      	lsls	r3, r3, #4
 800de62:	b29b      	uxth	r3, r3
 800de64:	b2db      	uxtb	r3, r3
 800de66:	b29b      	uxth	r3, r3
 800de68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de6c:	f043 0302 	orr.w	r3, r3, #2
 800de70:	b29b      	uxth	r3, r3
 800de72:	e00d      	b.n	800de90 <rfalSetBitRate+0x38c>
 800de74:	4b64      	ldr	r3, [pc, #400]	; (800e008 <rfalSetBitRate+0x504>)
 800de76:	78db      	ldrb	r3, [r3, #3]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	3301      	adds	r3, #1
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	011b      	lsls	r3, r3, #4
 800de80:	b29b      	uxth	r3, r3
 800de82:	b2db      	uxtb	r3, r3
 800de84:	b29b      	uxth	r3, r3
 800de86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de8a:	f043 0302 	orr.w	r3, r3, #2
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe ffb7 	bl	800ce04 <rfalSetAnalogConfig>
                break;
 800de96:	e115      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800de98:	2008      	movs	r0, #8
 800de9a:	f7fe ffb3 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800de9e:	4b5a      	ldr	r3, [pc, #360]	; (800e008 <rfalSetBitRate+0x504>)
 800dea0:	789b      	ldrb	r3, [r3, #2]
 800dea2:	2bea      	cmp	r3, #234	; 0xea
 800dea4:	d90c      	bls.n	800dec0 <rfalSetBitRate+0x3bc>
 800dea6:	4b58      	ldr	r3, [pc, #352]	; (800e008 <rfalSetBitRate+0x504>)
 800dea8:	789b      	ldrb	r3, [r3, #2]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	011b      	lsls	r3, r3, #4
 800deae:	b29b      	uxth	r3, r3
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800deb8:	f043 0301 	orr.w	r3, r3, #1
 800debc:	b29b      	uxth	r3, r3
 800debe:	e00d      	b.n	800dedc <rfalSetBitRate+0x3d8>
 800dec0:	4b51      	ldr	r3, [pc, #324]	; (800e008 <rfalSetBitRate+0x504>)
 800dec2:	789b      	ldrb	r3, [r3, #2]
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	3301      	adds	r3, #1
 800dec8:	b29b      	uxth	r3, r3
 800deca:	011b      	lsls	r3, r3, #4
 800decc:	b29b      	uxth	r3, r3
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ded6:	f043 0301 	orr.w	r3, r3, #1
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe ff91 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dee2:	4b49      	ldr	r3, [pc, #292]	; (800e008 <rfalSetBitRate+0x504>)
 800dee4:	78db      	ldrb	r3, [r3, #3]
 800dee6:	2bea      	cmp	r3, #234	; 0xea
 800dee8:	d90c      	bls.n	800df04 <rfalSetBitRate+0x400>
 800deea:	4b47      	ldr	r3, [pc, #284]	; (800e008 <rfalSetBitRate+0x504>)
 800deec:	78db      	ldrb	r3, [r3, #3]
 800deee:	b29b      	uxth	r3, r3
 800def0:	011b      	lsls	r3, r3, #4
 800def2:	b29b      	uxth	r3, r3
 800def4:	b2db      	uxtb	r3, r3
 800def6:	b29b      	uxth	r3, r3
 800def8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800defc:	f043 0302 	orr.w	r3, r3, #2
 800df00:	b29b      	uxth	r3, r3
 800df02:	e00d      	b.n	800df20 <rfalSetBitRate+0x41c>
 800df04:	4b40      	ldr	r3, [pc, #256]	; (800e008 <rfalSetBitRate+0x504>)
 800df06:	78db      	ldrb	r3, [r3, #3]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3301      	adds	r3, #1
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	011b      	lsls	r3, r3, #4
 800df10:	b29b      	uxth	r3, r3
 800df12:	b2db      	uxtb	r3, r3
 800df14:	b29b      	uxth	r3, r3
 800df16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df1a:	f043 0302 	orr.w	r3, r3, #2
 800df1e:	b29b      	uxth	r3, r3
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe ff6f 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800df26:	e0cd      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800df28:	2009      	movs	r0, #9
 800df2a:	f7fe ff6b 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800df2e:	4b36      	ldr	r3, [pc, #216]	; (800e008 <rfalSetBitRate+0x504>)
 800df30:	789b      	ldrb	r3, [r3, #2]
 800df32:	2bea      	cmp	r3, #234	; 0xea
 800df34:	d90a      	bls.n	800df4c <rfalSetBitRate+0x448>
 800df36:	4b34      	ldr	r3, [pc, #208]	; (800e008 <rfalSetBitRate+0x504>)
 800df38:	789b      	ldrb	r3, [r3, #2]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	011b      	lsls	r3, r3, #4
 800df3e:	b29b      	uxth	r3, r3
 800df40:	b2db      	uxtb	r3, r3
 800df42:	b29a      	uxth	r2, r3
 800df44:	4b31      	ldr	r3, [pc, #196]	; (800e00c <rfalSetBitRate+0x508>)
 800df46:	4313      	orrs	r3, r2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	e00b      	b.n	800df64 <rfalSetBitRate+0x460>
 800df4c:	4b2e      	ldr	r3, [pc, #184]	; (800e008 <rfalSetBitRate+0x504>)
 800df4e:	789b      	ldrb	r3, [r3, #2]
 800df50:	b29b      	uxth	r3, r3
 800df52:	3301      	adds	r3, #1
 800df54:	b29b      	uxth	r3, r3
 800df56:	011b      	lsls	r3, r3, #4
 800df58:	b29b      	uxth	r3, r3
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	4b2b      	ldr	r3, [pc, #172]	; (800e00c <rfalSetBitRate+0x508>)
 800df60:	4313      	orrs	r3, r2
 800df62:	b29b      	uxth	r3, r3
 800df64:	4618      	mov	r0, r3
 800df66:	f7fe ff4d 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800df6a:	4b27      	ldr	r3, [pc, #156]	; (800e008 <rfalSetBitRate+0x504>)
 800df6c:	78db      	ldrb	r3, [r3, #3]
 800df6e:	2bea      	cmp	r3, #234	; 0xea
 800df70:	d90a      	bls.n	800df88 <rfalSetBitRate+0x484>
 800df72:	4b25      	ldr	r3, [pc, #148]	; (800e008 <rfalSetBitRate+0x504>)
 800df74:	78db      	ldrb	r3, [r3, #3]
 800df76:	b29b      	uxth	r3, r3
 800df78:	011b      	lsls	r3, r3, #4
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	b29a      	uxth	r2, r3
 800df80:	4b23      	ldr	r3, [pc, #140]	; (800e010 <rfalSetBitRate+0x50c>)
 800df82:	4313      	orrs	r3, r2
 800df84:	b29b      	uxth	r3, r3
 800df86:	e00b      	b.n	800dfa0 <rfalSetBitRate+0x49c>
 800df88:	4b1f      	ldr	r3, [pc, #124]	; (800e008 <rfalSetBitRate+0x504>)
 800df8a:	78db      	ldrb	r3, [r3, #3]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3301      	adds	r3, #1
 800df90:	b29b      	uxth	r3, r3
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	b29b      	uxth	r3, r3
 800df96:	b2db      	uxtb	r3, r3
 800df98:	b29a      	uxth	r2, r3
 800df9a:	4b1d      	ldr	r3, [pc, #116]	; (800e010 <rfalSetBitRate+0x50c>)
 800df9c:	4313      	orrs	r3, r2
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fe ff2f 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800dfa6:	e08d      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800dfa8:	2009      	movs	r0, #9
 800dfaa:	f7fe ff2b 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dfae:	4b16      	ldr	r3, [pc, #88]	; (800e008 <rfalSetBitRate+0x504>)
 800dfb0:	789b      	ldrb	r3, [r3, #2]
 800dfb2:	2bea      	cmp	r3, #234	; 0xea
 800dfb4:	d90a      	bls.n	800dfcc <rfalSetBitRate+0x4c8>
 800dfb6:	4b14      	ldr	r3, [pc, #80]	; (800e008 <rfalSetBitRate+0x504>)
 800dfb8:	789b      	ldrb	r3, [r3, #2]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	4b13      	ldr	r3, [pc, #76]	; (800e014 <rfalSetBitRate+0x510>)
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	e00b      	b.n	800dfe4 <rfalSetBitRate+0x4e0>
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <rfalSetBitRate+0x504>)
 800dfce:	789b      	ldrb	r3, [r3, #2]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	011b      	lsls	r3, r3, #4
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	4b0d      	ldr	r3, [pc, #52]	; (800e014 <rfalSetBitRate+0x510>)
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe ff0d 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dfea:	4b07      	ldr	r3, [pc, #28]	; (800e008 <rfalSetBitRate+0x504>)
 800dfec:	78db      	ldrb	r3, [r3, #3]
 800dfee:	2bea      	cmp	r3, #234	; 0xea
 800dff0:	d914      	bls.n	800e01c <rfalSetBitRate+0x518>
 800dff2:	4b05      	ldr	r3, [pc, #20]	; (800e008 <rfalSetBitRate+0x504>)
 800dff4:	78db      	ldrb	r3, [r3, #3]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	011b      	lsls	r3, r3, #4
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	b29a      	uxth	r2, r3
 800e000:	4b05      	ldr	r3, [pc, #20]	; (800e018 <rfalSetBitRate+0x514>)
 800e002:	4313      	orrs	r3, r2
 800e004:	b29b      	uxth	r3, r3
 800e006:	e015      	b.n	800e034 <rfalSetBitRate+0x530>
 800e008:	20000754 	.word	0x20000754
 800e00c:	ffff8801 	.word	0xffff8801
 800e010:	ffff8802 	.word	0xffff8802
 800e014:	ffff8101 	.word	0xffff8101
 800e018:	ffff8102 	.word	0xffff8102
 800e01c:	4b2c      	ldr	r3, [pc, #176]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e01e:	78db      	ldrb	r3, [r3, #3]
 800e020:	b29b      	uxth	r3, r3
 800e022:	3301      	adds	r3, #1
 800e024:	b29b      	uxth	r3, r3
 800e026:	011b      	lsls	r3, r3, #4
 800e028:	b29b      	uxth	r3, r3
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	4b29      	ldr	r3, [pc, #164]	; (800e0d4 <rfalSetBitRate+0x5d0>)
 800e030:	4313      	orrs	r3, r2
 800e032:	b29b      	uxth	r3, r3
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe fee5 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800e03a:	e043      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800e03c:	2009      	movs	r0, #9
 800e03e:	f7fe fee1 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e042:	4b23      	ldr	r3, [pc, #140]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e044:	789b      	ldrb	r3, [r3, #2]
 800e046:	2bea      	cmp	r3, #234	; 0xea
 800e048:	d90a      	bls.n	800e060 <rfalSetBitRate+0x55c>
 800e04a:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e04c:	789b      	ldrb	r3, [r3, #2]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	011b      	lsls	r3, r3, #4
 800e052:	b29b      	uxth	r3, r3
 800e054:	b2db      	uxtb	r3, r3
 800e056:	b29a      	uxth	r2, r3
 800e058:	4b1f      	ldr	r3, [pc, #124]	; (800e0d8 <rfalSetBitRate+0x5d4>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	e00b      	b.n	800e078 <rfalSetBitRate+0x574>
 800e060:	4b1b      	ldr	r3, [pc, #108]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e062:	789b      	ldrb	r3, [r3, #2]
 800e064:	b29b      	uxth	r3, r3
 800e066:	3301      	adds	r3, #1
 800e068:	b29b      	uxth	r3, r3
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	b29a      	uxth	r2, r3
 800e072:	4b19      	ldr	r3, [pc, #100]	; (800e0d8 <rfalSetBitRate+0x5d4>)
 800e074:	4313      	orrs	r3, r2
 800e076:	b29b      	uxth	r3, r3
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe fec3 	bl	800ce04 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e07e:	4b14      	ldr	r3, [pc, #80]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e080:	78db      	ldrb	r3, [r3, #3]
 800e082:	2bea      	cmp	r3, #234	; 0xea
 800e084:	d90a      	bls.n	800e09c <rfalSetBitRate+0x598>
 800e086:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e088:	78db      	ldrb	r3, [r3, #3]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	011b      	lsls	r3, r3, #4
 800e08e:	b29b      	uxth	r3, r3
 800e090:	b2db      	uxtb	r3, r3
 800e092:	b29a      	uxth	r2, r3
 800e094:	4b11      	ldr	r3, [pc, #68]	; (800e0dc <rfalSetBitRate+0x5d8>)
 800e096:	4313      	orrs	r3, r2
 800e098:	b29b      	uxth	r3, r3
 800e09a:	e00b      	b.n	800e0b4 <rfalSetBitRate+0x5b0>
 800e09c:	4b0c      	ldr	r3, [pc, #48]	; (800e0d0 <rfalSetBitRate+0x5cc>)
 800e09e:	78db      	ldrb	r3, [r3, #3]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	4b0b      	ldr	r3, [pc, #44]	; (800e0dc <rfalSetBitRate+0x5d8>)
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe fea5 	bl	800ce04 <rfalSetAnalogConfig>
            break;
 800e0ba:	e003      	b.n	800e0c4 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800e0bc:	2321      	movs	r3, #33	; 0x21
 800e0be:	e002      	b.n	800e0c6 <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800e0c0:	230f      	movs	r3, #15
 800e0c2:	e000      	b.n	800e0c6 <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20000754 	.word	0x20000754
 800e0d4:	ffff8102 	.word	0xffff8102
 800e0d8:	ffff8401 	.word	0xffff8401
 800e0dc:	ffff8402 	.word	0xffff8402

0800e0e0 <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	db0f      	blt.n	800e110 <rfalSetErrorHandling+0x30>
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	dd02      	ble.n	800e0fa <rfalSetErrorHandling+0x1a>
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d005      	beq.n	800e104 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e0f8:	e00a      	b.n	800e110 <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800e0fa:	2180      	movs	r1, #128	; 0x80
 800e0fc:	2045      	movs	r0, #69	; 0x45
 800e0fe:	f002 ff0f 	bl	8010f20 <st25r3916ClrRegisterBits>
            break;
 800e102:	e006      	b.n	800e112 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800e104:	2284      	movs	r2, #132	; 0x84
 800e106:	21bf      	movs	r1, #191	; 0xbf
 800e108:	2045      	movs	r0, #69	; 0x45
 800e10a:	f002 ff84 	bl	8011016 <st25r3916ModifyRegister>
            break;
 800e10e:	e000      	b.n	800e112 <rfalSetErrorHandling+0x32>
            break;
 800e110:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800e112:	4a03      	ldr	r2, [pc, #12]	; (800e120 <rfalSetErrorHandling+0x40>)
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	71d3      	strb	r3, [r2, #7]
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20000754 	.word	0x20000754

0800e124 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a06      	ldr	r2, [pc, #24]	; (800e148 <rfalSetFDTPoll+0x24>)
 800e130:	4293      	cmp	r3, r2
 800e132:	bf28      	it	cs
 800e134:	4613      	movcs	r3, r2
 800e136:	4a05      	ldr	r2, [pc, #20]	; (800e14c <rfalSetFDTPoll+0x28>)
 800e138:	6113      	str	r3, [r2, #16]
}
 800e13a:	bf00      	nop
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	0007fff8 	.word	0x0007fff8
 800e14c:	20000754 	.word	0x20000754

0800e150 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800e15e:	bf28      	it	cs
 800e160:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800e164:	4a03      	ldr	r2, [pc, #12]	; (800e174 <rfalSetFDTListen+0x24>)
 800e166:	60d3      	str	r3, [r2, #12]
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	20000754 	.word	0x20000754

0800e178 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a06      	ldr	r2, [pc, #24]	; (800e19c <rfalSetGT+0x24>)
 800e184:	4293      	cmp	r3, r2
 800e186:	bf28      	it	cs
 800e188:	4613      	movcs	r3, r2
 800e18a:	4a05      	ldr	r2, [pc, #20]	; (800e1a0 <rfalSetGT+0x28>)
 800e18c:	6093      	str	r3, [r2, #8]
}
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	040a8bc0 	.word	0x040a8bc0
 800e1a0:	20000754 	.word	0x20000754

0800e1a4 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800e1a8:	4b09      	ldr	r3, [pc, #36]	; (800e1d0 <rfalIsGTExpired+0x2c>)
 800e1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00c      	beq.n	800e1ca <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <rfalIsGTExpired+0x2c>)
 800e1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f6 fa9f 	bl	80046f8 <timerIsExpired>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f083 0301 	eor.w	r3, r3, #1
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <rfalIsGTExpired+0x26>
        {
            return false;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e000      	b.n	800e1cc <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800e1ca:	2301      	movs	r3, #1
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20000754 	.word	0x20000754

0800e1d4 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800e1da:	2280      	movs	r2, #128	; 0x80
 800e1dc:	2180      	movs	r1, #128	; 0x80
 800e1de:	2002      	movs	r0, #2
 800e1e0:	f002 ff86 	bl	80110f0 <st25r3916CheckReg>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f083 0301 	eor.w	r3, r3, #1
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d103      	bne.n	800e1f8 <rfalFieldOnAndStartGT+0x24>
 800e1f0:	4b2a      	ldr	r3, [pc, #168]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800e1f8:	2321      	movs	r3, #33	; 0x21
 800e1fa:	e04a      	b.n	800e292 <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800e200:	2002      	movs	r0, #2
 800e202:	f7fe fdff 	bl	800ce04 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800e206:	2208      	movs	r2, #8
 800e208:	2108      	movs	r1, #8
 800e20a:	2002      	movs	r0, #2
 800e20c:	f002 ff70 	bl	80110f0 <st25r3916CheckReg>
 800e210:	4603      	mov	r3, r0
 800e212:	f083 0301 	eor.w	r3, r3, #1
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d106      	bne.n	800e22a <rfalFieldOnAndStartGT+0x56>
 800e21c:	4b1f      	ldr	r3, [pc, #124]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e21e:	791b      	ldrb	r3, [r3, #4]
 800e220:	f083 0301 	eor.w	r3, r3, #1
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d01c      	beq.n	800e264 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800e22a:	2100      	movs	r1, #0
 800e22c:	2055      	movs	r0, #85	; 0x55
 800e22e:	f002 fd8d 	bl	8010d4c <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800e232:	2300      	movs	r3, #0
 800e234:	22ff      	movs	r2, #255	; 0xff
 800e236:	21ff      	movs	r1, #255	; 0xff
 800e238:	20c8      	movs	r0, #200	; 0xc8
 800e23a:	f002 f817 	bl	801026c <st25r3916PerformCollisionAvoidance>
 800e23e:	4603      	mov	r3, r0
 800e240:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800e242:	2208      	movs	r2, #8
 800e244:	2108      	movs	r1, #8
 800e246:	2002      	movs	r0, #2
 800e248:	f002 ff52 	bl	80110f0 <st25r3916CheckReg>
 800e24c:	4603      	mov	r3, r0
 800e24e:	461a      	mov	r2, r3
 800e250:	4b12      	ldr	r3, [pc, #72]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e252:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800e254:	4b11      	ldr	r3, [pc, #68]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e256:	791b      	ldrb	r3, [r3, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800e25c:	2148      	movs	r1, #72	; 0x48
 800e25e:	2002      	movs	r0, #2
 800e260:	f002 fe95 	bl	8010f8e <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800e264:	4b0d      	ldr	r3, [pc, #52]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d011      	beq.n	800e290 <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800e26c:	4b0b      	ldr	r3, [pc, #44]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800e274:	4293      	cmp	r3, r2
 800e276:	bf38      	it	cc
 800e278:	4613      	movcc	r3, r2
 800e27a:	4a09      	ldr	r2, [pc, #36]	; (800e2a0 <rfalFieldOnAndStartGT+0xcc>)
 800e27c:	fba2 2303 	umull	r2, r3, r2, r3
 800e280:	0b1b      	lsrs	r3, r3, #12
 800e282:	b29b      	uxth	r3, r3
 800e284:	4618      	mov	r0, r3
 800e286:	f7f6 fa29 	bl	80046dc <timerCalculateTimer>
 800e28a:	4602      	mov	r2, r0
 800e28c:	4b03      	ldr	r3, [pc, #12]	; (800e29c <rfalFieldOnAndStartGT+0xc8>)
 800e28e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800e290:	88fb      	ldrh	r3, [r7, #6]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20000754 	.word	0x20000754
 800e2a0:	4d542005 	.word	0x4d542005

0800e2a4 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <rfalFieldOff+0x2c>)
 800e2aa:	7d1b      	ldrb	r3, [r3, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800e2b0:	f000 fa9a 	bl	800e7e8 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800e2b4:	2148      	movs	r1, #72	; 0x48
 800e2b6:	2002      	movs	r0, #2
 800e2b8:	f002 fe32 	bl	8010f20 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800e2bc:	2003      	movs	r0, #3
 800e2be:	f7fe fda1 	bl	800ce04 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800e2c2:	4b03      	ldr	r3, [pc, #12]	; (800e2d0 <rfalFieldOff+0x2c>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20000754 	.word	0x20000754

0800e2d4 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800e2d4:	b5b0      	push	{r4, r5, r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800e2e2:	2307      	movs	r3, #7
 800e2e4:	e127      	b.n	800e536 <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800e2e6:	4b96      	ldr	r3, [pc, #600]	; (800e540 <rfalStartTransceive+0x26c>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	f240 8122 	bls.w	800e534 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800e2f0:	2208      	movs	r2, #8
 800e2f2:	2108      	movs	r1, #8
 800e2f4:	2002      	movs	r0, #2
 800e2f6:	f002 fefb 	bl	80110f0 <st25r3916CheckReg>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f083 0301 	eor.w	r3, r3, #1
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d011      	beq.n	800e32a <rfalStartTransceive+0x56>
 800e306:	4b8e      	ldr	r3, [pc, #568]	; (800e540 <rfalStartTransceive+0x26c>)
 800e308:	785b      	ldrb	r3, [r3, #1]
 800e30a:	2b0a      	cmp	r3, #10
 800e30c:	d00d      	beq.n	800e32a <rfalStartTransceive+0x56>
 800e30e:	4b8c      	ldr	r3, [pc, #560]	; (800e540 <rfalStartTransceive+0x26c>)
 800e310:	785b      	ldrb	r3, [r3, #1]
 800e312:	2b0b      	cmp	r3, #11
 800e314:	d009      	beq.n	800e32a <rfalStartTransceive+0x56>
 800e316:	4b8a      	ldr	r3, [pc, #552]	; (800e540 <rfalStartTransceive+0x26c>)
 800e318:	785b      	ldrb	r3, [r3, #1]
 800e31a:	2b0c      	cmp	r3, #12
 800e31c:	d005      	beq.n	800e32a <rfalStartTransceive+0x56>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800e326:	2321      	movs	r3, #33	; 0x21
 800e328:	e105      	b.n	800e536 <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800e32a:	4b85      	ldr	r3, [pc, #532]	; (800e540 <rfalStartTransceive+0x26c>)
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	f103 0418 	add.w	r4, r3, #24
 800e332:	4615      	mov	r5, r2
 800e334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e33c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800e340:	4b7f      	ldr	r3, [pc, #508]	; (800e540 <rfalStartTransceive+0x26c>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d04b      	beq.n	800e3e0 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800e348:	2340      	movs	r3, #64	; 0x40
 800e34a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e34c:	4b7c      	ldr	r3, [pc, #496]	; (800e540 <rfalStartTransceive+0x26c>)
 800e34e:	785b      	ldrb	r3, [r3, #1]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d102      	bne.n	800e35a <rfalStartTransceive+0x86>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	33d4      	adds	r3, #212	; 0xd4
 800e358:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e35a:	4b79      	ldr	r3, [pc, #484]	; (800e540 <rfalStartTransceive+0x26c>)
 800e35c:	785b      	ldrb	r3, [r3, #1]
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d102      	bne.n	800e368 <rfalStartTransceive+0x94>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	33d4      	adds	r3, #212	; 0xd4
 800e366:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800e368:	4b75      	ldr	r3, [pc, #468]	; (800e540 <rfalStartTransceive+0x26c>)
 800e36a:	785b      	ldrb	r3, [r3, #1]
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d103      	bne.n	800e378 <rfalStartTransceive+0xa4>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e376:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800e378:	4b71      	ldr	r3, [pc, #452]	; (800e540 <rfalStartTransceive+0x26c>)
 800e37a:	785b      	ldrb	r3, [r3, #1]
 800e37c:	2b07      	cmp	r3, #7
 800e37e:	d102      	bne.n	800e386 <rfalStartTransceive+0xb2>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3340      	adds	r3, #64	; 0x40
 800e384:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800e386:	2108      	movs	r1, #8
 800e388:	2012      	movs	r0, #18
 800e38a:	f002 fdc9 	bl	8010f20 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800e38e:	2200      	movs	r2, #0
 800e390:	2104      	movs	r1, #4
 800e392:	200a      	movs	r0, #10
 800e394:	f002 feac 	bl	80110f0 <st25r3916CheckReg>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00f      	beq.n	800e3be <rfalStartTransceive+0xea>
 800e39e:	4b68      	ldr	r3, [pc, #416]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3a0:	785b      	ldrb	r3, [r3, #1]
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d10b      	bne.n	800e3be <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3380      	adds	r3, #128	; 0x80
 800e3aa:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800e3ac:	2108      	movs	r1, #8
 800e3ae:	204c      	movs	r0, #76	; 0x4c
 800e3b0:	f002 fded 	bl	8010f8e <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800e3b4:	2214      	movs	r2, #20
 800e3b6:	211f      	movs	r1, #31
 800e3b8:	2046      	movs	r0, #70	; 0x46
 800e3ba:	f002 fe15 	bl	8010fe8 <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800e3be:	4b60      	ldr	r3, [pc, #384]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d806      	bhi.n	800e3d6 <rfalStartTransceive+0x102>
 800e3c8:	4b5d      	ldr	r3, [pc, #372]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3ca:	68da      	ldr	r2, [r3, #12]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	099b      	lsrs	r3, r3, #6
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	e000      	b.n	800e3d8 <rfalStartTransceive+0x104>
 800e3d6:	2304      	movs	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	200f      	movs	r0, #15
 800e3dc:	f002 fcb6 	bl	8010d4c <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e3e0:	4b57      	ldr	r3, [pc, #348]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e8:	d046      	beq.n	800e478 <rfalStartTransceive+0x1a4>
 800e3ea:	4b55      	ldr	r3, [pc, #340]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d042      	beq.n	800e478 <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800e3f2:	4b53      	ldr	r3, [pc, #332]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3f4:	68da      	ldr	r2, [r3, #12]
 800e3f6:	4b52      	ldr	r3, [pc, #328]	; (800e540 <rfalStartTransceive+0x26c>)
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d301      	bcc.n	800e402 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800e3fe:	2307      	movs	r3, #7
 800e400:	e099      	b.n	800e536 <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800e402:	2340      	movs	r3, #64	; 0x40
 800e404:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e406:	4b4e      	ldr	r3, [pc, #312]	; (800e540 <rfalStartTransceive+0x26c>)
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d103      	bne.n	800e416 <rfalStartTransceive+0x142>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e414:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e416:	4b4a      	ldr	r3, [pc, #296]	; (800e540 <rfalStartTransceive+0x26c>)
 800e418:	785b      	ldrb	r3, [r3, #1]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d103      	bne.n	800e426 <rfalStartTransceive+0x152>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e424:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800e426:	4b46      	ldr	r3, [pc, #280]	; (800e540 <rfalStartTransceive+0x26c>)
 800e428:	785b      	ldrb	r3, [r3, #1]
 800e42a:	2b03      	cmp	r3, #3
 800e42c:	d103      	bne.n	800e436 <rfalStartTransceive+0x162>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e434:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800e436:	4b42      	ldr	r3, [pc, #264]	; (800e540 <rfalStartTransceive+0x26c>)
 800e438:	785b      	ldrb	r3, [r3, #1]
 800e43a:	2b06      	cmp	r3, #6
 800e43c:	d10b      	bne.n	800e456 <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800e43e:	4b40      	ldr	r3, [pc, #256]	; (800e540 <rfalStartTransceive+0x26c>)
 800e440:	789b      	ldrb	r3, [r3, #2]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d102      	bne.n	800e44c <rfalStartTransceive+0x178>
 800e446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e44a:	e001      	b.n	800e450 <rfalStartTransceive+0x17c>
 800e44c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4413      	add	r3, r2
 800e454:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800e456:	4b3a      	ldr	r3, [pc, #232]	; (800e540 <rfalStartTransceive+0x26c>)
 800e458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4413      	add	r3, r2
 800e45e:	4a39      	ldr	r2, [pc, #228]	; (800e544 <rfalStartTransceive+0x270>)
 800e460:	4293      	cmp	r3, r2
 800e462:	bf28      	it	cs
 800e464:	4613      	movcs	r3, r2
 800e466:	4a36      	ldr	r2, [pc, #216]	; (800e540 <rfalStartTransceive+0x26c>)
 800e468:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800e46a:	4b35      	ldr	r3, [pc, #212]	; (800e540 <rfalStartTransceive+0x26c>)
 800e46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46e:	099b      	lsrs	r3, r3, #6
 800e470:	4618      	mov	r0, r3
 800e472:	f001 ff91 	bl	8010398 <st25r3916SetNoResponseTime>
 800e476:	e002      	b.n	800e47e <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800e478:	2000      	movs	r0, #0
 800e47a:	f001 ff8d 	bl	8010398 <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800e47e:	4b30      	ldr	r3, [pc, #192]	; (800e540 <rfalStartTransceive+0x26c>)
 800e480:	2203      	movs	r2, #3
 800e482:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800e484:	4b2e      	ldr	r3, [pc, #184]	; (800e540 <rfalStartTransceive+0x26c>)
 800e486:	220b      	movs	r2, #11
 800e488:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800e48a:	4b2d      	ldr	r3, [pc, #180]	; (800e540 <rfalStartTransceive+0x26c>)
 800e48c:	2202      	movs	r2, #2
 800e48e:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e490:	4b2b      	ldr	r3, [pc, #172]	; (800e540 <rfalStartTransceive+0x26c>)
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b07      	cmp	r3, #7
 800e496:	d003      	beq.n	800e4a0 <rfalStartTransceive+0x1cc>
 800e498:	4b29      	ldr	r3, [pc, #164]	; (800e540 <rfalStartTransceive+0x26c>)
 800e49a:	785b      	ldrb	r3, [r3, #1]
 800e49c:	2b08      	cmp	r3, #8
 800e49e:	d128      	bne.n	800e4f2 <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800e4a0:	4a27      	ldr	r2, [pc, #156]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4a2:	4b27      	ldr	r3, [pc, #156]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4a4:	f502 741d 	add.w	r4, r2, #628	; 0x274
 800e4a8:	f103 0518 	add.w	r5, r3, #24
 800e4ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e4b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800e4b8:	4b21      	ldr	r3, [pc, #132]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4ba:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <rfalStartTransceive+0x1f2>
 800e4c2:	4b21      	ldr	r3, [pc, #132]	; (800e548 <rfalStartTransceive+0x274>)
 800e4c4:	e000      	b.n	800e4c8 <rfalStartTransceive+0x1f4>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	4a1d      	ldr	r2, [pc, #116]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4ca:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800e4cc:	4b1c      	ldr	r3, [pc, #112]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4ce:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800e4d2:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800e4d4:	4b1a      	ldr	r3, [pc, #104]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e4da:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800e4de:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800e4e2:	4a17      	ldr	r2, [pc, #92]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800e4e6:	4b16      	ldr	r3, [pc, #88]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e021      	b.n	800e536 <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800e4f2:	4b13      	ldr	r3, [pc, #76]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d003      	beq.n	800e502 <rfalStartTransceive+0x22e>
 800e4fa:	4b11      	ldr	r3, [pc, #68]	; (800e540 <rfalStartTransceive+0x26c>)
 800e4fc:	8b9b      	ldrh	r3, [r3, #28]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d116      	bne.n	800e530 <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e502:	f000 f989 	bl	800e818 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800e506:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <rfalStartTransceive+0x26c>)
 800e508:	785b      	ldrb	r3, [r3, #1]
 800e50a:	2b09      	cmp	r3, #9
 800e50c:	d003      	beq.n	800e516 <rfalStartTransceive+0x242>
 800e50e:	4b0c      	ldr	r3, [pc, #48]	; (800e540 <rfalStartTransceive+0x26c>)
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	2b0d      	cmp	r3, #13
 800e514:	d103      	bne.n	800e51e <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800e516:	2108      	movs	r1, #8
 800e518:	2002      	movs	r0, #2
 800e51a:	f002 fd01 	bl	8010f20 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800e51e:	20d1      	movs	r0, #209	; 0xd1
 800e520:	f002 fc9d 	bl	8010e5e <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800e524:	20e3      	movs	r0, #227	; 0xe3
 800e526:	f002 fc9a 	bl	8010e5e <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <rfalStartTransceive+0x26c>)
 800e52c:	2251      	movs	r2, #81	; 0x51
 800e52e:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800e530:	2300      	movs	r3, #0
 800e532:	e000      	b.n	800e536 <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800e534:	2321      	movs	r3, #33	; 0x21
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bdb0      	pop	{r4, r5, r7, pc}
 800e53e:	bf00      	nop
 800e540:	20000754 	.word	0x20000754
 800e544:	0ffff000 	.word	0x0ffff000
 800e548:	200007bc 	.word	0x200007bc

0800e54c <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800e550:	4b09      	ldr	r3, [pc, #36]	; (800e578 <rfalIsTransceiveInTx+0x2c>)
 800e552:	7d1b      	ldrb	r3, [r3, #20]
 800e554:	2b0a      	cmp	r3, #10
 800e556:	d905      	bls.n	800e564 <rfalIsTransceiveInTx+0x18>
 800e558:	4b07      	ldr	r3, [pc, #28]	; (800e578 <rfalIsTransceiveInTx+0x2c>)
 800e55a:	7d1b      	ldrb	r3, [r3, #20]
 800e55c:	2b50      	cmp	r3, #80	; 0x50
 800e55e:	d801      	bhi.n	800e564 <rfalIsTransceiveInTx+0x18>
 800e560:	2301      	movs	r3, #1
 800e562:	e000      	b.n	800e566 <rfalIsTransceiveInTx+0x1a>
 800e564:	2300      	movs	r3, #0
 800e566:	f003 0301 	and.w	r3, r3, #1
 800e56a:	b2db      	uxtb	r3, r3
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	20000754 	.word	0x20000754

0800e57c <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800e580:	4b05      	ldr	r3, [pc, #20]	; (800e598 <rfalIsTransceiveInRx+0x1c>)
 800e582:	7d1b      	ldrb	r3, [r3, #20]
 800e584:	2b50      	cmp	r3, #80	; 0x50
 800e586:	bf8c      	ite	hi
 800e588:	2301      	movhi	r3, #1
 800e58a:	2300      	movls	r3, #0
 800e58c:	b2db      	uxtb	r3, r3
}
 800e58e:	4618      	mov	r0, r3
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	20000754 	.word	0x20000754

0800e59c <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	; 0x30
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	607a      	str	r2, [r7, #4]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	817b      	strh	r3, [r7, #10]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	613b      	str	r3, [r7, #16]
 800e5b4:	897b      	ldrh	r3, [r7, #10]
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	82bb      	strh	r3, [r7, #20]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	61bb      	str	r3, [r7, #24]
 800e5c0:	893b      	ldrh	r3, [r7, #8]
 800e5c2:	00db      	lsls	r3, r3, #3
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	83bb      	strh	r3, [r7, #28]
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	623b      	str	r3, [r7, #32]
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d2:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800e5d4:	f107 0310 	add.w	r3, r7, #16
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff fe7b 	bl	800e2d4 <rfalStartTransceive>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e5e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <rfalTransceiveBlockingTx+0x50>
 800e5e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5ea:	e002      	b.n	800e5f2 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800e5ec:	f000 f805 	bl	800e5fa <rfalTransceiveRunBlockingTx>
 800e5f0:	4603      	mov	r3, r0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3730      	adds	r7, #48	; 0x30
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800e600:	f000 f8a6 	bl	800e750 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e604:	f000 f892 	bl	800e72c <rfalGetTransceiveStatus>
 800e608:	4603      	mov	r3, r0
 800e60a:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800e60c:	f7ff ff9e 	bl	800e54c <rfalIsTransceiveInTx>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <rfalTransceiveRunBlockingTx+0x22>
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d0f1      	beq.n	800e600 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800e61c:	f7ff ffae 	bl	800e57c <rfalIsTransceiveInRx>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800e626:	2300      	movs	r3, #0
 800e628:	e000      	b.n	800e62c <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800e62a:	88fb      	ldrh	r3, [r7, #6]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800e63a:	f000 f889 	bl	800e750 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e63e:	f000 f875 	bl	800e72c <rfalGetTransceiveStatus>
 800e642:	4603      	mov	r3, r0
 800e644:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800e646:	f7ff ff99 	bl	800e57c <rfalIsTransceiveInRx>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <rfalTransceiveBlockingRx+0x22>
 800e650:	88fb      	ldrh	r3, [r7, #6]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d0f1      	beq.n	800e63a <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800e656:	88fb      	ldrh	r3, [r7, #6]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08a      	sub	sp, #40	; 0x28
 800e664:	af04      	add	r7, sp, #16
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	461a      	mov	r2, r3
 800e66c:	460b      	mov	r3, r1
 800e66e:	817b      	strh	r3, [r7, #10]
 800e670:	4613      	mov	r3, r2
 800e672:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800e674:	893a      	ldrh	r2, [r7, #8]
 800e676:	8979      	ldrh	r1, [r7, #10]
 800e678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67a:	9302      	str	r3, [sp, #8]
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	6a3b      	ldr	r3, [r7, #32]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	4613      	mov	r3, r2
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff ff87 	bl	800e59c <rfalTransceiveBlockingTx>
 800e68e:	4603      	mov	r3, r0
 800e690:	82fb      	strh	r3, [r7, #22]
 800e692:	8afb      	ldrh	r3, [r7, #22]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <rfalTransceiveBlockingTxRx+0x3c>
 800e698:	8afb      	ldrh	r3, [r7, #22]
 800e69a:	e00e      	b.n	800e6ba <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800e69c:	f7ff ffca 	bl	800e634 <rfalTransceiveBlockingRx>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d006      	beq.n	800e6b8 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800e6aa:	6a3b      	ldr	r3, [r7, #32]
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	08db      	lsrs	r3, r3, #3
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	6a3b      	ldr	r3, [r7, #32]
 800e6b6:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800e6b8:	8afb      	ldrh	r3, [r7, #22]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
	...

0800e6c4 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800e6c8:	4b17      	ldr	r3, [pc, #92]	; (800e728 <rfalRunTransceiveWorker+0x64>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b03      	cmp	r3, #3
 800e6ce:	d127      	bne.n	800e720 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800e6d0:	4b15      	ldr	r3, [pc, #84]	; (800e728 <rfalRunTransceiveWorker+0x64>)
 800e6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00d      	beq.n	800e6f4 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800e6d8:	4b13      	ldr	r3, [pc, #76]	; (800e728 <rfalRunTransceiveWorker+0x64>)
 800e6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7f6 f80b 	bl	80046f8 <timerIsExpired>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d005      	beq.n	800e6f4 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800e6e8:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <rfalRunTransceiveWorker+0x64>)
 800e6ea:	2203      	movs	r2, #3
 800e6ec:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e6ee:	4b0e      	ldr	r3, [pc, #56]	; (800e728 <rfalRunTransceiveWorker+0x64>)
 800e6f0:	225a      	movs	r2, #90	; 0x5a
 800e6f2:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e6f4:	f7ff ff2a 	bl	800e54c <rfalIsTransceiveInTx>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800e6fe:	f000 f95d 	bl	800e9bc <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e702:	f000 f813 	bl	800e72c <rfalGetTransceiveStatus>
 800e706:	4603      	mov	r3, r0
 800e708:	e00b      	b.n	800e722 <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800e70a:	f7ff ff37 	bl	800e57c <rfalIsTransceiveInRx>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d005      	beq.n	800e720 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800e714:	f000 fb98 	bl	800ee48 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e718:	f000 f808 	bl	800e72c <rfalGetTransceiveStatus>
 800e71c:	4603      	mov	r3, r0
 800e71e:	e000      	b.n	800e722 <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800e720:	2321      	movs	r3, #33	; 0x21
}
 800e722:	4618      	mov	r0, r3
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	20000754 	.word	0x20000754

0800e72c <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e730:	4b06      	ldr	r3, [pc, #24]	; (800e74c <rfalGetTransceiveStatus+0x20>)
 800e732:	7d1b      	ldrb	r3, [r3, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d102      	bne.n	800e73e <rfalGetTransceiveStatus+0x12>
 800e738:	4b04      	ldr	r3, [pc, #16]	; (800e74c <rfalGetTransceiveStatus+0x20>)
 800e73a:	8adb      	ldrh	r3, [r3, #22]
 800e73c:	e000      	b.n	800e740 <rfalGetTransceiveStatus+0x14>
 800e73e:	2302      	movs	r3, #2
}
 800e740:	4618      	mov	r0, r3
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000754 	.word	0x20000754

0800e750 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e754:	4b07      	ldr	r3, [pc, #28]	; (800e774 <rfalWorker+0x24>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d002      	beq.n	800e762 <rfalWorker+0x12>
 800e75c:	2b05      	cmp	r3, #5
 800e75e:	d003      	beq.n	800e768 <rfalWorker+0x18>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e760:	e005      	b.n	800e76e <rfalWorker+0x1e>
            rfalRunTransceiveWorker();
 800e762:	f7ff ffaf 	bl	800e6c4 <rfalRunTransceiveWorker>
            break;
 800e766:	e002      	b.n	800e76e <rfalWorker+0x1e>
            rfalRunWakeUpModeWorker();
 800e768:	f001 fa34 	bl	800fbd4 <rfalRunWakeUpModeWorker>
            break;
 800e76c:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e76e:	bf00      	nop
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20000754 	.word	0x20000754

0800e778 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e77e:	f000 fee9 	bl	800f554 <rfalFIFOStatusGetNumBytes>
 800e782:	4603      	mov	r3, r0
 800e784:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e786:	4b17      	ldr	r3, [pc, #92]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e788:	785b      	ldrb	r3, [r3, #1]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d125      	bne.n	800e7da <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e78e:	4b15      	ldr	r3, [pc, #84]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e790:	8adb      	ldrh	r3, [r3, #22]
 800e792:	2b1b      	cmp	r3, #27
 800e794:	d003      	beq.n	800e79e <rfalErrorHandling+0x26>
 800e796:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e798:	8adb      	ldrh	r3, [r3, #22]
 800e79a:	2b15      	cmp	r3, #21
 800e79c:	d11d      	bne.n	800e7da <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800e79e:	f000 fef5 	bl	800f58c <rfalFIFOStatusIsIncompleteByte>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d018      	beq.n	800e7da <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e7aa:	6a1b      	ldr	r3, [r3, #32]
 800e7ac:	88fa      	ldrh	r2, [r7, #6]
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f002 fb38 	bl	8010e26 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e7b6:	4b0b      	ldr	r3, [pc, #44]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d007      	beq.n	800e7ce <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e7be:	f000 ff09 	bl	800f5d4 <rfalFIFOGetNumIncompleteBits>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ca:	b292      	uxth	r2, r2
 800e7cc:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e7ce:	4b05      	ldr	r3, [pc, #20]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e7d0:	2228      	movs	r2, #40	; 0x28
 800e7d2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e7d4:	4b03      	ldr	r3, [pc, #12]	; (800e7e4 <rfalErrorHandling+0x6c>)
 800e7d6:	225a      	movs	r2, #90	; 0x5a
 800e7d8:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20000754 	.word	0x20000754

0800e7e8 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800e7ec:	21e0      	movs	r1, #224	; 0xe0
 800e7ee:	2005      	movs	r0, #5
 800e7f0:	f002 fb96 	bl	8010f20 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e7f4:	2108      	movs	r1, #8
 800e7f6:	200c      	movs	r0, #12
 800e7f8:	f002 fbc9 	bl	8010f8e <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800e7fc:	4b05      	ldr	r3, [pc, #20]	; (800e814 <rfalCleanupTransceive+0x2c>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e802:	4b04      	ldr	r3, [pc, #16]	; (800e814 <rfalCleanupTransceive+0x2c>)
 800e804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800e80a:	4b02      	ldr	r3, [pc, #8]	; (800e814 <rfalCleanupTransceive+0x2c>)
 800e80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e80e:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e810:	bf00      	nop
 800e812:	bd80      	pop	{r7, pc}
 800e814:	20000754 	.word	0x20000754

0800e818 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800e81e:	4b64      	ldr	r3, [pc, #400]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e820:	785b      	ldrb	r3, [r3, #1]
 800e822:	2b0a      	cmp	r3, #10
 800e824:	d00e      	beq.n	800e844 <rfalPrepareTransceive+0x2c>
 800e826:	4b62      	ldr	r3, [pc, #392]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e828:	785b      	ldrb	r3, [r3, #1]
 800e82a:	2b0b      	cmp	r3, #11
 800e82c:	d00a      	beq.n	800e844 <rfalPrepareTransceive+0x2c>
 800e82e:	4b60      	ldr	r3, [pc, #384]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e830:	785b      	ldrb	r3, [r3, #1]
 800e832:	2b0c      	cmp	r3, #12
 800e834:	d006      	beq.n	800e844 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800e836:	20c2      	movs	r0, #194	; 0xc2
 800e838:	f002 fb11 	bl	8010e5e <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800e83c:	20d5      	movs	r0, #213	; 0xd5
 800e83e:	f002 fb0e 	bl	8010e5e <st25r3916ExecuteCommand>
 800e842:	e002      	b.n	800e84a <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800e844:	20db      	movs	r0, #219	; 0xdb
 800e846:	f002 fb0a 	bl	8010e5e <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e84a:	4b59      	ldr	r3, [pc, #356]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e84c:	785b      	ldrb	r3, [r3, #1]
 800e84e:	2b09      	cmp	r3, #9
 800e850:	d01c      	beq.n	800e88c <rfalPrepareTransceive+0x74>
 800e852:	4b57      	ldr	r3, [pc, #348]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e854:	785b      	ldrb	r3, [r3, #1]
 800e856:	2b0d      	cmp	r3, #13
 800e858:	d018      	beq.n	800e88c <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e85a:	4b55      	ldr	r3, [pc, #340]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d014      	beq.n	800e88c <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800e862:	4b53      	ldr	r3, [pc, #332]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	f240 423b 	movw	r2, #1083	; 0x43b
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d804      	bhi.n	800e878 <rfalPrepareTransceive+0x60>
 800e86e:	4b50      	ldr	r3, [pc, #320]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	08db      	lsrs	r3, r3, #3
 800e874:	b29b      	uxth	r3, r3
 800e876:	e005      	b.n	800e884 <rfalPrepareTransceive+0x6c>
 800e878:	4b4d      	ldr	r3, [pc, #308]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e880:	08db      	lsrs	r3, r3, #3
 800e882:	b29b      	uxth	r3, r3
 800e884:	2120      	movs	r1, #32
 800e886:	4618      	mov	r0, r3
 800e888:	f001 fddb 	bl	8010442 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e88c:	4b48      	ldr	r3, [pc, #288]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e88e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800e894:	4b46      	ldr	r3, [pc, #280]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e898:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800e89a:	4b46      	ldr	r3, [pc, #280]	; (800e9b4 <rfalPrepareTransceive+0x19c>)
 800e89c:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800e89e:	2300      	movs	r3, #0
 800e8a0:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e8a2:	4b43      	ldr	r3, [pc, #268]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a6:	f003 0304 	and.w	r3, r3, #4
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	f043 0320 	orr.w	r3, r3, #32
 800e8b4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e8b6:	4b3e      	ldr	r3, [pc, #248]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ba:	f003 0310 	and.w	r3, r3, #16
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800e8c2:	78fb      	ldrb	r3, [r7, #3]
 800e8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8c8:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e8ca:	4b39      	ldr	r3, [pc, #228]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ce:	f003 0320 	and.w	r3, r3, #32
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800e8d6:	78fb      	ldrb	r3, [r7, #3]
 800e8d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e8dc:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800e8de:	78fb      	ldrb	r3, [r7, #3]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	21e0      	movs	r1, #224	; 0xe0
 800e8e4:	2005      	movs	r0, #5
 800e8e6:	f002 fb7f 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e8ea:	4b31      	ldr	r3, [pc, #196]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ee:	f003 0308 	and.w	r3, r3, #8
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d004      	beq.n	800e900 <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e8f6:	2108      	movs	r1, #8
 800e8f8:	200c      	movs	r0, #12
 800e8fa:	f002 fb11 	bl	8010f20 <st25r3916ClrRegisterBits>
 800e8fe:	e003      	b.n	800e908 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e900:	2108      	movs	r1, #8
 800e902:	200c      	movs	r0, #12
 800e904:	f002 fb43 	bl	8010f8e <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e908:	4b29      	ldr	r3, [pc, #164]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e90a:	79db      	ldrb	r3, [r3, #7]
 800e90c:	2b02      	cmp	r3, #2
 800e90e:	d108      	bne.n	800e922 <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e910:	2102      	movs	r1, #2
 800e912:	2012      	movs	r0, #18
 800e914:	f002 fb3b 	bl	8010f8e <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f043 0302 	orr.w	r3, r3, #2
 800e91e:	607b      	str	r3, [r7, #4]
 800e920:	e003      	b.n	800e92a <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e922:	2102      	movs	r1, #2
 800e924:	2012      	movs	r0, #18
 800e926:	f002 fafb 	bl	8010f20 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800e92a:	4b21      	ldr	r3, [pc, #132]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e92c:	785b      	ldrb	r3, [r3, #1]
 800e92e:	2b0a      	cmp	r3, #10
 800e930:	d007      	beq.n	800e942 <rfalPrepareTransceive+0x12a>
 800e932:	4b1f      	ldr	r3, [pc, #124]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e934:	785b      	ldrb	r3, [r3, #1]
 800e936:	2b0b      	cmp	r3, #11
 800e938:	d003      	beq.n	800e942 <rfalPrepareTransceive+0x12a>
 800e93a:	4b1d      	ldr	r3, [pc, #116]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e93c:	785b      	ldrb	r3, [r3, #1]
 800e93e:	2b0c      	cmp	r3, #12
 800e940:	d103      	bne.n	800e94a <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800e948:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e94a:	4b19      	ldr	r3, [pc, #100]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e94c:	785b      	ldrb	r3, [r3, #1]
 800e94e:	2b09      	cmp	r3, #9
 800e950:	d003      	beq.n	800e95a <rfalPrepareTransceive+0x142>
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e954:	785b      	ldrb	r3, [r3, #1]
 800e956:	2b0d      	cmp	r3, #13
 800e958:	d105      	bne.n	800e966 <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e960:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e964:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e966:	4b12      	ldr	r3, [pc, #72]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96e:	d013      	beq.n	800e998 <rfalPrepareTransceive+0x180>
 800e970:	4b0f      	ldr	r3, [pc, #60]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00f      	beq.n	800e998 <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800e978:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97c:	4a0e      	ldr	r2, [pc, #56]	; (800e9b8 <rfalPrepareTransceive+0x1a0>)
 800e97e:	fba2 2303 	umull	r2, r3, r2, r3
 800e982:	0b1b      	lsrs	r3, r3, #12
 800e984:	b29b      	uxth	r3, r3
 800e986:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f5 fea5 	bl	80046dc <timerCalculateTimer>
 800e992:	4602      	mov	r2, r0
 800e994:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <rfalPrepareTransceive+0x198>)
 800e996:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f002 fd33 	bl	8011404 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f002 fd68 	bl	8011474 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e9a4:	f000 fdc8 	bl	800f538 <rfalFIFOStatusClear>
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20000754 	.word	0x20000754
 800e9b4:	00f04078 	.word	0x00f04078
 800e9b8:	4d542005 	.word	0x4d542005

0800e9bc <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800e9bc:	b5b0      	push	{r4, r5, r7, lr}
 800e9be:	b08a      	sub	sp, #40	; 0x28
 800e9c0:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e9ca:	4ba1      	ldr	r3, [pc, #644]	; (800ec50 <rfalTransceiveTx+0x294>)
 800e9cc:	7d1a      	ldrb	r2, [r3, #20]
 800e9ce:	4ba0      	ldr	r3, [pc, #640]	; (800ec50 <rfalTransceiveTx+0x294>)
 800e9d0:	7d5b      	ldrb	r3, [r3, #21]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d003      	beq.n	800e9de <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e9d6:	4b9e      	ldr	r3, [pc, #632]	; (800ec50 <rfalTransceiveTx+0x294>)
 800e9d8:	7d1a      	ldrb	r2, [r3, #20]
 800e9da:	4b9d      	ldr	r3, [pc, #628]	; (800ec50 <rfalTransceiveTx+0x294>)
 800e9dc:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e9de:	4b9c      	ldr	r3, [pc, #624]	; (800ec50 <rfalTransceiveTx+0x294>)
 800e9e0:	7d1b      	ldrb	r3, [r3, #20]
 800e9e2:	3b0b      	subs	r3, #11
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	f200 8212 	bhi.w	800ee0e <rfalTransceiveTx+0x452>
 800e9ea:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <rfalTransceiveTx+0x34>)
 800e9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f0:	0800ea15 	.word	0x0800ea15
 800e9f4:	0800ea1b 	.word	0x0800ea1b
 800e9f8:	0800ea39 	.word	0x0800ea39
 800e9fc:	0800ea61 	.word	0x0800ea61
 800ea00:	0800ebe1 	.word	0x0800ebe1
 800ea04:	0800ec1d 	.word	0x0800ec1d
 800ea08:	0800ed5f 	.word	0x0800ed5f
 800ea0c:	0800ed99 	.word	0x0800ed99
 800ea10:	0800ede5 	.word	0x0800ede5
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800ea14:	4b8e      	ldr	r3, [pc, #568]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea16:	220c      	movs	r2, #12
 800ea18:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800ea1a:	f7ff fbc3 	bl	800e1a4 <rfalIsGTExpired>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	f083 0301 	eor.w	r3, r3, #1
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f040 81f8 	bne.w	800ee1c <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800ea2c:	4b88      	ldr	r3, [pc, #544]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800ea32:	4b87      	ldr	r3, [pc, #540]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea34:	220d      	movs	r2, #13
 800ea36:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800ea38:	4b85      	ldr	r3, [pc, #532]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	2b09      	cmp	r3, #9
 800ea3e:	d00c      	beq.n	800ea5a <rfalTransceiveTx+0x9e>
 800ea40:	4b83      	ldr	r3, [pc, #524]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea42:	785b      	ldrb	r3, [r3, #1]
 800ea44:	2b0d      	cmp	r3, #13
 800ea46:	d008      	beq.n	800ea5a <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800ea48:	2204      	movs	r2, #4
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	2024      	movs	r0, #36	; 0x24
 800ea4e:	f002 fb4f 	bl	80110f0 <st25r3916CheckReg>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f040 81e3 	bne.w	800ee20 <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800ea5a:	4b7d      	ldr	r3, [pc, #500]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea5c:	220e      	movs	r2, #14
 800ea5e:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800ea60:	f7ff feda 	bl	800e818 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800ea64:	4b7a      	ldr	r3, [pc, #488]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea66:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ea6a:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ea6c:	4b78      	ldr	r3, [pc, #480]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea6e:	785b      	ldrb	r3, [r3, #1]
 800ea70:	2b07      	cmp	r3, #7
 800ea72:	d003      	beq.n	800ea7c <rfalTransceiveTx+0xc0>
 800ea74:	4b76      	ldr	r3, [pc, #472]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea76:	785b      	ldrb	r3, [r3, #1]
 800ea78:	2b08      	cmp	r3, #8
 800ea7a:	d152      	bne.n	800eb22 <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800ea7c:	4b74      	ldr	r3, [pc, #464]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800ea84:	4b72      	ldr	r3, [pc, #456]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea86:	6998      	ldr	r0, [r3, #24]
 800ea88:	4b71      	ldr	r3, [pc, #452]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea8a:	8b9b      	ldrh	r3, [r3, #28]
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	08db      	lsrs	r3, r3, #3
 800ea90:	b299      	uxth	r1, r3
 800ea92:	4b6f      	ldr	r3, [pc, #444]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ea94:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	bf0c      	ite	eq
 800eaa0:	2301      	moveq	r3, #1
 800eaa2:	2300      	movne	r3, #0
 800eaa4:	b2dc      	uxtb	r4, r3
 800eaa6:	4b6a      	ldr	r3, [pc, #424]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eaa8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	bf0c      	ite	eq
 800eab4:	2301      	moveq	r3, #1
 800eab6:	2300      	movne	r3, #0
 800eab8:	b2dd      	uxtb	r5, r3
 800eaba:	4b65      	ldr	r3, [pc, #404]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eabc:	785b      	ldrb	r3, [r3, #1]
 800eabe:	2b08      	cmp	r3, #8
 800eac0:	bf0c      	ite	eq
 800eac2:	2301      	moveq	r3, #1
 800eac4:	2300      	movne	r3, #0
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	4a62      	ldr	r2, [pc, #392]	; (800ec54 <rfalTransceiveTx+0x298>)
 800eaca:	9205      	str	r2, [sp, #20]
 800eacc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ead0:	9204      	str	r2, [sp, #16]
 800ead2:	4a61      	ldr	r2, [pc, #388]	; (800ec58 <rfalTransceiveTx+0x29c>)
 800ead4:	9203      	str	r2, [sp, #12]
 800ead6:	4a61      	ldr	r2, [pc, #388]	; (800ec5c <rfalTransceiveTx+0x2a0>)
 800ead8:	9202      	str	r2, [sp, #8]
 800eada:	4a61      	ldr	r2, [pc, #388]	; (800ec60 <rfalTransceiveTx+0x2a4>)
 800eadc:	9201      	str	r2, [sp, #4]
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	462b      	mov	r3, r5
 800eae2:	4622      	mov	r2, r4
 800eae4:	f7fe fb1c 	bl	800d120 <iso15693VCDCode>
 800eae8:	4603      	mov	r3, r0
 800eaea:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800eaec:	89fb      	ldrh	r3, [r7, #14]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d009      	beq.n	800eb06 <rfalTransceiveTx+0x14a>
 800eaf2:	89fb      	ldrh	r3, [r7, #14]
 800eaf4:	2b0d      	cmp	r3, #13
 800eaf6:	d006      	beq.n	800eb06 <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800eaf8:	4a55      	ldr	r2, [pc, #340]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eafa:	89fb      	ldrh	r3, [r7, #14]
 800eafc:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eafe:	4b54      	ldr	r3, [pc, #336]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb00:	2213      	movs	r2, #19
 800eb02:	751a      	strb	r2, [r3, #20]
                    break;
 800eb04:	e193      	b.n	800ee2e <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800eb06:	4b52      	ldr	r3, [pc, #328]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb0a:	00db      	lsls	r3, r3, #3
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 fc2a 	bl	8010368 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800eb14:	4b4e      	ldr	r3, [pc, #312]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb16:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb18:	4619      	mov	r1, r3
 800eb1a:	484f      	ldr	r0, [pc, #316]	; (800ec58 <rfalTransceiveTx+0x29c>)
 800eb1c:	f002 f960 	bl	8010de0 <st25r3916WriteFifo>
 800eb20:	e01d      	b.n	800eb5e <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800eb22:	4b4b      	ldr	r3, [pc, #300]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb24:	8b9b      	ldrh	r3, [r3, #28]
 800eb26:	3307      	adds	r3, #7
 800eb28:	08db      	lsrs	r3, r3, #3
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	4b48      	ldr	r3, [pc, #288]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb2e:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800eb30:	4b47      	ldr	r3, [pc, #284]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb32:	8b9b      	ldrh	r3, [r3, #28]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f001 fc17 	bl	8010368 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800eb3a:	4b45      	ldr	r3, [pc, #276]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb42:	bf28      	it	cs
 800eb44:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	4b41      	ldr	r3, [pc, #260]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb4c:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800eb4e:	4b40      	ldr	r3, [pc, #256]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	4b3f      	ldr	r3, [pc, #252]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb56:	4619      	mov	r1, r3
 800eb58:	4610      	mov	r0, r2
 800eb5a:	f002 f941 	bl	8010de0 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800eb5e:	4b3c      	ldr	r3, [pc, #240]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb60:	795b      	ldrb	r3, [r3, #5]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d008      	beq.n	800eb78 <rfalTransceiveTx+0x1bc>
 800eb66:	4b3a      	ldr	r3, [pc, #232]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb68:	795b      	ldrb	r3, [r3, #5]
 800eb6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	4619      	mov	r1, r3
 800eb72:	2001      	movs	r0, #1
 800eb74:	f002 f9af 	bl	8010ed6 <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800eb78:	4b35      	ldr	r3, [pc, #212]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	2b0a      	cmp	r3, #10
 800eb7e:	d007      	beq.n	800eb90 <rfalTransceiveTx+0x1d4>
 800eb80:	4b33      	ldr	r3, [pc, #204]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	2b0b      	cmp	r3, #11
 800eb86:	d003      	beq.n	800eb90 <rfalTransceiveTx+0x1d4>
 800eb88:	4b31      	ldr	r3, [pc, #196]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	2b0c      	cmp	r3, #12
 800eb8e:	d10e      	bne.n	800ebae <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800eb90:	f000 fdfe 	bl	800f790 <rfalIsExtFieldOn>
 800eb94:	4603      	mov	r3, r0
 800eb96:	f083 0301 	eor.w	r3, r3, #1
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d006      	beq.n	800ebae <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800eba0:	4b2b      	ldr	r3, [pc, #172]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eba2:	2225      	movs	r2, #37	; 0x25
 800eba4:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eba6:	4b2a      	ldr	r3, [pc, #168]	; (800ec50 <rfalTransceiveTx+0x294>)
 800eba8:	2213      	movs	r2, #19
 800ebaa:	751a      	strb	r2, [r3, #20]
                    break;
 800ebac:	e13f      	b.n	800ee2e <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800ebae:	4b28      	ldr	r3, [pc, #160]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ebb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800ebba:	20c5      	movs	r0, #197	; 0xc5
 800ebbc:	f002 f94f 	bl	8010e5e <st25r3916ExecuteCommand>
 800ebc0:	e002      	b.n	800ebc8 <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800ebc2:	20c4      	movs	r0, #196	; 0xc4
 800ebc4:	f002 f94b 	bl	8010e5e <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800ebc8:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ebca:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ebcc:	4b20      	ldr	r3, [pc, #128]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ebce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d201      	bcs.n	800ebd8 <rfalTransceiveTx+0x21c>
 800ebd4:	220f      	movs	r2, #15
 800ebd6:	e000      	b.n	800ebda <rfalTransceiveTx+0x21e>
 800ebd8:	2211      	movs	r2, #17
 800ebda:	4b1d      	ldr	r3, [pc, #116]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ebdc:	751a      	strb	r2, [r3, #20]
            break;
 800ebde:	e126      	b.n	800ee2e <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800ebe0:	2048      	movs	r0, #72	; 0x48
 800ebe2:	f002 fc0f 	bl	8011404 <st25r3916GetInterrupt>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 8119 	beq.w	800ee24 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d008      	beq.n	800ec0e <rfalTransceiveTx+0x252>
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	f003 0308 	and.w	r3, r3, #8
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d103      	bne.n	800ec0e <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800ec06:	4b12      	ldr	r3, [pc, #72]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec08:	2210      	movs	r2, #16
 800ec0a:	751a      	strb	r2, [r3, #20]
 800ec0c:	e006      	b.n	800ec1c <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800ec0e:	4b10      	ldr	r3, [pc, #64]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec10:	2203      	movs	r2, #3
 800ec12:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ec14:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec16:	2213      	movs	r2, #19
 800ec18:	751a      	strb	r2, [r3, #20]
                break;
 800ec1a:	e108      	b.n	800ee2e <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ec1c:	4b0c      	ldr	r3, [pc, #48]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	2b07      	cmp	r3, #7
 800ec22:	d003      	beq.n	800ec2c <rfalTransceiveTx+0x270>
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	2b08      	cmp	r3, #8
 800ec2a:	d16d      	bne.n	800ed08 <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800ec2c:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec30:	461a      	mov	r2, r3
 800ec32:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec34:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	4a05      	ldr	r2, [pc, #20]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec3a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	da11      	bge.n	800ec64 <rfalTransceiveTx+0x2a8>
 800ec40:	4b03      	ldr	r3, [pc, #12]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec42:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ec44:	4b02      	ldr	r3, [pc, #8]	; (800ec50 <rfalTransceiveTx+0x294>)
 800ec46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	e00c      	b.n	800ec68 <rfalTransceiveTx+0x2ac>
 800ec4e:	bf00      	nop
 800ec50:	20000754 	.word	0x20000754
 800ec54:	2000078c 	.word	0x2000078c
 800ec58:	200007bc 	.word	0x200007bc
 800ec5c:	200009c4 	.word	0x200009c4
 800ec60:	2000078a 	.word	0x2000078a
 800ec64:	4b74      	ldr	r3, [pc, #464]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ec66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ec68:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800ec6a:	89bb      	ldrh	r3, [r7, #12]
 800ec6c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ec70:	bf28      	it	cs
 800ec72:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800ec76:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800ec7c:	4b6e      	ldr	r3, [pc, #440]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ec7e:	6998      	ldr	r0, [r3, #24]
 800ec80:	4b6d      	ldr	r3, [pc, #436]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ec82:	8b9b      	ldrh	r3, [r3, #28]
 800ec84:	3307      	adds	r3, #7
 800ec86:	08db      	lsrs	r3, r3, #3
 800ec88:	b299      	uxth	r1, r3
 800ec8a:	4b6b      	ldr	r3, [pc, #428]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ec8c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bf0c      	ite	eq
 800ec98:	2301      	moveq	r3, #1
 800ec9a:	2300      	movne	r3, #0
 800ec9c:	b2dc      	uxtb	r4, r3
 800ec9e:	4b66      	ldr	r3, [pc, #408]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800eca0:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bf0c      	ite	eq
 800ecac:	2301      	moveq	r3, #1
 800ecae:	2300      	movne	r3, #0
 800ecb0:	b2dd      	uxtb	r5, r3
 800ecb2:	4b61      	ldr	r3, [pc, #388]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ecb4:	785b      	ldrb	r3, [r3, #1]
 800ecb6:	2b08      	cmp	r3, #8
 800ecb8:	bf0c      	ite	eq
 800ecba:	2301      	moveq	r3, #1
 800ecbc:	2300      	movne	r3, #0
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	1dba      	adds	r2, r7, #6
 800ecc2:	9205      	str	r2, [sp, #20]
 800ecc4:	89ba      	ldrh	r2, [r7, #12]
 800ecc6:	9204      	str	r2, [sp, #16]
 800ecc8:	4a5c      	ldr	r2, [pc, #368]	; (800ee3c <rfalTransceiveTx+0x480>)
 800ecca:	9203      	str	r2, [sp, #12]
 800eccc:	4a5c      	ldr	r2, [pc, #368]	; (800ee40 <rfalTransceiveTx+0x484>)
 800ecce:	9202      	str	r2, [sp, #8]
 800ecd0:	4a5c      	ldr	r2, [pc, #368]	; (800ee44 <rfalTransceiveTx+0x488>)
 800ecd2:	9201      	str	r2, [sp, #4]
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	462b      	mov	r3, r5
 800ecd8:	4622      	mov	r2, r4
 800ecda:	f7fe fa21 	bl	800d120 <iso15693VCDCode>
 800ecde:	4603      	mov	r3, r0
 800ece0:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800ece2:	89fb      	ldrh	r3, [r7, #14]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d009      	beq.n	800ecfc <rfalTransceiveTx+0x340>
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	2b0d      	cmp	r3, #13
 800ecec:	d006      	beq.n	800ecfc <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800ecee:	4a52      	ldr	r2, [pc, #328]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ecf0:	89fb      	ldrh	r3, [r7, #14]
 800ecf2:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ecf4:	4b50      	ldr	r3, [pc, #320]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ecf6:	2213      	movs	r2, #19
 800ecf8:	751a      	strb	r2, [r3, #20]
                    break;
 800ecfa:	e098      	b.n	800ee2e <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800ecfc:	88fb      	ldrh	r3, [r7, #6]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	484e      	ldr	r0, [pc, #312]	; (800ee3c <rfalTransceiveTx+0x480>)
 800ed02:	f002 f86d 	bl	8010de0 <st25r3916WriteFifo>
            {
 800ed06:	e017      	b.n	800ed38 <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800ed08:	4b4b      	ldr	r3, [pc, #300]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed0a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4b4a      	ldr	r3, [pc, #296]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed12:	4619      	mov	r1, r3
 800ed14:	4b48      	ldr	r3, [pc, #288]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed16:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ed18:	1acb      	subs	r3, r1, r3
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bfa8      	it	ge
 800ed1e:	4613      	movge	r3, r2
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800ed24:	4b44      	ldr	r3, [pc, #272]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	4a43      	ldr	r2, [pc, #268]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed2a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ed2c:	4413      	add	r3, r2
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f002 f854 	bl	8010de0 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800ed38:	4b3f      	ldr	r3, [pc, #252]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed3a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ed3c:	88fb      	ldrh	r3, [r7, #6]
 800ed3e:	4413      	add	r3, r2
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	4b3d      	ldr	r3, [pc, #244]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed44:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800ed46:	4b3c      	ldr	r3, [pc, #240]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed48:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ed4a:	4b3b      	ldr	r3, [pc, #236]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d201      	bcs.n	800ed56 <rfalTransceiveTx+0x39a>
 800ed52:	220f      	movs	r2, #15
 800ed54:	e000      	b.n	800ed58 <rfalTransceiveTx+0x39c>
 800ed56:	2211      	movs	r2, #17
 800ed58:	4b37      	ldr	r3, [pc, #220]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed5a:	751a      	strb	r2, [r3, #20]
            break;
 800ed5c:	e067      	b.n	800ee2e <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800ed5e:	2048      	movs	r0, #72	; 0x48
 800ed60:	f002 fb50 	bl	8011404 <st25r3916GetInterrupt>
 800ed64:	4603      	mov	r3, r0
 800ed66:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d05c      	beq.n	800ee28 <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f003 0308 	and.w	r3, r3, #8
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800ed78:	4b2f      	ldr	r3, [pc, #188]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed7a:	2212      	movs	r2, #18
 800ed7c:	751a      	strb	r2, [r3, #20]
 800ed7e:	e00b      	b.n	800ed98 <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d150      	bne.n	800ee2c <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800ed8a:	4b2b      	ldr	r3, [pc, #172]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed8c:	2203      	movs	r2, #3
 800ed8e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ed90:	4b29      	ldr	r3, [pc, #164]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed92:	2213      	movs	r2, #19
 800ed94:	751a      	strb	r2, [r3, #20]
               break;
 800ed96:	e04a      	b.n	800ee2e <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800ed98:	4b27      	ldr	r3, [pc, #156]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ed9a:	6a1b      	ldr	r3, [r3, #32]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d110      	bne.n	800edc2 <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800eda0:	4b25      	ldr	r3, [pc, #148]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800eda2:	799b      	ldrb	r3, [r3, #6]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d003      	beq.n	800edb0 <rfalTransceiveTx+0x3f4>
 800eda8:	2140      	movs	r1, #64	; 0x40
 800edaa:	2001      	movs	r0, #1
 800edac:	f002 f893 	bl	8010ed6 <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800edb0:	f7ff fd1a 	bl	800e7e8 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800edb4:	4b20      	ldr	r3, [pc, #128]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800edba:	4b1f      	ldr	r3, [pc, #124]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	751a      	strb	r2, [r3, #20]
                break;
 800edc0:	e035      	b.n	800ee2e <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800edc2:	4b1d      	ldr	r3, [pc, #116]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edc4:	799b      	ldrb	r3, [r3, #6]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d008      	beq.n	800eddc <rfalTransceiveTx+0x420>
 800edca:	4b1b      	ldr	r3, [pc, #108]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edcc:	799b      	ldrb	r3, [r3, #6]
 800edce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	4619      	mov	r1, r3
 800edd6:	2001      	movs	r0, #1
 800edd8:	f002 f87d 	bl	8010ed6 <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800eddc:	4b16      	ldr	r3, [pc, #88]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edde:	2251      	movs	r2, #81	; 0x51
 800ede0:	751a      	strb	r2, [r3, #20]
            break;
 800ede2:	e024      	b.n	800ee2e <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ede4:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ede6:	8adb      	ldrh	r3, [r3, #22]
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d102      	bne.n	800edf2 <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800edec:	4b12      	ldr	r3, [pc, #72]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edee:	2208      	movs	r2, #8
 800edf0:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800edf2:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800edf4:	799b      	ldrb	r3, [r3, #6]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <rfalTransceiveTx+0x446>
 800edfa:	2140      	movs	r1, #64	; 0x40
 800edfc:	2001      	movs	r0, #1
 800edfe:	f002 f86a 	bl	8010ed6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ee02:	f7ff fcf1 	bl	800e7e8 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ee06:	4b0c      	ldr	r3, [pc, #48]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	751a      	strb	r2, [r3, #20]
            break;
 800ee0c:	e00f      	b.n	800ee2e <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ee0e:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ee10:	2208      	movs	r2, #8
 800ee12:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ee14:	4b08      	ldr	r3, [pc, #32]	; (800ee38 <rfalTransceiveTx+0x47c>)
 800ee16:	2213      	movs	r2, #19
 800ee18:	751a      	strb	r2, [r3, #20]
            break;
 800ee1a:	e008      	b.n	800ee2e <rfalTransceiveTx+0x472>
                break;
 800ee1c:	bf00      	nop
 800ee1e:	e006      	b.n	800ee2e <rfalTransceiveTx+0x472>
                   break;
 800ee20:	bf00      	nop
 800ee22:	e004      	b.n	800ee2e <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ee24:	bf00      	nop
 800ee26:	e002      	b.n	800ee2e <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ee28:	bf00      	nop
 800ee2a:	e000      	b.n	800ee2e <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800ee2c:	bf00      	nop
    }
}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bdb0      	pop	{r4, r5, r7, pc}
 800ee36:	bf00      	nop
 800ee38:	20000754 	.word	0x20000754
 800ee3c:	200007bc 	.word	0x200007bc
 800ee40:	200009c4 	.word	0x200009c4
 800ee44:	2000078a 	.word	0x2000078a

0800ee48 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee4a:	b089      	sub	sp, #36	; 0x24
 800ee4c:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800ee52:	4baf      	ldr	r3, [pc, #700]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ee54:	7d1a      	ldrb	r2, [r3, #20]
 800ee56:	4bae      	ldr	r3, [pc, #696]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ee58:	7d5b      	ldrb	r3, [r3, #21]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d003      	beq.n	800ee66 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800ee5e:	4bac      	ldr	r3, [pc, #688]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ee60:	7d1a      	ldrb	r2, [r3, #20]
 800ee62:	4bab      	ldr	r3, [pc, #684]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ee64:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800ee66:	4baa      	ldr	r3, [pc, #680]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ee68:	7d1b      	ldrb	r3, [r3, #20]
 800ee6a:	3b51      	subs	r3, #81	; 0x51
 800ee6c:	2b09      	cmp	r3, #9
 800ee6e:	f200 8339 	bhi.w	800f4e4 <rfalTransceiveRx+0x69c>
 800ee72:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <rfalTransceiveRx+0x30>)
 800ee74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee78:	0800eea1 	.word	0x0800eea1
 800ee7c:	0800f451 	.word	0x0800f451
 800ee80:	0800eed9 	.word	0x0800eed9
 800ee84:	0800ef7d 	.word	0x0800ef7d
 800ee88:	0800f395 	.word	0x0800f395
 800ee8c:	0800f05b 	.word	0x0800f05b
 800ee90:	0800f18f 	.word	0x0800f18f
 800ee94:	0800f49b 	.word	0x0800f49b
 800ee98:	0800f36d 	.word	0x0800f36d
 800ee9c:	0800f427 	.word	0x0800f427
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800eea0:	4b9b      	ldr	r3, [pc, #620]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800eea6:	4b9a      	ldr	r3, [pc, #616]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800eeac:	4b98      	ldr	r3, [pc, #608]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d003      	beq.n	800eebc <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800eeb4:	4b96      	ldr	r3, [pc, #600]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb8:	2200      	movs	r2, #0
 800eeba:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800eebc:	4b94      	ldr	r3, [pc, #592]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	2b09      	cmp	r3, #9
 800eec2:	d003      	beq.n	800eecc <rfalTransceiveRx+0x84>
 800eec4:	4b92      	ldr	r3, [pc, #584]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	2b0d      	cmp	r3, #13
 800eeca:	d101      	bne.n	800eed0 <rfalTransceiveRx+0x88>
 800eecc:	2252      	movs	r2, #82	; 0x52
 800eece:	e000      	b.n	800eed2 <rfalTransceiveRx+0x8a>
 800eed0:	2253      	movs	r2, #83	; 0x53
 800eed2:	4b8f      	ldr	r3, [pc, #572]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800eed4:	751a      	strb	r2, [r3, #20]
            break;
 800eed6:	e315      	b.n	800f504 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800eed8:	f644 0020 	movw	r0, #18464	; 0x4820
 800eedc:	f002 fa92 	bl	8011404 <st25r3916GetInterrupt>
 800eee0:	4603      	mov	r3, r0
 800eee2:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 8303 	beq.w	800f4f2 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <rfalTransceiveRx+0xc6>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d106      	bne.n	800ef0e <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800ef00:	4b83      	ldr	r3, [pc, #524]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef02:	2204      	movs	r2, #4
 800ef04:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef06:	4b82      	ldr	r3, [pc, #520]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef08:	225a      	movs	r2, #90	; 0x5a
 800ef0a:	751a      	strb	r2, [r3, #20]
                break;
 800ef0c:	e2fa      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d015      	beq.n	800ef44 <rfalTransceiveRx+0xfc>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d110      	bne.n	800ef44 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800ef22:	4b7b      	ldr	r3, [pc, #492]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef24:	785b      	ldrb	r3, [r3, #1]
 800ef26:	2b09      	cmp	r3, #9
 800ef28:	d003      	beq.n	800ef32 <rfalTransceiveRx+0xea>
 800ef2a:	4b79      	ldr	r3, [pc, #484]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	2b0d      	cmp	r3, #13
 800ef30:	d101      	bne.n	800ef36 <rfalTransceiveRx+0xee>
 800ef32:	2204      	movs	r2, #4
 800ef34:	e000      	b.n	800ef38 <rfalTransceiveRx+0xf0>
 800ef36:	2225      	movs	r2, #37	; 0x25
 800ef38:	4b75      	ldr	r3, [pc, #468]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef3a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef3c:	4b74      	ldr	r3, [pc, #464]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef3e:	225a      	movs	r2, #90	; 0x5a
 800ef40:	751a      	strb	r2, [r3, #20]
                break;
 800ef42:	e2df      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f003 0320 	and.w	r3, r3, #32
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00f      	beq.n	800ef6e <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800ef4e:	2032      	movs	r0, #50	; 0x32
 800ef50:	f7f5 fbc4 	bl	80046dc <timerCalculateTimer>
 800ef54:	4602      	mov	r2, r0
 800ef56:	4b6e      	ldr	r3, [pc, #440]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef58:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ef5a:	4b6d      	ldr	r3, [pc, #436]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef5c:	2254      	movs	r2, #84	; 0x54
 800ef5e:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef66:	f023 0320 	bic.w	r3, r3, #32
 800ef6a:	607b      	str	r3, [r7, #4]
 800ef6c:	e006      	b.n	800ef7c <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800ef6e:	4b68      	ldr	r3, [pc, #416]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef70:	2203      	movs	r2, #3
 800ef72:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef74:	4b66      	ldr	r3, [pc, #408]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef76:	225a      	movs	r2, #90	; 0x5a
 800ef78:	751a      	strb	r2, [r3, #20]
                break;
 800ef7a:	e2c3      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800ef7c:	4b64      	ldr	r3, [pc, #400]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f5 fbb9 	bl	80046f8 <timerIsExpired>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d005      	beq.n	800ef98 <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800ef8c:	4b60      	ldr	r3, [pc, #384]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef8e:	2209      	movs	r2, #9
 800ef90:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef92:	4b5f      	ldr	r3, [pc, #380]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800ef94:	225a      	movs	r2, #90	; 0x5a
 800ef96:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800ef98:	485e      	ldr	r0, [pc, #376]	; (800f114 <rfalTransceiveRx+0x2cc>)
 800ef9a:	f002 fa33 	bl	8011404 <st25r3916GetInterrupt>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 82a4 	beq.w	800f4f6 <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f003 0302 	and.w	r3, r3, #2
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d02f      	beq.n	800f018 <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800efb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800efbc:	f002 fa22 	bl	8011404 <st25r3916GetInterrupt>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d006      	beq.n	800efd4 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800efc6:	4b52      	ldr	r3, [pc, #328]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800efc8:	2204      	movs	r2, #4
 800efca:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800efcc:	4b50      	ldr	r3, [pc, #320]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800efce:	225a      	movs	r2, #90	; 0x5a
 800efd0:	751a      	strb	r2, [r3, #20]
                    break;
 800efd2:	e297      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800efd4:	2200      	movs	r2, #0
 800efd6:	2102      	movs	r1, #2
 800efd8:	2024      	movs	r0, #36	; 0x24
 800efda:	f002 f889 	bl	80110f0 <st25r3916CheckReg>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d006      	beq.n	800eff2 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800efe4:	4b4a      	ldr	r3, [pc, #296]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800efe6:	2204      	movs	r2, #4
 800efe8:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800efea:	4b49      	ldr	r3, [pc, #292]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800efec:	225a      	movs	r2, #90	; 0x5a
 800efee:	751a      	strb	r2, [r3, #20]
                    break;
 800eff0:	e288      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800eff2:	2020      	movs	r0, #32
 800eff4:	f002 fa06 	bl	8011404 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800eff8:	2204      	movs	r2, #4
 800effa:	2104      	movs	r1, #4
 800effc:	2031      	movs	r0, #49	; 0x31
 800effe:	f002 f877 	bl	80110f0 <st25r3916CheckReg>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d003      	beq.n	800f010 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f008:	4b41      	ldr	r3, [pc, #260]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f00a:	2254      	movs	r2, #84	; 0x54
 800f00c:	751a      	strb	r2, [r3, #20]
                    break;
 800f00e:	e279      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f010:	4b3f      	ldr	r3, [pc, #252]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f012:	2253      	movs	r2, #83	; 0x53
 800f014:	751a      	strb	r2, [r3, #20]
                break;
 800f016:	e275      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <rfalTransceiveRx+0x1ec>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f003 0310 	and.w	r3, r3, #16
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d103      	bne.n	800f034 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800f02c:	4b38      	ldr	r3, [pc, #224]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f02e:	2255      	movs	r2, #85	; 0x55
 800f030:	751a      	strb	r2, [r3, #20]
                break;
 800f032:	e267      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f03e:	4b34      	ldr	r3, [pc, #208]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f040:	2253      	movs	r2, #83	; 0x53
 800f042:	751a      	strb	r2, [r3, #20]
                break;
 800f044:	e25e      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800f046:	4834      	ldr	r0, [pc, #208]	; (800f118 <rfalTransceiveRx+0x2d0>)
 800f048:	f002 f9dc 	bl	8011404 <st25r3916GetInterrupt>
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	4313      	orrs	r3, r2
 800f052:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800f054:	4b2e      	ldr	r3, [pc, #184]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f056:	2256      	movs	r2, #86	; 0x56
 800f058:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f060:	2b00      	cmp	r3, #0
 800f062:	d008      	beq.n	800f076 <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f064:	4b2a      	ldr	r3, [pc, #168]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f066:	2209      	movs	r2, #9
 800f068:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f06a:	4b29      	ldr	r3, [pc, #164]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f06c:	2257      	movs	r2, #87	; 0x57
 800f06e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f070:	f7ff fb82 	bl	800e778 <rfalErrorHandling>
                break;
 800f074:	e246      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800f076:	4b26      	ldr	r3, [pc, #152]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f078:	785b      	ldrb	r3, [r3, #1]
 800f07a:	2b09      	cmp	r3, #9
 800f07c:	d01d      	beq.n	800f0ba <rfalTransceiveRx+0x272>
 800f07e:	4b24      	ldr	r3, [pc, #144]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f080:	785b      	ldrb	r3, [r3, #1]
 800f082:	2b0d      	cmp	r3, #13
 800f084:	d019      	beq.n	800f0ba <rfalTransceiveRx+0x272>
 800f086:	4b22      	ldr	r3, [pc, #136]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f088:	785b      	ldrb	r3, [r3, #1]
 800f08a:	2b0a      	cmp	r3, #10
 800f08c:	d015      	beq.n	800f0ba <rfalTransceiveRx+0x272>
 800f08e:	4b20      	ldr	r3, [pc, #128]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f090:	785b      	ldrb	r3, [r3, #1]
 800f092:	2b0b      	cmp	r3, #11
 800f094:	d011      	beq.n	800f0ba <rfalTransceiveRx+0x272>
 800f096:	4b1e      	ldr	r3, [pc, #120]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f098:	785b      	ldrb	r3, [r3, #1]
 800f09a:	2b0c      	cmp	r3, #12
 800f09c:	d00d      	beq.n	800f0ba <rfalTransceiveRx+0x272>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d008      	beq.n	800f0ba <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f0a8:	4b19      	ldr	r3, [pc, #100]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0aa:	2209      	movs	r2, #9
 800f0ac:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f0ae:	4b18      	ldr	r3, [pc, #96]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0b0:	2257      	movs	r2, #87	; 0x57
 800f0b2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f0b4:	f7ff fb60 	bl	800e778 <rfalErrorHandling>
                break;
 800f0b8:	e224      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d008      	beq.n	800f0d6 <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800f0c4:	4b12      	ldr	r3, [pc, #72]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0c6:	221b      	movs	r2, #27
 800f0c8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0cc:	2257      	movs	r2, #87	; 0x57
 800f0ce:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f0d0:	f7ff fb52 	bl	800e778 <rfalErrorHandling>
                break;
 800f0d4:	e216      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d008      	beq.n	800f0f2 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800f0e0:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0e2:	2215      	movs	r2, #21
 800f0e4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0e8:	2257      	movs	r2, #87	; 0x57
 800f0ea:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f0ec:	f7ff fb44 	bl	800e778 <rfalErrorHandling>
                break;
 800f0f0:	e208      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f003 0304 	and.w	r3, r3, #4
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00f      	beq.n	800f11c <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f0fc:	4b04      	ldr	r3, [pc, #16]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f0fe:	221d      	movs	r2, #29
 800f100:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f102:	4b03      	ldr	r3, [pc, #12]	; (800f110 <rfalTransceiveRx+0x2c8>)
 800f104:	2257      	movs	r2, #87	; 0x57
 800f106:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f108:	f7ff fb36 	bl	800e778 <rfalErrorHandling>
                break;
 800f10c:	e1fa      	b.n	800f504 <rfalTransceiveRx+0x6bc>
 800f10e:	bf00      	nop
 800f110:	20000754 	.word	0x20000754
 800f114:	08000852 	.word	0x08000852
 800f118:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800f11c:	4b9c      	ldr	r3, [pc, #624]	; (800f390 <rfalTransceiveRx+0x548>)
 800f11e:	785b      	ldrb	r3, [r3, #1]
 800f120:	2b0a      	cmp	r3, #10
 800f122:	d007      	beq.n	800f134 <rfalTransceiveRx+0x2ec>
 800f124:	4b9a      	ldr	r3, [pc, #616]	; (800f390 <rfalTransceiveRx+0x548>)
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b0b      	cmp	r3, #11
 800f12a:	d003      	beq.n	800f134 <rfalTransceiveRx+0x2ec>
 800f12c:	4b98      	ldr	r3, [pc, #608]	; (800f390 <rfalTransceiveRx+0x548>)
 800f12e:	785b      	ldrb	r3, [r3, #1]
 800f130:	2b0c      	cmp	r3, #12
 800f132:	d10b      	bne.n	800f14c <rfalTransceiveRx+0x304>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d006      	beq.n	800f14c <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f13e:	4b94      	ldr	r3, [pc, #592]	; (800f390 <rfalTransceiveRx+0x548>)
 800f140:	2225      	movs	r2, #37	; 0x25
 800f142:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f144:	4b92      	ldr	r3, [pc, #584]	; (800f390 <rfalTransceiveRx+0x548>)
 800f146:	225a      	movs	r2, #90	; 0x5a
 800f148:	751a      	strb	r2, [r3, #20]
                 break;
 800f14a:	e1db      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f003 0310 	and.w	r3, r3, #16
 800f152:	2b00      	cmp	r3, #0
 800f154:	d014      	beq.n	800f180 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800f156:	f000 fa19 	bl	800f58c <rfalFIFOStatusIsIncompleteByte>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800f160:	4b8b      	ldr	r3, [pc, #556]	; (800f390 <rfalTransceiveRx+0x548>)
 800f162:	2228      	movs	r2, #40	; 0x28
 800f164:	82da      	strh	r2, [r3, #22]
 800f166:	e007      	b.n	800f178 <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800f168:	f000 fa22 	bl	800f5b0 <rfalFIFOStatusIsMissingPar>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d002      	beq.n	800f178 <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800f172:	4b87      	ldr	r3, [pc, #540]	; (800f390 <rfalTransceiveRx+0x548>)
 800f174:	2209      	movs	r2, #9
 800f176:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800f178:	4b85      	ldr	r3, [pc, #532]	; (800f390 <rfalTransceiveRx+0x548>)
 800f17a:	2257      	movs	r2, #87	; 0x57
 800f17c:	751a      	strb	r2, [r3, #20]
 800f17e:	e006      	b.n	800f18e <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800f180:	4b83      	ldr	r3, [pc, #524]	; (800f390 <rfalTransceiveRx+0x548>)
 800f182:	2203      	movs	r2, #3
 800f184:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f186:	4b82      	ldr	r3, [pc, #520]	; (800f390 <rfalTransceiveRx+0x548>)
 800f188:	225a      	movs	r2, #90	; 0x5a
 800f18a:	751a      	strb	r2, [r3, #20]
                break;
 800f18c:	e1ba      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800f18e:	f000 f9e1 	bl	800f554 <rfalFIFOStatusGetNumBytes>
 800f192:	4603      	mov	r3, r0
 800f194:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800f196:	4b7e      	ldr	r3, [pc, #504]	; (800f390 <rfalTransceiveRx+0x548>)
 800f198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19a:	f003 0302 	and.w	r3, r3, #2
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d117      	bne.n	800f1d2 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800f1a2:	4b7b      	ldr	r3, [pc, #492]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1a4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f1a6:	89fb      	ldrh	r3, [r7, #14]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d010      	beq.n	800f1d2 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800f1b0:	89fb      	ldrh	r3, [r7, #14]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d903      	bls.n	800f1be <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800f1b6:	89fb      	ldrh	r3, [r7, #14]
 800f1b8:	3b02      	subs	r3, #2
 800f1ba:	81fb      	strh	r3, [r7, #14]
 800f1bc:	e009      	b.n	800f1d2 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800f1be:	4b74      	ldr	r3, [pc, #464]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d905      	bls.n	800f1d2 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800f1c6:	4b72      	ldr	r3, [pc, #456]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1ca:	3b02      	subs	r3, #2
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	4b70      	ldr	r3, [pc, #448]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1d0:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800f1d2:	4b6f      	ldr	r3, [pc, #444]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1d4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f1d6:	89fb      	ldrh	r3, [r7, #14]
 800f1d8:	4413      	add	r3, r2
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	4b6c      	ldr	r3, [pc, #432]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1de:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800f1e0:	4b6b      	ldr	r3, [pc, #428]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1e2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f1e4:	4b6a      	ldr	r3, [pc, #424]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1e8:	3307      	adds	r3, #7
 800f1ea:	08db      	lsrs	r3, r3, #3
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d90f      	bls.n	800f212 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800f1f2:	4b67      	ldr	r3, [pc, #412]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1f6:	3307      	adds	r3, #7
 800f1f8:	08db      	lsrs	r3, r3, #3
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	4b64      	ldr	r3, [pc, #400]	; (800f390 <rfalTransceiveRx+0x548>)
 800f1fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800f204:	4b62      	ldr	r3, [pc, #392]	; (800f390 <rfalTransceiveRx+0x548>)
 800f206:	8adb      	ldrh	r3, [r3, #22]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d102      	bne.n	800f212 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800f20c:	4b60      	ldr	r3, [pc, #384]	; (800f390 <rfalTransceiveRx+0x548>)
 800f20e:	2201      	movs	r2, #1
 800f210:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800f212:	4b5f      	ldr	r3, [pc, #380]	; (800f390 <rfalTransceiveRx+0x548>)
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	4a5e      	ldr	r2, [pc, #376]	; (800f390 <rfalTransceiveRx+0x548>)
 800f218:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f21a:	4413      	add	r3, r2
 800f21c:	89fa      	ldrh	r2, [r7, #14]
 800f21e:	4611      	mov	r1, r2
 800f220:	4618      	mov	r0, r3
 800f222:	f001 fe00 	bl	8010e26 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800f226:	4b5a      	ldr	r3, [pc, #360]	; (800f390 <rfalTransceiveRx+0x548>)
 800f228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d019      	beq.n	800f262 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800f22e:	4b58      	ldr	r3, [pc, #352]	; (800f390 <rfalTransceiveRx+0x548>)
 800f230:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f232:	4b57      	ldr	r3, [pc, #348]	; (800f390 <rfalTransceiveRx+0x548>)
 800f234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f236:	00d2      	lsls	r2, r2, #3
 800f238:	b292      	uxth	r2, r2
 800f23a:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800f23c:	f000 f9a6 	bl	800f58c <rfalFIFOStatusIsIncompleteByte>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00d      	beq.n	800f262 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800f246:	f000 f9c5 	bl	800f5d4 <rfalFIFOGetNumIncompleteBits>
 800f24a:	4603      	mov	r3, r0
 800f24c:	f1c3 0208 	rsb	r2, r3, #8
 800f250:	4b4f      	ldr	r3, [pc, #316]	; (800f390 <rfalTransceiveRx+0x548>)
 800f252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f254:	8819      	ldrh	r1, [r3, #0]
 800f256:	b292      	uxth	r2, r2
 800f258:	4b4d      	ldr	r3, [pc, #308]	; (800f390 <rfalTransceiveRx+0x548>)
 800f25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25c:	1a8a      	subs	r2, r1, r2
 800f25e:	b292      	uxth	r2, r2
 800f260:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800f262:	4b4b      	ldr	r3, [pc, #300]	; (800f390 <rfalTransceiveRx+0x548>)
 800f264:	785b      	ldrb	r3, [r3, #1]
 800f266:	2b07      	cmp	r3, #7
 800f268:	d003      	beq.n	800f272 <rfalTransceiveRx+0x42a>
 800f26a:	4b49      	ldr	r3, [pc, #292]	; (800f390 <rfalTransceiveRx+0x548>)
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	2b08      	cmp	r3, #8
 800f270:	d165      	bne.n	800f33e <rfalTransceiveRx+0x4f6>
 800f272:	4b47      	ldr	r3, [pc, #284]	; (800f390 <rfalTransceiveRx+0x548>)
 800f274:	8adb      	ldrh	r3, [r3, #22]
 800f276:	2b02      	cmp	r3, #2
 800f278:	d161      	bne.n	800f33e <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800f27a:	2300      	movs	r3, #0
 800f27c:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f27e:	4b44      	ldr	r3, [pc, #272]	; (800f390 <rfalTransceiveRx+0x548>)
 800f280:	6a18      	ldr	r0, [r3, #32]
 800f282:	4b43      	ldr	r3, [pc, #268]	; (800f390 <rfalTransceiveRx+0x548>)
 800f284:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800f286:	4b42      	ldr	r3, [pc, #264]	; (800f390 <rfalTransceiveRx+0x548>)
 800f288:	f8d3 527c 	ldr.w	r5, [r3, #636]	; 0x27c
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f28c:	4b40      	ldr	r3, [pc, #256]	; (800f390 <rfalTransceiveRx+0x548>)
 800f28e:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800f292:	3307      	adds	r3, #7
 800f294:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f296:	b29e      	uxth	r6, r3
 800f298:	4b3d      	ldr	r3, [pc, #244]	; (800f390 <rfalTransceiveRx+0x548>)
 800f29a:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f29e:	4a3c      	ldr	r2, [pc, #240]	; (800f390 <rfalTransceiveRx+0x548>)
 800f2a0:	f8b2 2290 	ldrh.w	r2, [r2, #656]	; 0x290
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f2a4:	493a      	ldr	r1, [pc, #232]	; (800f390 <rfalTransceiveRx+0x548>)
 800f2a6:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f2a8:	2908      	cmp	r1, #8
 800f2aa:	bf0c      	ite	eq
 800f2ac:	2101      	moveq	r1, #1
 800f2ae:	2100      	movne	r1, #0
 800f2b0:	b2c9      	uxtb	r1, r1
 800f2b2:	9103      	str	r1, [sp, #12]
 800f2b4:	9202      	str	r2, [sp, #8]
 800f2b6:	9301      	str	r3, [sp, #4]
 800f2b8:	1cbb      	adds	r3, r7, #2
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	4633      	mov	r3, r6
 800f2be:	462a      	mov	r2, r5
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	f7fe f8a3 	bl	800d40c <iso15693VICCDecode>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800f2ca:	897b      	ldrh	r3, [r7, #10]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <rfalTransceiveRx+0x48e>
 800f2d0:	897b      	ldrh	r3, [r7, #10]
 800f2d2:	2b15      	cmp	r3, #21
 800f2d4:	d11f      	bne.n	800f316 <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800f2d6:	4b2e      	ldr	r3, [pc, #184]	; (800f390 <rfalTransceiveRx+0x548>)
 800f2d8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f2dc:	f003 0302 	and.w	r3, r3, #2
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d118      	bne.n	800f316 <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800f2e4:	4b2a      	ldr	r3, [pc, #168]	; (800f390 <rfalTransceiveRx+0x548>)
 800f2e6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	f003 0307 	and.w	r3, r3, #7
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10f      	bne.n	800f316 <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800f2f6:	4b26      	ldr	r3, [pc, #152]	; (800f390 <rfalTransceiveRx+0x548>)
 800f2f8:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	2b0f      	cmp	r3, #15
 800f300:	d909      	bls.n	800f316 <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800f302:	4b23      	ldr	r3, [pc, #140]	; (800f390 <rfalTransceiveRx+0x548>)
 800f304:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f308:	881a      	ldrh	r2, [r3, #0]
 800f30a:	4b21      	ldr	r3, [pc, #132]	; (800f390 <rfalTransceiveRx+0x548>)
 800f30c:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f310:	3a10      	subs	r2, #16
 800f312:	b292      	uxth	r2, r2
 800f314:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800f316:	4a1e      	ldr	r2, [pc, #120]	; (800f390 <rfalTransceiveRx+0x548>)
 800f318:	4b1d      	ldr	r3, [pc, #116]	; (800f390 <rfalTransceiveRx+0x548>)
 800f31a:	f102 0418 	add.w	r4, r2, #24
 800f31e:	f503 751d 	add.w	r5, r3, #628	; 0x274
 800f322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f32a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800f32e:	897b      	ldrh	r3, [r7, #10]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <rfalTransceiveRx+0x4f0>
 800f334:	897b      	ldrh	r3, [r7, #10]
 800f336:	e000      	b.n	800f33a <rfalTransceiveRx+0x4f2>
 800f338:	2302      	movs	r3, #2
 800f33a:	4a15      	ldr	r2, [pc, #84]	; (800f390 <rfalTransceiveRx+0x548>)
 800f33c:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800f33e:	4b14      	ldr	r3, [pc, #80]	; (800f390 <rfalTransceiveRx+0x548>)
 800f340:	8adb      	ldrh	r3, [r3, #22]
 800f342:	2b02      	cmp	r3, #2
 800f344:	d003      	beq.n	800f34e <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800f346:	4b12      	ldr	r3, [pc, #72]	; (800f390 <rfalTransceiveRx+0x548>)
 800f348:	225a      	movs	r2, #90	; 0x5a
 800f34a:	751a      	strb	r2, [r3, #20]
                break;
 800f34c:	e0da      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800f34e:	4b10      	ldr	r3, [pc, #64]	; (800f390 <rfalTransceiveRx+0x548>)
 800f350:	785b      	ldrb	r3, [r3, #1]
 800f352:	2b09      	cmp	r3, #9
 800f354:	d003      	beq.n	800f35e <rfalTransceiveRx+0x516>
 800f356:	4b0e      	ldr	r3, [pc, #56]	; (800f390 <rfalTransceiveRx+0x548>)
 800f358:	785b      	ldrb	r3, [r3, #1]
 800f35a:	2b0d      	cmp	r3, #13
 800f35c:	d103      	bne.n	800f366 <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800f35e:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <rfalTransceiveRx+0x548>)
 800f360:	2258      	movs	r2, #88	; 0x58
 800f362:	751a      	strb	r2, [r3, #20]
                break;
 800f364:	e0ce      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f366:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <rfalTransceiveRx+0x548>)
 800f368:	2259      	movs	r2, #89	; 0x59
 800f36a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f36c:	4b08      	ldr	r3, [pc, #32]	; (800f390 <rfalTransceiveRx+0x548>)
 800f36e:	799b      	ldrb	r3, [r3, #6]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d003      	beq.n	800f37c <rfalTransceiveRx+0x534>
 800f374:	2140      	movs	r1, #64	; 0x40
 800f376:	2001      	movs	r0, #1
 800f378:	f001 fdad 	bl	8010ed6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f37c:	f7ff fa34 	bl	800e7e8 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800f380:	4b03      	ldr	r3, [pc, #12]	; (800f390 <rfalTransceiveRx+0x548>)
 800f382:	2200      	movs	r2, #0
 800f384:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800f386:	4b02      	ldr	r3, [pc, #8]	; (800f390 <rfalTransceiveRx+0x548>)
 800f388:	2200      	movs	r2, #0
 800f38a:	751a      	strb	r2, [r3, #20]
            break;
 800f38c:	e0ba      	b.n	800f504 <rfalTransceiveRx+0x6bc>
 800f38e:	bf00      	nop
 800f390:	20000754 	.word	0x20000754
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800f394:	2032      	movs	r0, #50	; 0x32
 800f396:	f7f5 f9a1 	bl	80046dc <timerCalculateTimer>
 800f39a:	4602      	mov	r2, r0
 800f39c:	4b5b      	ldr	r3, [pc, #364]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f39e:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800f3a0:	f000 f8d8 	bl	800f554 <rfalFIFOStatusGetNumBytes>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800f3a8:	4b58      	ldr	r3, [pc, #352]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3aa:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f3ac:	89fb      	ldrh	r3, [r7, #14]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	4b56      	ldr	r3, [pc, #344]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3b4:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800f3b6:	4b55      	ldr	r3, [pc, #340]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3b8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f3ba:	4b54      	ldr	r3, [pc, #336]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3be:	3307      	adds	r3, #7
 800f3c0:	08db      	lsrs	r3, r3, #3
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d909      	bls.n	800f3dc <rfalTransceiveRx+0x594>
 800f3c8:	4b50      	ldr	r3, [pc, #320]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3cc:	3307      	adds	r3, #7
 800f3ce:	08db      	lsrs	r3, r3, #3
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	4b4e      	ldr	r3, [pc, #312]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	e000      	b.n	800f3de <rfalTransceiveRx+0x596>
 800f3dc:	89fb      	ldrh	r3, [r7, #14]
 800f3de:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800f3e0:	4b4a      	ldr	r3, [pc, #296]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
 800f3e4:	4a49      	ldr	r2, [pc, #292]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3e6:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f3e8:	4413      	add	r3, r2
 800f3ea:	89ba      	ldrh	r2, [r7, #12]
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 fd19 	bl	8010e26 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800f3f4:	4b45      	ldr	r3, [pc, #276]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f3f6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800f3f8:	89bb      	ldrh	r3, [r7, #12]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	4b43      	ldr	r3, [pc, #268]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f400:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800f402:	89ba      	ldrh	r2, [r7, #12]
 800f404:	89fb      	ldrh	r3, [r7, #14]
 800f406:	429a      	cmp	r2, r3
 800f408:	d207      	bcs.n	800f41a <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800f40a:	89fa      	ldrh	r2, [r7, #14]
 800f40c:	89bb      	ldrh	r3, [r7, #12]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	b29b      	uxth	r3, r3
 800f412:	4619      	mov	r1, r3
 800f414:	2000      	movs	r0, #0
 800f416:	f001 fd06 	bl	8010e26 <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800f41a:	f000 f88d 	bl	800f538 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f41e:	4b3b      	ldr	r3, [pc, #236]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f420:	2254      	movs	r2, #84	; 0x54
 800f422:	751a      	strb	r2, [r3, #20]
            break;
 800f424:	e06e      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f426:	4b39      	ldr	r3, [pc, #228]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f428:	799b      	ldrb	r3, [r3, #6]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <rfalTransceiveRx+0x5ee>
 800f42e:	2140      	movs	r1, #64	; 0x40
 800f430:	2001      	movs	r0, #1
 800f432:	f001 fd50 	bl	8010ed6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f436:	f7ff f9d7 	bl	800e7e8 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f43a:	4b34      	ldr	r3, [pc, #208]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f43c:	8adb      	ldrh	r3, [r3, #22]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d102      	bne.n	800f448 <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f442:	4b32      	ldr	r3, [pc, #200]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f444:	2208      	movs	r2, #8
 800f446:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f448:	4b30      	ldr	r3, [pc, #192]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	751a      	strb	r2, [r3, #20]
            break;
 800f44e:	e059      	b.n	800f504 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800f450:	482f      	ldr	r0, [pc, #188]	; (800f510 <rfalTransceiveRx+0x6c8>)
 800f452:	f001 ffd7 	bl	8011404 <st25r3916GetInterrupt>
 800f456:	4603      	mov	r3, r0
 800f458:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d04c      	beq.n	800f4fa <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f466:	2b00      	cmp	r3, #0
 800f468:	d002      	beq.n	800f470 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f46a:	4b28      	ldr	r3, [pc, #160]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f46c:	2253      	movs	r2, #83	; 0x53
 800f46e:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d005      	beq.n	800f486 <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800f47a:	4b24      	ldr	r3, [pc, #144]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f47c:	2204      	movs	r2, #4
 800f47e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f480:	4b22      	ldr	r3, [pc, #136]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f482:	225a      	movs	r2, #90	; 0x5a
 800f484:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	da38      	bge.n	800f4fe <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f48c:	4b1f      	ldr	r3, [pc, #124]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f48e:	2225      	movs	r2, #37	; 0x25
 800f490:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f492:	4b1e      	ldr	r3, [pc, #120]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f494:	225a      	movs	r2, #90	; 0x5a
 800f496:	751a      	strb	r2, [r3, #20]
            }
            break;
 800f498:	e031      	b.n	800f4fe <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800f49a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800f49e:	f001 ffb1 	bl	8011404 <st25r3916GetInterrupt>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d02a      	beq.n	800f502 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d003      	beq.n	800f4be <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f4b6:	4b15      	ldr	r3, [pc, #84]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4b8:	2259      	movs	r2, #89	; 0x59
 800f4ba:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800f4bc:	e022      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d006      	beq.n	800f4d6 <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f4c8:	4b10      	ldr	r3, [pc, #64]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4ca:	221d      	movs	r2, #29
 800f4cc:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f4ce:	4b0f      	ldr	r3, [pc, #60]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4d0:	225a      	movs	r2, #90	; 0x5a
 800f4d2:	751a      	strb	r2, [r3, #20]
            break;
 800f4d4:	e016      	b.n	800f504 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800f4d6:	4b0d      	ldr	r3, [pc, #52]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4d8:	2203      	movs	r2, #3
 800f4da:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f4dc:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4de:	225a      	movs	r2, #90	; 0x5a
 800f4e0:	751a      	strb	r2, [r3, #20]
            break;
 800f4e2:	e00f      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f4e4:	4b09      	ldr	r3, [pc, #36]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4e6:	2208      	movs	r2, #8
 800f4e8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f4ea:	4b08      	ldr	r3, [pc, #32]	; (800f50c <rfalTransceiveRx+0x6c4>)
 800f4ec:	225a      	movs	r2, #90	; 0x5a
 800f4ee:	751a      	strb	r2, [r3, #20]
            break;           
 800f4f0:	e008      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f4f2:	bf00      	nop
 800f4f4:	e006      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f4f6:	bf00      	nop
 800f4f8:	e004      	b.n	800f504 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f4fa:	bf00      	nop
 800f4fc:	e002      	b.n	800f504 <rfalTransceiveRx+0x6bc>
            break;
 800f4fe:	bf00      	nop
 800f500:	e000      	b.n	800f504 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800f502:	bf00      	nop
    }    
}
 800f504:	bf00      	nop
 800f506:	3714      	adds	r7, #20
 800f508:	46bd      	mov	sp, r7
 800f50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50c:	20000754 	.word	0x20000754
 800f510:	80005000 	.word	0x80005000

0800f514 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800f518:	4b05      	ldr	r3, [pc, #20]	; (800f530 <rfalFIFOStatusUpdate+0x1c>)
 800f51a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f51e:	2bff      	cmp	r3, #255	; 0xff
 800f520:	d104      	bne.n	800f52c <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800f522:	2202      	movs	r2, #2
 800f524:	4903      	ldr	r1, [pc, #12]	; (800f534 <rfalFIFOStatusUpdate+0x20>)
 800f526:	201e      	movs	r0, #30
 800f528:	f001 fbe3 	bl	8010cf2 <st25r3916ReadMultipleRegisters>
    }
}
 800f52c:	bf00      	nop
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	20000754 	.word	0x20000754
 800f534:	2000078e 	.word	0x2000078e

0800f538 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800f538:	b480      	push	{r7}
 800f53a:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800f53c:	4b04      	ldr	r3, [pc, #16]	; (800f550 <rfalFIFOStatusClear+0x18>)
 800f53e:	22ff      	movs	r2, #255	; 0xff
 800f540:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800f544:	bf00      	nop
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	20000754 	.word	0x20000754

0800f554 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800f55a:	f7ff ffdb 	bl	800f514 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800f55e:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <rfalFIFOStatusGetNumBytes+0x34>)
 800f560:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f564:	099b      	lsrs	r3, r3, #6
 800f566:	b2db      	uxtb	r3, r3
 800f568:	b29b      	uxth	r3, r3
 800f56a:	021b      	lsls	r3, r3, #8
 800f56c:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800f56e:	4b06      	ldr	r3, [pc, #24]	; (800f588 <rfalFIFOStatusGetNumBytes+0x34>)
 800f570:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f574:	b29a      	uxth	r2, r3
 800f576:	88fb      	ldrh	r3, [r7, #6]
 800f578:	4313      	orrs	r3, r2
 800f57a:	80fb      	strh	r3, [r7, #6]
    return result;
 800f57c:	88fb      	ldrh	r3, [r7, #6]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20000754 	.word	0x20000754

0800f58c <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f590:	f7ff ffc0 	bl	800f514 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800f594:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <rfalFIFOStatusIsIncompleteByte+0x20>)
 800f596:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f59a:	f003 030e 	and.w	r3, r3, #14
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bf14      	ite	ne
 800f5a2:	2301      	movne	r3, #1
 800f5a4:	2300      	moveq	r3, #0
 800f5a6:	b2db      	uxtb	r3, r3
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20000754 	.word	0x20000754

0800f5b0 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f5b4:	f7ff ffae 	bl	800f514 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <rfalFIFOStatusIsMissingPar+0x20>)
 800f5ba:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	bf14      	ite	ne
 800f5c6:	2301      	movne	r3, #1
 800f5c8:	2300      	moveq	r3, #0
 800f5ca:	b2db      	uxtb	r3, r3
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	20000754 	.word	0x20000754

0800f5d4 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f5d8:	f7ff ff9c 	bl	800f514 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800f5dc:	4b04      	ldr	r3, [pc, #16]	; (800f5f0 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800f5de:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	b2db      	uxtb	r3, r3
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	20000754 	.word	0x20000754

0800f5f4 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b08c      	sub	sp, #48	; 0x30
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	607a      	str	r2, [r7, #4]
 800f5fe:	461a      	mov	r2, r3
 800f600:	460b      	mov	r3, r1
 800f602:	72fb      	strb	r3, [r7, #11]
 800f604:	4613      	mov	r3, r2
 800f606:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800f608:	4b55      	ldr	r3, [pc, #340]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d903      	bls.n	800f618 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800f610:	4b53      	ldr	r3, [pc, #332]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f612:	785b      	ldrb	r3, [r3, #1]
 800f614:	2b07      	cmp	r3, #7
 800f616:	d001      	beq.n	800f61c <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800f618:	2321      	movs	r3, #33	; 0x21
 800f61a:	e09d      	b.n	800f758 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f61c:	f241 0003 	movw	r0, #4099	; 0x1003
 800f620:	f7fd fbf0 	bl	800ce04 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800f624:	4b4e      	ldr	r3, [pc, #312]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f626:	2210      	movs	r2, #16
 800f628:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f62c:	7afb      	ldrb	r3, [r7, #11]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800f632:	220b      	movs	r2, #11
 800f634:	e000      	b.n	800f638 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800f636:	220a      	movs	r2, #10
 800f638:	7afb      	ldrb	r3, [r7, #11]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800f63e:	2340      	movs	r3, #64	; 0x40
 800f640:	e000      	b.n	800f644 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800f642:	2300      	movs	r3, #0
 800f644:	4313      	orrs	r3, r2
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800f64c:	7afb      	ldrb	r3, [r7, #11]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	00db      	lsls	r3, r3, #3
 800f652:	b29b      	uxth	r3, r3
 800f654:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800f65a:	7abb      	ldrb	r3, [r7, #10]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	b29b      	uxth	r3, r3
 800f662:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f668:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f66c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f66e:	f107 0310 	add.w	r3, r7, #16
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fe2e 	bl	800e2d4 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f678:	f7fe ffbf 	bl	800e5fa <rfalTransceiveRunBlockingTx>
 800f67c:	4603      	mov	r3, r0
 800f67e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f682:	2b00      	cmp	r3, #0
 800f684:	d103      	bne.n	800f68e <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f686:	f7fe ffd5 	bl	800e634 <rfalTransceiveBlockingRx>
 800f68a:	4603      	mov	r3, r0
 800f68c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800f68e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f690:	2b1d      	cmp	r3, #29
 800f692:	d005      	beq.n	800f6a0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f694:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f696:	2b15      	cmp	r3, #21
 800f698:	d002      	beq.n	800f6a0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f69a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f69c:	2b09      	cmp	r3, #9
 800f69e:	d112      	bne.n	800f6c6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800f6a0:	6a3b      	ldr	r3, [r7, #32]
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	3307      	adds	r3, #7
 800f6a6:	08db      	lsrs	r3, r3, #3
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2b0b      	cmp	r3, #11
 800f6ac:	d80b      	bhi.n	800f6c6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800f6ae:	6a3b      	ldr	r3, [r7, #32]
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	3307      	adds	r3, #7
 800f6b4:	08db      	lsrs	r3, r3, #3
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	f1c3 030c 	rsb	r3, r3, #12
 800f6bc:	089b      	lsrs	r3, r3, #2
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f5 ff4b 	bl	800555c <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800f6c6:	4b26      	ldr	r3, [pc, #152]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f6c8:	789b      	ldrb	r3, [r3, #2]
 800f6ca:	2bea      	cmp	r3, #234	; 0xea
 800f6cc:	d90c      	bls.n	800f6e8 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800f6ce:	4b24      	ldr	r3, [pc, #144]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f6d0:	789b      	ldrb	r3, [r3, #2]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	011b      	lsls	r3, r3, #4
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f6e0:	f043 0301 	orr.w	r3, r3, #1
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	e00d      	b.n	800f704 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800f6e8:	4b1d      	ldr	r3, [pc, #116]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f6ea:	789b      	ldrb	r3, [r3, #2]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f6fe:	f043 0301 	orr.w	r3, r3, #1
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7fd fb7d 	bl	800ce04 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f70a:	4b15      	ldr	r3, [pc, #84]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f70c:	78db      	ldrb	r3, [r3, #3]
 800f70e:	2bea      	cmp	r3, #234	; 0xea
 800f710:	d90c      	bls.n	800f72c <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f714:	78db      	ldrb	r3, [r3, #3]
 800f716:	b29b      	uxth	r3, r3
 800f718:	011b      	lsls	r3, r3, #4
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	b29b      	uxth	r3, r3
 800f720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f724:	f043 0302 	orr.w	r3, r3, #2
 800f728:	b29b      	uxth	r3, r3
 800f72a:	e00d      	b.n	800f748 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f72c:	4b0c      	ldr	r3, [pc, #48]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f72e:	78db      	ldrb	r3, [r3, #3]
 800f730:	b29b      	uxth	r3, r3
 800f732:	3301      	adds	r3, #1
 800f734:	b29b      	uxth	r3, r3
 800f736:	011b      	lsls	r3, r3, #4
 800f738:	b29b      	uxth	r3, r3
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f742:	f043 0302 	orr.w	r3, r3, #2
 800f746:	b29b      	uxth	r3, r3
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd fb5b 	bl	800ce04 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f74e:	4b04      	ldr	r3, [pc, #16]	; (800f760 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f750:	2200      	movs	r2, #0
 800f752:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    return ret;
 800f756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3730      	adds	r7, #48	; 0x30
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20000754 	.word	0x20000754

0800f764 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b088      	sub	sp, #32
 800f768:	af02      	add	r7, sp, #8
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	460b      	mov	r3, r1
 800f76e:	607a      	str	r2, [r7, #4]
 800f770:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f772:	7afa      	ldrb	r2, [r7, #11]
 800f774:	f107 0017 	add.w	r0, r7, #23
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	4613      	mov	r3, r2
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	2100      	movs	r1, #0
 800f782:	f7ff ff37 	bl	800f5f4 <rfalISO15693TransceiveAnticollisionFrame>
 800f786:	4603      	mov	r3, r0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f794:	2240      	movs	r2, #64	; 0x40
 800f796:	2140      	movs	r1, #64	; 0x40
 800f798:	2031      	movs	r0, #49	; 0x31
 800f79a:	f001 fca9 	bl	80110f0 <st25r3916CheckReg>
 800f79e:	4603      	mov	r3, r0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 800f7a4:	b5b0      	push	{r4, r5, r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d124      	bne.n	800f7fc <rfalWakeUpModeStart+0x58>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800f7b2:	4bc2      	ldr	r3, [pc, #776]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7b4:	2214      	movs	r2, #20
 800f7b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        gRFAL.wum.cfg.irqTout     = false;
 800f7ba:	4bc0      	ldr	r3, [pc, #768]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        gRFAL.wum.cfg.swTagDetect = true;
 800f7c2:	4bbe      	ldr	r3, [pc, #760]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800f7ca:	4bbc      	ldr	r3, [pc, #752]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        gRFAL.wum.cfg.indPha.enabled   = false;
 800f7d2:	4bba      	ldr	r3, [pc, #744]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        gRFAL.wum.cfg.cap.enabled      = false;
 800f7da:	4bb8      	ldr	r3, [pc, #736]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 800f7e2:	4bb6      	ldr	r3, [pc, #728]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800f7ea:	4bb4      	ldr	r3, [pc, #720]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7ec:	22ff      	movs	r2, #255	; 0xff
 800f7ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 800f7f2:	4bb2      	ldr	r3, [pc, #712]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800f7fa:	e00e      	b.n	800f81a <rfalWakeUpModeStart+0x76>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 800f7fc:	4baf      	ldr	r3, [pc, #700]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	3351      	adds	r3, #81	; 0x51
 800f802:	6811      	ldr	r1, [r2, #0]
 800f804:	6855      	ldr	r5, [r2, #4]
 800f806:	6894      	ldr	r4, [r2, #8]
 800f808:	68d0      	ldr	r0, [r2, #12]
 800f80a:	6019      	str	r1, [r3, #0]
 800f80c:	605d      	str	r5, [r3, #4]
 800f80e:	609c      	str	r4, [r3, #8]
 800f810:	60d8      	str	r0, [r3, #12]
 800f812:	6911      	ldr	r1, [r2, #16]
 800f814:	6119      	str	r1, [r3, #16]
 800f816:	7d12      	ldrb	r2, [r2, #20]
 800f818:	751a      	strb	r2, [r3, #20]
    }
    
    /* Check for valid configuration */
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f81a:	4ba8      	ldr	r3, [pc, #672]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f81c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f820:	f083 0301 	eor.w	r3, r3, #1
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00f      	beq.n	800f84a <rfalWakeUpModeStart+0xa6>
 800f82a:	4ba4      	ldr	r3, [pc, #656]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f82c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f830:	f083 0301 	eor.w	r3, r3, #1
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d007      	beq.n	800f84a <rfalWakeUpModeStart+0xa6>
 800f83a:	4ba0      	ldr	r3, [pc, #640]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f83c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f840:	f083 0301 	eor.w	r3, r3, #1
 800f844:	b2db      	uxtb	r3, r3
 800f846:	2b00      	cmp	r3, #0
 800f848:	d118      	bne.n	800f87c <rfalWakeUpModeStart+0xd8>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f84a:	4b9c      	ldr	r3, [pc, #624]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f84c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f850:	2b00      	cmp	r3, #0
 800f852:	d009      	beq.n	800f868 <rfalWakeUpModeStart+0xc4>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f854:	4b99      	ldr	r3, [pc, #612]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f856:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10e      	bne.n	800f87c <rfalWakeUpModeStart+0xd8>
 800f85e:	4b97      	ldr	r3, [pc, #604]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f860:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f864:	2b00      	cmp	r3, #0
 800f866:	d109      	bne.n	800f87c <rfalWakeUpModeStart+0xd8>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                        )
 800f868:	4b94      	ldr	r3, [pc, #592]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f86a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d006      	beq.n	800f880 <rfalWakeUpModeStart+0xdc>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                        )
 800f872:	4b92      	ldr	r3, [pc, #584]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f874:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <rfalWakeUpModeStart+0xdc>
    {
        return ERR_PARAM;
 800f87c:	2307      	movs	r3, #7
 800f87e:	e18e      	b.n	800fb9e <rfalWakeUpModeStart+0x3fa>
    }
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800f880:	2300      	movs	r3, #0
 800f882:	613b      	str	r3, [r7, #16]
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3916TxRxOff();
 800f884:	2148      	movs	r1, #72	; 0x48
 800f886:	2002      	movs	r0, #2
 800f888:	f001 fb4a 	bl	8010f20 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 800f88c:	2103      	movs	r1, #3
 800f88e:	2002      	movs	r0, #2
 800f890:	f001 fb46 	bl	8010f20 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 800f894:	2208      	movs	r2, #8
 800f896:	21f8      	movs	r1, #248	; 0xf8
 800f898:	2003      	movs	r0, #3
 800f89a:	f001 fba5 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 800f89e:	2004      	movs	r0, #4
 800f8a0:	f7fd fab0 	bl	800ce04 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Check if AAT is enabled. If so disable en bit to give time for the Voltage  *
     * on the to varicaps to settle and have a stable reference measurment         */
    if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_aat_en, ST25R3916_REG_IO_CONF2_aat_en ) && !gRFAL.wum.cfg.swTagDetect )
 800f8a4:	2220      	movs	r2, #32
 800f8a6:	2120      	movs	r1, #32
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	f001 fc21 	bl	80110f0 <st25r3916CheckReg>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00f      	beq.n	800f8d4 <rfalWakeUpModeStart+0x130>
 800f8b4:	4b81      	ldr	r3, [pc, #516]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f8b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f8ba:	f083 0301 	eor.w	r3, r3, #1
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d007      	beq.n	800f8d4 <rfalWakeUpModeStart+0x130>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800f8c4:	2180      	movs	r1, #128	; 0x80
 800f8c6:	2002      	movs	r0, #2
 800f8c8:	f001 fb2a 	bl	8010f20 <st25r3916ClrRegisterBits>
        platformDelay( RFAL_ST25R3916_AAT_SETTLE_OFF );
 800f8cc:	2014      	movs	r0, #20
 800f8ce:	f7f5 fe45 	bl	800555c <HAL_Delay>
 800f8d2:	e007      	b.n	800f8e4 <rfalWakeUpModeStart+0x140>
    }
    /* In SW Tag detection remain in ready let the varicaps settle  */
    else if( gRFAL.wum.cfg.swTagDetect )
 800f8d4:	4b79      	ldr	r3, [pc, #484]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f8d6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d002      	beq.n	800f8e4 <rfalWakeUpModeStart+0x140>
    {
        platformDelay( RFAL_ST25R3916_AAT_SETTLE_ON );
 800f8de:	2005      	movs	r0, #5
 800f8e0:	f7f5 fe3c 	bl	800555c <HAL_Delay>
    }
    
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 800f8e4:	4b75      	ldr	r3, [pc, #468]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f8e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8ea:	011b      	lsls	r3, r3, #4
 800f8ec:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 800f8ee:	4b73      	ldr	r3, [pc, #460]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f8f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8f4:	2b0f      	cmp	r3, #15
 800f8f6:	d802      	bhi.n	800f8fe <rfalWakeUpModeStart+0x15a>
 800f8f8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f8fc:	e000      	b.n	800f900 <rfalWakeUpModeStart+0x15c>
 800f8fe:	2200      	movs	r2, #0
 800f900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f904:	4313      	orrs	r3, r2
 800f906:	b25b      	sxtb	r3, r3
 800f908:	75fb      	strb	r3, [r7, #23]
    
    if( gRFAL.wum.cfg.irqTout || gRFAL.wum.cfg.swTagDetect )
 800f90a:	4b6c      	ldr	r3, [pc, #432]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f90c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800f910:	2b00      	cmp	r3, #0
 800f912:	d104      	bne.n	800f91e <rfalWakeUpModeStart+0x17a>
 800f914:	4b69      	ldr	r3, [pc, #420]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f916:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d007      	beq.n	800f92e <rfalWakeUpModeStart+0x18a>
    {
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 800f91e:	7dfb      	ldrb	r3, [r7, #23]
 800f920:	f043 0308 	orr.w	r3, r3, #8
 800f924:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WT;
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f92c:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 800f92e:	4b63      	ldr	r3, [pc, #396]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f930:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f934:	2b00      	cmp	r3, #0
 800f936:	d051      	beq.n	800f9dc <rfalWakeUpModeStart+0x238>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 800f938:	4b60      	ldr	r3, [pc, #384]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f93a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f93e:	011b      	lsls	r3, r3, #4
 800f940:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800f942:	4b5e      	ldr	r3, [pc, #376]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f944:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d001      	beq.n	800f950 <rfalWakeUpModeStart+0x1ac>
 800f94c:	2208      	movs	r2, #8
 800f94e:	e000      	b.n	800f952 <rfalWakeUpModeStart+0x1ae>
 800f950:	2200      	movs	r2, #0
 800f952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f956:	4313      	orrs	r3, r2
 800f958:	b25b      	sxtb	r3, r3
 800f95a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 800f95c:	4b57      	ldr	r3, [pc, #348]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f95e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f962:	005b      	lsls	r3, r3, #1
 800f964:	b2db      	uxtb	r3, r3
 800f966:	b25b      	sxtb	r3, r3
 800f968:	f003 0306 	and.w	r3, r3, #6
 800f96c:	b25a      	sxtb	r2, r3
 800f96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f972:	4313      	orrs	r3, r2
 800f974:	b25b      	sxtb	r3, r3
 800f976:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800f978:	4b50      	ldr	r3, [pc, #320]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f97a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800f97e:	b25a      	sxtb	r2, r3
 800f980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f984:	4313      	orrs	r3, r2
 800f986:	b25b      	sxtb	r3, r3
 800f988:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	4619      	mov	r1, r3
 800f98e:	2033      	movs	r0, #51	; 0x33
 800f990:	f001 f9dc 	bl	8010d4c <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800f994:	4b49      	ldr	r3, [pc, #292]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f996:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800f99a:	f083 0301 	eor.w	r3, r3, #1
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d104      	bne.n	800f9ae <rfalWakeUpModeStart+0x20a>
 800f9a4:	4b45      	ldr	r3, [pc, #276]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00e      	beq.n	800f9cc <rfalWakeUpModeStart+0x228>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 800f9ae:	4b43      	ldr	r3, [pc, #268]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f9b4:	2bff      	cmp	r3, #255	; 0xff
 800f9b6:	d102      	bne.n	800f9be <rfalWakeUpModeStart+0x21a>
            {
                st25r3916MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 800f9b8:	4841      	ldr	r0, [pc, #260]	; (800fac0 <rfalWakeUpModeStart+0x31c>)
 800f9ba:	f000 fbbc 	bl	8010136 <st25r3916MeasureAmplitude>
            }
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800f9be:	4b3f      	ldr	r3, [pc, #252]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	2034      	movs	r0, #52	; 0x34
 800f9c8:	f001 f9c0 	bl	8010d4c <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	f043 0304 	orr.w	r3, r3, #4
 800f9d2:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WAM;
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f9da:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 800f9dc:	4b37      	ldr	r3, [pc, #220]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9de:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d051      	beq.n	800fa8a <rfalWakeUpModeStart+0x2e6>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 800f9e6:	4b35      	ldr	r3, [pc, #212]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9e8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f9ec:	011b      	lsls	r3, r3, #4
 800f9ee:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800f9f0:	4b32      	ldr	r3, [pc, #200]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800f9f2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <rfalWakeUpModeStart+0x25a>
 800f9fa:	2208      	movs	r2, #8
 800f9fc:	e000      	b.n	800fa00 <rfalWakeUpModeStart+0x25c>
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa04:	4313      	orrs	r3, r2
 800fa06:	b25b      	sxtb	r3, r3
 800fa08:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 800fa0a:	4b2c      	ldr	r3, [pc, #176]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa0c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	b25b      	sxtb	r3, r3
 800fa16:	f003 0306 	and.w	r3, r3, #6
 800fa1a:	b25a      	sxtb	r2, r3
 800fa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	b25b      	sxtb	r3, r3
 800fa24:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800fa26:	4b25      	ldr	r3, [pc, #148]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa2c:	b25a      	sxtb	r2, r3
 800fa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	b25b      	sxtb	r3, r3
 800fa36:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	2037      	movs	r0, #55	; 0x37
 800fa3e:	f001 f985 	bl	8010d4c <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800fa42:	4b1e      	ldr	r3, [pc, #120]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa48:	f083 0301 	eor.w	r3, r3, #1
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d104      	bne.n	800fa5c <rfalWakeUpModeStart+0x2b8>
 800fa52:	4b1a      	ldr	r3, [pc, #104]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa54:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00e      	beq.n	800fa7a <rfalWakeUpModeStart+0x2d6>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fa5c:	4b17      	ldr	r3, [pc, #92]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa62:	2bff      	cmp	r3, #255	; 0xff
 800fa64:	d102      	bne.n	800fa6c <rfalWakeUpModeStart+0x2c8>
            {
                st25r3916MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 800fa66:	4817      	ldr	r0, [pc, #92]	; (800fac4 <rfalWakeUpModeStart+0x320>)
 800fa68:	f000 fb74 	bl	8010154 <st25r3916MeasurePhase>
            
            }
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800fa6c:	4b13      	ldr	r3, [pc, #76]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa72:	4619      	mov	r1, r3
 800fa74:	2038      	movs	r0, #56	; 0x38
 800fa76:	f001 f969 	bl	8010d4c <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
 800fa7c:	f043 0302 	orr.w	r3, r3, #2
 800fa80:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WPH;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa88:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800fa8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d05f      	beq.n	800fb54 <rfalWakeUpModeStart+0x3b0>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 800fa94:	2188      	movs	r1, #136	; 0x88
 800fa96:	2002      	movs	r0, #2
 800fa98:	f001 fa42 	bl	8010f20 <st25r3916ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config: RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON */
        
        /* Perform calibration procedure */
        st25r3916CalibrateCapacitiveSensor( NULL );
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f000 fb77 	bl	8010190 <st25r3916CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 800faa2:	4b06      	ldr	r3, [pc, #24]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800faa4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800faa8:	011b      	lsls	r3, r3, #4
 800faaa:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800faac:	4b03      	ldr	r3, [pc, #12]	; (800fabc <rfalWakeUpModeStart+0x318>)
 800faae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d008      	beq.n	800fac8 <rfalWakeUpModeStart+0x324>
 800fab6:	2208      	movs	r2, #8
 800fab8:	e007      	b.n	800faca <rfalWakeUpModeStart+0x326>
 800faba:	bf00      	nop
 800fabc:	20000754 	.word	0x20000754
 800fac0:	200007aa 	.word	0x200007aa
 800fac4:	200007b0 	.word	0x200007b0
 800fac8:	2200      	movs	r2, #0
 800faca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800face:	4313      	orrs	r3, r2
 800fad0:	b25b      	sxtb	r3, r3
 800fad2:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 800fad4:	4b34      	ldr	r3, [pc, #208]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fad6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800fada:	005b      	lsls	r3, r3, #1
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	b25b      	sxtb	r3, r3
 800fae0:	f003 0306 	and.w	r3, r3, #6
 800fae4:	b25a      	sxtb	r2, r3
 800fae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faea:	4313      	orrs	r3, r2
 800faec:	b25b      	sxtb	r3, r3
 800faee:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800faf0:	4b2d      	ldr	r3, [pc, #180]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800faf2:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800faf6:	b25a      	sxtb	r2, r3
 800faf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	b25b      	sxtb	r3, r3
 800fb00:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
 800fb04:	4619      	mov	r1, r3
 800fb06:	203b      	movs	r0, #59	; 0x3b
 800fb08:	f001 f920 	bl	8010d4c <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800fb0c:	4b26      	ldr	r3, [pc, #152]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb0e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800fb12:	f083 0301 	eor.w	r3, r3, #1
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d104      	bne.n	800fb26 <rfalWakeUpModeStart+0x382>
 800fb1c:	4b22      	ldr	r3, [pc, #136]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb1e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00e      	beq.n	800fb44 <rfalWakeUpModeStart+0x3a0>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fb26:	4b20      	ldr	r3, [pc, #128]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb2c:	2bff      	cmp	r3, #255	; 0xff
 800fb2e:	d102      	bne.n	800fb36 <rfalWakeUpModeStart+0x392>
            {
                st25r3916MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 800fb30:	481e      	ldr	r0, [pc, #120]	; (800fbac <rfalWakeUpModeStart+0x408>)
 800fb32:	f000 fb1e 	bl	8010172 <st25r3916MeasureCapacitance>
            }
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 800fb36:	4b1c      	ldr	r3, [pc, #112]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	203c      	movs	r0, #60	; 0x3c
 800fb40:	f001 f904 	bl	8010d4c <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 800fb44:	7dfb      	ldrb	r3, [r7, #23]
 800fb46:	f043 0301 	orr.w	r3, r3, #1
 800fb4a:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WCAP;
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb52:	613b      	str	r3, [r7, #16]
    }

    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800fb54:	f04f 30ff 	mov.w	r0, #4294967295
 800fb58:	f001 fc98 	bl	801148c <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 800fb5c:	6938      	ldr	r0, [r7, #16]
 800fb5e:	f001 fc51 	bl	8011404 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 800fb62:	6938      	ldr	r0, [r7, #16]
 800fb64:	f001 fc86 	bl	8011474 <st25r3916EnableInterrupts>
    
    /* On SW Tag Detection no HW automatic measurements are to be performed, only make use of WTO */
    if( gRFAL.wum.cfg.swTagDetect )
 800fb68:	4b0f      	ldr	r3, [pc, #60]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb6a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d003      	beq.n	800fb7a <rfalWakeUpModeStart+0x3d6>
    {
        reg &= ~(ST25R3916_REG_WUP_TIMER_CONTROL_wam | ST25R3916_REG_WUP_TIMER_CONTROL_wph | ST25R3916_REG_WUP_TIMER_CONTROL_wcap);
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
 800fb74:	f023 0307 	bic.w	r3, r3, #7
 800fb78:	75fb      	strb	r3, [r7, #23]
    }
    
    /* Enable Low Power Wake-Up Mode (Disable: Oscilattor, Tx, Rx and External Field Detector)*/
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	2032      	movs	r0, #50	; 0x32
 800fb80:	f001 f8e4 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 800fb84:	2204      	movs	r2, #4
 800fb86:	21cf      	movs	r1, #207	; 0xcf
 800fb88:	2002      	movs	r0, #2
 800fb8a:	f001 fa2d 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                                (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_tx_en | 
                                 ST25R3916_REG_OP_CONTROL_en_fd_mask | ST25R3916_REG_OP_CONTROL_wu                              ) , 
                                 ST25R3916_REG_OP_CONTROL_wu );
    
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800fb8e:	4b06      	ldr	r3, [pc, #24]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gRFAL.state     = RFAL_STATE_WUM;
 800fb96:	4b04      	ldr	r3, [pc, #16]	; (800fba8 <rfalWakeUpModeStart+0x404>)
 800fb98:	2205      	movs	r2, #5
 800fb9a:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bdb0      	pop	{r4, r5, r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20000754 	.word	0x20000754
 800fbac:	200007b6 	.word	0x200007b6

0800fbb0 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 800fbb0:	b480      	push	{r7}
 800fbb2:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800fbb4:	4b06      	ldr	r3, [pc, #24]	; (800fbd0 <rfalWakeUpModeHasWoke+0x20>)
 800fbb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	bf8c      	ite	hi
 800fbbe:	2301      	movhi	r3, #1
 800fbc0:	2300      	movls	r3, #0
 800fbc2:	b2db      	uxtb	r3, r3
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	20000754 	.word	0x20000754

0800fbd4 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
    uint32_t irqs;
    uint8_t  reg;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 800fbda:	4b6a      	ldr	r3, [pc, #424]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	f040 80c6 	bne.w	800fd70 <rfalRunWakeUpModeWorker+0x19c>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800fbe4:	4b67      	ldr	r3, [pc, #412]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fbe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fbea:	3b01      	subs	r3, #1
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	f200 80c1 	bhi.w	800fd74 <rfalRunWakeUpModeWorker+0x1a0>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 800fbf2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fbf6:	f001 fc05 	bl	8011404 <st25r3916GetInterrupt>
 800fbfa:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 80ba 	beq.w	800fd78 <rfalRunWakeUpModeWorker+0x1a4>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d008      	beq.n	800fc20 <rfalRunWakeUpModeWorker+0x4c>
            {
                st25r3916ReadRegister( ST25R3916_REG_AMPLITUDE_MEASURE_RESULT, &reg );
 800fc0e:	1cfb      	adds	r3, r7, #3
 800fc10:	4619      	mov	r1, r3
 800fc12:	2036      	movs	r0, #54	; 0x36
 800fc14:	f001 f85c 	bl	8010cd0 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fc18:	4b5a      	ldr	r3, [pc, #360]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d008      	beq.n	800fc3c <rfalRunWakeUpModeWorker+0x68>
            {
                st25r3916ReadRegister( ST25R3916_REG_PHASE_MEASURE_RESULT, &reg );
 800fc2a:	1cfb      	adds	r3, r7, #3
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	203a      	movs	r0, #58	; 0x3a
 800fc30:	f001 f84e 	bl	8010cd0 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fc34:	4b53      	ldr	r3, [pc, #332]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d008      	beq.n	800fc58 <rfalRunWakeUpModeWorker+0x84>
            {
                st25r3916ReadRegister( ST25R3916_REG_CAPACITANCE_MEASURE_RESULT, &reg );
 800fc46:	1cfb      	adds	r3, r7, #3
 800fc48:	4619      	mov	r1, r3
 800fc4a:	203e      	movs	r0, #62	; 0x3e
 800fc4c:	f001 f840 	bl	8010cd0 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;                
 800fc50:	4b4c      	ldr	r3, [pc, #304]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc52:	2202      	movs	r2, #2
 800fc54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f000 808c 	beq.w	800fd7c <rfalRunWakeUpModeWorker+0x1a8>
            {
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 800fc64:	4b47      	ldr	r3, [pc, #284]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 8086 	beq.w	800fd7c <rfalRunWakeUpModeWorker+0x1a8>
                {
                    /* Enable Ready mode */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_en) );
 800fc70:	2280      	movs	r2, #128	; 0x80
 800fc72:	2184      	movs	r1, #132	; 0x84
 800fc74:	2002      	movs	r0, #2
 800fc76:	f001 f9b7 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                    platformDelay( RFAL_ST25R3916_AAT_SETTLE_ON );
 800fc7a:	2005      	movs	r0, #5
 800fc7c:	f7f5 fc6e 	bl	800555c <HAL_Delay>
                    
                    
                    if( gRFAL.wum.cfg.indAmp.enabled )
 800fc80:	4b40      	ldr	r3, [pc, #256]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d020      	beq.n	800fccc <rfalRunWakeUpModeWorker+0xf8>
                    {
                        st25r3916MeasureAmplitude( &reg );
 800fc8a:	1cfb      	adds	r3, r7, #3
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f000 fa52 	bl	8010136 <st25r3916MeasureAmplitude>
                        if( (reg >= (gRFAL.wum.cfg.indAmp.reference + gRFAL.wum.cfg.indAmp.delta)) || ( reg <= (gRFAL.wum.cfg.indAmp.reference - gRFAL.wum.cfg.indAmp.delta)) )
 800fc92:	78fb      	ldrb	r3, [r7, #3]
 800fc94:	461a      	mov	r2, r3
 800fc96:	4b3b      	ldr	r3, [pc, #236]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc98:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	4b39      	ldr	r3, [pc, #228]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fca0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fca4:	440b      	add	r3, r1
 800fca6:	429a      	cmp	r2, r3
 800fca8:	da0b      	bge.n	800fcc2 <rfalRunWakeUpModeWorker+0xee>
 800fcaa:	78fb      	ldrb	r3, [r7, #3]
 800fcac:	461a      	mov	r2, r3
 800fcae:	4b35      	ldr	r3, [pc, #212]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcb0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	4b33      	ldr	r3, [pc, #204]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fcbc:	1acb      	subs	r3, r1, r3
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	dc04      	bgt.n	800fccc <rfalRunWakeUpModeWorker+0xf8>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fcc2:	4b30      	ldr	r3, [pc, #192]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcc4:	2202      	movs	r2, #2
 800fcc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fcca:	e058      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.indPha.enabled )
 800fccc:	4b2d      	ldr	r3, [pc, #180]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcce:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d020      	beq.n	800fd18 <rfalRunWakeUpModeWorker+0x144>
                    {
                        st25r3916MeasurePhase( &reg );
 800fcd6:	1cfb      	adds	r3, r7, #3
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 fa3b 	bl	8010154 <st25r3916MeasurePhase>
                        if( (reg >= (gRFAL.wum.cfg.indPha.reference + gRFAL.wum.cfg.indPha.delta)) || ( reg <= (gRFAL.wum.cfg.indPha.reference - gRFAL.wum.cfg.indPha.delta)) )
 800fcde:	78fb      	ldrb	r3, [r7, #3]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b28      	ldr	r3, [pc, #160]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fce8:	4619      	mov	r1, r3
 800fcea:	4b26      	ldr	r3, [pc, #152]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcec:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fcf0:	440b      	add	r3, r1
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	da0b      	bge.n	800fd0e <rfalRunWakeUpModeWorker+0x13a>
 800fcf6:	78fb      	ldrb	r3, [r7, #3]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4b22      	ldr	r3, [pc, #136]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fd00:	4619      	mov	r1, r3
 800fd02:	4b20      	ldr	r3, [pc, #128]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd04:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fd08:	1acb      	subs	r3, r1, r3
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	dc04      	bgt.n	800fd18 <rfalRunWakeUpModeWorker+0x144>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fd0e:	4b1d      	ldr	r3, [pc, #116]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd10:	2202      	movs	r2, #2
 800fd12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fd16:	e032      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.cap.enabled )
 800fd18:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd1a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d020      	beq.n	800fd64 <rfalRunWakeUpModeWorker+0x190>
                    {
                        st25r3916MeasureCapacitance( &reg );
 800fd22:	1cfb      	adds	r3, r7, #3
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 fa24 	bl	8010172 <st25r3916MeasureCapacitance>
                        if( (reg >= (gRFAL.wum.cfg.cap.reference + gRFAL.wum.cfg.cap.delta)) || ( reg <= (gRFAL.wum.cfg.cap.reference - gRFAL.wum.cfg.cap.delta)) )
 800fd2a:	78fb      	ldrb	r3, [r7, #3]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b15      	ldr	r3, [pc, #84]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd30:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fd34:	4619      	mov	r1, r3
 800fd36:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fd3c:	440b      	add	r3, r1
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	da0b      	bge.n	800fd5a <rfalRunWakeUpModeWorker+0x186>
 800fd42:	78fb      	ldrb	r3, [r7, #3]
 800fd44:	461a      	mov	r2, r3
 800fd46:	4b0f      	ldr	r3, [pc, #60]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd48:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fd54:	1acb      	subs	r3, r1, r3
 800fd56:	429a      	cmp	r2, r3
 800fd58:	dc04      	bgt.n	800fd64 <rfalRunWakeUpModeWorker+0x190>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fd62:	e00c      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 800fd64:	2204      	movs	r2, #4
 800fd66:	2184      	movs	r1, #132	; 0x84
 800fd68:	2002      	movs	r0, #2
 800fd6a:	f001 f93d 	bl	8010fe8 <st25r3916ChangeRegisterBits>
                }
            }
            break;
 800fd6e:	e005      	b.n	800fd7c <rfalRunWakeUpModeWorker+0x1a8>
        return;
 800fd70:	bf00      	nop
 800fd72:	e004      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800fd74:	bf00      	nop
 800fd76:	e002      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
               break;  /* No interrupt to process */
 800fd78:	bf00      	nop
 800fd7a:	e000      	b.n	800fd7e <rfalRunWakeUpModeWorker+0x1aa>
            break;
 800fd7c:	bf00      	nop
    }
}
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20000754 	.word	0x20000754

0800fd88 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800fd8c:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <rfalWakeUpModeStop+0x44>)
 800fd8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d101      	bne.n	800fd9a <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 800fd96:	2321      	movs	r3, #33	; 0x21
 800fd98:	e016      	b.n	800fdc8 <rfalWakeUpModeStop+0x40>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800fd9a:	4b0c      	ldr	r3, [pc, #48]	; (800fdcc <rfalWakeUpModeStop+0x44>)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800fda2:	2104      	movs	r1, #4
 800fda4:	2002      	movs	r0, #2
 800fda6:	f001 f8bb 	bl	8010f20 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 800fdaa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fdae:	f001 fb6d 	bl	801148c <st25r3916DisableInterrupts>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800fdb2:	2203      	movs	r2, #3
 800fdb4:	2103      	movs	r1, #3
 800fdb6:	2002      	movs	r0, #2
 800fdb8:	f001 f916 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 800fdbc:	f000 f916 	bl	800ffec <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800fdc0:	2005      	movs	r0, #5
 800fdc2:	f7fd f81f 	bl	800ce04 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20000754 	.word	0x20000754

0800fdd0 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	80fb      	strh	r3, [r7, #6]
 800fdda:	460b      	mov	r3, r1
 800fddc:	717b      	strb	r3, [r7, #5]
 800fdde:	4613      	mov	r3, r2
 800fde0:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800fde2:	88fb      	ldrh	r3, [r7, #6]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	4618      	mov	r0, r3
 800fde8:	f001 f9a2 	bl	8011130 <st25r3916IsRegValid>
 800fdec:	4603      	mov	r3, r0
 800fdee:	f083 0301 	eor.w	r3, r3, #1
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d001      	beq.n	800fdfc <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800fdf8:	2307      	movs	r3, #7
 800fdfa:	e007      	b.n	800fe0c <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800fdfc:	88fb      	ldrh	r3, [r7, #6]
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	793a      	ldrb	r2, [r7, #4]
 800fe02:	7979      	ldrb	r1, [r7, #5]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f001 f8ef 	bl	8010fe8 <st25r3916ChangeRegisterBits>
 800fe0a:	4603      	mov	r3, r0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	80fb      	strh	r3, [r7, #6]
 800fe1e:	460b      	mov	r3, r1
 800fe20:	717b      	strb	r3, [r7, #5]
 800fe22:	4613      	mov	r3, r2
 800fe24:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800fe26:	88fb      	ldrh	r3, [r7, #6]
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	793a      	ldrb	r2, [r7, #4]
 800fe2c:	7979      	ldrb	r1, [r7, #5]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f001 f926 	bl	8011080 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <rfalChipMeasureAmplitude>:
}


/*******************************************************************************/
ReturnCode rfalChipMeasureAmplitude( uint8_t* result )
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t reg_opc, reg_mode, reg_conf1, reg_conf2;

    /* Save registers which will be adjusted below */
    st25r3916ReadRegister(ST25R3916_REG_OP_CONTROL, &reg_opc);
 800fe46:	f107 030d 	add.w	r3, r7, #13
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	2002      	movs	r0, #2
 800fe4e:	f000 ff3f 	bl	8010cd0 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_MODE, &reg_mode);
 800fe52:	f107 030c 	add.w	r3, r7, #12
 800fe56:	4619      	mov	r1, r3
 800fe58:	2003      	movs	r0, #3
 800fe5a:	f000 ff39 	bl	8010cd0 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF1, &reg_conf1);
 800fe5e:	f107 030b 	add.w	r3, r7, #11
 800fe62:	4619      	mov	r1, r3
 800fe64:	200b      	movs	r0, #11
 800fe66:	f000 ff33 	bl	8010cd0 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF2, &reg_conf2);
 800fe6a:	f107 030a 	add.w	r3, r7, #10
 800fe6e:	4619      	mov	r1, r3
 800fe70:	200c      	movs	r0, #12
 800fe72:	f000 ff2d 	bl	8010cd0 <st25r3916ReadRegister>

    /* Set values as per defaults of DS. These regs/bits influence receiver chain and change amplitude */
    /* Doing so achieves an amplitude comparable over a complete polling cylce */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, (reg_opc & ~ST25R3916_REG_OP_CONTROL_rx_chn));
 800fe76:	7b7b      	ldrb	r3, [r7, #13]
 800fe78:	f023 0320 	bic.w	r3, r3, #32
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	4619      	mov	r1, r3
 800fe80:	2002      	movs	r0, #2
 800fe82:	f000 ff63 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a
 800fe86:	2108      	movs	r1, #8
 800fe88:	2003      	movs	r0, #3
 800fe8a:	f000 ff5f 	bl	8010d4c <st25r3916WriteRegister>
                                             | ST25R3916_REG_MODE_targ_init
                                             | ST25R3916_REG_MODE_tr_am_ook
                                             | ST25R3916_REG_MODE_nfc_ar_off);
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, (reg_conf1 & ~ST25R3916_REG_RX_CONF1_ch_sel_AM));
 800fe8e:	7afb      	ldrb	r3, [r7, #11]
 800fe90:	4619      	mov	r1, r3
 800fe92:	200b      	movs	r0, #11
 800fe94:	f000 ff5a 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, ((reg_conf2 & ~(ST25R3916_REG_RX_CONF2_demod_mode | ST25R3916_REG_RX_CONF2_amd_sel))
 800fe98:	7abb      	ldrb	r3, [r7, #10]
 800fe9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	4619      	mov	r1, r3
 800fea2:	200c      	movs	r0, #12
 800fea4:	f000 ff52 	bl	8010d4c <st25r3916WriteRegister>
                                                 | ST25R3916_REG_RX_CONF2_amd_sel_peak));

    /* Perform the actual measurement */
    err = st25r3916MeasureAmplitude( result );
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f944 	bl	8010136 <st25r3916MeasureAmplitude>
 800feae:	4603      	mov	r3, r0
 800feb0:	81fb      	strh	r3, [r7, #14]

    /* Restore values */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, reg_opc);
 800feb2:	7b7b      	ldrb	r3, [r7, #13]
 800feb4:	4619      	mov	r1, r3
 800feb6:	2002      	movs	r0, #2
 800feb8:	f000 ff48 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, reg_mode);
 800febc:	7b3b      	ldrb	r3, [r7, #12]
 800febe:	4619      	mov	r1, r3
 800fec0:	2003      	movs	r0, #3
 800fec2:	f000 ff43 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, reg_conf1);
 800fec6:	7afb      	ldrb	r3, [r7, #11]
 800fec8:	4619      	mov	r1, r3
 800feca:	200b      	movs	r0, #11
 800fecc:	f000 ff3e 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, reg_conf2);
 800fed0:	7abb      	ldrb	r3, [r7, #10]
 800fed2:	4619      	mov	r1, r3
 800fed4:	200c      	movs	r0, #12
 800fed6:	f000 ff39 	bl	8010d4c <st25r3916WriteRegister>

    return err;
 800feda:	89fb      	ldrh	r3, [r7, #14]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <rfalChipMeasurePhase>:


/*******************************************************************************/
ReturnCode rfalChipMeasurePhase( uint8_t* result )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
    st25r3916MeasurePhase( result );
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f931 	bl	8010154 <st25r3916MeasurePhase>

    return ERR_NONE;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	603b      	str	r3, [r7, #0]
 800ff04:	4603      	mov	r3, r0
 800ff06:	71fb      	strb	r3, [r7, #7]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	71bb      	strb	r3, [r7, #6]
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800ff10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff14:	f001 fa76 	bl	8011404 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800ff18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff1c:	f001 faaa 	bl	8011474 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800ff20:	79fb      	ldrb	r3, [r7, #7]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 ff9b 	bl	8010e5e <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800ff28:	797b      	ldrb	r3, [r7, #5]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff32:	f001 fa17 	bl	8011364 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800ff36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff3a:	f001 faa7 	bl	801148c <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800ff44:	79bb      	ldrb	r3, [r7, #6]
 800ff46:	6839      	ldr	r1, [r7, #0]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 fec1 	bl	8010cd0 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800ff4e:	2300      	movs	r3, #0

}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800ff5e:	20c1      	movs	r0, #193	; 0xc1
 800ff60:	f000 ff7d 	bl	8010e5e <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800ff64:	2104      	movs	r1, #4
 800ff66:	2001      	movs	r0, #1
 800ff68:	f000 fef0 	bl	8010d4c <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	f000 fa85 	bl	801047c <st25r3916CheckChipID>
 800ff72:	4603      	mov	r3, r0
 800ff74:	f083 0301 	eor.w	r3, r3, #1
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800ff7e:	2324      	movs	r3, #36	; 0x24
 800ff80:	e02d      	b.n	800ffde <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800ff82:	f001 f927 	bl	80111d4 <st25r3916InitInterrupts>
    st25r3916ledInit();
 800ff86:	f001 fabf 	bl	8011508 <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800ff8a:	4b17      	ldr	r3, [pc, #92]	; (800ffe8 <st25r3916Initialize+0x90>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800ff90:	2118      	movs	r1, #24
 800ff92:	2001      	movs	r0, #1
 800ff94:	f000 fffb 	bl	8010f8e <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800ff98:	2210      	movs	r2, #16
 800ff9a:	2110      	movs	r1, #16
 800ff9c:	2004      	movs	r0, #4
 800ff9e:	f001 f86f 	bl	8011080 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 800ffa2:	f000 f823 	bl	800ffec <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	f000 f854 	bl	8010054 <st25r3916MeasureVoltage>
 800ffac:	4603      	mov	r3, r0
 800ffae:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800ffb0:	88fb      	ldrh	r3, [r7, #6]
 800ffb2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800ffb6:	d201      	bcs.n	800ffbc <st25r3916Initialize+0x64>
 800ffb8:	2380      	movs	r3, #128	; 0x80
 800ffba:	e000      	b.n	800ffbe <st25r3916Initialize+0x66>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	2180      	movs	r1, #128	; 0x80
 800ffc2:	2001      	movs	r0, #1
 800ffc4:	f001 f810 	bl	8010fe8 <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 800ffc8:	2148      	movs	r1, #72	; 0x48
 800ffca:	2002      	movs	r0, #2
 800ffcc:	f000 ffa8 	bl	8010f20 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	f001 fa5a 	bl	801148c <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 800ffd8:	f001 fa64 	bl	80114a4 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	200009e8 	.word	0x200009e8

0800ffec <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800fff0:	2280      	movs	r2, #128	; 0x80
 800fff2:	2180      	movs	r1, #128	; 0x80
 800fff4:	2002      	movs	r0, #2
 800fff6:	f001 f87b 	bl	80110f0 <st25r3916CheckReg>
 800fffa:	4603      	mov	r3, r0
 800fffc:	f083 0301 	eor.w	r3, r3, #1
 8010000:	b2db      	uxtb	r3, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00c      	beq.n	8010020 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 8010006:	2080      	movs	r0, #128	; 0x80
 8010008:	f001 f9fc 	bl	8011404 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 801000c:	2080      	movs	r0, #128	; 0x80
 801000e:	f001 fa31 	bl	8011474 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 8010012:	2180      	movs	r1, #128	; 0x80
 8010014:	2002      	movs	r0, #2
 8010016:	f000 ffba 	bl	8010f8e <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 801001a:	2080      	movs	r0, #128	; 0x80
 801001c:	f001 fa36 	bl	801148c <st25r3916DisableInterrupts>
    }
}
 8010020:	bf00      	nop
 8010022:	bd80      	pop	{r7, pc}

08010024 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	461a      	mov	r2, r3
 8010032:	2107      	movs	r1, #7
 8010034:	202c      	movs	r0, #44	; 0x2c
 8010036:	f000 ffd7 	bl	8010fe8 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 801003a:	f107 030f 	add.w	r3, r7, #15
 801003e:	2264      	movs	r2, #100	; 0x64
 8010040:	2125      	movs	r1, #37	; 0x25
 8010042:	20df      	movs	r0, #223	; 0xdf
 8010044:	f7ff ff5a 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>

    return result;
 8010048:	7bfb      	ldrb	r3, [r7, #15]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
	...

08010054 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff ffdf 	bl	8010024 <st25r3916MeasurePowerSupply>
 8010066:	4603      	mov	r3, r0
 8010068:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 801006a:	7bfb      	ldrb	r3, [r7, #15]
 801006c:	b29b      	uxth	r3, r3
 801006e:	461a      	mov	r2, r3
 8010070:	0052      	lsls	r2, r2, #1
 8010072:	441a      	add	r2, r3
 8010074:	00d2      	lsls	r2, r2, #3
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 801007a:	7bfb      	ldrb	r3, [r7, #15]
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	3305      	adds	r3, #5
 8010080:	4a06      	ldr	r2, [pc, #24]	; (801009c <st25r3916MeasureVoltage+0x48>)
 8010082:	fba2 2303 	umull	r2, r3, r2, r3
 8010086:	08db      	lsrs	r3, r3, #3
 8010088:	b29a      	uxth	r2, r3
 801008a:	89bb      	ldrh	r3, [r7, #12]
 801008c:	4413      	add	r3, r2
 801008e:	81bb      	strh	r3, [r7, #12]

    return mV;
 8010090:	89bb      	ldrh	r3, [r7, #12]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	cccccccd 	.word	0xcccccccd

080100a0 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 80100a8:	2180      	movs	r1, #128	; 0x80
 80100aa:	202c      	movs	r0, #44	; 0x2c
 80100ac:	f000 ff6f 	bl	8010f8e <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 80100b0:	2180      	movs	r1, #128	; 0x80
 80100b2:	202c      	movs	r0, #44	; 0x2c
 80100b4:	f000 ff34 	bl	8010f20 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 80100b8:	f107 030f 	add.w	r3, r7, #15
 80100bc:	2206      	movs	r2, #6
 80100be:	216c      	movs	r1, #108	; 0x6c
 80100c0:	20d6      	movs	r0, #214	; 0xd6
 80100c2:	f7ff ff1b 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 80100c6:	7bfb      	ldrb	r3, [r7, #15]
 80100c8:	091b      	lsrs	r3, r3, #4
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d02b      	beq.n	801012c <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 80100d4:	2280      	movs	r2, #128	; 0x80
 80100d6:	2180      	movs	r1, #128	; 0x80
 80100d8:	2001      	movs	r0, #1
 80100da:	f001 f809 	bl	80110f0 <st25r3916CheckReg>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00d      	beq.n	8010100 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	d903      	bls.n	80100f2 <st25r3916AdjustRegulators+0x52>
 80100ea:	7bfb      	ldrb	r3, [r7, #15]
 80100ec:	3b05      	subs	r3, #5
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	e000      	b.n	80100f4 <st25r3916AdjustRegulators+0x54>
 80100f2:	7bfb      	ldrb	r3, [r7, #15]
 80100f4:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80100fc:	801a      	strh	r2, [r3, #0]
 80100fe:	e003      	b.n	8010108 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8010106:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	881a      	ldrh	r2, [r3, #0]
 801010c:	7bfb      	ldrb	r3, [r7, #15]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4619      	mov	r1, r3
 8010112:	0089      	lsls	r1, r1, #2
 8010114:	440b      	add	r3, r1
 8010116:	4619      	mov	r1, r3
 8010118:	0088      	lsls	r0, r1, #2
 801011a:	4619      	mov	r1, r3
 801011c:	4603      	mov	r3, r0
 801011e:	440b      	add	r3, r1
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	b29b      	uxth	r3, r3
 8010124:	4413      	add	r3, r2
 8010126:	b29a      	uxth	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	220a      	movs	r2, #10
 8010142:	2125      	movs	r1, #37	; 0x25
 8010144:	20d3      	movs	r0, #211	; 0xd3
 8010146:	f7ff fed9 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>
 801014a:	4603      	mov	r3, r0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	220a      	movs	r2, #10
 8010160:	2125      	movs	r1, #37	; 0x25
 8010162:	20d9      	movs	r0, #217	; 0xd9
 8010164:	f7ff feca 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>
 8010168:	4603      	mov	r3, r0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	220a      	movs	r2, #10
 801017e:	2125      	movs	r1, #37	; 0x25
 8010180:	20de      	movs	r0, #222	; 0xde
 8010182:	f7ff febb 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>
 8010186:	4603      	mov	r3, r0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3708      	adds	r7, #8
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 8010198:	21f8      	movs	r1, #248	; 0xf8
 801019a:	202f      	movs	r0, #47	; 0x2f
 801019c:	f000 fec0 	bl	8010f20 <st25r3916ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 80101a0:	f107 030d 	add.w	r3, r7, #13
 80101a4:	2204      	movs	r2, #4
 80101a6:	2130      	movs	r1, #48	; 0x30
 80101a8:	20dd      	movs	r0, #221	; 0xdd
 80101aa:	f7ff fea7 	bl	800fefc <st25r3916ExecuteCommandAndGetResult>
 80101ae:	4603      	mov	r3, r0
 80101b0:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80101b2:	7b7b      	ldrb	r3, [r7, #13]
 80101b4:	f003 0304 	and.w	r3, r3, #4
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d007      	beq.n	80101cc <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80101bc:	7b7b      	ldrb	r3, [r7, #13]
 80101be:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d102      	bne.n	80101cc <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80101c6:	89fb      	ldrh	r3, [r7, #14]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d001      	beq.n	80101d0 <st25r3916CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 80101cc:	2303      	movs	r3, #3
 80101ce:	e008      	b.n	80101e2 <st25r3916CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <st25r3916CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 80101d6:	7b7b      	ldrb	r3, [r7, #13]
 80101d8:	08db      	lsrs	r3, r3, #3
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b084      	sub	sp, #16
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	4603      	mov	r3, r0
 80101f2:	460a      	mov	r2, r1
 80101f4:	71fb      	strb	r3, [r7, #7]
 80101f6:	4613      	mov	r3, r2
 80101f8:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 80101fa:	f107 030f 	add.w	r3, r7, #15
 80101fe:	4619      	mov	r1, r3
 8010200:	2004      	movs	r0, #4
 8010202:	f000 fd65 	bl	8010cd0 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 8010206:	79bb      	ldrb	r3, [r7, #6]
 8010208:	2bff      	cmp	r3, #255	; 0xff
 801020a:	d00e      	beq.n	801022a <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 801020c:	79bb      	ldrb	r3, [r7, #6]
 801020e:	2b03      	cmp	r3, #3
 8010210:	d901      	bls.n	8010216 <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 8010212:	2307      	movs	r3, #7
 8010214:	e025      	b.n	8010262 <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	f023 030f 	bic.w	r3, r3, #15
 801021c:	b2db      	uxtb	r3, r3
 801021e:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 8010220:	7bfa      	ldrb	r2, [r7, #15]
 8010222:	79bb      	ldrb	r3, [r7, #6]
 8010224:	4313      	orrs	r3, r2
 8010226:	b2db      	uxtb	r3, r3
 8010228:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 801022a:	79fb      	ldrb	r3, [r7, #7]
 801022c:	2bff      	cmp	r3, #255	; 0xff
 801022e:	d012      	beq.n	8010256 <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 8010230:	79fb      	ldrb	r3, [r7, #7]
 8010232:	2b07      	cmp	r3, #7
 8010234:	d901      	bls.n	801023a <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 8010236:	2307      	movs	r3, #7
 8010238:	e013      	b.n	8010262 <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 801023a:	7bfb      	ldrb	r3, [r7, #15]
 801023c:	f003 030f 	and.w	r3, r3, #15
 8010240:	b2db      	uxtb	r3, r3
 8010242:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	011b      	lsls	r3, r3, #4
 8010248:	b25a      	sxtb	r2, r3
 801024a:	7bfb      	ldrb	r3, [r7, #15]
 801024c:	b25b      	sxtb	r3, r3
 801024e:	4313      	orrs	r3, r2
 8010250:	b25b      	sxtb	r3, r3
 8010252:	b2db      	uxtb	r3, r3
 8010254:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 8010256:	7bfb      	ldrb	r3, [r7, #15]
 8010258:	4619      	mov	r1, r3
 801025a:	2004      	movs	r0, #4
 801025c:	f000 fd76 	bl	8010d4c <st25r3916WriteRegister>
 8010260:	4603      	mov	r3, r0
}
 8010262:	4618      	mov	r0, r3
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 801026c:	b590      	push	{r4, r7, lr}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	4604      	mov	r4, r0
 8010274:	4608      	mov	r0, r1
 8010276:	4611      	mov	r1, r2
 8010278:	461a      	mov	r2, r3
 801027a:	4623      	mov	r3, r4
 801027c:	71fb      	strb	r3, [r7, #7]
 801027e:	4603      	mov	r3, r0
 8010280:	71bb      	strb	r3, [r7, #6]
 8010282:	460b      	mov	r3, r1
 8010284:	717b      	strb	r3, [r7, #5]
 8010286:	4613      	mov	r3, r2
 8010288:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	2bc8      	cmp	r3, #200	; 0xc8
 801028e:	d004      	beq.n	801029a <st25r3916PerformCollisionAvoidance+0x2e>
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2bc9      	cmp	r3, #201	; 0xc9
 8010294:	d001      	beq.n	801029a <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 8010296:	2307      	movs	r3, #7
 8010298:	e05d      	b.n	8010356 <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 801029a:	230c      	movs	r3, #12
 801029c:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 801029e:	79bb      	ldrb	r3, [r7, #6]
 80102a0:	2bff      	cmp	r3, #255	; 0xff
 80102a2:	d102      	bne.n	80102aa <st25r3916PerformCollisionAvoidance+0x3e>
 80102a4:	797b      	ldrb	r3, [r7, #5]
 80102a6:	2bff      	cmp	r3, #255	; 0xff
 80102a8:	d01e      	beq.n	80102e8 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 80102ae:	79bb      	ldrb	r3, [r7, #6]
 80102b0:	2bff      	cmp	r3, #255	; 0xff
 80102b2:	d003      	beq.n	80102bc <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 80102b4:	7bfb      	ldrb	r3, [r7, #15]
 80102b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80102ba:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 80102bc:	797b      	ldrb	r3, [r7, #5]
 80102be:	2bff      	cmp	r3, #255	; 0xff
 80102c0:	d003      	beq.n	80102ca <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
 80102c4:	f043 030f 	orr.w	r3, r3, #15
 80102c8:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 80102ca:	79bb      	ldrb	r3, [r7, #6]
 80102cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	797b      	ldrb	r3, [r7, #5]
 80102d4:	f003 030f 	and.w	r3, r3, #15
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	4313      	orrs	r3, r2
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	7bfb      	ldrb	r3, [r7, #15]
 80102e0:	4619      	mov	r1, r3
 80102e2:	202a      	movs	r0, #42	; 0x2a
 80102e4:	f000 fe80 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 80102e8:	793b      	ldrb	r3, [r7, #4]
 80102ea:	461a      	mov	r2, r3
 80102ec:	2103      	movs	r1, #3
 80102ee:	200a      	movs	r0, #10
 80102f0:	f000 fe7a 	bl	8010fe8 <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80102f4:	481a      	ldr	r0, [pc, #104]	; (8010360 <st25r3916PerformCollisionAvoidance+0xf4>)
 80102f6:	f001 f885 	bl	8011404 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80102fa:	4819      	ldr	r0, [pc, #100]	; (8010360 <st25r3916PerformCollisionAvoidance+0xf4>)
 80102fc:	f001 f8ba 	bl	8011474 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 8010300:	79fb      	ldrb	r3, [r7, #7]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fdab 	bl	8010e5e <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 8010308:	210a      	movs	r1, #10
 801030a:	4816      	ldr	r0, [pc, #88]	; (8010364 <st25r3916PerformCollisionAvoidance+0xf8>)
 801030c:	f001 f82a 	bl	8011364 <st25r3916WaitForInterruptsTimed>
 8010310:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 801031c:	231d      	movs	r3, #29
 801031e:	81bb      	strh	r3, [r7, #12]
 8010320:	e011      	b.n	8010346 <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00c      	beq.n	8010346 <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 801032c:	210a      	movs	r1, #10
 801032e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010332:	f001 f817 	bl	8011364 <st25r3916WaitForInterruptsTimed>
 8010336:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801033e:	2b00      	cmp	r3, #0
 8010340:	d001      	beq.n	8010346 <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 8010342:	2300      	movs	r3, #0
 8010344:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 8010346:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801034a:	f001 f85b 	bl	8011404 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 801034e:	4804      	ldr	r0, [pc, #16]	; (8010360 <st25r3916PerformCollisionAvoidance+0xf4>)
 8010350:	f001 f89c 	bl	801148c <st25r3916DisableInterrupts>
    
    return err;
 8010354:	89bb      	ldrh	r3, [r7, #12]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	bd90      	pop	{r4, r7, pc}
 801035e:	bf00      	nop
 8010360:	20000600 	.word	0x20000600
 8010364:	20000400 	.word	0x20000400

08010368 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	4603      	mov	r3, r0
 8010370:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 8010372:	88fb      	ldrh	r3, [r7, #6]
 8010374:	b2db      	uxtb	r3, r3
 8010376:	4619      	mov	r1, r3
 8010378:	2023      	movs	r0, #35	; 0x23
 801037a:	f000 fce7 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 801037e:	88fb      	ldrh	r3, [r7, #6]
 8010380:	0a1b      	lsrs	r3, r3, #8
 8010382:	b29b      	uxth	r3, r3
 8010384:	b2db      	uxtb	r3, r3
 8010386:	4619      	mov	r1, r3
 8010388:	2022      	movs	r0, #34	; 0x22
 801038a:	f000 fcdf 	bl	8010d4c <st25r3916WriteRegister>
}
 801038e:	bf00      	nop
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
	...

08010398 <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 80103a4:	2300      	movs	r3, #0
 80103a6:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 80103a8:	4a19      	ldr	r2, [pc, #100]	; (8010410 <st25r3916SetNoResponseTime+0x78>)
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 80103ae:	2300      	movs	r3, #0
 80103b0:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103b8:	d312      	bcc.n	80103e0 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 80103ba:	2301      	movs	r3, #1
 80103bc:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	333f      	adds	r3, #63	; 0x3f
 80103c2:	099b      	lsrs	r3, r3, #6
 80103c4:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103cc:	d304      	bcc.n	80103d8 <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 80103ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103d2:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 80103d4:	2307      	movs	r3, #7
 80103d6:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	019b      	lsls	r3, r3, #6
 80103dc:	4a0c      	ldr	r2, [pc, #48]	; (8010410 <st25r3916SetNoResponseTime+0x78>)
 80103de:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 80103e0:	7b7b      	ldrb	r3, [r7, #13]
 80103e2:	461a      	mov	r2, r3
 80103e4:	2101      	movs	r1, #1
 80103e6:	2012      	movs	r0, #18
 80103e8:	f000 fdfe 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	0a1b      	lsrs	r3, r3, #8
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	4619      	mov	r1, r3
 80103f4:	2010      	movs	r0, #16
 80103f6:	f000 fca9 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	4619      	mov	r1, r3
 8010400:	2011      	movs	r0, #17
 8010402:	f000 fca3 	bl	8010d4c <st25r3916WriteRegister>

    return err;
 8010406:	89fb      	ldrh	r3, [r7, #14]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	200009e8 	.word	0x200009e8

08010414 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	4603      	mov	r3, r0
 801041c:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 801041e:	88fb      	ldrh	r3, [r7, #6]
 8010420:	0a1b      	lsrs	r3, r3, #8
 8010422:	b29b      	uxth	r3, r3
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4619      	mov	r1, r3
 8010428:	2013      	movs	r0, #19
 801042a:	f000 fc8f 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 801042e:	88fb      	ldrh	r3, [r7, #6]
 8010430:	b2db      	uxtb	r3, r3
 8010432:	4619      	mov	r1, r3
 8010434:	2014      	movs	r0, #20
 8010436:	f000 fc89 	bl	8010d4c <st25r3916WriteRegister>
}
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b082      	sub	sp, #8
 8010446:	af00      	add	r7, sp, #0
 8010448:	4603      	mov	r3, r0
 801044a:	460a      	mov	r2, r1
 801044c:	80fb      	strh	r3, [r7, #6]
 801044e:	4613      	mov	r3, r2
 8010450:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 8010452:	88fb      	ldrh	r3, [r7, #6]
 8010454:	4618      	mov	r0, r3
 8010456:	f7ff ffdd 	bl	8010414 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 801045a:	797b      	ldrb	r3, [r7, #5]
 801045c:	461a      	mov	r2, r3
 801045e:	21e0      	movs	r1, #224	; 0xe0
 8010460:	2012      	movs	r0, #18
 8010462:	f000 fdc1 	bl	8010fe8 <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 8010466:	797b      	ldrb	r3, [r7, #5]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d102      	bne.n	8010472 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 801046c:	20e0      	movs	r0, #224	; 0xe0
 801046e:	f000 fcf6 	bl	8010e5e <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 8010472:	2300      	movs	r3, #0
}
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8010484:	2300      	movs	r3, #0
 8010486:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 8010488:	f107 030f 	add.w	r3, r7, #15
 801048c:	4619      	mov	r1, r3
 801048e:	203f      	movs	r0, #63	; 0x3f
 8010490:	f000 fc1e 	bl	8010cd0 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801049a:	2b28      	cmp	r3, #40	; 0x28
 801049c:	d001      	beq.n	80104a2 <st25r3916CheckChipID+0x26>
    {
        return false;
 801049e:	2300      	movs	r3, #0
 80104a0:	e009      	b.n	80104b6 <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d005      	beq.n	80104b4 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 80104b4:	2301      	movs	r3, #1
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b084      	sub	sp, #16
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d016      	beq.n	8010500 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 80104d2:	2378      	movs	r3, #120	; 0x78
 80104d4:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	785b      	ldrb	r3, [r3, #1]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d903      	bls.n	80104e6 <st25r3916StreamConfigure+0x28>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	785b      	ldrb	r3, [r3, #1]
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d901      	bls.n	80104ea <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 80104e6:	2307      	movs	r3, #7
 80104e8:	e053      	b.n	8010592 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	785b      	ldrb	r3, [r3, #1]
 80104ee:	f1c3 0304 	rsb	r3, r3, #4
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	015b      	lsls	r3, r3, #5
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	73fb      	strb	r3, [r7, #15]
 80104fe:	e01b      	b.n	8010538 <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 8010500:	2370      	movs	r3, #112	; 0x70
 8010502:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	785b      	ldrb	r3, [r3, #1]
 8010508:	2b02      	cmp	r3, #2
 801050a:	d903      	bls.n	8010514 <st25r3916StreamConfigure+0x56>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	785b      	ldrb	r3, [r3, #1]
 8010510:	2b06      	cmp	r3, #6
 8010512:	d901      	bls.n	8010518 <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8010514:	2307      	movs	r3, #7
 8010516:	e03c      	b.n	8010592 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	785b      	ldrb	r3, [r3, #1]
 801051c:	f1c3 0306 	rsb	r3, r3, #6
 8010520:	b2db      	uxtb	r3, r3
 8010522:	015b      	lsls	r3, r3, #5
 8010524:	b2da      	uxtb	r2, r3
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	4313      	orrs	r3, r2
 801052a:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	78db      	ldrb	r3, [r3, #3]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8010534:	2307      	movs	r3, #7
 8010536:	e02c      	b.n	8010592 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	789b      	ldrb	r3, [r3, #2]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d003      	beq.n	8010548 <st25r3916StreamConfigure+0x8a>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	789b      	ldrb	r3, [r3, #2]
 8010544:	2b07      	cmp	r3, #7
 8010546:	d901      	bls.n	801054c <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 8010548:	2307      	movs	r3, #7
 801054a:	e022      	b.n	8010592 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	789b      	ldrb	r3, [r3, #2]
 8010550:	f1c3 0307 	rsb	r3, r3, #7
 8010554:	b2da      	uxtb	r2, r3
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	4313      	orrs	r3, r2
 801055a:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	78db      	ldrb	r3, [r3, #3]
 8010560:	2b03      	cmp	r3, #3
 8010562:	d901      	bls.n	8010568 <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8010564:	2307      	movs	r3, #7
 8010566:	e014      	b.n	8010592 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	78db      	ldrb	r3, [r3, #3]
 801056c:	00db      	lsls	r3, r3, #3
 801056e:	b25a      	sxtb	r2, r3
 8010570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010574:	4313      	orrs	r3, r2
 8010576:	b25b      	sxtb	r3, r3
 8010578:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	4619      	mov	r1, r3
 801057e:	2009      	movs	r0, #9
 8010580:	f000 fbe4 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 8010584:	7bbb      	ldrb	r3, [r7, #14]
 8010586:	461a      	mov	r2, r3
 8010588:	2178      	movs	r1, #120	; 0x78
 801058a:	2003      	movs	r0, #3
 801058c:	f000 fd2c 	bl	8010fe8 <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 8010590:	2300      	movs	r3, #0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <st25r3916AatTune>:

 

/*******************************************************************************/
ReturnCode st25r3916AatTune(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 801059c:	b590      	push	{r4, r7, lr}
 801059e:	b08b      	sub	sp, #44	; 0x2c
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    const struct st25r3916AatTuneParams *tp = tuningParams;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	627b      	str	r3, [r7, #36]	; 0x24
    struct st25r3916AatTuneResult *ts = tuningStatus;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	623b      	str	r3, [r7, #32]
    struct st25r3916AatTuneParams defaultTuningParams = 
 80105ae:	4b2b      	ldr	r3, [pc, #172]	; (801065c <st25r3916AatTune+0xc0>)
 80105b0:	f107 0410 	add.w	r4, r7, #16
 80105b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105b6:	c407      	stmia	r4!, {r0, r1, r2}
 80105b8:	8023      	strh	r3, [r4, #0]
        .doDynamicSteps=true,
        .measureLimit=50,
    };
    struct st25r3916AatTuneResult defaultTuneResult;
    
    if ((NULL != tp) && (
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d025      	beq.n	801060c <st25r3916AatTune+0x70>
          (tp->aat_a_min > tp->aat_a_max   )
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	781a      	ldrb	r2, [r3, #0]
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	785b      	ldrb	r3, [r3, #1]
    if ((NULL != tp) && (
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d81d      	bhi.n	8010608 <st25r3916AatTune+0x6c>
       || (tp->aat_a_start < tp->aat_a_min )
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	789a      	ldrb	r2, [r3, #2]
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d317      	bcc.n	8010608 <st25r3916AatTune+0x6c>
       || (tp->aat_a_start > tp->aat_a_max )
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	789a      	ldrb	r2, [r3, #2]
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	785b      	ldrb	r3, [r3, #1]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d811      	bhi.n	8010608 <st25r3916AatTune+0x6c>
       || (tp->aat_b_min > tp->aat_b_max   )
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	791a      	ldrb	r2, [r3, #4]
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	795b      	ldrb	r3, [r3, #5]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d80b      	bhi.n	8010608 <st25r3916AatTune+0x6c>
       || (tp->aat_b_start < tp->aat_b_min )
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	799a      	ldrb	r2, [r3, #6]
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	791b      	ldrb	r3, [r3, #4]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d305      	bcc.n	8010608 <st25r3916AatTune+0x6c>
       || (tp->aat_b_start > tp->aat_b_max )
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	799a      	ldrb	r2, [r3, #6]
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	795b      	ldrb	r3, [r3, #5]
 8010604:	429a      	cmp	r2, r3
 8010606:	d901      	bls.n	801060c <st25r3916AatTune+0x70>
       ))
    {
        return ERR_PARAM;
 8010608:	2307      	movs	r3, #7
 801060a:	e023      	b.n	8010654 <st25r3916AatTune+0xb8>
    }

    if (NULL == tp)
 801060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060e:	2b00      	cmp	r3, #0
 8010610:	d110      	bne.n	8010634 <st25r3916AatTune+0x98>
    { /* Start from current caps with default params */
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_A, &defaultTuningParams.aat_a_start);
 8010612:	f107 0310 	add.w	r3, r7, #16
 8010616:	3302      	adds	r3, #2
 8010618:	4619      	mov	r1, r3
 801061a:	2026      	movs	r0, #38	; 0x26
 801061c:	f000 fb58 	bl	8010cd0 <st25r3916ReadRegister>
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_B, &defaultTuningParams.aat_b_start);
 8010620:	f107 0310 	add.w	r3, r7, #16
 8010624:	3306      	adds	r3, #6
 8010626:	4619      	mov	r1, r3
 8010628:	2027      	movs	r0, #39	; 0x27
 801062a:	f000 fb51 	bl	8010cd0 <st25r3916ReadRegister>
        tp = &defaultTuningParams;
 801062e:	f107 0310 	add.w	r3, r7, #16
 8010632:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (NULL == ts){ts = &defaultTuneResult;}
 8010634:	6a3b      	ldr	r3, [r7, #32]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <st25r3916AatTune+0xa4>
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	623b      	str	r3, [r7, #32]

    ts->measureCnt = 0; /* Clear current measure count */
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	2200      	movs	r2, #0
 8010644:	809a      	strh	r2, [r3, #4]
 
    err = aatHillClimb(tp, ts);
 8010646:	6a39      	ldr	r1, [r7, #32]
 8010648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801064a:	f000 f809 	bl	8010660 <aatHillClimb>
 801064e:	4603      	mov	r3, r0
 8010650:	83fb      	strh	r3, [r7, #30]

    return err;
 8010652:	8bfb      	ldrh	r3, [r7, #30]
}
 8010654:	4618      	mov	r0, r3
 8010656:	372c      	adds	r7, #44	; 0x2c
 8010658:	46bd      	mov	sp, r7
 801065a:	bd90      	pop	{r4, r7, pc}
 801065c:	08017c60 	.word	0x08017c60

08010660 <aatHillClimb>:

/*******************************************************************************/
static ReturnCode aatHillClimb(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 8010660:	b590      	push	{r4, r7, lr}
 8010662:	b08d      	sub	sp, #52	; 0x34
 8010664:	af02      	add	r7, sp, #8
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
    ReturnCode  err = ERR_NONE;
 801066a:	2300      	movs	r3, #0
 801066c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t f_min;
    int32_t direction, gdirection;
    uint8_t amp,phs;
    struct st25r3916AatTuneParams tp = *tuningParams; // local copy to obey const
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	f107 0308 	add.w	r3, r7, #8
 8010674:	4614      	mov	r4, r2
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	6861      	ldr	r1, [r4, #4]
 801067a:	68a2      	ldr	r2, [r4, #8]
 801067c:	c307      	stmia	r3!, {r0, r1, r2}
 801067e:	89a2      	ldrh	r2, [r4, #12]
 8010680:	801a      	strh	r2, [r3, #0]

    tuningStatus->aat_a = tuningParams->aat_a_start;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	789a      	ldrb	r2, [r3, #2]
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	701a      	strb	r2, [r3, #0]
    tuningStatus->aat_b = tuningParams->aat_b_start;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	799a      	ldrb	r2, [r3, #6]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	705a      	strb	r2, [r3, #1]

    /* Get a proper start value */
    aatMeasure(tuningStatus->aat_a,tuningStatus->aat_b,&amp,&phs,&tuningStatus->measureCnt);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	7818      	ldrb	r0, [r3, #0]
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	7859      	ldrb	r1, [r3, #1]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	3304      	adds	r3, #4
 801069e:	f107 0416 	add.w	r4, r7, #22
 80106a2:	f107 0217 	add.w	r2, r7, #23
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	4623      	mov	r3, r4
 80106aa:	f000 f9bc 	bl	8010a26 <aatMeasure>
    f_min = aatCalcF(&tp, amp, phs);
 80106ae:	7df9      	ldrb	r1, [r7, #23]
 80106b0:	7dba      	ldrb	r2, [r7, #22]
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f8ec 	bl	8010894 <aatCalcF>
 80106bc:	4603      	mov	r3, r0
 80106be:	61bb      	str	r3, [r7, #24]
    direction = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	623b      	str	r3, [r7, #32]

    st25r3916AatLog("%d %d: %d***\n",tuningStatus->aat_a,tuningStatus->aat_b,f_min);

    do {
        direction = 0; /* Initially and after reducing step sizes we don't have a previous direction */
 80106c4:	2300      	movs	r3, #0
 80106c6:	623b      	str	r3, [r7, #32]
        do {
            /* With the greedy step below always executed aftwards the -direction does never need to be investigated */
            direction = aatSteepestDescent(&f_min, &tp, tuningStatus, direction, -direction);
 80106c8:	6a3b      	ldr	r3, [r7, #32]
 80106ca:	425b      	negs	r3, r3
 80106cc:	f107 0108 	add.w	r1, r7, #8
 80106d0:	f107 0018 	add.w	r0, r7, #24
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	f000 f838 	bl	801074e <aatSteepestDescent>
 80106de:	6238      	str	r0, [r7, #32]
            if (tuningStatus->measureCnt > tp.measureLimit)
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	889a      	ldrh	r2, [r3, #4]
 80106e4:	7d7b      	ldrb	r3, [r7, #21]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d902      	bls.n	80106f2 <aatHillClimb+0x92>
            {
                err = ERR_OVERRUN;
 80106ec:	230a      	movs	r3, #10
 80106ee:	84fb      	strh	r3, [r7, #38]	; 0x26
                break;
 80106f0:	e017      	b.n	8010722 <aatHillClimb+0xc2>
            }
            do
            {
                gdirection = aatGreedyDescent(&f_min, &tp, tuningStatus, direction);
 80106f2:	f107 0108 	add.w	r1, r7, #8
 80106f6:	f107 0018 	add.w	r0, r7, #24
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	f000 f887 	bl	8010810 <aatGreedyDescent>
 8010702:	61f8      	str	r0, [r7, #28]
                if (tuningStatus->measureCnt > tp.measureLimit) {
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	889a      	ldrh	r2, [r3, #4]
 8010708:	7d7b      	ldrb	r3, [r7, #21]
 801070a:	b29b      	uxth	r3, r3
 801070c:	429a      	cmp	r2, r3
 801070e:	d902      	bls.n	8010716 <aatHillClimb+0xb6>
                    err = ERR_OVERRUN;
 8010710:	230a      	movs	r3, #10
 8010712:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8010714:	e002      	b.n	801071c <aatHillClimb+0xbc>
                }
            } while (0 != gdirection);
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1ea      	bne.n	80106f2 <aatHillClimb+0x92>
        } while (0 != direction);
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1d2      	bne.n	80106c8 <aatHillClimb+0x68>
        tp.aat_a_stepWidth /= 2U; /* Reduce step sizes */
 8010722:	7afb      	ldrb	r3, [r7, #11]
 8010724:	085b      	lsrs	r3, r3, #1
 8010726:	b2db      	uxtb	r3, r3
 8010728:	72fb      	strb	r3, [r7, #11]
        tp.aat_b_stepWidth /= 2U;
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	085b      	lsrs	r3, r3, #1
 801072e:	b2db      	uxtb	r3, r3
 8010730:	73fb      	strb	r3, [r7, #15]
    } while (tp.doDynamicSteps && ((tp.aat_a_stepWidth>0U) || (tp.aat_b_stepWidth>0U)));
 8010732:	7d3b      	ldrb	r3, [r7, #20]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d005      	beq.n	8010744 <aatHillClimb+0xe4>
 8010738:	7afb      	ldrb	r3, [r7, #11]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1c2      	bne.n	80106c4 <aatHillClimb+0x64>
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1bf      	bne.n	80106c4 <aatHillClimb+0x64>
    
    return err;
 8010744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8010746:	4618      	mov	r0, r3
 8010748:	372c      	adds	r7, #44	; 0x2c
 801074a:	46bd      	mov	sp, r7
 801074c:	bd90      	pop	{r4, r7, pc}

0801074e <aatSteepestDescent>:

/*******************************************************************************/
static int32_t aatSteepestDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir, int32_t previousDir2)
{
 801074e:	b590      	push	{r4, r7, lr}
 8010750:	b08b      	sub	sp, #44	; 0x2c
 8010752:	af02      	add	r7, sp, #8
 8010754:	60f8      	str	r0, [r7, #12]
 8010756:	60b9      	str	r1, [r7, #8]
 8010758:	607a      	str	r2, [r7, #4]
 801075a:	603b      	str	r3, [r7, #0]
    int32_t i;
    uint8_t amp,phs;
    uint32_t f;
    int32_t bestdir = 0; /* Negative direction: decrease, Positive: increase. (-)1: aat_a, (-)2: aat_b */
 801075c:	2300      	movs	r3, #0
 801075e:	61bb      	str	r3, [r7, #24]

    for (i = -2; i <= 2; i++)
 8010760:	f06f 0301 	mvn.w	r3, #1
 8010764:	61fb      	str	r3, [r7, #28]
 8010766:	e041      	b.n	80107ec <aatSteepestDescent+0x9e>
    {
        uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	747b      	strb	r3, [r7, #17]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	785b      	ldrb	r3, [r3, #1]
 8010772:	743b      	strb	r3, [r7, #16]

        if ((0==i) || (i==-previousDir) || (i==-previousDir2))
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d032      	beq.n	80107e0 <aatSteepestDescent+0x92>
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	425b      	negs	r3, r3
 801077e:	69fa      	ldr	r2, [r7, #28]
 8010780:	429a      	cmp	r2, r3
 8010782:	d02d      	beq.n	80107e0 <aatSteepestDescent+0x92>
 8010784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010786:	425b      	negs	r3, r3
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	429a      	cmp	r2, r3
 801078c:	d028      	beq.n	80107e0 <aatSteepestDescent+0x92>
        { /* Skip no direction and avoid going backwards */
            continue;
        }
        if (0U!=aatStepDacVals(tuningParams, &a, &b, i))
 801078e:	f107 0210 	add.w	r2, r7, #16
 8010792:	f107 0111 	add.w	r1, r7, #17
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	68b8      	ldr	r0, [r7, #8]
 801079a:	f000 f8be 	bl	801091a <aatStepDacVals>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d11f      	bne.n	80107e4 <aatSteepestDescent+0x96>
        { /* If stepping did not change the value, omit this direction */
            continue;
        }

        aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 80107a4:	7c78      	ldrb	r0, [r7, #17]
 80107a6:	7c39      	ldrb	r1, [r7, #16]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3304      	adds	r3, #4
 80107ac:	f107 0412 	add.w	r4, r7, #18
 80107b0:	f107 0213 	add.w	r2, r7, #19
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	4623      	mov	r3, r4
 80107b8:	f000 f935 	bl	8010a26 <aatMeasure>
        f = aatCalcF(tuningParams, amp, phs);
 80107bc:	7cfb      	ldrb	r3, [r7, #19]
 80107be:	7cba      	ldrb	r2, [r7, #18]
 80107c0:	4619      	mov	r1, r3
 80107c2:	68b8      	ldr	r0, [r7, #8]
 80107c4:	f000 f866 	bl	8010894 <aatCalcF>
 80107c8:	6178      	str	r0, [r7, #20]
        st25r3916AatLog("%d : %d %d: %d",i,a, b, f);
        if (f < *f_min)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	697a      	ldr	r2, [r7, #20]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d208      	bcs.n	80107e6 <aatSteepestDescent+0x98>
        { /* Value is better than all previous ones */
            st25r3916AatLog("*");
            *f_min = f;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	697a      	ldr	r2, [r7, #20]
 80107d8:	601a      	str	r2, [r3, #0]
            bestdir = i;
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	61bb      	str	r3, [r7, #24]
 80107de:	e002      	b.n	80107e6 <aatSteepestDescent+0x98>
            continue;
 80107e0:	bf00      	nop
 80107e2:	e000      	b.n	80107e6 <aatSteepestDescent+0x98>
            continue;
 80107e4:	bf00      	nop
    for (i = -2; i <= 2; i++)
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	3301      	adds	r3, #1
 80107ea:	61fb      	str	r3, [r7, #28]
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	ddba      	ble.n	8010768 <aatSteepestDescent+0x1a>
        }
        st25r3916AatLog("\n");
    }
    if (0!=bestdir) 
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d006      	beq.n	8010806 <aatSteepestDescent+0xb8>
    { /* Walk into the best direction */
        aatStepDacVals(tuningParams, &tuningStatus->aat_a, &tuningStatus->aat_b, bestdir);
 80107f8:	6879      	ldr	r1, [r7, #4]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	68b8      	ldr	r0, [r7, #8]
 8010802:	f000 f88a 	bl	801091a <aatStepDacVals>
    }
    return bestdir;
 8010806:	69bb      	ldr	r3, [r7, #24]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3724      	adds	r7, #36	; 0x24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd90      	pop	{r4, r7, pc}

08010810 <aatGreedyDescent>:

/*******************************************************************************/
static int32_t aatGreedyDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir)
{
 8010810:	b590      	push	{r4, r7, lr}
 8010812:	b089      	sub	sp, #36	; 0x24
 8010814:	af02      	add	r7, sp, #8
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	603b      	str	r3, [r7, #0]
    uint8_t amp,phs;
    uint32_t f;
    uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	747b      	strb	r3, [r7, #17]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	785b      	ldrb	r3, [r3, #1]
 8010828:	743b      	strb	r3, [r7, #16]

    if (0U != aatStepDacVals(tuningParams, &a, &b, previousDir))
 801082a:	f107 0210 	add.w	r2, r7, #16
 801082e:	f107 0111 	add.w	r1, r7, #17
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	68b8      	ldr	r0, [r7, #8]
 8010836:	f000 f870 	bl	801091a <aatStepDacVals>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <aatGreedyDescent+0x34>
    { /* If stepping did not change the value, omit this direction */
        return 0;
 8010840:	2300      	movs	r3, #0
 8010842:	e023      	b.n	801088c <aatGreedyDescent+0x7c>
    }

    aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 8010844:	7c78      	ldrb	r0, [r7, #17]
 8010846:	7c39      	ldrb	r1, [r7, #16]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	3304      	adds	r3, #4
 801084c:	f107 0412 	add.w	r4, r7, #18
 8010850:	f107 0213 	add.w	r2, r7, #19
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	4623      	mov	r3, r4
 8010858:	f000 f8e5 	bl	8010a26 <aatMeasure>
    f = aatCalcF(tuningParams, amp, phs);
 801085c:	7cfb      	ldrb	r3, [r7, #19]
 801085e:	7cba      	ldrb	r2, [r7, #18]
 8010860:	4619      	mov	r1, r3
 8010862:	68b8      	ldr	r0, [r7, #8]
 8010864:	f000 f816 	bl	8010894 <aatCalcF>
 8010868:	6178      	str	r0, [r7, #20]
    st25r3916AatLog("g : %d %d: %d",a, b, f);
    if (f < *f_min)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	697a      	ldr	r2, [r7, #20]
 8010870:	429a      	cmp	r2, r3
 8010872:	d20a      	bcs.n	801088a <aatGreedyDescent+0x7a>
    { /* Value is better than previous one */
        st25r3916AatLog("*\n");
        tuningStatus->aat_a = a;
 8010874:	7c7a      	ldrb	r2, [r7, #17]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	701a      	strb	r2, [r3, #0]
        tuningStatus->aat_b = b;
 801087a:	7c3a      	ldrb	r2, [r7, #16]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	705a      	strb	r2, [r3, #1]
        *f_min = f;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	601a      	str	r2, [r3, #0]
        return previousDir;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	e000      	b.n	801088c <aatGreedyDescent+0x7c>
    }
    
    st25r3916AatLog("\n");
    return 0;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	371c      	adds	r7, #28
 8010890:	46bd      	mov	sp, r7
 8010892:	bd90      	pop	{r4, r7, pc}

08010894 <aatCalcF>:

/*******************************************************************************/
static uint32_t aatCalcF(const struct st25r3916AatTuneParams *tuningParams, uint8_t amplitude, uint8_t phase)
{
 8010894:	b480      	push	{r7}
 8010896:	b089      	sub	sp, #36	; 0x24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	460b      	mov	r3, r1
 801089e:	70fb      	strb	r3, [r7, #3]
 80108a0:	4613      	mov	r3, r2
 80108a2:	70bb      	strb	r3, [r7, #2]
    /* f(amp, pha) = (ampWeight * |amp - ampTarget|) + (phaWeight * |pha - phaTarget|) */
    uint8_t ampTarget = tuningParams->ampTarget;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	7a9b      	ldrb	r3, [r3, #10]
 80108a8:	77fb      	strb	r3, [r7, #31]
    uint8_t phaTarget = tuningParams->phaTarget;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	7a1b      	ldrb	r3, [r3, #8]
 80108ae:	77bb      	strb	r3, [r7, #30]

    uint32_t ampWeight = tuningParams->ampWeight;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	7adb      	ldrb	r3, [r3, #11]
 80108b4:	61bb      	str	r3, [r7, #24]
    uint32_t phaWeight = tuningParams->phaWeight;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	7a5b      	ldrb	r3, [r3, #9]
 80108ba:	617b      	str	r3, [r7, #20]

    /* Temp variables to avoid MISRA R10.8 (cast on composite expression) */
    uint8_t ad = ((amplitude > ampTarget)  ? (amplitude - ampTarget) : (ampTarget - amplitude));
 80108bc:	78fa      	ldrb	r2, [r7, #3]
 80108be:	7ffb      	ldrb	r3, [r7, #31]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d904      	bls.n	80108ce <aatCalcF+0x3a>
 80108c4:	78fa      	ldrb	r2, [r7, #3]
 80108c6:	7ffb      	ldrb	r3, [r7, #31]
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	e003      	b.n	80108d6 <aatCalcF+0x42>
 80108ce:	7ffa      	ldrb	r2, [r7, #31]
 80108d0:	78fb      	ldrb	r3, [r7, #3]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	74fb      	strb	r3, [r7, #19]
    uint8_t pd = ((phase > phaTarget)      ? (phase - phaTarget)     : (phaTarget - phase));
 80108d8:	78ba      	ldrb	r2, [r7, #2]
 80108da:	7fbb      	ldrb	r3, [r7, #30]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d904      	bls.n	80108ea <aatCalcF+0x56>
 80108e0:	78ba      	ldrb	r2, [r7, #2]
 80108e2:	7fbb      	ldrb	r3, [r7, #30]
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	e003      	b.n	80108f2 <aatCalcF+0x5e>
 80108ea:	7fba      	ldrb	r2, [r7, #30]
 80108ec:	78bb      	ldrb	r3, [r7, #2]
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	74bb      	strb	r3, [r7, #18]

    uint32_t ampDelta = (uint32_t)ad;
 80108f4:	7cfb      	ldrb	r3, [r7, #19]
 80108f6:	60fb      	str	r3, [r7, #12]
    uint32_t phaDelta = (uint32_t)pd;
 80108f8:	7cbb      	ldrb	r3, [r7, #18]
 80108fa:	60bb      	str	r3, [r7, #8]

    return ((ampWeight * ampDelta) + (phaWeight * phaDelta));
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	fb02 f203 	mul.w	r2, r2, r3
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	68b9      	ldr	r1, [r7, #8]
 8010908:	fb01 f303 	mul.w	r3, r1, r3
 801090c:	4413      	add	r3, r2
}
 801090e:	4618      	mov	r0, r3
 8010910:	3724      	adds	r7, #36	; 0x24
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <aatStepDacVals>:

/*******************************************************************************/
static ReturnCode aatStepDacVals(const struct st25r3916AatTuneParams *tuningParams,uint8_t *a, uint8_t *b, int32_t dir)
{
 801091a:	b480      	push	{r7}
 801091c:	b087      	sub	sp, #28
 801091e:	af00      	add	r7, sp, #0
 8010920:	60f8      	str	r0, [r7, #12]
 8010922:	60b9      	str	r1, [r7, #8]
 8010924:	607a      	str	r2, [r7, #4]
 8010926:	603b      	str	r3, [r7, #0]
    int16_t aat_a = (int16_t)*a, aat_b = (int16_t)*b;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	82fb      	strh	r3, [r7, #22]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	82bb      	strh	r3, [r7, #20]
    
    switch (abs(dir))
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	bfb8      	it	lt
 801093a:	425b      	neglt	r3, r3
 801093c:	2b01      	cmp	r3, #1
 801093e:	d002      	beq.n	8010946 <aatStepDacVals+0x2c>
 8010940:	2b02      	cmp	r3, #2
 8010942:	d02e      	beq.n	80109a2 <aatStepDacVals+0x88>
 8010944:	e05b      	b.n	80109fe <aatStepDacVals+0xe4>
    { /* Advance by steps size in requested direction */
        case 1:
            aat_a = (dir<0)?(aat_a - (int16_t)tuningParams->aat_a_stepWidth):(aat_a + (int16_t)tuningParams->aat_a_stepWidth);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	da07      	bge.n	801095c <aatStepDacVals+0x42>
 801094c:	8afa      	ldrh	r2, [r7, #22]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	78db      	ldrb	r3, [r3, #3]
 8010952:	b29b      	uxth	r3, r3
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	b29b      	uxth	r3, r3
 8010958:	b21b      	sxth	r3, r3
 801095a:	e006      	b.n	801096a <aatStepDacVals+0x50>
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	78db      	ldrb	r3, [r3, #3]
 8010960:	b29a      	uxth	r2, r3
 8010962:	8afb      	ldrh	r3, [r7, #22]
 8010964:	4413      	add	r3, r2
 8010966:	b29b      	uxth	r3, r3
 8010968:	b21b      	sxth	r3, r3
 801096a:	82fb      	strh	r3, [r7, #22]
            if(aat_a < (int16_t)tuningParams->aat_a_min){ aat_a = (int16_t)tuningParams->aat_a_min; }
 801096c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	7812      	ldrb	r2, [r2, #0]
 8010974:	4293      	cmp	r3, r2
 8010976:	da02      	bge.n	801097e <aatStepDacVals+0x64>
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	82fb      	strh	r3, [r7, #22]
            if(aat_a > (int16_t)tuningParams->aat_a_max){ aat_a = (int16_t)tuningParams->aat_a_max; }
 801097e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	7852      	ldrb	r2, [r2, #1]
 8010986:	4293      	cmp	r3, r2
 8010988:	dd02      	ble.n	8010990 <aatStepDacVals+0x76>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	785b      	ldrb	r3, [r3, #1]
 801098e:	82fb      	strh	r3, [r7, #22]
            if ((int16_t)*a == aat_a) {return ERR_PARAM;}
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	461a      	mov	r2, r3
 8010996:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801099a:	429a      	cmp	r2, r3
 801099c:	d131      	bne.n	8010a02 <aatStepDacVals+0xe8>
 801099e:	2307      	movs	r3, #7
 80109a0:	e03b      	b.n	8010a1a <aatStepDacVals+0x100>
            break;
        case 2:
            aat_b = (dir<0)?(aat_b - (int16_t)tuningParams->aat_b_stepWidth):(aat_b + (int16_t)tuningParams->aat_b_stepWidth);
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	da07      	bge.n	80109b8 <aatStepDacVals+0x9e>
 80109a8:	8aba      	ldrh	r2, [r7, #20]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	79db      	ldrb	r3, [r3, #7]
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	b21b      	sxth	r3, r3
 80109b6:	e006      	b.n	80109c6 <aatStepDacVals+0xac>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	79db      	ldrb	r3, [r3, #7]
 80109bc:	b29a      	uxth	r2, r3
 80109be:	8abb      	ldrh	r3, [r7, #20]
 80109c0:	4413      	add	r3, r2
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	b21b      	sxth	r3, r3
 80109c6:	82bb      	strh	r3, [r7, #20]
            if(aat_b < (int16_t)tuningParams->aat_b_min){ aat_b = (int16_t)tuningParams->aat_b_min; }
 80109c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	7912      	ldrb	r2, [r2, #4]
 80109d0:	4293      	cmp	r3, r2
 80109d2:	da02      	bge.n	80109da <aatStepDacVals+0xc0>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	791b      	ldrb	r3, [r3, #4]
 80109d8:	82bb      	strh	r3, [r7, #20]
            if(aat_b > (int16_t)tuningParams->aat_b_max){ aat_b = (int16_t)tuningParams->aat_b_max; }
 80109da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	7952      	ldrb	r2, [r2, #5]
 80109e2:	4293      	cmp	r3, r2
 80109e4:	dd02      	ble.n	80109ec <aatStepDacVals+0xd2>
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	795b      	ldrb	r3, [r3, #5]
 80109ea:	82bb      	strh	r3, [r7, #20]
            if ((int16_t)*b == aat_b) {return ERR_PARAM;}
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	461a      	mov	r2, r3
 80109f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d105      	bne.n	8010a06 <aatStepDacVals+0xec>
 80109fa:	2307      	movs	r3, #7
 80109fc:	e00d      	b.n	8010a1a <aatStepDacVals+0x100>
            break;
        default:
            return ERR_REQUEST;
 80109fe:	2305      	movs	r3, #5
 8010a00:	e00b      	b.n	8010a1a <aatStepDacVals+0x100>
            break;
 8010a02:	bf00      	nop
 8010a04:	e000      	b.n	8010a08 <aatStepDacVals+0xee>
            break;
 8010a06:	bf00      	nop
    }
    /* We only get here if actual values have changed. In all other cases an error is returned */
    *a = (uint8_t)aat_a; 
 8010a08:	8afb      	ldrh	r3, [r7, #22]
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)aat_b;
 8010a10:	8abb      	ldrh	r3, [r7, #20]
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8010a18:	2300      	movs	r3, #0

}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	371c      	adds	r7, #28
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <aatMeasure>:

/*******************************************************************************/
static ReturnCode aatMeasure(uint8_t serCap, uint8_t parCap, uint8_t *amplitude, uint8_t *phase, uint16_t *measureCnt)
{
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b086      	sub	sp, #24
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	60ba      	str	r2, [r7, #8]
 8010a2e:	607b      	str	r3, [r7, #4]
 8010a30:	4603      	mov	r3, r0
 8010a32:	73fb      	strb	r3, [r7, #15]
 8010a34:	460b      	mov	r3, r1
 8010a36:	73bb      	strb	r3, [r7, #14]
    ReturnCode err;

    *amplitude = 0; 
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
    *phase     = 0;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	701a      	strb	r2, [r3, #0]

    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_A, serCap);
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
 8010a46:	4619      	mov	r1, r3
 8010a48:	2026      	movs	r0, #38	; 0x26
 8010a4a:	f000 f97f 	bl	8010d4c <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_B, parCap);
 8010a4e:	7bbb      	ldrb	r3, [r7, #14]
 8010a50:	4619      	mov	r1, r3
 8010a52:	2027      	movs	r0, #39	; 0x27
 8010a54:	f000 f97a 	bl	8010d4c <st25r3916WriteRegister>

    /* Wait till caps have settled.. */
    platformDelay( ST25R3916_AAT_CAP_DELAY_MAX );
 8010a58:	200a      	movs	r0, #10
 8010a5a:	f7f4 fd7f 	bl	800555c <HAL_Delay>
    
    /* Get amplitude and phase .. */
    err = rfalChipMeasureAmplitude(amplitude);
 8010a5e:	68b8      	ldr	r0, [r7, #8]
 8010a60:	f7ff f9ed 	bl	800fe3e <rfalChipMeasureAmplitude>
 8010a64:	4603      	mov	r3, r0
 8010a66:	82fb      	strh	r3, [r7, #22]
    if (ERR_NONE == err)
 8010a68:	8afb      	ldrh	r3, [r7, #22]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d104      	bne.n	8010a78 <aatMeasure+0x52>
    {
        err = rfalChipMeasurePhase(phase);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff fa38 	bl	800fee4 <rfalChipMeasurePhase>
 8010a74:	4603      	mov	r3, r0
 8010a76:	82fb      	strh	r3, [r7, #22]
    }
      
    if( measureCnt != NULL )
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d005      	beq.n	8010a8a <aatMeasure+0x64>
    {
        (*measureCnt)++;
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	3301      	adds	r3, #1
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	801a      	strh	r2, [r3, #0]
    }
    return err;
 8010a8a:	8afb      	ldrh	r3, [r7, #22]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <__NVIC_EnableIRQ>:
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	db0b      	blt.n	8010abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	f003 021f 	and.w	r2, r3, #31
 8010aac:	4907      	ldr	r1, [pc, #28]	; (8010acc <__NVIC_EnableIRQ+0x38>)
 8010aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ab2:	095b      	lsrs	r3, r3, #5
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8010aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010abe:	bf00      	nop
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	e000e100 	.word	0xe000e100

08010ad0 <__NVIC_DisableIRQ>:
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	db10      	blt.n	8010b04 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
 8010ae4:	f003 021f 	and.w	r2, r3, #31
 8010ae8:	4909      	ldr	r1, [pc, #36]	; (8010b10 <__NVIC_DisableIRQ+0x40>)
 8010aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010aee:	095b      	lsrs	r3, r3, #5
 8010af0:	2001      	movs	r0, #1
 8010af2:	fa00 f202 	lsl.w	r2, r0, r2
 8010af6:	3320      	adds	r3, #32
 8010af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010b00:	f3bf 8f6f 	isb	sy
}
 8010b04:	bf00      	nop
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	e000e100 	.word	0xe000e100

08010b14 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 8010b18:	4b0b      	ldr	r3, [pc, #44]	; (8010b48 <st25r3916comStart+0x34>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	4b09      	ldr	r3, [pc, #36]	; (8010b48 <st25r3916comStart+0x34>)
 8010b22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	200a      	movs	r0, #10
 8010b2a:	f7ff ffd1 	bl	8010ad0 <__NVIC_DisableIRQ>
 8010b2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010b32:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 8010b36:	2110      	movs	r1, #16
 8010b38:	4804      	ldr	r0, [pc, #16]	; (8010b4c <st25r3916comStart+0x38>)
 8010b3a:	f7f3 fd71 	bl	8004620 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 8010b3e:	4b04      	ldr	r3, [pc, #16]	; (8010b50 <st25r3916comStart+0x3c>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 8010b44:	bf00      	nop
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	20000f85 	.word	0x20000f85
 8010b4c:	40020000 	.word	0x40020000
 8010b50:	20000bee 	.word	0x20000bee

08010b54 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 8010b58:	2110      	movs	r1, #16
 8010b5a:	4809      	ldr	r0, [pc, #36]	; (8010b80 <st25r3916comStop+0x2c>)
 8010b5c:	f7f3 fd70 	bl	8004640 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 8010b60:	4b08      	ldr	r3, [pc, #32]	; (8010b84 <st25r3916comStop+0x30>)
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	3b01      	subs	r3, #1
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <st25r3916comStop+0x30>)
 8010b6a:	701a      	strb	r2, [r3, #0]
 8010b6c:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <st25r3916comStop+0x30>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d102      	bne.n	8010b7a <st25r3916comStop+0x26>
 8010b74:	200a      	movs	r0, #10
 8010b76:	f7ff ff8d 	bl	8010a94 <__NVIC_EnableIRQ>
}
 8010b7a:	bf00      	nop
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	40020000 	.word	0x40020000
 8010b84:	20000f85 	.word	0x20000f85

08010b88 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	4608      	mov	r0, r1
 8010b92:	4611      	mov	r1, r2
 8010b94:	461a      	mov	r2, r3
 8010b96:	4603      	mov	r3, r0
 8010b98:	807b      	strh	r3, [r7, #2]
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	707b      	strb	r3, [r7, #1]
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 8010ba2:	887b      	ldrh	r3, [r7, #2]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d02e      	beq.n	8010c06 <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 8010ba8:	4b19      	ldr	r3, [pc, #100]	; (8010c10 <st25r3916comTx+0x88>)
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	461a      	mov	r2, r3
 8010bae:	4b19      	ldr	r3, [pc, #100]	; (8010c14 <st25r3916comTx+0x8c>)
 8010bb0:	18d0      	adds	r0, r2, r3
 8010bb2:	4b17      	ldr	r3, [pc, #92]	; (8010c10 <st25r3916comTx+0x88>)
 8010bb4:	881b      	ldrh	r3, [r3, #0]
 8010bb6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010bba:	3301      	adds	r3, #1
 8010bbc:	887a      	ldrh	r2, [r7, #2]
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	bf28      	it	cs
 8010bc2:	4613      	movcs	r3, r2
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	f006 fb69 	bl	801729e <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 8010bcc:	4b10      	ldr	r3, [pc, #64]	; (8010c10 <st25r3916comTx+0x88>)
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	887a      	ldrh	r2, [r7, #2]
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	bf28      	it	cs
 8010bdc:	4613      	movcs	r3, r2
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	4b0b      	ldr	r3, [pc, #44]	; (8010c10 <st25r3916comTx+0x88>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	4413      	add	r3, r2
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <st25r3916comTx+0x88>)
 8010bea:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 8010bec:	787b      	ldrb	r3, [r7, #1]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d009      	beq.n	8010c06 <st25r3916comTx+0x7e>
 8010bf2:	783b      	ldrb	r3, [r7, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d006      	beq.n	8010c06 <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 8010bf8:	4b05      	ldr	r3, [pc, #20]	; (8010c10 <st25r3916comTx+0x88>)
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	2100      	movs	r1, #0
 8010c00:	4804      	ldr	r0, [pc, #16]	; (8010c14 <st25r3916comTx+0x8c>)
 8010c02:	f7f3 fd2d 	bl	8004660 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 8010c06:	bf00      	nop
 8010c08:	3708      	adds	r7, #8
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	20000bee 	.word	0x20000bee
 8010c14:	200009ec 	.word	0x200009ec

08010c18 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 8010c24:	887b      	ldrh	r3, [r7, #2]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d034      	beq.n	8010c94 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 8010c2a:	4b1c      	ldr	r3, [pc, #112]	; (8010c9c <st25r3916comRx+0x84>)
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4b1b      	ldr	r3, [pc, #108]	; (8010ca0 <st25r3916comRx+0x88>)
 8010c32:	18d0      	adds	r0, r2, r3
 8010c34:	4b19      	ldr	r3, [pc, #100]	; (8010c9c <st25r3916comRx+0x84>)
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	887a      	ldrh	r2, [r7, #2]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	bf28      	it	cs
 8010c44:	4613      	movcs	r3, r2
 8010c46:	461a      	mov	r2, r3
 8010c48:	2100      	movs	r1, #0
 8010c4a:	f006 fb33 	bl	80172b4 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 8010c4e:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <st25r3916comRx+0x84>)
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	461a      	mov	r2, r3
 8010c54:	887b      	ldrh	r3, [r7, #2]
 8010c56:	4413      	add	r3, r2
 8010c58:	461a      	mov	r2, r3
 8010c5a:	f240 2301 	movw	r3, #513	; 0x201
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	bf28      	it	cs
 8010c62:	4613      	movcs	r3, r2
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	461a      	mov	r2, r3
 8010c68:	490d      	ldr	r1, [pc, #52]	; (8010ca0 <st25r3916comRx+0x88>)
 8010c6a:	480d      	ldr	r0, [pc, #52]	; (8010ca0 <st25r3916comRx+0x88>)
 8010c6c:	f7f3 fcf8 	bl	8004660 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 8010c70:	4b0a      	ldr	r3, [pc, #40]	; (8010c9c <st25r3916comRx+0x84>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	461a      	mov	r2, r3
 8010c76:	4b0a      	ldr	r3, [pc, #40]	; (8010ca0 <st25r3916comRx+0x88>)
 8010c78:	18d1      	adds	r1, r2, r3
 8010c7a:	4b08      	ldr	r3, [pc, #32]	; (8010c9c <st25r3916comRx+0x84>)
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010c82:	3301      	adds	r3, #1
 8010c84:	887a      	ldrh	r2, [r7, #2]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	bf28      	it	cs
 8010c8a:	4613      	movcs	r3, r2
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f006 fb05 	bl	801729e <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	20000bee 	.word	0x20000bee
 8010ca0:	200009ec 	.word	0x200009ec

08010ca4 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	71fb      	strb	r3, [r7, #7]
 8010cae:	460b      	mov	r3, r1
 8010cb0:	71bb      	strb	r3, [r7, #6]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
 8010cb8:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 8010cba:	797b      	ldrb	r3, [r7, #5]
 8010cbc:	79ba      	ldrb	r2, [r7, #6]
 8010cbe:	f107 000f 	add.w	r0, r7, #15
 8010cc2:	2101      	movs	r1, #1
 8010cc4:	f7ff ff60 	bl	8010b88 <st25r3916comTx>
}
 8010cc8:	bf00      	nop
 8010cca:	3710      	adds	r7, #16
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	6039      	str	r1, [r7, #0]
 8010cda:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 8010cdc:	79fb      	ldrb	r3, [r7, #7]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	6839      	ldr	r1, [r7, #0]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 f805 	bl	8010cf2 <st25r3916ReadMultipleRegisters>
 8010ce8:	4603      	mov	r3, r0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	6039      	str	r1, [r7, #0]
 8010cfc:	71fb      	strb	r3, [r7, #7]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8010d02:	79bb      	ldrb	r3, [r7, #6]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d01c      	beq.n	8010d42 <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 8010d08:	f7ff ff04 	bl	8010b14 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010d0c:	79fb      	ldrb	r3, [r7, #7]
 8010d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d004      	beq.n	8010d20 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 8010d16:	2200      	movs	r2, #0
 8010d18:	2100      	movs	r1, #0
 8010d1a:	20fb      	movs	r0, #251	; 0xfb
 8010d1c:	f7ff ffc2 	bl	8010ca4 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 8010d20:	79fb      	ldrb	r3, [r7, #7]
 8010d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2200      	movs	r2, #0
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7ff ffb9 	bl	8010ca4 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 8010d32:	79bb      	ldrb	r3, [r7, #6]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	4619      	mov	r1, r3
 8010d38:	6838      	ldr	r0, [r7, #0]
 8010d3a:	f7ff ff6d 	bl	8010c18 <st25r3916comRx>
        st25r3916comStop();
 8010d3e:	f7ff ff09 	bl	8010b54 <st25r3916comStop>
    }
    
    return ERR_NONE;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	4603      	mov	r3, r0
 8010d54:	460a      	mov	r2, r1
 8010d56:	71fb      	strb	r3, [r7, #7]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8010d5c:	79bb      	ldrb	r3, [r7, #6]
 8010d5e:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 8010d60:	f107 010f 	add.w	r1, r7, #15
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	2201      	movs	r2, #1
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 f805 	bl	8010d78 <st25r3916WriteMultipleRegisters>
 8010d6e:	4603      	mov	r3, r0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	4603      	mov	r3, r0
 8010d80:	6039      	str	r1, [r7, #0]
 8010d82:	71fb      	strb	r3, [r7, #7]
 8010d84:	4613      	mov	r3, r2
 8010d86:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8010d88:	79bb      	ldrb	r3, [r7, #6]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d023      	beq.n	8010dd6 <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 8010d8e:	f7ff fec1 	bl	8010b14 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010d92:	79fb      	ldrb	r3, [r7, #7]
 8010d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d004      	beq.n	8010da6 <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	2100      	movs	r1, #0
 8010da0:	20fb      	movs	r0, #251	; 0xfb
 8010da2:	f7ff ff7f 	bl	8010ca4 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	2201      	movs	r2, #1
 8010db0:	2100      	movs	r1, #0
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7ff ff76 	bl	8010ca4 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8010db8:	79bb      	ldrb	r3, [r7, #6]
 8010dba:	b299      	uxth	r1, r3
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	6838      	ldr	r0, [r7, #0]
 8010dc2:	f7ff fee1 	bl	8010b88 <st25r3916comTx>
        st25r3916comStop();
 8010dc6:	f7ff fec5 	bl	8010b54 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8010dca:	79ba      	ldrb	r2, [r7, #6]
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f000 fbba 	bl	801154a <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 8010dec:	887b      	ldrh	r3, [r7, #2]
 8010dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010df2:	d901      	bls.n	8010df8 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 8010df4:	2307      	movs	r3, #7
 8010df6:	e012      	b.n	8010e1e <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 8010df8:	887b      	ldrh	r3, [r7, #2]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00e      	beq.n	8010e1c <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 8010dfe:	f7ff fe89 	bl	8010b14 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 8010e02:	2201      	movs	r2, #1
 8010e04:	2100      	movs	r1, #0
 8010e06:	2080      	movs	r0, #128	; 0x80
 8010e08:	f7ff ff4c 	bl	8010ca4 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8010e0c:	8879      	ldrh	r1, [r7, #2]
 8010e0e:	2301      	movs	r3, #1
 8010e10:	2201      	movs	r2, #1
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff feb8 	bl	8010b88 <st25r3916comTx>
        st25r3916comStop();
 8010e18:	f7ff fe9c 	bl	8010b54 <st25r3916comStop>
    }

    return ERR_NONE;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b082      	sub	sp, #8
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 8010e32:	887b      	ldrh	r3, [r7, #2]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00d      	beq.n	8010e54 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 8010e38:	f7ff fe6c 	bl	8010b14 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2101      	movs	r1, #1
 8010e40:	209f      	movs	r0, #159	; 0x9f
 8010e42:	f7ff ff2f 	bl	8010ca4 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 8010e46:	887b      	ldrh	r3, [r7, #2]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7ff fee4 	bl	8010c18 <st25r3916comRx>
        st25r3916comStop();
 8010e50:	f7ff fe80 	bl	8010b54 <st25r3916comStop>
    }

    return ERR_NONE;
 8010e54:	2300      	movs	r3, #0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	4603      	mov	r3, r0
 8010e66:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010e68:	f7ff fe54 	bl	8010b14 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8010e6c:	79fb      	ldrb	r3, [r7, #7]
 8010e6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	2201      	movs	r2, #1
 8010e76:	2101      	movs	r1, #1
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff ff13 	bl	8010ca4 <st25r3916comTxByte>
    st25r3916comStop();
 8010e7e:	f7ff fe69 	bl	8010b54 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 fb81 	bl	801158c <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	6039      	str	r1, [r7, #0]
 8010e9e:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010ea0:	f7ff fe38 	bl	8010b14 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	20fc      	movs	r0, #252	; 0xfc
 8010eaa:	f7ff fefb 	bl	8010ca4 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	2101      	movs	r1, #1
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fef2 	bl	8010ca4 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	6838      	ldr	r0, [r7, #0]
 8010ec4:	f7ff fea8 	bl	8010c18 <st25r3916comRx>
    st25r3916comStop();
 8010ec8:	f7ff fe44 	bl	8010b54 <st25r3916comStop>
    
    return ERR_NONE;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	4603      	mov	r3, r0
 8010ede:	460a      	mov	r2, r1
 8010ee0:	71fb      	strb	r3, [r7, #7]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8010ee6:	79bb      	ldrb	r3, [r7, #6]
 8010ee8:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 8010eea:	f7ff fe13 	bl	8010b14 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 8010eee:	2201      	movs	r2, #1
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	20fc      	movs	r0, #252	; 0xfc
 8010ef4:	f7ff fed6 	bl	8010ca4 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 8010ef8:	79fb      	ldrb	r3, [r7, #7]
 8010efa:	2201      	movs	r2, #1
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff fed0 	bl	8010ca4 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 8010f04:	f107 000f 	add.w	r0, r7, #15
 8010f08:	2301      	movs	r3, #1
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	f7ff fe3b 	bl	8010b88 <st25r3916comTx>
    st25r3916comStop();
 8010f12:	f7ff fe1f 	bl	8010b54 <st25r3916comStop>
    
    return ERR_NONE;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	4603      	mov	r3, r0
 8010f28:	460a      	mov	r2, r1
 8010f2a:	71fb      	strb	r3, [r7, #7]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010f30:	f107 020d 	add.w	r2, r7, #13
 8010f34:	79fb      	ldrb	r3, [r7, #7]
 8010f36:	4611      	mov	r1, r2
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff fec9 	bl	8010cd0 <st25r3916ReadRegister>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	81fb      	strh	r3, [r7, #14]
 8010f42:	89fb      	ldrh	r3, [r7, #14]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <st25r3916ClrRegisterBits+0x2c>
 8010f48:	89fb      	ldrh	r3, [r7, #14]
 8010f4a:	e01c      	b.n	8010f86 <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8010f4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010f50:	43db      	mvns	r3, r3
 8010f52:	b25a      	sxtb	r2, r3
 8010f54:	7b7b      	ldrb	r3, [r7, #13]
 8010f56:	b25b      	sxtb	r3, r3
 8010f58:	4013      	ands	r3, r2
 8010f5a:	b25b      	sxtb	r3, r3
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	7b7b      	ldrb	r3, [r7, #13]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d101      	bne.n	8010f68 <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 8010f64:	2300      	movs	r3, #0
 8010f66:	e00e      	b.n	8010f86 <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8010f68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010f6c:	43db      	mvns	r3, r3
 8010f6e:	b25a      	sxtb	r2, r3
 8010f70:	7b7b      	ldrb	r3, [r7, #13]
 8010f72:	b25b      	sxtb	r3, r3
 8010f74:	4013      	ands	r3, r2
 8010f76:	b25b      	sxtb	r3, r3
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7ff fee4 	bl	8010d4c <st25r3916WriteRegister>
 8010f84:	4603      	mov	r3, r0
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b084      	sub	sp, #16
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	4603      	mov	r3, r0
 8010f96:	460a      	mov	r2, r1
 8010f98:	71fb      	strb	r3, [r7, #7]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010f9e:	f107 020d 	add.w	r2, r7, #13
 8010fa2:	79fb      	ldrb	r3, [r7, #7]
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff fe92 	bl	8010cd0 <st25r3916ReadRegister>
 8010fac:	4603      	mov	r3, r0
 8010fae:	81fb      	strh	r3, [r7, #14]
 8010fb0:	89fb      	ldrh	r3, [r7, #14]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <st25r3916SetRegisterBits+0x2c>
 8010fb6:	89fb      	ldrh	r3, [r7, #14]
 8010fb8:	e012      	b.n	8010fe0 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8010fba:	7b7a      	ldrb	r2, [r7, #13]
 8010fbc:	79bb      	ldrb	r3, [r7, #6]
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	7b7b      	ldrb	r3, [r7, #13]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d101      	bne.n	8010fcc <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e009      	b.n	8010fe0 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8010fcc:	7b7a      	ldrb	r2, [r7, #13]
 8010fce:	79bb      	ldrb	r3, [r7, #6]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	79fb      	ldrb	r3, [r7, #7]
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff feb7 	bl	8010d4c <st25r3916WriteRegister>
 8010fde:	4603      	mov	r3, r0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	4603      	mov	r3, r0
 8010ff0:	71fb      	strb	r3, [r7, #7]
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	71bb      	strb	r3, [r7, #6]
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8010ffa:	79ba      	ldrb	r2, [r7, #6]
 8010ffc:	797b      	ldrb	r3, [r7, #5]
 8010ffe:	4013      	ands	r3, r2
 8011000:	b2da      	uxtb	r2, r3
 8011002:	79b9      	ldrb	r1, [r7, #6]
 8011004:	79fb      	ldrb	r3, [r7, #7]
 8011006:	4618      	mov	r0, r3
 8011008:	f000 f805 	bl	8011016 <st25r3916ModifyRegister>
 801100c:	4603      	mov	r3, r0
}
 801100e:	4618      	mov	r0, r3
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8011016:	b580      	push	{r7, lr}
 8011018:	b084      	sub	sp, #16
 801101a:	af00      	add	r7, sp, #0
 801101c:	4603      	mov	r3, r0
 801101e:	71fb      	strb	r3, [r7, #7]
 8011020:	460b      	mov	r3, r1
 8011022:	71bb      	strb	r3, [r7, #6]
 8011024:	4613      	mov	r3, r2
 8011026:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8011028:	f107 020c 	add.w	r2, r7, #12
 801102c:	79fb      	ldrb	r3, [r7, #7]
 801102e:	4611      	mov	r1, r2
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff fe4d 	bl	8010cd0 <st25r3916ReadRegister>
 8011036:	4603      	mov	r3, r0
 8011038:	81fb      	strh	r3, [r7, #14]
 801103a:	89fb      	ldrh	r3, [r7, #14]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d001      	beq.n	8011044 <st25r3916ModifyRegister+0x2e>
 8011040:	89fb      	ldrh	r3, [r7, #14]
 8011042:	e019      	b.n	8011078 <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8011044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011048:	43db      	mvns	r3, r3
 801104a:	b25a      	sxtb	r2, r3
 801104c:	7b3b      	ldrb	r3, [r7, #12]
 801104e:	b25b      	sxtb	r3, r3
 8011050:	4013      	ands	r3, r2
 8011052:	b25b      	sxtb	r3, r3
 8011054:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 8011056:	7b7a      	ldrb	r2, [r7, #13]
 8011058:	797b      	ldrb	r3, [r7, #5]
 801105a:	4313      	orrs	r3, r2
 801105c:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 801105e:	7b3b      	ldrb	r3, [r7, #12]
 8011060:	7b7a      	ldrb	r2, [r7, #13]
 8011062:	429a      	cmp	r2, r3
 8011064:	d101      	bne.n	801106a <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 8011066:	2300      	movs	r3, #0
 8011068:	e006      	b.n	8011078 <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 801106a:	7b7a      	ldrb	r2, [r7, #13]
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	4611      	mov	r1, r2
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fe6b 	bl	8010d4c <st25r3916WriteRegister>
 8011076:	4603      	mov	r3, r0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	4603      	mov	r3, r0
 8011088:	71fb      	strb	r3, [r7, #7]
 801108a:	460b      	mov	r3, r1
 801108c:	71bb      	strb	r3, [r7, #6]
 801108e:	4613      	mov	r3, r2
 8011090:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8011092:	f107 020c 	add.w	r2, r7, #12
 8011096:	79fb      	ldrb	r3, [r7, #7]
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff fefa 	bl	8010e94 <st25r3916ReadTestRegister>
 80110a0:	4603      	mov	r3, r0
 80110a2:	81fb      	strh	r3, [r7, #14]
 80110a4:	89fb      	ldrh	r3, [r7, #14]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <st25r3916ChangeTestRegisterBits+0x2e>
 80110aa:	89fb      	ldrh	r3, [r7, #14]
 80110ac:	e01c      	b.n	80110e8 <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 80110ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80110b2:	43db      	mvns	r3, r3
 80110b4:	b25a      	sxtb	r2, r3
 80110b6:	7b3b      	ldrb	r3, [r7, #12]
 80110b8:	b25b      	sxtb	r3, r3
 80110ba:	4013      	ands	r3, r2
 80110bc:	b25b      	sxtb	r3, r3
 80110be:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 80110c0:	797a      	ldrb	r2, [r7, #5]
 80110c2:	79bb      	ldrb	r3, [r7, #6]
 80110c4:	4013      	ands	r3, r2
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	7b7b      	ldrb	r3, [r7, #13]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 80110ce:	7b3b      	ldrb	r3, [r7, #12]
 80110d0:	7b7a      	ldrb	r2, [r7, #13]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d101      	bne.n	80110da <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e006      	b.n	80110e8 <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 80110da:	7b7a      	ldrb	r2, [r7, #13]
 80110dc:	79fb      	ldrb	r3, [r7, #7]
 80110de:	4611      	mov	r1, r2
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff fef8 	bl	8010ed6 <st25r3916WriteTestRegister>
 80110e6:	4603      	mov	r3, r0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3710      	adds	r7, #16
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	71fb      	strb	r3, [r7, #7]
 80110fa:	460b      	mov	r3, r1
 80110fc:	71bb      	strb	r3, [r7, #6]
 80110fe:	4613      	mov	r3, r2
 8011100:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 8011106:	f107 020f 	add.w	r2, r7, #15
 801110a:	79fb      	ldrb	r3, [r7, #7]
 801110c:	4611      	mov	r1, r2
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff fdde 	bl	8010cd0 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 8011114:	7bfa      	ldrb	r2, [r7, #15]
 8011116:	79bb      	ldrb	r3, [r7, #6]
 8011118:	4013      	ands	r3, r2
 801111a:	b2db      	uxtb	r3, r3
 801111c:	797a      	ldrb	r2, [r7, #5]
 801111e:	429a      	cmp	r2, r3
 8011120:	bf0c      	ite	eq
 8011122:	2301      	moveq	r3, #1
 8011124:	2300      	movne	r3, #0
 8011126:	b2db      	uxtb	r3, r3
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	4603      	mov	r3, r0
 8011138:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 801113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801113e:	2b00      	cmp	r3, #0
 8011140:	da01      	bge.n	8011146 <st25r3916IsRegValid+0x16>
    {
        return false;
 8011142:	2300      	movs	r3, #0
 8011144:	e000      	b.n	8011148 <st25r3916IsRegValid+0x18>
    }    
    return true;
 8011146:	2301      	movs	r3, #1
}
 8011148:	4618      	mov	r0, r3
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <__NVIC_EnableIRQ>:
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011162:	2b00      	cmp	r3, #0
 8011164:	db0b      	blt.n	801117e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	f003 021f 	and.w	r2, r3, #31
 801116c:	4907      	ldr	r1, [pc, #28]	; (801118c <__NVIC_EnableIRQ+0x38>)
 801116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011172:	095b      	lsrs	r3, r3, #5
 8011174:	2001      	movs	r0, #1
 8011176:	fa00 f202 	lsl.w	r2, r0, r2
 801117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801117e:	bf00      	nop
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop
 801118c:	e000e100 	.word	0xe000e100

08011190 <__NVIC_DisableIRQ>:
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	4603      	mov	r3, r0
 8011198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	db10      	blt.n	80111c4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80111a2:	79fb      	ldrb	r3, [r7, #7]
 80111a4:	f003 021f 	and.w	r2, r3, #31
 80111a8:	4909      	ldr	r1, [pc, #36]	; (80111d0 <__NVIC_DisableIRQ+0x40>)
 80111aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80111ae:	095b      	lsrs	r3, r3, #5
 80111b0:	2001      	movs	r0, #1
 80111b2:	fa00 f202 	lsl.w	r2, r0, r2
 80111b6:	3320      	adds	r3, #32
 80111b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80111bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80111c0:	f3bf 8f6f 	isb	sy
}
 80111c4:	bf00      	nop
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr
 80111d0:	e000e100 	.word	0xe000e100

080111d4 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 80111d4:	b480      	push	{r7}
 80111d6:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 80111d8:	4b08      	ldr	r3, [pc, #32]	; (80111fc <st25r3916InitInterrupts+0x28>)
 80111da:	2200      	movs	r2, #0
 80111dc:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 80111de:	4b07      	ldr	r3, [pc, #28]	; (80111fc <st25r3916InitInterrupts+0x28>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 80111e4:	4b05      	ldr	r3, [pc, #20]	; (80111fc <st25r3916InitInterrupts+0x28>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 80111ea:	4b04      	ldr	r3, [pc, #16]	; (80111fc <st25r3916InitInterrupts+0x28>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	60da      	str	r2, [r3, #12]
}
 80111f0:	bf00      	nop
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	20000bf0 	.word	0x20000bf0

08011200 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8011200:	b580      	push	{r7, lr}
 8011202:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8011204:	f000 f80c 	bl	8011220 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 8011208:	4b04      	ldr	r3, [pc, #16]	; (801121c <st25r3916Isr+0x1c>)
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8011210:	4b02      	ldr	r3, [pc, #8]	; (801121c <st25r3916Isr+0x1c>)
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	4798      	blx	r3
    }
}
 8011216:	bf00      	nop
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	20000bf0 	.word	0x20000bf0

08011220 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8011226:	2300      	movs	r3, #0
 8011228:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 801122a:	463b      	mov	r3, r7
 801122c:	2204      	movs	r2, #4
 801122e:	21ff      	movs	r1, #255	; 0xff
 8011230:	4618      	mov	r0, r3
 8011232:	f006 f83f 	bl	80172b4 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8011236:	e019      	b.n	801126c <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8011238:	463b      	mov	r3, r7
 801123a:	2204      	movs	r2, #4
 801123c:	4619      	mov	r1, r3
 801123e:	201a      	movs	r0, #26
 8011240:	f7ff fd57 	bl	8010cf2 <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 8011244:	783b      	ldrb	r3, [r7, #0]
 8011246:	461a      	mov	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	4313      	orrs	r3, r2
 801124c:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 801124e:	787b      	ldrb	r3, [r7, #1]
 8011250:	021b      	lsls	r3, r3, #8
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	4313      	orrs	r3, r2
 8011256:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 8011258:	78bb      	ldrb	r3, [r7, #2]
 801125a:	041b      	lsls	r3, r3, #16
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	4313      	orrs	r3, r2
 8011260:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 8011262:	78fb      	ldrb	r3, [r7, #3]
 8011264:	061b      	lsls	r3, r3, #24
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	4313      	orrs	r3, r2
 801126a:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 801126c:	2110      	movs	r1, #16
 801126e:	4818      	ldr	r0, [pc, #96]	; (80112d0 <st25r3916CheckForReceivedInterrupts+0xb0>)
 8011270:	f7f4 fc4c 	bl	8005b0c <HAL_GPIO_ReadPin>
 8011274:	4603      	mov	r3, r0
 8011276:	2b01      	cmp	r3, #1
 8011278:	d0de      	beq.n	8011238 <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 801127a:	4b16      	ldr	r3, [pc, #88]	; (80112d4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	3301      	adds	r3, #1
 8011280:	b2da      	uxtb	r2, r3
 8011282:	4b14      	ldr	r3, [pc, #80]	; (80112d4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8011284:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	200a      	movs	r0, #10
 801128c:	f7ff ff80 	bl	8011190 <__NVIC_DisableIRQ>
 8011290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011294:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 8011298:	4b0f      	ldr	r3, [pc, #60]	; (80112d8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 801129a:	689a      	ldr	r2, [r3, #8]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4313      	orrs	r3, r2
 80112a0:	4a0d      	ldr	r2, [pc, #52]	; (80112d8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 80112a2:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 80112a4:	4b0b      	ldr	r3, [pc, #44]	; (80112d4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	3b01      	subs	r3, #1
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	4b09      	ldr	r3, [pc, #36]	; (80112d4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 80112ae:	701a      	strb	r2, [r3, #0]
 80112b0:	4b08      	ldr	r3, [pc, #32]	; (80112d4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <st25r3916CheckForReceivedInterrupts+0x9e>
 80112b8:	200a      	movs	r0, #10
 80112ba:	f7ff ff4b 	bl	8011154 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 80112be:	4b06      	ldr	r3, [pc, #24]	; (80112d8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f000 f927 	bl	8011516 <st25r3916ledEvtIrq>
}
 80112c8:	bf00      	nop
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	40020800 	.word	0x40020800
 80112d4:	20000f85 	.word	0x20000f85
 80112d8:	20000bf0 	.word	0x20000bf0

080112dc <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b086      	sub	sp, #24
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 80112e6:	4b1e      	ldr	r3, [pc, #120]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	43da      	mvns	r2, r3
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	401a      	ands	r2, r3
 80112f4:	6939      	ldr	r1, [r7, #16]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	400b      	ands	r3, r1
 80112fa:	4313      	orrs	r3, r2
 80112fc:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 80112fe:	4b18      	ldr	r3, [pc, #96]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 8011300:	68da      	ldr	r2, [r3, #12]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	43db      	mvns	r3, r3
 8011306:	4013      	ands	r3, r2
 8011308:	4a15      	ldr	r2, [pc, #84]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 801130a:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 801130c:	4b14      	ldr	r3, [pc, #80]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 801130e:	68da      	ldr	r2, [r3, #12]
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	4313      	orrs	r3, r2
 8011314:	4a12      	ldr	r2, [pc, #72]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 8011316:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8011318:	2300      	movs	r3, #0
 801131a:	75fb      	strb	r3, [r7, #23]
 801131c:	e019      	b.n	8011352 <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	00db      	lsls	r3, r3, #3
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	fa22 f303 	lsr.w	r3, r2, r3
 8011328:	b2db      	uxtb	r3, r3
 801132a:	2b00      	cmp	r3, #0
 801132c:	d00d      	beq.n	801134a <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 801132e:	7dfb      	ldrb	r3, [r7, #23]
 8011330:	3316      	adds	r3, #22
 8011332:	b2d8      	uxtb	r0, r3
 8011334:	4b0a      	ldr	r3, [pc, #40]	; (8011360 <st25r3916ModifyInterrupts+0x84>)
 8011336:	68da      	ldr	r2, [r3, #12]
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	00db      	lsls	r3, r3, #3
 801133c:	fa22 f303 	lsr.w	r3, r2, r3
 8011340:	b2db      	uxtb	r3, r3
 8011342:	4619      	mov	r1, r3
 8011344:	f7ff fd02 	bl	8010d4c <st25r3916WriteRegister>
 8011348:	e000      	b.n	801134c <st25r3916ModifyInterrupts+0x70>
            continue;
 801134a:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 801134c:	7dfb      	ldrb	r3, [r7, #23]
 801134e:	3301      	adds	r3, #1
 8011350:	75fb      	strb	r3, [r7, #23]
 8011352:	7dfb      	ldrb	r3, [r7, #23]
 8011354:	2b03      	cmp	r3, #3
 8011356:	d9e2      	bls.n	801131e <st25r3916ModifyInterrupts+0x42>
    }
    return;
 8011358:	bf00      	nop
}
 801135a:	3718      	adds	r7, #24
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	20000bf0 	.word	0x20000bf0

08011364 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	460b      	mov	r3, r1
 801136e:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 8011370:	887b      	ldrh	r3, [r7, #2]
 8011372:	4618      	mov	r0, r3
 8011374:	f7f3 f9b2 	bl	80046dc <timerCalculateTimer>
 8011378:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 801137a:	4b20      	ldr	r3, [pc, #128]	; (80113fc <st25r3916WaitForInterruptsTimed+0x98>)
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	4013      	ands	r3, r2
 8011382:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f7f3 f9b7 	bl	80046f8 <timerIsExpired>
 801138a:	4603      	mov	r3, r0
 801138c:	f083 0301 	eor.w	r3, r3, #1
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	d102      	bne.n	801139c <st25r3916WaitForInterruptsTimed+0x38>
 8011396:	887b      	ldrh	r3, [r7, #2]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <st25r3916WaitForInterruptsTimed+0x3e>
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0eb      	beq.n	801137a <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 80113a2:	4b16      	ldr	r3, [pc, #88]	; (80113fc <st25r3916WaitForInterruptsTimed+0x98>)
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	4013      	ands	r3, r2
 80113aa:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 80113ac:	4b14      	ldr	r3, [pc, #80]	; (8011400 <st25r3916WaitForInterruptsTimed+0x9c>)
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	3301      	adds	r3, #1
 80113b2:	b2da      	uxtb	r2, r3
 80113b4:	4b12      	ldr	r3, [pc, #72]	; (8011400 <st25r3916WaitForInterruptsTimed+0x9c>)
 80113b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	200a      	movs	r0, #10
 80113be:	f7ff fee7 	bl	8011190 <__NVIC_DisableIRQ>
 80113c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80113c6:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 80113ca:	4b0c      	ldr	r3, [pc, #48]	; (80113fc <st25r3916WaitForInterruptsTimed+0x98>)
 80113cc:	689a      	ldr	r2, [r3, #8]
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	43db      	mvns	r3, r3
 80113d2:	4013      	ands	r3, r2
 80113d4:	4a09      	ldr	r2, [pc, #36]	; (80113fc <st25r3916WaitForInterruptsTimed+0x98>)
 80113d6:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 80113d8:	4b09      	ldr	r3, [pc, #36]	; (8011400 <st25r3916WaitForInterruptsTimed+0x9c>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	3b01      	subs	r3, #1
 80113de:	b2da      	uxtb	r2, r3
 80113e0:	4b07      	ldr	r3, [pc, #28]	; (8011400 <st25r3916WaitForInterruptsTimed+0x9c>)
 80113e2:	701a      	strb	r2, [r3, #0]
 80113e4:	4b06      	ldr	r3, [pc, #24]	; (8011400 <st25r3916WaitForInterruptsTimed+0x9c>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d102      	bne.n	80113f2 <st25r3916WaitForInterruptsTimed+0x8e>
 80113ec:	200a      	movs	r0, #10
 80113ee:	f7ff feb1 	bl	8011154 <__NVIC_EnableIRQ>
    
    return status;
 80113f2:	68bb      	ldr	r3, [r7, #8]
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	20000bf0 	.word	0x20000bf0
 8011400:	20000f85 	.word	0x20000f85

08011404 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 801140c:	4b17      	ldr	r3, [pc, #92]	; (801146c <st25r3916GetInterrupt+0x68>)
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	4013      	ands	r3, r2
 8011414:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d022      	beq.n	8011462 <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 801141c:	4b14      	ldr	r3, [pc, #80]	; (8011470 <st25r3916GetInterrupt+0x6c>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	3301      	adds	r3, #1
 8011422:	b2da      	uxtb	r2, r3
 8011424:	4b12      	ldr	r3, [pc, #72]	; (8011470 <st25r3916GetInterrupt+0x6c>)
 8011426:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011428:	f3bf 8f4f 	dsb	sy
 801142c:	200a      	movs	r0, #10
 801142e:	f7ff feaf 	bl	8011190 <__NVIC_DisableIRQ>
 8011432:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011436:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 801143a:	4b0c      	ldr	r3, [pc, #48]	; (801146c <st25r3916GetInterrupt+0x68>)
 801143c:	689a      	ldr	r2, [r3, #8]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	43db      	mvns	r3, r3
 8011442:	4013      	ands	r3, r2
 8011444:	4a09      	ldr	r2, [pc, #36]	; (801146c <st25r3916GetInterrupt+0x68>)
 8011446:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 8011448:	4b09      	ldr	r3, [pc, #36]	; (8011470 <st25r3916GetInterrupt+0x6c>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	3b01      	subs	r3, #1
 801144e:	b2da      	uxtb	r2, r3
 8011450:	4b07      	ldr	r3, [pc, #28]	; (8011470 <st25r3916GetInterrupt+0x6c>)
 8011452:	701a      	strb	r2, [r3, #0]
 8011454:	4b06      	ldr	r3, [pc, #24]	; (8011470 <st25r3916GetInterrupt+0x6c>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d102      	bne.n	8011462 <st25r3916GetInterrupt+0x5e>
 801145c:	200a      	movs	r0, #10
 801145e:	f7ff fe79 	bl	8011154 <__NVIC_EnableIRQ>
    }

    return irqs;
 8011462:	68fb      	ldr	r3, [r7, #12]
}
 8011464:	4618      	mov	r0, r3
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20000bf0 	.word	0x20000bf0
 8011470:	20000f85 	.word	0x20000f85

08011474 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 801147c:	2100      	movs	r1, #0
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff ff2c 	bl	80112dc <st25r3916ModifyInterrupts>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 8011494:	6879      	ldr	r1, [r7, #4]
 8011496:	2000      	movs	r0, #0
 8011498:	f7ff ff20 	bl	80112dc <st25r3916ModifyInterrupts>
}
 801149c:	bf00      	nop
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 80114aa:	1d3b      	adds	r3, r7, #4
 80114ac:	2204      	movs	r2, #4
 80114ae:	4619      	mov	r1, r3
 80114b0:	201a      	movs	r0, #26
 80114b2:	f7ff fc1e 	bl	8010cf2 <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 80114b6:	4b12      	ldr	r3, [pc, #72]	; (8011500 <st25r3916ClearInterrupts+0x5c>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	3301      	adds	r3, #1
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	4b10      	ldr	r3, [pc, #64]	; (8011500 <st25r3916ClearInterrupts+0x5c>)
 80114c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	200a      	movs	r0, #10
 80114c8:	f7ff fe62 	bl	8011190 <__NVIC_DisableIRQ>
 80114cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80114d0:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 80114d4:	4b0b      	ldr	r3, [pc, #44]	; (8011504 <st25r3916ClearInterrupts+0x60>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <st25r3916ClearInterrupts+0x5c>)
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	3b01      	subs	r3, #1
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	4b07      	ldr	r3, [pc, #28]	; (8011500 <st25r3916ClearInterrupts+0x5c>)
 80114e4:	701a      	strb	r2, [r3, #0]
 80114e6:	4b06      	ldr	r3, [pc, #24]	; (8011500 <st25r3916ClearInterrupts+0x5c>)
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d103      	bne.n	80114f6 <st25r3916ClearInterrupts+0x52>
 80114ee:	200a      	movs	r0, #10
 80114f0:	f7ff fe30 	bl	8011154 <__NVIC_EnableIRQ>
    return;
 80114f4:	bf00      	nop
 80114f6:	bf00      	nop
}
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	20000f85 	.word	0x20000f85
 8011504:	20000bf0 	.word	0x20000bf0

08011508 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 8011508:	b480      	push	{r7}
 801150a:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 801150c:	bf00      	nop
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr

08011516 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 8011516:	b480      	push	{r7}
 8011518:	b083      	sub	sp, #12
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 801151e:	bf00      	nop
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	4603      	mov	r3, r0
 8011532:	460a      	mov	r2, r1
 8011534:	71fb      	strb	r3, [r7, #7]
 8011536:	4613      	mov	r3, r2
 8011538:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 801153a:	79fb      	ldrb	r3, [r7, #7]
 801153c:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 801153e:	bf00      	nop
 8011540:	370c      	adds	r7, #12
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr

0801154a <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b084      	sub	sp, #16
 801154e:	af00      	add	r7, sp, #0
 8011550:	4603      	mov	r3, r0
 8011552:	6039      	str	r1, [r7, #0]
 8011554:	71fb      	strb	r3, [r7, #7]
 8011556:	4613      	mov	r3, r2
 8011558:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 801155a:	2300      	movs	r3, #0
 801155c:	73fb      	strb	r3, [r7, #15]
 801155e:	e00d      	b.n	801157c <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 8011560:	79fa      	ldrb	r2, [r7, #7]
 8011562:	7bfb      	ldrb	r3, [r7, #15]
 8011564:	4413      	add	r3, r2
 8011566:	b2d8      	uxtb	r0, r3
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	683a      	ldr	r2, [r7, #0]
 801156c:	4413      	add	r3, r2
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	4619      	mov	r1, r3
 8011572:	f7ff ffda 	bl	801152a <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 8011576:	7bfb      	ldrb	r3, [r7, #15]
 8011578:	3301      	adds	r3, #1
 801157a:	73fb      	strb	r3, [r7, #15]
 801157c:	7bfa      	ldrb	r2, [r7, #15]
 801157e:	79bb      	ldrb	r3, [r7, #6]
 8011580:	429a      	cmp	r2, r3
 8011582:	d3ed      	bcc.n	8011560 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 8011584:	bf00      	nop
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	4603      	mov	r3, r0
 8011594:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 8011596:	bf00      	nop
 8011598:	370c      	adds	r7, #12
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr

080115a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b084      	sub	sp, #16
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	460b      	mov	r3, r1
 80115ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	7c1b      	ldrb	r3, [r3, #16]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d115      	bne.n	80115e6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80115ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115be:	2202      	movs	r2, #2
 80115c0:	2181      	movs	r1, #129	; 0x81
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f005 fccf 	bl	8016f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2201      	movs	r2, #1
 80115cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80115ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115d2:	2202      	movs	r2, #2
 80115d4:	2101      	movs	r1, #1
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f005 fcc5 	bl	8016f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80115e4:	e012      	b.n	801160c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80115e6:	2340      	movs	r3, #64	; 0x40
 80115e8:	2202      	movs	r2, #2
 80115ea:	2181      	movs	r1, #129	; 0x81
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f005 fcba 	bl	8016f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2201      	movs	r2, #1
 80115f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80115f8:	2340      	movs	r3, #64	; 0x40
 80115fa:	2202      	movs	r2, #2
 80115fc:	2101      	movs	r1, #1
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f005 fcb1 	bl	8016f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801160c:	2308      	movs	r3, #8
 801160e:	2203      	movs	r2, #3
 8011610:	2182      	movs	r1, #130	; 0x82
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f005 fca7 	bl	8016f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2201      	movs	r2, #1
 801161c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 801161e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011622:	f005 fe1d 	bl	8017260 <malloc>
 8011626:	4603      	mov	r3, r0
 8011628:	461a      	mov	r2, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801163a:	2301      	movs	r3, #1
 801163c:	73fb      	strb	r3, [r7, #15]
 801163e:	e026      	b.n	801168e <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011646:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2200      	movs	r2, #0
 8011656:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2200      	movs	r2, #0
 801165e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	7c1b      	ldrb	r3, [r3, #16]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d109      	bne.n	801167e <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011674:	2101      	movs	r1, #1
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f005 fd66 	bl	8017148 <USBD_LL_PrepareReceive>
 801167c:	e007      	b.n	801168e <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011684:	2340      	movs	r3, #64	; 0x40
 8011686:	2101      	movs	r1, #1
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f005 fd5d 	bl	8017148 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80116a4:	2300      	movs	r3, #0
 80116a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80116a8:	2181      	movs	r1, #129	; 0x81
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f005 fc81 	bl	8016fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80116b6:	2101      	movs	r1, #1
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f005 fc7a 	bl	8016fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80116c6:	2182      	movs	r1, #130	; 0x82
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f005 fc72 	bl	8016fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00e      	beq.n	80116fc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80116ee:	4618      	mov	r0, r3
 80116f0:	f005 fdbe 	bl	8017270 <free>
    pdev->pClassData = NULL;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b086      	sub	sp, #24
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011716:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011718:	2300      	movs	r3, #0
 801171a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801171c:	2300      	movs	r3, #0
 801171e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801172c:	2b00      	cmp	r3, #0
 801172e:	d039      	beq.n	80117a4 <USBD_CDC_Setup+0x9e>
 8011730:	2b20      	cmp	r3, #32
 8011732:	d17c      	bne.n	801182e <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	88db      	ldrh	r3, [r3, #6]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d029      	beq.n	8011790 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	b25b      	sxtb	r3, r3
 8011742:	2b00      	cmp	r3, #0
 8011744:	da11      	bge.n	801176a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8011752:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011754:	683a      	ldr	r2, [r7, #0]
 8011756:	88d2      	ldrh	r2, [r2, #6]
 8011758:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801175a:	6939      	ldr	r1, [r7, #16]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	88db      	ldrh	r3, [r3, #6]
 8011760:	461a      	mov	r2, r3
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f001 f9ca 	bl	8012afc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8011768:	e068      	b.n	801183c <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	785a      	ldrb	r2, [r3, #1]
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	88db      	ldrh	r3, [r3, #6]
 8011778:	b2da      	uxtb	r2, r3
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011780:	6939      	ldr	r1, [r7, #16]
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	88db      	ldrh	r3, [r3, #6]
 8011786:	461a      	mov	r2, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f001 f9e5 	bl	8012b58 <USBD_CtlPrepareRx>
    break;
 801178e:	e055      	b.n	801183c <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	7850      	ldrb	r0, [r2, #1]
 801179c:	2200      	movs	r2, #0
 801179e:	6839      	ldr	r1, [r7, #0]
 80117a0:	4798      	blx	r3
    break;
 80117a2:	e04b      	b.n	801183c <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	785b      	ldrb	r3, [r3, #1]
 80117a8:	2b0a      	cmp	r3, #10
 80117aa:	d017      	beq.n	80117dc <USBD_CDC_Setup+0xd6>
 80117ac:	2b0b      	cmp	r3, #11
 80117ae:	d029      	beq.n	8011804 <USBD_CDC_Setup+0xfe>
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d133      	bne.n	801181c <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117ba:	2b03      	cmp	r3, #3
 80117bc:	d107      	bne.n	80117ce <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80117be:	f107 030c 	add.w	r3, r7, #12
 80117c2:	2202      	movs	r2, #2
 80117c4:	4619      	mov	r1, r3
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f001 f998 	bl	8012afc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80117cc:	e02e      	b.n	801182c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80117ce:	6839      	ldr	r1, [r7, #0]
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f001 f928 	bl	8012a26 <USBD_CtlError>
			  ret = USBD_FAIL;
 80117d6:	2302      	movs	r3, #2
 80117d8:	75fb      	strb	r3, [r7, #23]
      break;
 80117da:	e027      	b.n	801182c <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117e2:	2b03      	cmp	r3, #3
 80117e4:	d107      	bne.n	80117f6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80117e6:	f107 030f 	add.w	r3, r7, #15
 80117ea:	2201      	movs	r2, #1
 80117ec:	4619      	mov	r1, r3
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f001 f984 	bl	8012afc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80117f4:	e01a      	b.n	801182c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80117f6:	6839      	ldr	r1, [r7, #0]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f001 f914 	bl	8012a26 <USBD_CtlError>
			  ret = USBD_FAIL;
 80117fe:	2302      	movs	r3, #2
 8011800:	75fb      	strb	r3, [r7, #23]
      break;
 8011802:	e013      	b.n	801182c <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801180a:	2b03      	cmp	r3, #3
 801180c:	d00d      	beq.n	801182a <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 801180e:	6839      	ldr	r1, [r7, #0]
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f001 f908 	bl	8012a26 <USBD_CtlError>
			  ret = USBD_FAIL;
 8011816:	2302      	movs	r3, #2
 8011818:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801181a:	e006      	b.n	801182a <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f001 f901 	bl	8012a26 <USBD_CtlError>
      ret = USBD_FAIL;
 8011824:	2302      	movs	r3, #2
 8011826:	75fb      	strb	r3, [r7, #23]
      break;
 8011828:	e000      	b.n	801182c <USBD_CDC_Setup+0x126>
      break;
 801182a:	bf00      	nop
    }
    break;
 801182c:	e006      	b.n	801183c <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 801182e:	6839      	ldr	r1, [r7, #0]
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f001 f8f8 	bl	8012a26 <USBD_CtlError>
    ret = USBD_FAIL;
 8011836:	2302      	movs	r3, #2
 8011838:	75fb      	strb	r3, [r7, #23]
    break;
 801183a:	bf00      	nop
  }

  return ret;
 801183c:	7dfb      	ldrb	r3, [r7, #23]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3718      	adds	r7, #24
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
 801184e:	460b      	mov	r3, r1
 8011850:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011858:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011860:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011868:	2b00      	cmp	r3, #0
 801186a:	d03a      	beq.n	80118e2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801186c:	78fa      	ldrb	r2, [r7, #3]
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	4613      	mov	r3, r2
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	440b      	add	r3, r1
 801187a:	331c      	adds	r3, #28
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d029      	beq.n	80118d6 <USBD_CDC_DataIn+0x90>
 8011882:	78fa      	ldrb	r2, [r7, #3]
 8011884:	6879      	ldr	r1, [r7, #4]
 8011886:	4613      	mov	r3, r2
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	4413      	add	r3, r2
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	440b      	add	r3, r1
 8011890:	331c      	adds	r3, #28
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	78f9      	ldrb	r1, [r7, #3]
 8011896:	68b8      	ldr	r0, [r7, #8]
 8011898:	460b      	mov	r3, r1
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	1a5b      	subs	r3, r3, r1
 801189e:	009b      	lsls	r3, r3, #2
 80118a0:	4403      	add	r3, r0
 80118a2:	3344      	adds	r3, #68	; 0x44
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80118aa:	fb03 f301 	mul.w	r3, r3, r1
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d110      	bne.n	80118d6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80118b4:	78fa      	ldrb	r2, [r7, #3]
 80118b6:	6879      	ldr	r1, [r7, #4]
 80118b8:	4613      	mov	r3, r2
 80118ba:	009b      	lsls	r3, r3, #2
 80118bc:	4413      	add	r3, r2
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	440b      	add	r3, r1
 80118c2:	331c      	adds	r3, #28
 80118c4:	2200      	movs	r2, #0
 80118c6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80118c8:	78f9      	ldrb	r1, [r7, #3]
 80118ca:	2300      	movs	r3, #0
 80118cc:	2200      	movs	r2, #0
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f005 fc17 	bl	8017102 <USBD_LL_Transmit>
 80118d4:	e003      	b.n	80118de <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2200      	movs	r2, #0
 80118da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80118de:	2300      	movs	r3, #0
 80118e0:	e000      	b.n	80118e4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80118e2:	2302      	movs	r3, #2
  }
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80118fe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8011900:	78fb      	ldrb	r3, [r7, #3]
 8011902:	4619      	mov	r1, r3
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f005 fc42 	bl	801718e <USBD_LL_GetRxDataSize>
 801190a:	4602      	mov	r2, r0
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00d      	beq.n	8011938 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011930:	4611      	mov	r1, r2
 8011932:	4798      	blx	r3

    return USBD_OK;
 8011934:	2300      	movs	r3, #0
 8011936:	e000      	b.n	801193a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011938:	2302      	movs	r3, #2
  }
}
 801193a:	4618      	mov	r0, r3
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b084      	sub	sp, #16
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011950:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011958:	2b00      	cmp	r3, #0
 801195a:	d015      	beq.n	8011988 <USBD_CDC_EP0_RxReady+0x46>
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011962:	2bff      	cmp	r3, #255	; 0xff
 8011964:	d010      	beq.n	8011988 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8011974:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801197c:	b292      	uxth	r2, r2
 801197e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	22ff      	movs	r2, #255	; 0xff
 8011984:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8011988:	2300      	movs	r3, #0
}
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
	...

08011994 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2243      	movs	r2, #67	; 0x43
 80119a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80119a2:	4b03      	ldr	r3, [pc, #12]	; (80119b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr
 80119b0:	200000e4 	.word	0x200000e4

080119b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2243      	movs	r2, #67	; 0x43
 80119c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80119c2:	4b03      	ldr	r3, [pc, #12]	; (80119d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	200000a0 	.word	0x200000a0

080119d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2243      	movs	r2, #67	; 0x43
 80119e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80119e2:	4b03      	ldr	r3, [pc, #12]	; (80119f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr
 80119f0:	20000128 	.word	0x20000128

080119f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	220a      	movs	r2, #10
 8011a00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8011a02:	4b03      	ldr	r3, [pc, #12]	; (8011a10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	370c      	adds	r7, #12
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	2000005c 	.word	0x2000005c

08011a14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011a1e:	2302      	movs	r3, #2
 8011a20:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d005      	beq.n	8011a34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8011a30:	2300      	movs	r3, #0
 8011a32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b087      	sub	sp, #28
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	60b9      	str	r1, [r7, #8]
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011a56:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	68ba      	ldr	r2, [r7, #8]
 8011a5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011a60:	88fa      	ldrh	r2, [r7, #6]
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	371c      	adds	r7, #28
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr

08011a76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8011a76:	b480      	push	{r7}
 8011a78:	b085      	sub	sp, #20
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011a86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3714      	adds	r7, #20
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr

08011a9e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011aac:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d01c      	beq.n	8011af2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d115      	bne.n	8011aee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	2181      	movs	r1, #129	; 0x81
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f005 fb0c 	bl	8017102 <USBD_LL_Transmit>

      return USBD_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	e002      	b.n	8011af4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011aee:	2301      	movs	r3, #1
 8011af0:	e000      	b.n	8011af4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8011af2:	2302      	movs	r3, #2
  }
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b0a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d017      	beq.n	8011b46 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	7c1b      	ldrb	r3, [r3, #16]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d109      	bne.n	8011b32 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b28:	2101      	movs	r1, #1
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f005 fb0c 	bl	8017148 <USBD_LL_PrepareReceive>
 8011b30:	e007      	b.n	8011b42 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b38:	2340      	movs	r3, #64	; 0x40
 8011b3a:	2101      	movs	r1, #1
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f005 fb03 	bl	8017148 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e000      	b.n	8011b48 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011b46:	2302      	movs	r3, #2
  }
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d101      	bne.n	8011b68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b64:	2302      	movs	r3, #2
 8011b66:	e01a      	b.n	8011b9e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d003      	beq.n	8011b7a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d003      	beq.n	8011b88 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	79fa      	ldrb	r2, [r7, #7]
 8011b94:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011b96:	68f8      	ldr	r0, [r7, #12]
 8011b98:	f005 f97e 	bl	8016e98 <USBD_LL_Init>

  return USBD_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011ba6:	b480      	push	{r7}
 8011ba8:	b085      	sub	sp, #20
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d006      	beq.n	8011bc8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	73fb      	strb	r3, [r7, #15]
 8011bc6:	e001      	b.n	8011bcc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011bc8:	2302      	movs	r3, #2
 8011bca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3714      	adds	r7, #20
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b082      	sub	sp, #8
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f005 f9a4 	bl	8016f30 <USBD_LL_Start>

  return USBD_OK;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b083      	sub	sp, #12
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8011c14:	2302      	movs	r3, #2
 8011c16:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00c      	beq.n	8011c3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	78fa      	ldrb	r2, [r7, #3]
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	4798      	blx	r3
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b082      	sub	sp, #8
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
 8011c4e:	460b      	mov	r3, r1
 8011c50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	78fa      	ldrb	r2, [r7, #3]
 8011c5c:	4611      	mov	r1, r2
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	4798      	blx	r3
  return USBD_OK;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f000 fe94 	bl	80129ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2201      	movs	r2, #1
 8011c88:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8011c92:	461a      	mov	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8011ca0:	f003 031f 	and.w	r3, r3, #31
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d00c      	beq.n	8011cc2 <USBD_LL_SetupStage+0x56>
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d302      	bcc.n	8011cb2 <USBD_LL_SetupStage+0x46>
 8011cac:	2b02      	cmp	r3, #2
 8011cae:	d010      	beq.n	8011cd2 <USBD_LL_SetupStage+0x66>
 8011cb0:	e017      	b.n	8011ce2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011cb8:	4619      	mov	r1, r3
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fa04 	bl	80120c8 <USBD_StdDevReq>
    break;
 8011cc0:	e01a      	b.n	8011cf8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 fa66 	bl	801219c <USBD_StdItfReq>
    break;
 8011cd0:	e012      	b.n	8011cf8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011cd8:	4619      	mov	r1, r3
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 faa4 	bl	8012228 <USBD_StdEPReq>
    break;
 8011ce0:	e00a      	b.n	8011cf8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8011ce8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f005 f97d 	bl	8016ff0 <USBD_LL_StallEP>
    break;
 8011cf6:	bf00      	nop
  }

  return USBD_OK;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b086      	sub	sp, #24
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	607a      	str	r2, [r7, #4]
 8011d0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8011d10:	7afb      	ldrb	r3, [r7, #11]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d14b      	bne.n	8011dae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011d1c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011d24:	2b03      	cmp	r3, #3
 8011d26:	d134      	bne.n	8011d92 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	68da      	ldr	r2, [r3, #12]
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	691b      	ldr	r3, [r3, #16]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d919      	bls.n	8011d68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	68da      	ldr	r2, [r3, #12]
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	691b      	ldr	r3, [r3, #16]
 8011d3c:	1ad2      	subs	r2, r2, r3
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	68da      	ldr	r2, [r3, #12]
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d203      	bcs.n	8011d56 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	e002      	b.n	8011d5c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f000 ff17 	bl	8012b94 <USBD_CtlContinueRx>
 8011d66:	e038      	b.n	8011dda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8011d7a:	2b03      	cmp	r3, #3
 8011d7c:	d105      	bne.n	8011d8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011d84:	691b      	ldr	r3, [r3, #16]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011d8a:	68f8      	ldr	r0, [r7, #12]
 8011d8c:	f000 ff14 	bl	8012bb8 <USBD_CtlSendStatus>
 8011d90:	e023      	b.n	8011dda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011d98:	2b05      	cmp	r3, #5
 8011d9a:	d11e      	bne.n	8011dda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8011da4:	2100      	movs	r1, #0
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f005 f922 	bl	8016ff0 <USBD_LL_StallEP>
 8011dac:	e015      	b.n	8011dda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011db4:	699b      	ldr	r3, [r3, #24]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00d      	beq.n	8011dd6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	d108      	bne.n	8011dd6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011dca:	699b      	ldr	r3, [r3, #24]
 8011dcc:	7afa      	ldrb	r2, [r7, #11]
 8011dce:	4611      	mov	r1, r2
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	4798      	blx	r3
 8011dd4:	e001      	b.n	8011dda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011dd6:	2302      	movs	r3, #2
 8011dd8:	e000      	b.n	8011ddc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	460b      	mov	r3, r1
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8011df2:	7afb      	ldrb	r3, [r7, #11]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d17f      	bne.n	8011ef8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	3314      	adds	r3, #20
 8011dfc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011e04:	2b02      	cmp	r3, #2
 8011e06:	d15c      	bne.n	8011ec2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	68da      	ldr	r2, [r3, #12]
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d915      	bls.n	8011e40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	68da      	ldr	r2, [r3, #12]
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	1ad2      	subs	r2, r2, r3
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	461a      	mov	r2, r3
 8011e2a:	6879      	ldr	r1, [r7, #4]
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f000 fe81 	bl	8012b34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011e32:	2300      	movs	r3, #0
 8011e34:	2200      	movs	r2, #0
 8011e36:	2100      	movs	r1, #0
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f005 f985 	bl	8017148 <USBD_LL_PrepareReceive>
 8011e3e:	e04e      	b.n	8011ede <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	697a      	ldr	r2, [r7, #20]
 8011e46:	6912      	ldr	r2, [r2, #16]
 8011e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e4c:	fb02 f201 	mul.w	r2, r2, r1
 8011e50:	1a9b      	subs	r3, r3, r2
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d11c      	bne.n	8011e90 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	689a      	ldr	r2, [r3, #8]
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d316      	bcc.n	8011e90 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	689a      	ldr	r2, [r3, #8]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d20f      	bcs.n	8011e90 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e70:	2200      	movs	r2, #0
 8011e72:	2100      	movs	r1, #0
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f000 fe5d 	bl	8012b34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011e82:	2300      	movs	r3, #0
 8011e84:	2200      	movs	r2, #0
 8011e86:	2100      	movs	r1, #0
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f005 f95d 	bl	8017148 <USBD_LL_PrepareReceive>
 8011e8e:	e026      	b.n	8011ede <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00a      	beq.n	8011eb2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d105      	bne.n	8011eb2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011eb2:	2180      	movs	r1, #128	; 0x80
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f005 f89b 	bl	8016ff0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 fe8f 	bl	8012bde <USBD_CtlReceiveStatus>
 8011ec0:	e00d      	b.n	8011ede <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	d004      	beq.n	8011ed6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d103      	bne.n	8011ede <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011ed6:	2180      	movs	r1, #128	; 0x80
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f005 f889 	bl	8016ff0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d11d      	bne.n	8011f24 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f7ff fe82 	bl	8011bf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8011ef6:	e015      	b.n	8011f24 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011efe:	695b      	ldr	r3, [r3, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00d      	beq.n	8011f20 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8011f0a:	2b03      	cmp	r3, #3
 8011f0c:	d108      	bne.n	8011f20 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011f14:	695b      	ldr	r3, [r3, #20]
 8011f16:	7afa      	ldrb	r2, [r7, #11]
 8011f18:	4611      	mov	r1, r2
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	4798      	blx	r3
 8011f1e:	e001      	b.n	8011f24 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011f20:	2302      	movs	r3, #2
 8011f22:	e000      	b.n	8011f26 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3718      	adds	r7, #24
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	b082      	sub	sp, #8
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f36:	2340      	movs	r3, #64	; 0x40
 8011f38:	2200      	movs	r2, #0
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f005 f812 	bl	8016f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2201      	movs	r2, #1
 8011f46:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2240      	movs	r2, #64	; 0x40
 8011f4e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f52:	2340      	movs	r3, #64	; 0x40
 8011f54:	2200      	movs	r2, #0
 8011f56:	2180      	movs	r1, #128	; 0x80
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f005 f804 	bl	8016f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2201      	movs	r2, #1
 8011f62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2240      	movs	r2, #64	; 0x40
 8011f68:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d009      	beq.n	8011fa6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	6852      	ldr	r2, [r2, #4]
 8011f9e:	b2d2      	uxtb	r2, r2
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	4798      	blx	r3
  }

  return USBD_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	460b      	mov	r3, r1
 8011fba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	78fa      	ldrb	r2, [r7, #3]
 8011fc0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8011fc2:	2300      	movs	r3, #0
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2204      	movs	r2, #4
 8011fe8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 801200e:	2300      	movs	r3, #0
}
 8012010:	4618      	mov	r0, r3
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801202a:	2b03      	cmp	r3, #3
 801202c:	d10b      	bne.n	8012046 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012034:	69db      	ldr	r3, [r3, #28]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d005      	beq.n	8012046 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012040:	69db      	ldr	r3, [r3, #28]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	460b      	mov	r3, r1
 801205a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801205c:	2300      	movs	r3, #0
}
 801205e:	4618      	mov	r0, r3
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr

0801206a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801206a:	b480      	push	{r7}
 801206c:	b083      	sub	sp, #12
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
 8012072:	460b      	mov	r3, r1
 8012074:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012076:	2300      	movs	r3, #0
}
 8012078:	4618      	mov	r0, r3
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801208c:	2300      	movs	r3, #0
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b082      	sub	sp, #8
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2201      	movs	r2, #1
 80120a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	6852      	ldr	r2, [r2, #4]
 80120b6:	b2d2      	uxtb	r2, r2
 80120b8:	4611      	mov	r1, r2
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	4798      	blx	r3

  return USBD_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120d2:	2300      	movs	r3, #0
 80120d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120de:	2b20      	cmp	r3, #32
 80120e0:	d004      	beq.n	80120ec <USBD_StdDevReq+0x24>
 80120e2:	2b40      	cmp	r3, #64	; 0x40
 80120e4:	d002      	beq.n	80120ec <USBD_StdDevReq+0x24>
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d008      	beq.n	80120fc <USBD_StdDevReq+0x34>
 80120ea:	e04c      	b.n	8012186 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	4798      	blx	r3
    break;
 80120fa:	e049      	b.n	8012190 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	785b      	ldrb	r3, [r3, #1]
 8012100:	2b09      	cmp	r3, #9
 8012102:	d83a      	bhi.n	801217a <USBD_StdDevReq+0xb2>
 8012104:	a201      	add	r2, pc, #4	; (adr r2, 801210c <USBD_StdDevReq+0x44>)
 8012106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210a:	bf00      	nop
 801210c:	0801215d 	.word	0x0801215d
 8012110:	08012171 	.word	0x08012171
 8012114:	0801217b 	.word	0x0801217b
 8012118:	08012167 	.word	0x08012167
 801211c:	0801217b 	.word	0x0801217b
 8012120:	0801213f 	.word	0x0801213f
 8012124:	08012135 	.word	0x08012135
 8012128:	0801217b 	.word	0x0801217b
 801212c:	08012153 	.word	0x08012153
 8012130:	08012149 	.word	0x08012149
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 f9d2 	bl	80124e0 <USBD_GetDescriptor>
      break;
 801213c:	e022      	b.n	8012184 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 fac7 	bl	80126d4 <USBD_SetAddress>
      break;
 8012146:	e01d      	b.n	8012184 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 fb04 	bl	8012758 <USBD_SetConfig>
      break;
 8012150:	e018      	b.n	8012184 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8012152:	6839      	ldr	r1, [r7, #0]
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 fb8d 	bl	8012874 <USBD_GetConfig>
      break;
 801215a:	e013      	b.n	8012184 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 fbbc 	bl	80128dc <USBD_GetStatus>
      break;
 8012164:	e00e      	b.n	8012184 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f000 fbea 	bl	8012942 <USBD_SetFeature>
      break;
 801216e:	e009      	b.n	8012184 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8012170:	6839      	ldr	r1, [r7, #0]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f000 fbf9 	bl	801296a <USBD_ClrFeature>
      break;
 8012178:	e004      	b.n	8012184 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 801217a:	6839      	ldr	r1, [r7, #0]
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 fc52 	bl	8012a26 <USBD_CtlError>
      break;
 8012182:	bf00      	nop
    }
    break;
 8012184:	e004      	b.n	8012190 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 fc4c 	bl	8012a26 <USBD_CtlError>
    break;
 801218e:	bf00      	nop
  }

  return ret;
 8012190:	7bfb      	ldrb	r3, [r7, #15]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3710      	adds	r7, #16
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop

0801219c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121a6:	2300      	movs	r3, #0
 80121a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121b2:	2b20      	cmp	r3, #32
 80121b4:	d003      	beq.n	80121be <USBD_StdItfReq+0x22>
 80121b6:	2b40      	cmp	r3, #64	; 0x40
 80121b8:	d001      	beq.n	80121be <USBD_StdItfReq+0x22>
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d12a      	bne.n	8012214 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80121c4:	3b01      	subs	r3, #1
 80121c6:	2b02      	cmp	r3, #2
 80121c8:	d81d      	bhi.n	8012206 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	889b      	ldrh	r3, [r3, #4]
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d813      	bhi.n	80121fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	6839      	ldr	r1, [r7, #0]
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	4798      	blx	r3
 80121e2:	4603      	mov	r3, r0
 80121e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	88db      	ldrh	r3, [r3, #6]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d110      	bne.n	8012210 <USBD_StdItfReq+0x74>
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10d      	bne.n	8012210 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fcdf 	bl	8012bb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80121fa:	e009      	b.n	8012210 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fc11 	bl	8012a26 <USBD_CtlError>
      break;
 8012204:	e004      	b.n	8012210 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8012206:	6839      	ldr	r1, [r7, #0]
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 fc0c 	bl	8012a26 <USBD_CtlError>
      break;
 801220e:	e000      	b.n	8012212 <USBD_StdItfReq+0x76>
      break;
 8012210:	bf00      	nop
    }
    break;
 8012212:	e004      	b.n	801221e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 fc05 	bl	8012a26 <USBD_CtlError>
    break;
 801221c:	bf00      	nop
  }

  return USBD_OK;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012232:	2300      	movs	r3, #0
 8012234:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	889b      	ldrh	r3, [r3, #4]
 801223a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012244:	2b20      	cmp	r3, #32
 8012246:	d004      	beq.n	8012252 <USBD_StdEPReq+0x2a>
 8012248:	2b40      	cmp	r3, #64	; 0x40
 801224a:	d002      	beq.n	8012252 <USBD_StdEPReq+0x2a>
 801224c:	2b00      	cmp	r3, #0
 801224e:	d008      	beq.n	8012262 <USBD_StdEPReq+0x3a>
 8012250:	e13b      	b.n	80124ca <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	6839      	ldr	r1, [r7, #0]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	4798      	blx	r3
    break;
 8012260:	e138      	b.n	80124d4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801226a:	2b20      	cmp	r3, #32
 801226c:	d10a      	bne.n	8012284 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	6839      	ldr	r1, [r7, #0]
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	4798      	blx	r3
 801227c:	4603      	mov	r3, r0
 801227e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	e128      	b.n	80124d6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	785b      	ldrb	r3, [r3, #1]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d03e      	beq.n	801230a <USBD_StdEPReq+0xe2>
 801228c:	2b03      	cmp	r3, #3
 801228e:	d002      	beq.n	8012296 <USBD_StdEPReq+0x6e>
 8012290:	2b00      	cmp	r3, #0
 8012292:	d070      	beq.n	8012376 <USBD_StdEPReq+0x14e>
 8012294:	e113      	b.n	80124be <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801229c:	2b02      	cmp	r3, #2
 801229e:	d002      	beq.n	80122a6 <USBD_StdEPReq+0x7e>
 80122a0:	2b03      	cmp	r3, #3
 80122a2:	d015      	beq.n	80122d0 <USBD_StdEPReq+0xa8>
 80122a4:	e02b      	b.n	80122fe <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122a6:	7bbb      	ldrb	r3, [r7, #14]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00c      	beq.n	80122c6 <USBD_StdEPReq+0x9e>
 80122ac:	7bbb      	ldrb	r3, [r7, #14]
 80122ae:	2b80      	cmp	r3, #128	; 0x80
 80122b0:	d009      	beq.n	80122c6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80122b2:	7bbb      	ldrb	r3, [r7, #14]
 80122b4:	4619      	mov	r1, r3
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f004 fe9a 	bl	8016ff0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80122bc:	2180      	movs	r1, #128	; 0x80
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f004 fe96 	bl	8016ff0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80122c4:	e020      	b.n	8012308 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fbac 	bl	8012a26 <USBD_CtlError>
        break;
 80122ce:	e01b      	b.n	8012308 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	885b      	ldrh	r3, [r3, #2]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d10e      	bne.n	80122f6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00b      	beq.n	80122f6 <USBD_StdEPReq+0xce>
 80122de:	7bbb      	ldrb	r3, [r7, #14]
 80122e0:	2b80      	cmp	r3, #128	; 0x80
 80122e2:	d008      	beq.n	80122f6 <USBD_StdEPReq+0xce>
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	88db      	ldrh	r3, [r3, #6]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d104      	bne.n	80122f6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80122ec:	7bbb      	ldrb	r3, [r7, #14]
 80122ee:	4619      	mov	r1, r3
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f004 fe7d 	bl	8016ff0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fc5e 	bl	8012bb8 <USBD_CtlSendStatus>

        break;
 80122fc:	e004      	b.n	8012308 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80122fe:	6839      	ldr	r1, [r7, #0]
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fb90 	bl	8012a26 <USBD_CtlError>
        break;
 8012306:	bf00      	nop
      }
      break;
 8012308:	e0de      	b.n	80124c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012310:	2b02      	cmp	r3, #2
 8012312:	d002      	beq.n	801231a <USBD_StdEPReq+0xf2>
 8012314:	2b03      	cmp	r3, #3
 8012316:	d015      	beq.n	8012344 <USBD_StdEPReq+0x11c>
 8012318:	e026      	b.n	8012368 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801231a:	7bbb      	ldrb	r3, [r7, #14]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d00c      	beq.n	801233a <USBD_StdEPReq+0x112>
 8012320:	7bbb      	ldrb	r3, [r7, #14]
 8012322:	2b80      	cmp	r3, #128	; 0x80
 8012324:	d009      	beq.n	801233a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8012326:	7bbb      	ldrb	r3, [r7, #14]
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f004 fe60 	bl	8016ff0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8012330:	2180      	movs	r1, #128	; 0x80
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f004 fe5c 	bl	8016ff0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012338:	e01c      	b.n	8012374 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fb72 	bl	8012a26 <USBD_CtlError>
        break;
 8012342:	e017      	b.n	8012374 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	885b      	ldrh	r3, [r3, #2]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d112      	bne.n	8012372 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801234c:	7bbb      	ldrb	r3, [r7, #14]
 801234e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012352:	2b00      	cmp	r3, #0
 8012354:	d004      	beq.n	8012360 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8012356:	7bbb      	ldrb	r3, [r7, #14]
 8012358:	4619      	mov	r1, r3
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f004 fe67 	bl	801702e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 fc29 	bl	8012bb8 <USBD_CtlSendStatus>
        }
        break;
 8012366:	e004      	b.n	8012372 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fb5b 	bl	8012a26 <USBD_CtlError>
        break;
 8012370:	e000      	b.n	8012374 <USBD_StdEPReq+0x14c>
        break;
 8012372:	bf00      	nop
      }
      break;
 8012374:	e0a8      	b.n	80124c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801237c:	2b02      	cmp	r3, #2
 801237e:	d002      	beq.n	8012386 <USBD_StdEPReq+0x15e>
 8012380:	2b03      	cmp	r3, #3
 8012382:	d031      	beq.n	80123e8 <USBD_StdEPReq+0x1c0>
 8012384:	e095      	b.n	80124b2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012386:	7bbb      	ldrb	r3, [r7, #14]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d007      	beq.n	801239c <USBD_StdEPReq+0x174>
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	2b80      	cmp	r3, #128	; 0x80
 8012390:	d004      	beq.n	801239c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fb46 	bl	8012a26 <USBD_CtlError>
          break;
 801239a:	e08f      	b.n	80124bc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801239c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	da0b      	bge.n	80123bc <USBD_StdEPReq+0x194>
 80123a4:	7bbb      	ldrb	r3, [r7, #14]
 80123a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123aa:	4613      	mov	r3, r2
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	3310      	adds	r3, #16
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	4413      	add	r3, r2
 80123b8:	3304      	adds	r3, #4
 80123ba:	e00a      	b.n	80123d2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
 80123be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80123c2:	4613      	mov	r3, r2
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	4413      	add	r3, r2
 80123d2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	2200      	movs	r2, #0
 80123d8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2202      	movs	r2, #2
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 fb8b 	bl	8012afc <USBD_CtlSendData>
          break;
 80123e6:	e069      	b.n	80124bc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80123e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	da11      	bge.n	8012414 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80123f0:	7bbb      	ldrb	r3, [r7, #14]
 80123f2:	f003 020f 	and.w	r2, r3, #15
 80123f6:	6879      	ldr	r1, [r7, #4]
 80123f8:	4613      	mov	r3, r2
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	4413      	add	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	440b      	add	r3, r1
 8012402:	3318      	adds	r3, #24
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d117      	bne.n	801243a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801240a:	6839      	ldr	r1, [r7, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fb0a 	bl	8012a26 <USBD_CtlError>
            break;
 8012412:	e053      	b.n	80124bc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012414:	7bbb      	ldrb	r3, [r7, #14]
 8012416:	f003 020f 	and.w	r2, r3, #15
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	4613      	mov	r3, r2
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	4413      	add	r3, r2
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	440b      	add	r3, r1
 8012426:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d104      	bne.n	801243a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8012430:	6839      	ldr	r1, [r7, #0]
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 faf7 	bl	8012a26 <USBD_CtlError>
            break;
 8012438:	e040      	b.n	80124bc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801243a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801243e:	2b00      	cmp	r3, #0
 8012440:	da0b      	bge.n	801245a <USBD_StdEPReq+0x232>
 8012442:	7bbb      	ldrb	r3, [r7, #14]
 8012444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012448:	4613      	mov	r3, r2
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	4413      	add	r3, r2
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	3310      	adds	r3, #16
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	4413      	add	r3, r2
 8012456:	3304      	adds	r3, #4
 8012458:	e00a      	b.n	8012470 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801245a:	7bbb      	ldrb	r3, [r7, #14]
 801245c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8012460:	4613      	mov	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	4413      	add	r3, r2
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	4413      	add	r3, r2
 8012470:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012472:	7bbb      	ldrb	r3, [r7, #14]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d002      	beq.n	801247e <USBD_StdEPReq+0x256>
 8012478:	7bbb      	ldrb	r3, [r7, #14]
 801247a:	2b80      	cmp	r3, #128	; 0x80
 801247c:	d103      	bne.n	8012486 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	2200      	movs	r2, #0
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	e00e      	b.n	80124a4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8012486:	7bbb      	ldrb	r3, [r7, #14]
 8012488:	4619      	mov	r1, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f004 fdee 	bl	801706c <USBD_LL_IsStallEP>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d003      	beq.n	801249e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	2201      	movs	r2, #1
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	e002      	b.n	80124a4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	2200      	movs	r2, #0
 80124a2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	2202      	movs	r2, #2
 80124a8:	4619      	mov	r1, r3
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 fb26 	bl	8012afc <USBD_CtlSendData>
          break;
 80124b0:	e004      	b.n	80124bc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80124b2:	6839      	ldr	r1, [r7, #0]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 fab6 	bl	8012a26 <USBD_CtlError>
        break;
 80124ba:	bf00      	nop
      }
      break;
 80124bc:	e004      	b.n	80124c8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80124be:	6839      	ldr	r1, [r7, #0]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 fab0 	bl	8012a26 <USBD_CtlError>
      break;
 80124c6:	bf00      	nop
    }
    break;
 80124c8:	e004      	b.n	80124d4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 faaa 	bl	8012a26 <USBD_CtlError>
    break;
 80124d2:	bf00      	nop
  }

  return ret;
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
	...

080124e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	885b      	ldrh	r3, [r3, #2]
 80124ee:	0a1b      	lsrs	r3, r3, #8
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	3b01      	subs	r3, #1
 80124f4:	2b06      	cmp	r3, #6
 80124f6:	f200 80c9 	bhi.w	801268c <USBD_GetDescriptor+0x1ac>
 80124fa:	a201      	add	r2, pc, #4	; (adr r2, 8012500 <USBD_GetDescriptor+0x20>)
 80124fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012500:	0801251d 	.word	0x0801251d
 8012504:	08012535 	.word	0x08012535
 8012508:	08012575 	.word	0x08012575
 801250c:	0801268d 	.word	0x0801268d
 8012510:	0801268d 	.word	0x0801268d
 8012514:	08012639 	.word	0x08012639
 8012518:	0801265f 	.word	0x0801265f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	7c12      	ldrb	r2, [r2, #16]
 8012528:	f107 010a 	add.w	r1, r7, #10
 801252c:	4610      	mov	r0, r2
 801252e:	4798      	blx	r3
 8012530:	60f8      	str	r0, [r7, #12]
    break;
 8012532:	e0b0      	b.n	8012696 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	7c1b      	ldrb	r3, [r3, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d10d      	bne.n	8012558 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012544:	f107 020a 	add.w	r2, r7, #10
 8012548:	4610      	mov	r0, r2
 801254a:	4798      	blx	r3
 801254c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	3301      	adds	r3, #1
 8012552:	2202      	movs	r2, #2
 8012554:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012556:	e09e      	b.n	8012696 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012560:	f107 020a 	add.w	r2, r7, #10
 8012564:	4610      	mov	r0, r2
 8012566:	4798      	blx	r3
 8012568:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	3301      	adds	r3, #1
 801256e:	2202      	movs	r2, #2
 8012570:	701a      	strb	r2, [r3, #0]
    break;
 8012572:	e090      	b.n	8012696 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	885b      	ldrh	r3, [r3, #2]
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b05      	cmp	r3, #5
 801257c:	d856      	bhi.n	801262c <USBD_GetDescriptor+0x14c>
 801257e:	a201      	add	r2, pc, #4	; (adr r2, 8012584 <USBD_GetDescriptor+0xa4>)
 8012580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012584:	0801259d 	.word	0x0801259d
 8012588:	080125b5 	.word	0x080125b5
 801258c:	080125cd 	.word	0x080125cd
 8012590:	080125e5 	.word	0x080125e5
 8012594:	080125fd 	.word	0x080125fd
 8012598:	08012615 	.word	0x08012615
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	7c12      	ldrb	r2, [r2, #16]
 80125a8:	f107 010a 	add.w	r1, r7, #10
 80125ac:	4610      	mov	r0, r2
 80125ae:	4798      	blx	r3
 80125b0:	60f8      	str	r0, [r7, #12]
      break;
 80125b2:	e040      	b.n	8012636 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	7c12      	ldrb	r2, [r2, #16]
 80125c0:	f107 010a 	add.w	r1, r7, #10
 80125c4:	4610      	mov	r0, r2
 80125c6:	4798      	blx	r3
 80125c8:	60f8      	str	r0, [r7, #12]
      break;
 80125ca:	e034      	b.n	8012636 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	7c12      	ldrb	r2, [r2, #16]
 80125d8:	f107 010a 	add.w	r1, r7, #10
 80125dc:	4610      	mov	r0, r2
 80125de:	4798      	blx	r3
 80125e0:	60f8      	str	r0, [r7, #12]
      break;
 80125e2:	e028      	b.n	8012636 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80125ea:	691b      	ldr	r3, [r3, #16]
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	7c12      	ldrb	r2, [r2, #16]
 80125f0:	f107 010a 	add.w	r1, r7, #10
 80125f4:	4610      	mov	r0, r2
 80125f6:	4798      	blx	r3
 80125f8:	60f8      	str	r0, [r7, #12]
      break;
 80125fa:	e01c      	b.n	8012636 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012602:	695b      	ldr	r3, [r3, #20]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	7c12      	ldrb	r2, [r2, #16]
 8012608:	f107 010a 	add.w	r1, r7, #10
 801260c:	4610      	mov	r0, r2
 801260e:	4798      	blx	r3
 8012610:	60f8      	str	r0, [r7, #12]
      break;
 8012612:	e010      	b.n	8012636 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801261a:	699b      	ldr	r3, [r3, #24]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	7c12      	ldrb	r2, [r2, #16]
 8012620:	f107 010a 	add.w	r1, r7, #10
 8012624:	4610      	mov	r0, r2
 8012626:	4798      	blx	r3
 8012628:	60f8      	str	r0, [r7, #12]
      break;
 801262a:	e004      	b.n	8012636 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 801262c:	6839      	ldr	r1, [r7, #0]
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 f9f9 	bl	8012a26 <USBD_CtlError>
      return;
 8012634:	e04b      	b.n	80126ce <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8012636:	e02e      	b.n	8012696 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	7c1b      	ldrb	r3, [r3, #16]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d109      	bne.n	8012654 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012648:	f107 020a 	add.w	r2, r7, #10
 801264c:	4610      	mov	r0, r2
 801264e:	4798      	blx	r3
 8012650:	60f8      	str	r0, [r7, #12]
      break;
 8012652:	e020      	b.n	8012696 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 f9e5 	bl	8012a26 <USBD_CtlError>
      return;
 801265c:	e037      	b.n	80126ce <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	7c1b      	ldrb	r3, [r3, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d10d      	bne.n	8012682 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801266e:	f107 020a 	add.w	r2, r7, #10
 8012672:	4610      	mov	r0, r2
 8012674:	4798      	blx	r3
 8012676:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3301      	adds	r3, #1
 801267c:	2207      	movs	r2, #7
 801267e:	701a      	strb	r2, [r3, #0]
      break;
 8012680:	e009      	b.n	8012696 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 f9ce 	bl	8012a26 <USBD_CtlError>
      return;
 801268a:	e020      	b.n	80126ce <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f9c9 	bl	8012a26 <USBD_CtlError>
    return;
 8012694:	e01b      	b.n	80126ce <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8012696:	897b      	ldrh	r3, [r7, #10]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d011      	beq.n	80126c0 <USBD_GetDescriptor+0x1e0>
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	88db      	ldrh	r3, [r3, #6]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00d      	beq.n	80126c0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	88da      	ldrh	r2, [r3, #6]
 80126a8:	897b      	ldrh	r3, [r7, #10]
 80126aa:	4293      	cmp	r3, r2
 80126ac:	bf28      	it	cs
 80126ae:	4613      	movcs	r3, r2
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80126b4:	897b      	ldrh	r3, [r7, #10]
 80126b6:	461a      	mov	r2, r3
 80126b8:	68f9      	ldr	r1, [r7, #12]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f000 fa1e 	bl	8012afc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	88db      	ldrh	r3, [r3, #6]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d102      	bne.n	80126ce <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 fa75 	bl	8012bb8 <USBD_CtlSendStatus>
  }
}
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	889b      	ldrh	r3, [r3, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d130      	bne.n	8012748 <USBD_SetAddress+0x74>
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	88db      	ldrh	r3, [r3, #6]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d12c      	bne.n	8012748 <USBD_SetAddress+0x74>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	885b      	ldrh	r3, [r3, #2]
 80126f2:	2b7f      	cmp	r3, #127	; 0x7f
 80126f4:	d828      	bhi.n	8012748 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012708:	2b03      	cmp	r3, #3
 801270a:	d104      	bne.n	8012716 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 801270c:	6839      	ldr	r1, [r7, #0]
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 f989 	bl	8012a26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012714:	e01c      	b.n	8012750 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	7bfa      	ldrb	r2, [r7, #15]
 801271a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801271e:	7bfb      	ldrb	r3, [r7, #15]
 8012720:	4619      	mov	r1, r3
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f004 fcce 	bl	80170c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 fa45 	bl	8012bb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801272e:	7bfb      	ldrb	r3, [r7, #15]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d004      	beq.n	801273e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2202      	movs	r2, #2
 8012738:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801273c:	e008      	b.n	8012750 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012746:	e003      	b.n	8012750 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012748:	6839      	ldr	r1, [r7, #0]
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f96b 	bl	8012a26 <USBD_CtlError>
  }
}
 8012750:	bf00      	nop
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	885b      	ldrh	r3, [r3, #2]
 8012766:	b2da      	uxtb	r2, r3
 8012768:	4b41      	ldr	r3, [pc, #260]	; (8012870 <USBD_SetConfig+0x118>)
 801276a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801276c:	4b40      	ldr	r3, [pc, #256]	; (8012870 <USBD_SetConfig+0x118>)
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2b01      	cmp	r3, #1
 8012772:	d904      	bls.n	801277e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012774:	6839      	ldr	r1, [r7, #0]
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f955 	bl	8012a26 <USBD_CtlError>
 801277c:	e075      	b.n	801286a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012784:	2b02      	cmp	r3, #2
 8012786:	d002      	beq.n	801278e <USBD_SetConfig+0x36>
 8012788:	2b03      	cmp	r3, #3
 801278a:	d023      	beq.n	80127d4 <USBD_SetConfig+0x7c>
 801278c:	e062      	b.n	8012854 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801278e:	4b38      	ldr	r3, [pc, #224]	; (8012870 <USBD_SetConfig+0x118>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d01a      	beq.n	80127cc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8012796:	4b36      	ldr	r3, [pc, #216]	; (8012870 <USBD_SetConfig+0x118>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2203      	movs	r2, #3
 80127a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80127a8:	4b31      	ldr	r3, [pc, #196]	; (8012870 <USBD_SetConfig+0x118>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	4619      	mov	r1, r3
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f7ff fa2a 	bl	8011c08 <USBD_SetClassConfig>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b02      	cmp	r3, #2
 80127b8:	d104      	bne.n	80127c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f932 	bl	8012a26 <USBD_CtlError>
          return;
 80127c2:	e052      	b.n	801286a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f000 f9f7 	bl	8012bb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80127ca:	e04e      	b.n	801286a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 f9f3 	bl	8012bb8 <USBD_CtlSendStatus>
      break;
 80127d2:	e04a      	b.n	801286a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80127d4:	4b26      	ldr	r3, [pc, #152]	; (8012870 <USBD_SetConfig+0x118>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d112      	bne.n	8012802 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2202      	movs	r2, #2
 80127e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80127e4:	4b22      	ldr	r3, [pc, #136]	; (8012870 <USBD_SetConfig+0x118>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	461a      	mov	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80127ee:	4b20      	ldr	r3, [pc, #128]	; (8012870 <USBD_SetConfig+0x118>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	4619      	mov	r1, r3
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff fa26 	bl	8011c46 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 f9dc 	bl	8012bb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8012800:	e033      	b.n	801286a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8012802:	4b1b      	ldr	r3, [pc, #108]	; (8012870 <USBD_SetConfig+0x118>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	461a      	mov	r2, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d01d      	beq.n	801284c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	b2db      	uxtb	r3, r3
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff fa14 	bl	8011c46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801281e:	4b14      	ldr	r3, [pc, #80]	; (8012870 <USBD_SetConfig+0x118>)
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	461a      	mov	r2, r3
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012828:	4b11      	ldr	r3, [pc, #68]	; (8012870 <USBD_SetConfig+0x118>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	4619      	mov	r1, r3
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ff f9ea 	bl	8011c08 <USBD_SetClassConfig>
 8012834:	4603      	mov	r3, r0
 8012836:	2b02      	cmp	r3, #2
 8012838:	d104      	bne.n	8012844 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f8f2 	bl	8012a26 <USBD_CtlError>
          return;
 8012842:	e012      	b.n	801286a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f000 f9b7 	bl	8012bb8 <USBD_CtlSendStatus>
      break;
 801284a:	e00e      	b.n	801286a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 f9b3 	bl	8012bb8 <USBD_CtlSendStatus>
      break;
 8012852:	e00a      	b.n	801286a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8012854:	6839      	ldr	r1, [r7, #0]
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 f8e5 	bl	8012a26 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 801285c:	4b04      	ldr	r3, [pc, #16]	; (8012870 <USBD_SetConfig+0x118>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff f9ef 	bl	8011c46 <USBD_ClrClassConfig>
      break;
 8012868:	bf00      	nop
    }
  }
}
 801286a:	3708      	adds	r7, #8
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	20000c00 	.word	0x20000c00

08012874 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	88db      	ldrh	r3, [r3, #6]
 8012882:	2b01      	cmp	r3, #1
 8012884:	d004      	beq.n	8012890 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 f8cc 	bl	8012a26 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801288e:	e021      	b.n	80128d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012896:	2b01      	cmp	r3, #1
 8012898:	db17      	blt.n	80128ca <USBD_GetConfig+0x56>
 801289a:	2b02      	cmp	r3, #2
 801289c:	dd02      	ble.n	80128a4 <USBD_GetConfig+0x30>
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d00b      	beq.n	80128ba <USBD_GetConfig+0x46>
 80128a2:	e012      	b.n	80128ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3308      	adds	r3, #8
 80128ae:	2201      	movs	r2, #1
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 f922 	bl	8012afc <USBD_CtlSendData>
      break;
 80128b8:	e00c      	b.n	80128d4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	3304      	adds	r3, #4
 80128be:	2201      	movs	r2, #1
 80128c0:	4619      	mov	r1, r3
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f000 f91a 	bl	8012afc <USBD_CtlSendData>
      break;
 80128c8:	e004      	b.n	80128d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80128ca:	6839      	ldr	r1, [r7, #0]
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f8aa 	bl	8012a26 <USBD_CtlError>
      break;
 80128d2:	bf00      	nop
}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80128ec:	3b01      	subs	r3, #1
 80128ee:	2b02      	cmp	r3, #2
 80128f0:	d81e      	bhi.n	8012930 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	88db      	ldrh	r3, [r3, #6]
 80128f6:	2b02      	cmp	r3, #2
 80128f8:	d004      	beq.n	8012904 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80128fa:	6839      	ldr	r1, [r7, #0]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 f892 	bl	8012a26 <USBD_CtlError>
      break;
 8012902:	e01a      	b.n	801293a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2201      	movs	r2, #1
 8012908:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d005      	beq.n	8012920 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	f043 0202 	orr.w	r2, r3, #2
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	330c      	adds	r3, #12
 8012924:	2202      	movs	r2, #2
 8012926:	4619      	mov	r1, r3
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f8e7 	bl	8012afc <USBD_CtlSendData>
    break;
 801292e:	e004      	b.n	801293a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f877 	bl	8012a26 <USBD_CtlError>
    break;
 8012938:	bf00      	nop
  }
}
 801293a:	bf00      	nop
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b082      	sub	sp, #8
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	885b      	ldrh	r3, [r3, #2]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d106      	bne.n	8012962 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2201      	movs	r2, #1
 8012958:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f000 f92b 	bl	8012bb8 <USBD_CtlSendStatus>
  }

}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801296a:	b580      	push	{r7, lr}
 801296c:	b082      	sub	sp, #8
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
 8012972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801297a:	3b01      	subs	r3, #1
 801297c:	2b02      	cmp	r3, #2
 801297e:	d80b      	bhi.n	8012998 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	885b      	ldrh	r3, [r3, #2]
 8012984:	2b01      	cmp	r3, #1
 8012986:	d10c      	bne.n	80129a2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 f911 	bl	8012bb8 <USBD_CtlSendStatus>
    }
    break;
 8012996:	e004      	b.n	80129a2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8012998:	6839      	ldr	r1, [r7, #0]
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f843 	bl	8012a26 <USBD_CtlError>
    break;
 80129a0:	e000      	b.n	80129a4 <USBD_ClrFeature+0x3a>
    break;
 80129a2:	bf00      	nop
  }
}
 80129a4:	bf00      	nop
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	781a      	ldrb	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	785a      	ldrb	r2, [r3, #1]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	3302      	adds	r3, #2
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	3303      	adds	r3, #3
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	021b      	lsls	r3, r3, #8
 80129d8:	b29b      	uxth	r3, r3
 80129da:	4413      	add	r3, r2
 80129dc:	b29a      	uxth	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	3304      	adds	r3, #4
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	3305      	adds	r3, #5
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	021b      	lsls	r3, r3, #8
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	4413      	add	r3, r2
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	3306      	adds	r3, #6
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	3307      	adds	r3, #7
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	021b      	lsls	r3, r3, #8
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	4413      	add	r3, r2
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	80da      	strh	r2, [r3, #6]

}
 8012a1a:	bf00      	nop
 8012a1c:	370c      	adds	r7, #12
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b082      	sub	sp, #8
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8012a30:	2180      	movs	r1, #128	; 0x80
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f004 fadc 	bl	8016ff0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8012a38:	2100      	movs	r1, #0
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f004 fad8 	bl	8016ff0 <USBD_LL_StallEP>
}
 8012a40:	bf00      	nop
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a54:	2300      	movs	r3, #0
 8012a56:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d032      	beq.n	8012ac4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f000 f834 	bl	8012acc <USBD_GetLen>
 8012a64:	4603      	mov	r3, r0
 8012a66:	3301      	adds	r3, #1
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	005b      	lsls	r3, r3, #1
 8012a6c:	b29a      	uxth	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	75fa      	strb	r2, [r7, #23]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	7812      	ldrb	r2, [r2, #0]
 8012a82:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012a84:	7dfb      	ldrb	r3, [r7, #23]
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	75fa      	strb	r2, [r7, #23]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	4413      	add	r3, r2
 8012a90:	2203      	movs	r2, #3
 8012a92:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012a94:	e012      	b.n	8012abc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	1c5a      	adds	r2, r3, #1
 8012a9a:	60fa      	str	r2, [r7, #12]
 8012a9c:	7dfa      	ldrb	r2, [r7, #23]
 8012a9e:	1c51      	adds	r1, r2, #1
 8012aa0:	75f9      	strb	r1, [r7, #23]
 8012aa2:	4611      	mov	r1, r2
 8012aa4:	68ba      	ldr	r2, [r7, #8]
 8012aa6:	440a      	add	r2, r1
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012aac:	7dfb      	ldrb	r3, [r7, #23]
 8012aae:	1c5a      	adds	r2, r3, #1
 8012ab0:	75fa      	strb	r2, [r7, #23]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	2200      	movs	r2, #0
 8012aba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1e8      	bne.n	8012a96 <USBD_GetString+0x4e>
    }
  }
}
 8012ac4:	bf00      	nop
 8012ac6:	3718      	adds	r7, #24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b085      	sub	sp, #20
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8012ad8:	e005      	b.n	8012ae6 <USBD_GetLen+0x1a>
    {
        len++;
 8012ada:	7bfb      	ldrb	r3, [r7, #15]
 8012adc:	3301      	adds	r3, #1
 8012ade:	73fb      	strb	r3, [r7, #15]
        buf++;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d1f5      	bne.n	8012ada <USBD_GetLen+0xe>
    }

    return len;
 8012aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3714      	adds	r7, #20
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	4613      	mov	r3, r2
 8012b08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2202      	movs	r2, #2
 8012b0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8012b12:	88fa      	ldrh	r2, [r7, #6]
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012b18:	88fa      	ldrh	r2, [r7, #6]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012b1e:	88fb      	ldrh	r3, [r7, #6]
 8012b20:	68ba      	ldr	r2, [r7, #8]
 8012b22:	2100      	movs	r1, #0
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f004 faec 	bl	8017102 <USBD_LL_Transmit>

  return USBD_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3710      	adds	r7, #16
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	68ba      	ldr	r2, [r7, #8]
 8012b46:	2100      	movs	r1, #0
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f004 fada 	bl	8017102 <USBD_LL_Transmit>

  return USBD_OK;
 8012b4e:	2300      	movs	r3, #0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	60f8      	str	r0, [r7, #12]
 8012b60:	60b9      	str	r1, [r7, #8]
 8012b62:	4613      	mov	r3, r2
 8012b64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2203      	movs	r2, #3
 8012b6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8012b6e:	88fa      	ldrh	r2, [r7, #6]
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8012b76:	88fa      	ldrh	r2, [r7, #6]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8012b7e:	88fb      	ldrh	r3, [r7, #6]
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	2100      	movs	r1, #0
 8012b84:	68f8      	ldr	r0, [r7, #12]
 8012b86:	f004 fadf 	bl	8017148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3710      	adds	r7, #16
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ba2:	88fb      	ldrh	r3, [r7, #6]
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f004 facd 	bl	8017148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2204      	movs	r2, #4
 8012bc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012bc8:	2300      	movs	r3, #0
 8012bca:	2200      	movs	r2, #0
 8012bcc:	2100      	movs	r1, #0
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f004 fa97 	bl	8017102 <USBD_LL_Transmit>

  return USBD_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b082      	sub	sp, #8
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2205      	movs	r2, #5
 8012bea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8012bee:	2300      	movs	r3, #0
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f004 faa7 	bl	8017148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	4a08      	ldr	r2, [pc, #32]	; (8012c34 <disk_status+0x30>)
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	4413      	add	r3, r2
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	79fa      	ldrb	r2, [r7, #7]
 8012c1c:	4905      	ldr	r1, [pc, #20]	; (8012c34 <disk_status+0x30>)
 8012c1e:	440a      	add	r2, r1
 8012c20:	7a12      	ldrb	r2, [r2, #8]
 8012c22:	4610      	mov	r0, r2
 8012c24:	4798      	blx	r3
 8012c26:	4603      	mov	r3, r0
 8012c28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	20000e2c 	.word	0x20000e2c

08012c38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	4603      	mov	r3, r0
 8012c40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012c42:	2300      	movs	r3, #0
 8012c44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012c46:	79fb      	ldrb	r3, [r7, #7]
 8012c48:	4a0d      	ldr	r2, [pc, #52]	; (8012c80 <disk_initialize+0x48>)
 8012c4a:	5cd3      	ldrb	r3, [r2, r3]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d111      	bne.n	8012c74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012c50:	79fb      	ldrb	r3, [r7, #7]
 8012c52:	4a0b      	ldr	r2, [pc, #44]	; (8012c80 <disk_initialize+0x48>)
 8012c54:	2101      	movs	r1, #1
 8012c56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012c58:	79fb      	ldrb	r3, [r7, #7]
 8012c5a:	4a09      	ldr	r2, [pc, #36]	; (8012c80 <disk_initialize+0x48>)
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	4413      	add	r3, r2
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	79fa      	ldrb	r2, [r7, #7]
 8012c66:	4906      	ldr	r1, [pc, #24]	; (8012c80 <disk_initialize+0x48>)
 8012c68:	440a      	add	r2, r1
 8012c6a:	7a12      	ldrb	r2, [r2, #8]
 8012c6c:	4610      	mov	r0, r2
 8012c6e:	4798      	blx	r3
 8012c70:	4603      	mov	r3, r0
 8012c72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20000e2c 	.word	0x20000e2c

08012c84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012c84:	b590      	push	{r4, r7, lr}
 8012c86:	b087      	sub	sp, #28
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	60b9      	str	r1, [r7, #8]
 8012c8c:	607a      	str	r2, [r7, #4]
 8012c8e:	603b      	str	r3, [r7, #0]
 8012c90:	4603      	mov	r3, r0
 8012c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012c94:	7bfb      	ldrb	r3, [r7, #15]
 8012c96:	4a0a      	ldr	r2, [pc, #40]	; (8012cc0 <disk_read+0x3c>)
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	4413      	add	r3, r2
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	689c      	ldr	r4, [r3, #8]
 8012ca0:	7bfb      	ldrb	r3, [r7, #15]
 8012ca2:	4a07      	ldr	r2, [pc, #28]	; (8012cc0 <disk_read+0x3c>)
 8012ca4:	4413      	add	r3, r2
 8012ca6:	7a18      	ldrb	r0, [r3, #8]
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	68b9      	ldr	r1, [r7, #8]
 8012cae:	47a0      	blx	r4
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	371c      	adds	r7, #28
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd90      	pop	{r4, r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	20000e2c 	.word	0x20000e2c

08012cc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012cc4:	b590      	push	{r4, r7, lr}
 8012cc6:	b087      	sub	sp, #28
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60b9      	str	r1, [r7, #8]
 8012ccc:	607a      	str	r2, [r7, #4]
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
 8012cd6:	4a0a      	ldr	r2, [pc, #40]	; (8012d00 <disk_write+0x3c>)
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	4413      	add	r3, r2
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	68dc      	ldr	r4, [r3, #12]
 8012ce0:	7bfb      	ldrb	r3, [r7, #15]
 8012ce2:	4a07      	ldr	r2, [pc, #28]	; (8012d00 <disk_write+0x3c>)
 8012ce4:	4413      	add	r3, r2
 8012ce6:	7a18      	ldrb	r0, [r3, #8]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	68b9      	ldr	r1, [r7, #8]
 8012cee:	47a0      	blx	r4
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	371c      	adds	r7, #28
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd90      	pop	{r4, r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	20000e2c 	.word	0x20000e2c

08012d04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	603a      	str	r2, [r7, #0]
 8012d0e:	71fb      	strb	r3, [r7, #7]
 8012d10:	460b      	mov	r3, r1
 8012d12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d14:	79fb      	ldrb	r3, [r7, #7]
 8012d16:	4a09      	ldr	r2, [pc, #36]	; (8012d3c <disk_ioctl+0x38>)
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	691b      	ldr	r3, [r3, #16]
 8012d20:	79fa      	ldrb	r2, [r7, #7]
 8012d22:	4906      	ldr	r1, [pc, #24]	; (8012d3c <disk_ioctl+0x38>)
 8012d24:	440a      	add	r2, r1
 8012d26:	7a10      	ldrb	r0, [r2, #8]
 8012d28:	79b9      	ldrb	r1, [r7, #6]
 8012d2a:	683a      	ldr	r2, [r7, #0]
 8012d2c:	4798      	blx	r3
 8012d2e:	4603      	mov	r3, r0
 8012d30:	73fb      	strb	r3, [r7, #15]
  return res;
 8012d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	20000e2c 	.word	0x20000e2c

08012d40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012d40:	b480      	push	{r7}
 8012d42:	b085      	sub	sp, #20
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012d50:	89fb      	ldrh	r3, [r7, #14]
 8012d52:	021b      	lsls	r3, r3, #8
 8012d54:	b21a      	sxth	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	b21b      	sxth	r3, r3
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	b21b      	sxth	r3, r3
 8012d60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012d62:	89fb      	ldrh	r3, [r7, #14]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3714      	adds	r7, #20
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012d70:	b480      	push	{r7}
 8012d72:	b085      	sub	sp, #20
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	3303      	adds	r3, #3
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	021b      	lsls	r3, r3, #8
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	3202      	adds	r2, #2
 8012d88:	7812      	ldrb	r2, [r2, #0]
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	021b      	lsls	r3, r3, #8
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	3201      	adds	r2, #1
 8012d96:	7812      	ldrb	r2, [r2, #0]
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	021b      	lsls	r3, r3, #8
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	7812      	ldrb	r2, [r2, #0]
 8012da4:	4313      	orrs	r3, r2
 8012da6:	60fb      	str	r3, [r7, #12]
	return rv;
 8012da8:	68fb      	ldr	r3, [r7, #12]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3714      	adds	r7, #20
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr

08012db6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012db6:	b480      	push	{r7}
 8012db8:	b083      	sub	sp, #12
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	607a      	str	r2, [r7, #4]
 8012dc8:	887a      	ldrh	r2, [r7, #2]
 8012dca:	b2d2      	uxtb	r2, r2
 8012dcc:	701a      	strb	r2, [r3, #0]
 8012dce:	887b      	ldrh	r3, [r7, #2]
 8012dd0:	0a1b      	lsrs	r3, r3, #8
 8012dd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	1c5a      	adds	r2, r3, #1
 8012dd8:	607a      	str	r2, [r7, #4]
 8012dda:	887a      	ldrh	r2, [r7, #2]
 8012ddc:	b2d2      	uxtb	r2, r2
 8012dde:	701a      	strb	r2, [r3, #0]
}
 8012de0:	bf00      	nop
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	683a      	ldr	r2, [r7, #0]
 8012dfe:	b2d2      	uxtb	r2, r2
 8012e00:	701a      	strb	r2, [r3, #0]
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	0a1b      	lsrs	r3, r3, #8
 8012e06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	1c5a      	adds	r2, r3, #1
 8012e0c:	607a      	str	r2, [r7, #4]
 8012e0e:	683a      	ldr	r2, [r7, #0]
 8012e10:	b2d2      	uxtb	r2, r2
 8012e12:	701a      	strb	r2, [r3, #0]
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	0a1b      	lsrs	r3, r3, #8
 8012e18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	1c5a      	adds	r2, r3, #1
 8012e1e:	607a      	str	r2, [r7, #4]
 8012e20:	683a      	ldr	r2, [r7, #0]
 8012e22:	b2d2      	uxtb	r2, r2
 8012e24:	701a      	strb	r2, [r3, #0]
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	0a1b      	lsrs	r3, r3, #8
 8012e2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	1c5a      	adds	r2, r3, #1
 8012e30:	607a      	str	r2, [r7, #4]
 8012e32:	683a      	ldr	r2, [r7, #0]
 8012e34:	b2d2      	uxtb	r2, r2
 8012e36:	701a      	strb	r2, [r3, #0]
}
 8012e38:	bf00      	nop
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012e44:	b480      	push	{r7}
 8012e46:	b087      	sub	sp, #28
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00d      	beq.n	8012e7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012e5e:	693a      	ldr	r2, [r7, #16]
 8012e60:	1c53      	adds	r3, r2, #1
 8012e62:	613b      	str	r3, [r7, #16]
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	1c59      	adds	r1, r3, #1
 8012e68:	6179      	str	r1, [r7, #20]
 8012e6a:	7812      	ldrb	r2, [r2, #0]
 8012e6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	3b01      	subs	r3, #1
 8012e72:	607b      	str	r3, [r7, #4]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1f1      	bne.n	8012e5e <mem_cpy+0x1a>
	}
}
 8012e7a:	bf00      	nop
 8012e7c:	371c      	adds	r7, #28
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012e86:	b480      	push	{r7}
 8012e88:	b087      	sub	sp, #28
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	60f8      	str	r0, [r7, #12]
 8012e8e:	60b9      	str	r1, [r7, #8]
 8012e90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	1c5a      	adds	r2, r3, #1
 8012e9a:	617a      	str	r2, [r7, #20]
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	b2d2      	uxtb	r2, r2
 8012ea0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	607b      	str	r3, [r7, #4]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1f3      	bne.n	8012e96 <mem_set+0x10>
}
 8012eae:	bf00      	nop
 8012eb0:	371c      	adds	r7, #28
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr

08012eba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012eba:	b480      	push	{r7}
 8012ebc:	b089      	sub	sp, #36	; 0x24
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	60f8      	str	r0, [r7, #12]
 8012ec2:	60b9      	str	r1, [r7, #8]
 8012ec4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	61fb      	str	r3, [r7, #28]
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	1c5a      	adds	r2, r3, #1
 8012ed6:	61fa      	str	r2, [r7, #28]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	4619      	mov	r1, r3
 8012edc:	69bb      	ldr	r3, [r7, #24]
 8012ede:	1c5a      	adds	r2, r3, #1
 8012ee0:	61ba      	str	r2, [r7, #24]
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	1acb      	subs	r3, r1, r3
 8012ee6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	3b01      	subs	r3, #1
 8012eec:	607b      	str	r3, [r7, #4]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <mem_cmp+0x40>
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d0eb      	beq.n	8012ed2 <mem_cmp+0x18>

	return r;
 8012efa:	697b      	ldr	r3, [r7, #20]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3724      	adds	r7, #36	; 0x24
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f12:	e002      	b.n	8012f1a <chk_chr+0x12>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	3301      	adds	r3, #1
 8012f18:	607b      	str	r3, [r7, #4]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d005      	beq.n	8012f2e <chk_chr+0x26>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	461a      	mov	r2, r3
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d1f2      	bne.n	8012f14 <chk_chr+0xc>
	return *str;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	781b      	ldrb	r3, [r3, #0]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr
	...

08012f40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	60bb      	str	r3, [r7, #8]
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	60fb      	str	r3, [r7, #12]
 8012f52:	e029      	b.n	8012fa8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012f54:	4a27      	ldr	r2, [pc, #156]	; (8012ff4 <chk_lock+0xb4>)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	011b      	lsls	r3, r3, #4
 8012f5a:	4413      	add	r3, r2
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d01d      	beq.n	8012f9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f62:	4a24      	ldr	r2, [pc, #144]	; (8012ff4 <chk_lock+0xb4>)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	011b      	lsls	r3, r3, #4
 8012f68:	4413      	add	r3, r2
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d116      	bne.n	8012fa2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012f74:	4a1f      	ldr	r2, [pc, #124]	; (8012ff4 <chk_lock+0xb4>)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	011b      	lsls	r3, r3, #4
 8012f7a:	4413      	add	r3, r2
 8012f7c:	3304      	adds	r3, #4
 8012f7e:	681a      	ldr	r2, [r3, #0]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d10c      	bne.n	8012fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f88:	4a1a      	ldr	r2, [pc, #104]	; (8012ff4 <chk_lock+0xb4>)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	011b      	lsls	r3, r3, #4
 8012f8e:	4413      	add	r3, r2
 8012f90:	3308      	adds	r3, #8
 8012f92:	681a      	ldr	r2, [r3, #0]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d102      	bne.n	8012fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f9c:	e007      	b.n	8012fae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	d9d2      	bls.n	8012f54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b02      	cmp	r3, #2
 8012fb2:	d109      	bne.n	8012fc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <chk_lock+0x80>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d101      	bne.n	8012fc4 <chk_lock+0x84>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	e010      	b.n	8012fe6 <chk_lock+0xa6>
 8012fc4:	2312      	movs	r3, #18
 8012fc6:	e00e      	b.n	8012fe6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d108      	bne.n	8012fe0 <chk_lock+0xa0>
 8012fce:	4a09      	ldr	r2, [pc, #36]	; (8012ff4 <chk_lock+0xb4>)
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	011b      	lsls	r3, r3, #4
 8012fd4:	4413      	add	r3, r2
 8012fd6:	330c      	adds	r3, #12
 8012fd8:	881b      	ldrh	r3, [r3, #0]
 8012fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fde:	d101      	bne.n	8012fe4 <chk_lock+0xa4>
 8012fe0:	2310      	movs	r3, #16
 8012fe2:	e000      	b.n	8012fe6 <chk_lock+0xa6>
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3714      	adds	r7, #20
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	20000c0c 	.word	0x20000c0c

08012ff8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012ffe:	2300      	movs	r3, #0
 8013000:	607b      	str	r3, [r7, #4]
 8013002:	e002      	b.n	801300a <enq_lock+0x12>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3301      	adds	r3, #1
 8013008:	607b      	str	r3, [r7, #4]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d806      	bhi.n	801301e <enq_lock+0x26>
 8013010:	4a09      	ldr	r2, [pc, #36]	; (8013038 <enq_lock+0x40>)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	011b      	lsls	r3, r3, #4
 8013016:	4413      	add	r3, r2
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d1f2      	bne.n	8013004 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2b02      	cmp	r3, #2
 8013022:	bf14      	ite	ne
 8013024:	2301      	movne	r3, #1
 8013026:	2300      	moveq	r3, #0
 8013028:	b2db      	uxtb	r3, r3
}
 801302a:	4618      	mov	r0, r3
 801302c:	370c      	adds	r7, #12
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr
 8013036:	bf00      	nop
 8013038:	20000c0c 	.word	0x20000c0c

0801303c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
 801304a:	e01f      	b.n	801308c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801304c:	4a41      	ldr	r2, [pc, #260]	; (8013154 <inc_lock+0x118>)
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	011b      	lsls	r3, r3, #4
 8013052:	4413      	add	r3, r2
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	429a      	cmp	r2, r3
 801305c:	d113      	bne.n	8013086 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801305e:	4a3d      	ldr	r2, [pc, #244]	; (8013154 <inc_lock+0x118>)
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	011b      	lsls	r3, r3, #4
 8013064:	4413      	add	r3, r2
 8013066:	3304      	adds	r3, #4
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801306e:	429a      	cmp	r2, r3
 8013070:	d109      	bne.n	8013086 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013072:	4a38      	ldr	r2, [pc, #224]	; (8013154 <inc_lock+0x118>)
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	011b      	lsls	r3, r3, #4
 8013078:	4413      	add	r3, r2
 801307a:	3308      	adds	r3, #8
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013082:	429a      	cmp	r2, r3
 8013084:	d006      	beq.n	8013094 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	3301      	adds	r3, #1
 801308a:	60fb      	str	r3, [r7, #12]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d9dc      	bls.n	801304c <inc_lock+0x10>
 8013092:	e000      	b.n	8013096 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013094:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2b02      	cmp	r3, #2
 801309a:	d132      	bne.n	8013102 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801309c:	2300      	movs	r3, #0
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	e002      	b.n	80130a8 <inc_lock+0x6c>
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	3301      	adds	r3, #1
 80130a6:	60fb      	str	r3, [r7, #12]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d806      	bhi.n	80130bc <inc_lock+0x80>
 80130ae:	4a29      	ldr	r2, [pc, #164]	; (8013154 <inc_lock+0x118>)
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	4413      	add	r3, r2
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d1f2      	bne.n	80130a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	2b02      	cmp	r3, #2
 80130c0:	d101      	bne.n	80130c6 <inc_lock+0x8a>
 80130c2:	2300      	movs	r3, #0
 80130c4:	e040      	b.n	8013148 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	4922      	ldr	r1, [pc, #136]	; (8013154 <inc_lock+0x118>)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	011b      	lsls	r3, r3, #4
 80130d0:	440b      	add	r3, r1
 80130d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	689a      	ldr	r2, [r3, #8]
 80130d8:	491e      	ldr	r1, [pc, #120]	; (8013154 <inc_lock+0x118>)
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	011b      	lsls	r3, r3, #4
 80130de:	440b      	add	r3, r1
 80130e0:	3304      	adds	r3, #4
 80130e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	695a      	ldr	r2, [r3, #20]
 80130e8:	491a      	ldr	r1, [pc, #104]	; (8013154 <inc_lock+0x118>)
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	011b      	lsls	r3, r3, #4
 80130ee:	440b      	add	r3, r1
 80130f0:	3308      	adds	r3, #8
 80130f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80130f4:	4a17      	ldr	r2, [pc, #92]	; (8013154 <inc_lock+0x118>)
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	011b      	lsls	r3, r3, #4
 80130fa:	4413      	add	r3, r2
 80130fc:	330c      	adds	r3, #12
 80130fe:	2200      	movs	r2, #0
 8013100:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d009      	beq.n	801311c <inc_lock+0xe0>
 8013108:	4a12      	ldr	r2, [pc, #72]	; (8013154 <inc_lock+0x118>)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	011b      	lsls	r3, r3, #4
 801310e:	4413      	add	r3, r2
 8013110:	330c      	adds	r3, #12
 8013112:	881b      	ldrh	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <inc_lock+0xe0>
 8013118:	2300      	movs	r3, #0
 801311a:	e015      	b.n	8013148 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d108      	bne.n	8013134 <inc_lock+0xf8>
 8013122:	4a0c      	ldr	r2, [pc, #48]	; (8013154 <inc_lock+0x118>)
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	011b      	lsls	r3, r3, #4
 8013128:	4413      	add	r3, r2
 801312a:	330c      	adds	r3, #12
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	3301      	adds	r3, #1
 8013130:	b29a      	uxth	r2, r3
 8013132:	e001      	b.n	8013138 <inc_lock+0xfc>
 8013134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013138:	4906      	ldr	r1, [pc, #24]	; (8013154 <inc_lock+0x118>)
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	011b      	lsls	r3, r3, #4
 801313e:	440b      	add	r3, r1
 8013140:	330c      	adds	r3, #12
 8013142:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3301      	adds	r3, #1
}
 8013148:	4618      	mov	r0, r3
 801314a:	3714      	adds	r7, #20
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr
 8013154:	20000c0c 	.word	0x20000c0c

08013158 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	3b01      	subs	r3, #1
 8013164:	607b      	str	r3, [r7, #4]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d825      	bhi.n	80131b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801316c:	4a17      	ldr	r2, [pc, #92]	; (80131cc <dec_lock+0x74>)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	011b      	lsls	r3, r3, #4
 8013172:	4413      	add	r3, r2
 8013174:	330c      	adds	r3, #12
 8013176:	881b      	ldrh	r3, [r3, #0]
 8013178:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801317a:	89fb      	ldrh	r3, [r7, #14]
 801317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013180:	d101      	bne.n	8013186 <dec_lock+0x2e>
 8013182:	2300      	movs	r3, #0
 8013184:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013186:	89fb      	ldrh	r3, [r7, #14]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d002      	beq.n	8013192 <dec_lock+0x3a>
 801318c:	89fb      	ldrh	r3, [r7, #14]
 801318e:	3b01      	subs	r3, #1
 8013190:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013192:	4a0e      	ldr	r2, [pc, #56]	; (80131cc <dec_lock+0x74>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	011b      	lsls	r3, r3, #4
 8013198:	4413      	add	r3, r2
 801319a:	330c      	adds	r3, #12
 801319c:	89fa      	ldrh	r2, [r7, #14]
 801319e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80131a0:	89fb      	ldrh	r3, [r7, #14]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d105      	bne.n	80131b2 <dec_lock+0x5a>
 80131a6:	4a09      	ldr	r2, [pc, #36]	; (80131cc <dec_lock+0x74>)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	011b      	lsls	r3, r3, #4
 80131ac:	4413      	add	r3, r2
 80131ae:	2200      	movs	r2, #0
 80131b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80131b2:	2300      	movs	r3, #0
 80131b4:	737b      	strb	r3, [r7, #13]
 80131b6:	e001      	b.n	80131bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80131b8:	2302      	movs	r3, #2
 80131ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80131bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3714      	adds	r7, #20
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	20000c0c 	.word	0x20000c0c

080131d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80131d8:	2300      	movs	r3, #0
 80131da:	60fb      	str	r3, [r7, #12]
 80131dc:	e010      	b.n	8013200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131de:	4a0d      	ldr	r2, [pc, #52]	; (8013214 <clear_lock+0x44>)
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	011b      	lsls	r3, r3, #4
 80131e4:	4413      	add	r3, r2
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d105      	bne.n	80131fa <clear_lock+0x2a>
 80131ee:	4a09      	ldr	r2, [pc, #36]	; (8013214 <clear_lock+0x44>)
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	011b      	lsls	r3, r3, #4
 80131f4:	4413      	add	r3, r2
 80131f6:	2200      	movs	r2, #0
 80131f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3301      	adds	r3, #1
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b01      	cmp	r3, #1
 8013204:	d9eb      	bls.n	80131de <clear_lock+0xe>
	}
}
 8013206:	bf00      	nop
 8013208:	3714      	adds	r7, #20
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr
 8013212:	bf00      	nop
 8013214:	20000c0c 	.word	0x20000c0c

08013218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b086      	sub	sp, #24
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013220:	2300      	movs	r3, #0
 8013222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	78db      	ldrb	r3, [r3, #3]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d034      	beq.n	8013296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	7858      	ldrb	r0, [r3, #1]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801323c:	2301      	movs	r3, #1
 801323e:	697a      	ldr	r2, [r7, #20]
 8013240:	f7ff fd40 	bl	8012cc4 <disk_write>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <sync_window+0x38>
			res = FR_DISK_ERR;
 801324a:	2301      	movs	r3, #1
 801324c:	73fb      	strb	r3, [r7, #15]
 801324e:	e022      	b.n	8013296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	1ad2      	subs	r2, r2, r3
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6a1b      	ldr	r3, [r3, #32]
 8013262:	429a      	cmp	r2, r3
 8013264:	d217      	bcs.n	8013296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	789b      	ldrb	r3, [r3, #2]
 801326a:	613b      	str	r3, [r7, #16]
 801326c:	e010      	b.n	8013290 <sync_window+0x78>
					wsect += fs->fsize;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6a1b      	ldr	r3, [r3, #32]
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	4413      	add	r3, r2
 8013276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	7858      	ldrb	r0, [r3, #1]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013282:	2301      	movs	r3, #1
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	f7ff fd1d 	bl	8012cc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	3b01      	subs	r3, #1
 801328e:	613b      	str	r3, [r7, #16]
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d8eb      	bhi.n	801326e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013296:	7bfb      	ldrb	r3, [r7, #15]
}
 8013298:	4618      	mov	r0, r3
 801329a:	3718      	adds	r7, #24
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80132aa:	2300      	movs	r3, #0
 80132ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d01b      	beq.n	80132f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7ff ffad 	bl	8013218 <sync_window>
 80132be:	4603      	mov	r3, r0
 80132c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80132c2:	7bfb      	ldrb	r3, [r7, #15]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d113      	bne.n	80132f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	7858      	ldrb	r0, [r3, #1]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132d2:	2301      	movs	r3, #1
 80132d4:	683a      	ldr	r2, [r7, #0]
 80132d6:	f7ff fcd5 	bl	8012c84 <disk_read>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d004      	beq.n	80132ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80132e0:	f04f 33ff 	mov.w	r3, #4294967295
 80132e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80132e6:	2301      	movs	r3, #1
 80132e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	683a      	ldr	r2, [r7, #0]
 80132ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80132f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
	...

080132fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff ff87 	bl	8013218 <sync_window>
 801330a:	4603      	mov	r3, r0
 801330c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801330e:	7bfb      	ldrb	r3, [r7, #15]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d158      	bne.n	80133c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	2b03      	cmp	r3, #3
 801331a:	d148      	bne.n	80133ae <sync_fs+0xb2>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	791b      	ldrb	r3, [r3, #4]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d144      	bne.n	80133ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	3338      	adds	r3, #56	; 0x38
 8013328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801332c:	2100      	movs	r1, #0
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fda9 	bl	8012e86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	3338      	adds	r3, #56	; 0x38
 8013338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801333c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013340:	4618      	mov	r0, r3
 8013342:	f7ff fd38 	bl	8012db6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	3338      	adds	r3, #56	; 0x38
 801334a:	4921      	ldr	r1, [pc, #132]	; (80133d0 <sync_fs+0xd4>)
 801334c:	4618      	mov	r0, r3
 801334e:	f7ff fd4d 	bl	8012dec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	3338      	adds	r3, #56	; 0x38
 8013356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801335a:	491e      	ldr	r1, [pc, #120]	; (80133d4 <sync_fs+0xd8>)
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff fd45 	bl	8012dec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	3338      	adds	r3, #56	; 0x38
 8013366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	695b      	ldr	r3, [r3, #20]
 801336e:	4619      	mov	r1, r3
 8013370:	4610      	mov	r0, r2
 8013372:	f7ff fd3b 	bl	8012dec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	3338      	adds	r3, #56	; 0x38
 801337a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	4619      	mov	r1, r3
 8013384:	4610      	mov	r0, r2
 8013386:	f7ff fd31 	bl	8012dec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	7858      	ldrb	r0, [r3, #1]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80133a2:	2301      	movs	r3, #1
 80133a4:	f7ff fc8e 	bl	8012cc4 <disk_write>
			fs->fsi_flag = 0;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2200      	movs	r2, #0
 80133ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	785b      	ldrb	r3, [r3, #1]
 80133b2:	2200      	movs	r2, #0
 80133b4:	2100      	movs	r1, #0
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff fca4 	bl	8012d04 <disk_ioctl>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d001      	beq.n	80133c6 <sync_fs+0xca>
 80133c2:	2301      	movs	r3, #1
 80133c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80133c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3710      	adds	r7, #16
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	41615252 	.word	0x41615252
 80133d4:	61417272 	.word	0x61417272

080133d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	3b02      	subs	r3, #2
 80133e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	69db      	ldr	r3, [r3, #28]
 80133ec:	3b02      	subs	r3, #2
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d301      	bcc.n	80133f8 <clust2sect+0x20>
 80133f4:	2300      	movs	r3, #0
 80133f6:	e008      	b.n	801340a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	895b      	ldrh	r3, [r3, #10]
 80133fc:	461a      	mov	r2, r3
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	fb03 f202 	mul.w	r2, r3, r2
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013408:	4413      	add	r3, r2
}
 801340a:	4618      	mov	r0, r3
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr

08013416 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b086      	sub	sp, #24
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d904      	bls.n	8013436 <get_fat+0x20>
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	69db      	ldr	r3, [r3, #28]
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	d302      	bcc.n	801343c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013436:	2301      	movs	r3, #1
 8013438:	617b      	str	r3, [r7, #20]
 801343a:	e08c      	b.n	8013556 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801343c:	f04f 33ff 	mov.w	r3, #4294967295
 8013440:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	2b02      	cmp	r3, #2
 8013448:	d045      	beq.n	80134d6 <get_fat+0xc0>
 801344a:	2b03      	cmp	r3, #3
 801344c:	d05d      	beq.n	801350a <get_fat+0xf4>
 801344e:	2b01      	cmp	r3, #1
 8013450:	d177      	bne.n	8013542 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	60fb      	str	r3, [r7, #12]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	085b      	lsrs	r3, r3, #1
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	4413      	add	r3, r2
 801345e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	0a5b      	lsrs	r3, r3, #9
 8013468:	4413      	add	r3, r2
 801346a:	4619      	mov	r1, r3
 801346c:	6938      	ldr	r0, [r7, #16]
 801346e:	f7ff ff17 	bl	80132a0 <move_window>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d167      	bne.n	8013548 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	1c5a      	adds	r2, r3, #1
 801347c:	60fa      	str	r2, [r7, #12]
 801347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013482:	693a      	ldr	r2, [r7, #16]
 8013484:	4413      	add	r3, r2
 8013486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801348a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	0a5b      	lsrs	r3, r3, #9
 8013494:	4413      	add	r3, r2
 8013496:	4619      	mov	r1, r3
 8013498:	6938      	ldr	r0, [r7, #16]
 801349a:	f7ff ff01 	bl	80132a0 <move_window>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d153      	bne.n	801354c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134aa:	693a      	ldr	r2, [r7, #16]
 80134ac:	4413      	add	r3, r2
 80134ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134b2:	021b      	lsls	r3, r3, #8
 80134b4:	461a      	mov	r2, r3
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	4313      	orrs	r3, r2
 80134ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	f003 0301 	and.w	r3, r3, #1
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d002      	beq.n	80134cc <get_fat+0xb6>
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	091b      	lsrs	r3, r3, #4
 80134ca:	e002      	b.n	80134d2 <get_fat+0xbc>
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80134d2:	617b      	str	r3, [r7, #20]
			break;
 80134d4:	e03f      	b.n	8013556 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	0a1b      	lsrs	r3, r3, #8
 80134de:	4413      	add	r3, r2
 80134e0:	4619      	mov	r1, r3
 80134e2:	6938      	ldr	r0, [r7, #16]
 80134e4:	f7ff fedc 	bl	80132a0 <move_window>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d130      	bne.n	8013550 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	005b      	lsls	r3, r3, #1
 80134f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80134fc:	4413      	add	r3, r2
 80134fe:	4618      	mov	r0, r3
 8013500:	f7ff fc1e 	bl	8012d40 <ld_word>
 8013504:	4603      	mov	r3, r0
 8013506:	617b      	str	r3, [r7, #20]
			break;
 8013508:	e025      	b.n	8013556 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	09db      	lsrs	r3, r3, #7
 8013512:	4413      	add	r3, r2
 8013514:	4619      	mov	r1, r3
 8013516:	6938      	ldr	r0, [r7, #16]
 8013518:	f7ff fec2 	bl	80132a0 <move_window>
 801351c:	4603      	mov	r3, r0
 801351e:	2b00      	cmp	r3, #0
 8013520:	d118      	bne.n	8013554 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013530:	4413      	add	r3, r2
 8013532:	4618      	mov	r0, r3
 8013534:	f7ff fc1c 	bl	8012d70 <ld_dword>
 8013538:	4603      	mov	r3, r0
 801353a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801353e:	617b      	str	r3, [r7, #20]
			break;
 8013540:	e009      	b.n	8013556 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013542:	2301      	movs	r3, #1
 8013544:	617b      	str	r3, [r7, #20]
 8013546:	e006      	b.n	8013556 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013548:	bf00      	nop
 801354a:	e004      	b.n	8013556 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801354c:	bf00      	nop
 801354e:	e002      	b.n	8013556 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013554:	bf00      	nop
		}
	}

	return val;
 8013556:	697b      	ldr	r3, [r7, #20]
}
 8013558:	4618      	mov	r0, r3
 801355a:	3718      	adds	r7, #24
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b089      	sub	sp, #36	; 0x24
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801356c:	2302      	movs	r3, #2
 801356e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	2b01      	cmp	r3, #1
 8013574:	f240 80d6 	bls.w	8013724 <put_fat+0x1c4>
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	69db      	ldr	r3, [r3, #28]
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	429a      	cmp	r2, r3
 8013580:	f080 80d0 	bcs.w	8013724 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	2b02      	cmp	r3, #2
 801358a:	d073      	beq.n	8013674 <put_fat+0x114>
 801358c:	2b03      	cmp	r3, #3
 801358e:	f000 8091 	beq.w	80136b4 <put_fat+0x154>
 8013592:	2b01      	cmp	r3, #1
 8013594:	f040 80c6 	bne.w	8013724 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	61bb      	str	r3, [r7, #24]
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	085b      	lsrs	r3, r3, #1
 80135a0:	69ba      	ldr	r2, [r7, #24]
 80135a2:	4413      	add	r3, r2
 80135a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	0a5b      	lsrs	r3, r3, #9
 80135ae:	4413      	add	r3, r2
 80135b0:	4619      	mov	r1, r3
 80135b2:	68f8      	ldr	r0, [r7, #12]
 80135b4:	f7ff fe74 	bl	80132a0 <move_window>
 80135b8:	4603      	mov	r3, r0
 80135ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135bc:	7ffb      	ldrb	r3, [r7, #31]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f040 80a9 	bne.w	8013716 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	1c59      	adds	r1, r3, #1
 80135ce:	61b9      	str	r1, [r7, #24]
 80135d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135d4:	4413      	add	r3, r2
 80135d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	f003 0301 	and.w	r3, r3, #1
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00d      	beq.n	80135fe <put_fat+0x9e>
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	b25b      	sxtb	r3, r3
 80135e8:	f003 030f 	and.w	r3, r3, #15
 80135ec:	b25a      	sxtb	r2, r3
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	011b      	lsls	r3, r3, #4
 80135f4:	b25b      	sxtb	r3, r3
 80135f6:	4313      	orrs	r3, r2
 80135f8:	b25b      	sxtb	r3, r3
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	e001      	b.n	8013602 <put_fat+0xa2>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	b2db      	uxtb	r3, r3
 8013602:	697a      	ldr	r2, [r7, #20]
 8013604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2201      	movs	r2, #1
 801360a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	0a5b      	lsrs	r3, r3, #9
 8013614:	4413      	add	r3, r2
 8013616:	4619      	mov	r1, r3
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff fe41 	bl	80132a0 <move_window>
 801361e:	4603      	mov	r3, r0
 8013620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013622:	7ffb      	ldrb	r3, [r7, #31]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d178      	bne.n	801371a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013634:	4413      	add	r3, r2
 8013636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	f003 0301 	and.w	r3, r3, #1
 801363e:	2b00      	cmp	r3, #0
 8013640:	d003      	beq.n	801364a <put_fat+0xea>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	091b      	lsrs	r3, r3, #4
 8013646:	b2db      	uxtb	r3, r3
 8013648:	e00e      	b.n	8013668 <put_fat+0x108>
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	b25b      	sxtb	r3, r3
 8013650:	f023 030f 	bic.w	r3, r3, #15
 8013654:	b25a      	sxtb	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	0a1b      	lsrs	r3, r3, #8
 801365a:	b25b      	sxtb	r3, r3
 801365c:	f003 030f 	and.w	r3, r3, #15
 8013660:	b25b      	sxtb	r3, r3
 8013662:	4313      	orrs	r3, r2
 8013664:	b25b      	sxtb	r3, r3
 8013666:	b2db      	uxtb	r3, r3
 8013668:	697a      	ldr	r2, [r7, #20]
 801366a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2201      	movs	r2, #1
 8013670:	70da      	strb	r2, [r3, #3]
			break;
 8013672:	e057      	b.n	8013724 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	0a1b      	lsrs	r3, r3, #8
 801367c:	4413      	add	r3, r2
 801367e:	4619      	mov	r1, r3
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f7ff fe0d 	bl	80132a0 <move_window>
 8013686:	4603      	mov	r3, r0
 8013688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801368a:	7ffb      	ldrb	r3, [r7, #31]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d146      	bne.n	801371e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801369e:	4413      	add	r3, r2
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	b292      	uxth	r2, r2
 80136a4:	4611      	mov	r1, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7ff fb85 	bl	8012db6 <st_word>
			fs->wflag = 1;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2201      	movs	r2, #1
 80136b0:	70da      	strb	r2, [r3, #3]
			break;
 80136b2:	e037      	b.n	8013724 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	09db      	lsrs	r3, r3, #7
 80136bc:	4413      	add	r3, r2
 80136be:	4619      	mov	r1, r3
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	f7ff fded 	bl	80132a0 <move_window>
 80136c6:	4603      	mov	r3, r0
 80136c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136ca:	7ffb      	ldrb	r3, [r7, #31]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d128      	bne.n	8013722 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80136e4:	4413      	add	r3, r2
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7ff fb42 	bl	8012d70 <ld_dword>
 80136ec:	4603      	mov	r3, r0
 80136ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80136f2:	4323      	orrs	r3, r4
 80136f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013704:	4413      	add	r3, r2
 8013706:	6879      	ldr	r1, [r7, #4]
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff fb6f 	bl	8012dec <st_dword>
			fs->wflag = 1;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2201      	movs	r2, #1
 8013712:	70da      	strb	r2, [r3, #3]
			break;
 8013714:	e006      	b.n	8013724 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013716:	bf00      	nop
 8013718:	e004      	b.n	8013724 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801371a:	bf00      	nop
 801371c:	e002      	b.n	8013724 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801371e:	bf00      	nop
 8013720:	e000      	b.n	8013724 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013722:	bf00      	nop
		}
	}
	return res;
 8013724:	7ffb      	ldrb	r3, [r7, #31]
}
 8013726:	4618      	mov	r0, r3
 8013728:	3724      	adds	r7, #36	; 0x24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd90      	pop	{r4, r7, pc}

0801372e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b088      	sub	sp, #32
 8013732:	af00      	add	r7, sp, #0
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801373a:	2300      	movs	r3, #0
 801373c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d904      	bls.n	8013754 <remove_chain+0x26>
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	69db      	ldr	r3, [r3, #28]
 801374e:	68ba      	ldr	r2, [r7, #8]
 8013750:	429a      	cmp	r2, r3
 8013752:	d301      	bcc.n	8013758 <remove_chain+0x2a>
 8013754:	2302      	movs	r3, #2
 8013756:	e04b      	b.n	80137f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d00c      	beq.n	8013778 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801375e:	f04f 32ff 	mov.w	r2, #4294967295
 8013762:	6879      	ldr	r1, [r7, #4]
 8013764:	69b8      	ldr	r0, [r7, #24]
 8013766:	f7ff fefb 	bl	8013560 <put_fat>
 801376a:	4603      	mov	r3, r0
 801376c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801376e:	7ffb      	ldrb	r3, [r7, #31]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d001      	beq.n	8013778 <remove_chain+0x4a>
 8013774:	7ffb      	ldrb	r3, [r7, #31]
 8013776:	e03b      	b.n	80137f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013778:	68b9      	ldr	r1, [r7, #8]
 801377a:	68f8      	ldr	r0, [r7, #12]
 801377c:	f7ff fe4b 	bl	8013416 <get_fat>
 8013780:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d031      	beq.n	80137ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	2b01      	cmp	r3, #1
 801378c:	d101      	bne.n	8013792 <remove_chain+0x64>
 801378e:	2302      	movs	r3, #2
 8013790:	e02e      	b.n	80137f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013798:	d101      	bne.n	801379e <remove_chain+0x70>
 801379a:	2301      	movs	r3, #1
 801379c:	e028      	b.n	80137f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801379e:	2200      	movs	r2, #0
 80137a0:	68b9      	ldr	r1, [r7, #8]
 80137a2:	69b8      	ldr	r0, [r7, #24]
 80137a4:	f7ff fedc 	bl	8013560 <put_fat>
 80137a8:	4603      	mov	r3, r0
 80137aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80137ac:	7ffb      	ldrb	r3, [r7, #31]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d001      	beq.n	80137b6 <remove_chain+0x88>
 80137b2:	7ffb      	ldrb	r3, [r7, #31]
 80137b4:	e01c      	b.n	80137f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	695a      	ldr	r2, [r3, #20]
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	69db      	ldr	r3, [r3, #28]
 80137be:	3b02      	subs	r3, #2
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d20b      	bcs.n	80137dc <remove_chain+0xae>
			fs->free_clst++;
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	695b      	ldr	r3, [r3, #20]
 80137c8:	1c5a      	adds	r2, r3, #1
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	791b      	ldrb	r3, [r3, #4]
 80137d2:	f043 0301 	orr.w	r3, r3, #1
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	69db      	ldr	r3, [r3, #28]
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d3c6      	bcc.n	8013778 <remove_chain+0x4a>
 80137ea:	e000      	b.n	80137ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80137ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80137ee:	2300      	movs	r3, #0
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3720      	adds	r7, #32
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b088      	sub	sp, #32
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10d      	bne.n	801382a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	691b      	ldr	r3, [r3, #16]
 8013812:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d004      	beq.n	8013824 <create_chain+0x2c>
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	69db      	ldr	r3, [r3, #28]
 801381e:	69ba      	ldr	r2, [r7, #24]
 8013820:	429a      	cmp	r2, r3
 8013822:	d31b      	bcc.n	801385c <create_chain+0x64>
 8013824:	2301      	movs	r3, #1
 8013826:	61bb      	str	r3, [r7, #24]
 8013828:	e018      	b.n	801385c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801382a:	6839      	ldr	r1, [r7, #0]
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7ff fdf2 	bl	8013416 <get_fat>
 8013832:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d801      	bhi.n	801383e <create_chain+0x46>
 801383a:	2301      	movs	r3, #1
 801383c:	e070      	b.n	8013920 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013844:	d101      	bne.n	801384a <create_chain+0x52>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	e06a      	b.n	8013920 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	69db      	ldr	r3, [r3, #28]
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	429a      	cmp	r2, r3
 8013852:	d201      	bcs.n	8013858 <create_chain+0x60>
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	e063      	b.n	8013920 <create_chain+0x128>
		scl = clst;
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	3301      	adds	r3, #1
 8013864:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	69db      	ldr	r3, [r3, #28]
 801386a:	69fa      	ldr	r2, [r7, #28]
 801386c:	429a      	cmp	r2, r3
 801386e:	d307      	bcc.n	8013880 <create_chain+0x88>
				ncl = 2;
 8013870:	2302      	movs	r3, #2
 8013872:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	429a      	cmp	r2, r3
 801387a:	d901      	bls.n	8013880 <create_chain+0x88>
 801387c:	2300      	movs	r3, #0
 801387e:	e04f      	b.n	8013920 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013880:	69f9      	ldr	r1, [r7, #28]
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff fdc7 	bl	8013416 <get_fat>
 8013888:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00e      	beq.n	80138ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b01      	cmp	r3, #1
 8013894:	d003      	beq.n	801389e <create_chain+0xa6>
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389c:	d101      	bne.n	80138a2 <create_chain+0xaa>
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	e03e      	b.n	8013920 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80138a2:	69fa      	ldr	r2, [r7, #28]
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d1da      	bne.n	8013860 <create_chain+0x68>
 80138aa:	2300      	movs	r3, #0
 80138ac:	e038      	b.n	8013920 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80138ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80138b0:	f04f 32ff 	mov.w	r2, #4294967295
 80138b4:	69f9      	ldr	r1, [r7, #28]
 80138b6:	6938      	ldr	r0, [r7, #16]
 80138b8:	f7ff fe52 	bl	8013560 <put_fat>
 80138bc:	4603      	mov	r3, r0
 80138be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d109      	bne.n	80138da <create_chain+0xe2>
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d006      	beq.n	80138da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80138cc:	69fa      	ldr	r2, [r7, #28]
 80138ce:	6839      	ldr	r1, [r7, #0]
 80138d0:	6938      	ldr	r0, [r7, #16]
 80138d2:	f7ff fe45 	bl	8013560 <put_fat>
 80138d6:	4603      	mov	r3, r0
 80138d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80138da:	7dfb      	ldrb	r3, [r7, #23]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d116      	bne.n	801390e <create_chain+0x116>
		fs->last_clst = ncl;
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	69fa      	ldr	r2, [r7, #28]
 80138e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	695a      	ldr	r2, [r3, #20]
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	69db      	ldr	r3, [r3, #28]
 80138ee:	3b02      	subs	r3, #2
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d804      	bhi.n	80138fe <create_chain+0x106>
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	695b      	ldr	r3, [r3, #20]
 80138f8:	1e5a      	subs	r2, r3, #1
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	791b      	ldrb	r3, [r3, #4]
 8013902:	f043 0301 	orr.w	r3, r3, #1
 8013906:	b2da      	uxtb	r2, r3
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	711a      	strb	r2, [r3, #4]
 801390c:	e007      	b.n	801391e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801390e:	7dfb      	ldrb	r3, [r7, #23]
 8013910:	2b01      	cmp	r3, #1
 8013912:	d102      	bne.n	801391a <create_chain+0x122>
 8013914:	f04f 33ff 	mov.w	r3, #4294967295
 8013918:	e000      	b.n	801391c <create_chain+0x124>
 801391a:	2301      	movs	r3, #1
 801391c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801391e:	69fb      	ldr	r3, [r7, #28]
}
 8013920:	4618      	mov	r0, r3
 8013922:	3720      	adds	r7, #32
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013928:	b480      	push	{r7}
 801392a:	b087      	sub	sp, #28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393c:	3304      	adds	r3, #4
 801393e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	0a5b      	lsrs	r3, r3, #9
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	8952      	ldrh	r2, [r2, #10]
 8013948:	fbb3 f3f2 	udiv	r3, r3, r2
 801394c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	1d1a      	adds	r2, r3, #4
 8013952:	613a      	str	r2, [r7, #16]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d101      	bne.n	8013962 <clmt_clust+0x3a>
 801395e:	2300      	movs	r3, #0
 8013960:	e010      	b.n	8013984 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013962:	697a      	ldr	r2, [r7, #20]
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	429a      	cmp	r2, r3
 8013968:	d307      	bcc.n	801397a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801396a:	697a      	ldr	r2, [r7, #20]
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	1ad3      	subs	r3, r2, r3
 8013970:	617b      	str	r3, [r7, #20]
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	3304      	adds	r3, #4
 8013976:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013978:	e7e9      	b.n	801394e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801397a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	4413      	add	r3, r2
}
 8013984:	4618      	mov	r0, r3
 8013986:	371c      	adds	r7, #28
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b086      	sub	sp, #24
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80139a6:	d204      	bcs.n	80139b2 <dir_sdi+0x22>
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	f003 031f 	and.w	r3, r3, #31
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d001      	beq.n	80139b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80139b2:	2302      	movs	r3, #2
 80139b4:	e063      	b.n	8013a7e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	689b      	ldr	r3, [r3, #8]
 80139c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d106      	bne.n	80139d6 <dir_sdi+0x46>
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d902      	bls.n	80139d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d10c      	bne.n	80139f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	095b      	lsrs	r3, r3, #5
 80139e0:	693a      	ldr	r2, [r7, #16]
 80139e2:	8912      	ldrh	r2, [r2, #8]
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d301      	bcc.n	80139ec <dir_sdi+0x5c>
 80139e8:	2302      	movs	r3, #2
 80139ea:	e048      	b.n	8013a7e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	61da      	str	r2, [r3, #28]
 80139f4:	e029      	b.n	8013a4a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	895b      	ldrh	r3, [r3, #10]
 80139fa:	025b      	lsls	r3, r3, #9
 80139fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80139fe:	e019      	b.n	8013a34 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6979      	ldr	r1, [r7, #20]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ff fd06 	bl	8013416 <get_fat>
 8013a0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a12:	d101      	bne.n	8013a18 <dir_sdi+0x88>
 8013a14:	2301      	movs	r3, #1
 8013a16:	e032      	b.n	8013a7e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d904      	bls.n	8013a28 <dir_sdi+0x98>
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	697a      	ldr	r2, [r7, #20]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d301      	bcc.n	8013a2c <dir_sdi+0x9c>
 8013a28:	2302      	movs	r3, #2
 8013a2a:	e028      	b.n	8013a7e <dir_sdi+0xee>
			ofs -= csz;
 8013a2c:	683a      	ldr	r2, [r7, #0]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a34:	683a      	ldr	r2, [r7, #0]
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d2e1      	bcs.n	8013a00 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013a3c:	6979      	ldr	r1, [r7, #20]
 8013a3e:	6938      	ldr	r0, [r7, #16]
 8013a40:	f7ff fcca 	bl	80133d8 <clust2sect>
 8013a44:	4602      	mov	r2, r0
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	697a      	ldr	r2, [r7, #20]
 8013a4e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	69db      	ldr	r3, [r3, #28]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d101      	bne.n	8013a5c <dir_sdi+0xcc>
 8013a58:	2302      	movs	r3, #2
 8013a5a:	e010      	b.n	8013a7e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	69da      	ldr	r2, [r3, #28]
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	0a5b      	lsrs	r3, r3, #9
 8013a64:	441a      	add	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a76:	441a      	add	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3718      	adds	r7, #24
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b086      	sub	sp, #24
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	695b      	ldr	r3, [r3, #20]
 8013a9a:	3320      	adds	r3, #32
 8013a9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	69db      	ldr	r3, [r3, #28]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d003      	beq.n	8013aae <dir_next+0x28>
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013aac:	d301      	bcc.n	8013ab2 <dir_next+0x2c>
 8013aae:	2304      	movs	r3, #4
 8013ab0:	e0aa      	b.n	8013c08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f040 8098 	bne.w	8013bee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	69db      	ldr	r3, [r3, #28]
 8013ac2:	1c5a      	adds	r2, r3, #1
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	699b      	ldr	r3, [r3, #24]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10b      	bne.n	8013ae8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	095b      	lsrs	r3, r3, #5
 8013ad4:	68fa      	ldr	r2, [r7, #12]
 8013ad6:	8912      	ldrh	r2, [r2, #8]
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	f0c0 8088 	bcc.w	8013bee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	61da      	str	r2, [r3, #28]
 8013ae4:	2304      	movs	r3, #4
 8013ae6:	e08f      	b.n	8013c08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	0a5b      	lsrs	r3, r3, #9
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	8952      	ldrh	r2, [r2, #10]
 8013af0:	3a01      	subs	r2, #1
 8013af2:	4013      	ands	r3, r2
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d17a      	bne.n	8013bee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	699b      	ldr	r3, [r3, #24]
 8013afe:	4619      	mov	r1, r3
 8013b00:	4610      	mov	r0, r2
 8013b02:	f7ff fc88 	bl	8013416 <get_fat>
 8013b06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2b01      	cmp	r3, #1
 8013b0c:	d801      	bhi.n	8013b12 <dir_next+0x8c>
 8013b0e:	2302      	movs	r3, #2
 8013b10:	e07a      	b.n	8013c08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b18:	d101      	bne.n	8013b1e <dir_next+0x98>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e074      	b.n	8013c08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	69db      	ldr	r3, [r3, #28]
 8013b22:	697a      	ldr	r2, [r7, #20]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d358      	bcc.n	8013bda <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d104      	bne.n	8013b38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2200      	movs	r2, #0
 8013b32:	61da      	str	r2, [r3, #28]
 8013b34:	2304      	movs	r3, #4
 8013b36:	e067      	b.n	8013c08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	4619      	mov	r1, r3
 8013b40:	4610      	mov	r0, r2
 8013b42:	f7ff fe59 	bl	80137f8 <create_chain>
 8013b46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d101      	bne.n	8013b52 <dir_next+0xcc>
 8013b4e:	2307      	movs	r3, #7
 8013b50:	e05a      	b.n	8013c08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d101      	bne.n	8013b5c <dir_next+0xd6>
 8013b58:	2302      	movs	r3, #2
 8013b5a:	e055      	b.n	8013c08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b62:	d101      	bne.n	8013b68 <dir_next+0xe2>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e04f      	b.n	8013c08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f7ff fb55 	bl	8013218 <sync_window>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <dir_next+0xf2>
 8013b74:	2301      	movs	r3, #1
 8013b76:	e047      	b.n	8013c08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	3338      	adds	r3, #56	; 0x38
 8013b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b80:	2100      	movs	r1, #0
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff f97f 	bl	8012e86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b88:	2300      	movs	r3, #0
 8013b8a:	613b      	str	r3, [r7, #16]
 8013b8c:	6979      	ldr	r1, [r7, #20]
 8013b8e:	68f8      	ldr	r0, [r7, #12]
 8013b90:	f7ff fc22 	bl	80133d8 <clust2sect>
 8013b94:	4602      	mov	r2, r0
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	635a      	str	r2, [r3, #52]	; 0x34
 8013b9a:	e012      	b.n	8013bc2 <dir_next+0x13c>
						fs->wflag = 1;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f7ff fb38 	bl	8013218 <sync_window>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d001      	beq.n	8013bb2 <dir_next+0x12c>
 8013bae:	2301      	movs	r3, #1
 8013bb0:	e02a      	b.n	8013c08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	613b      	str	r3, [r7, #16]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bbc:	1c5a      	adds	r2, r3, #1
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	895b      	ldrh	r3, [r3, #10]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d3e6      	bcc.n	8013b9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	1ad2      	subs	r2, r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	697a      	ldr	r2, [r7, #20]
 8013bde:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013be0:	6979      	ldr	r1, [r7, #20]
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	f7ff fbf8 	bl	80133d8 <clust2sect>
 8013be8:	4602      	mov	r2, r0
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c00:	441a      	add	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c06:	2300      	movs	r3, #0
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3718      	adds	r7, #24
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013c20:	2100      	movs	r1, #0
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7ff feb4 	bl	8013990 <dir_sdi>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c2c:	7dfb      	ldrb	r3, [r7, #23]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d12b      	bne.n	8013c8a <dir_alloc+0x7a>
		n = 0;
 8013c32:	2300      	movs	r3, #0
 8013c34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	69db      	ldr	r3, [r3, #28]
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f7ff fb2f 	bl	80132a0 <move_window>
 8013c42:	4603      	mov	r3, r0
 8013c44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013c46:	7dfb      	ldrb	r3, [r7, #23]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d11d      	bne.n	8013c88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a1b      	ldr	r3, [r3, #32]
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	2be5      	cmp	r3, #229	; 0xe5
 8013c54:	d004      	beq.n	8013c60 <dir_alloc+0x50>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6a1b      	ldr	r3, [r3, #32]
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d107      	bne.n	8013c70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	3301      	adds	r3, #1
 8013c64:	613b      	str	r3, [r7, #16]
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d102      	bne.n	8013c74 <dir_alloc+0x64>
 8013c6e:	e00c      	b.n	8013c8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013c70:	2300      	movs	r3, #0
 8013c72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013c74:	2101      	movs	r1, #1
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7ff ff05 	bl	8013a86 <dir_next>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013c80:	7dfb      	ldrb	r3, [r7, #23]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d0d7      	beq.n	8013c36 <dir_alloc+0x26>
 8013c86:	e000      	b.n	8013c8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013c88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013c8a:	7dfb      	ldrb	r3, [r7, #23]
 8013c8c:	2b04      	cmp	r3, #4
 8013c8e:	d101      	bne.n	8013c94 <dir_alloc+0x84>
 8013c90:	2307      	movs	r3, #7
 8013c92:	75fb      	strb	r3, [r7, #23]
	return res;
 8013c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3718      	adds	r7, #24
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b084      	sub	sp, #16
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
 8013ca6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	331a      	adds	r3, #26
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7ff f847 	bl	8012d40 <ld_word>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b03      	cmp	r3, #3
 8013cbc:	d109      	bne.n	8013cd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	3314      	adds	r3, #20
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7ff f83c 	bl	8012d40 <ld_word>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	041b      	lsls	r3, r3, #16
 8013ccc:	68fa      	ldr	r2, [r7, #12]
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3710      	adds	r7, #16
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	331a      	adds	r3, #26
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	b292      	uxth	r2, r2
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff f85f 	bl	8012db6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	2b03      	cmp	r3, #3
 8013cfe:	d109      	bne.n	8013d14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	f103 0214 	add.w	r2, r3, #20
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	0c1b      	lsrs	r3, r3, #16
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4610      	mov	r0, r2
 8013d10:	f7ff f851 	bl	8012db6 <st_word>
	}
}
 8013d14:	bf00      	nop
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013d1c:	b590      	push	{r4, r7, lr}
 8013d1e:	b087      	sub	sp, #28
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	331a      	adds	r3, #26
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff f808 	bl	8012d40 <ld_word>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <cmp_lfn+0x1e>
 8013d36:	2300      	movs	r3, #0
 8013d38:	e059      	b.n	8013dee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d42:	1e5a      	subs	r2, r3, #1
 8013d44:	4613      	mov	r3, r2
 8013d46:	005b      	lsls	r3, r3, #1
 8013d48:	4413      	add	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	4413      	add	r3, r2
 8013d4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013d50:	2301      	movs	r3, #1
 8013d52:	81fb      	strh	r3, [r7, #14]
 8013d54:	2300      	movs	r3, #0
 8013d56:	613b      	str	r3, [r7, #16]
 8013d58:	e033      	b.n	8013dc2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013d5a:	4a27      	ldr	r2, [pc, #156]	; (8013df8 <cmp_lfn+0xdc>)
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	4413      	add	r3, r2
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	461a      	mov	r2, r3
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	4413      	add	r3, r2
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fe ffe9 	bl	8012d40 <ld_word>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013d72:	89fb      	ldrh	r3, [r7, #14]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d01a      	beq.n	8013dae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8013d7c:	d812      	bhi.n	8013da4 <cmp_lfn+0x88>
 8013d7e:	89bb      	ldrh	r3, [r7, #12]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f002 fc81 	bl	8016688 <ff_wtoupper>
 8013d86:	4603      	mov	r3, r0
 8013d88:	461c      	mov	r4, r3
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	1c5a      	adds	r2, r3, #1
 8013d8e:	617a      	str	r2, [r7, #20]
 8013d90:	005b      	lsls	r3, r3, #1
 8013d92:	687a      	ldr	r2, [r7, #4]
 8013d94:	4413      	add	r3, r2
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f002 fc75 	bl	8016688 <ff_wtoupper>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	429c      	cmp	r4, r3
 8013da2:	d001      	beq.n	8013da8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013da4:	2300      	movs	r3, #0
 8013da6:	e022      	b.n	8013dee <cmp_lfn+0xd2>
			}
			wc = uc;
 8013da8:	89bb      	ldrh	r3, [r7, #12]
 8013daa:	81fb      	strh	r3, [r7, #14]
 8013dac:	e006      	b.n	8013dbc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013dae:	89bb      	ldrh	r3, [r7, #12]
 8013db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d001      	beq.n	8013dbc <cmp_lfn+0xa0>
 8013db8:	2300      	movs	r3, #0
 8013dba:	e018      	b.n	8013dee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	613b      	str	r3, [r7, #16]
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	2b0c      	cmp	r3, #12
 8013dc6:	d9c8      	bls.n	8013d5a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00b      	beq.n	8013dec <cmp_lfn+0xd0>
 8013dd4:	89fb      	ldrh	r3, [r7, #14]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d008      	beq.n	8013dec <cmp_lfn+0xd0>
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	005b      	lsls	r3, r3, #1
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	4413      	add	r3, r2
 8013de2:	881b      	ldrh	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d001      	beq.n	8013dec <cmp_lfn+0xd0>
 8013de8:	2300      	movs	r3, #0
 8013dea:	e000      	b.n	8013dee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013dec:	2301      	movs	r3, #1
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	371c      	adds	r7, #28
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd90      	pop	{r4, r7, pc}
 8013df6:	bf00      	nop
 8013df8:	0801b9c0 	.word	0x0801b9c0

08013dfc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b088      	sub	sp, #32
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	4611      	mov	r1, r2
 8013e08:	461a      	mov	r2, r3
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	71fb      	strb	r3, [r7, #7]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	330d      	adds	r3, #13
 8013e16:	79ba      	ldrb	r2, [r7, #6]
 8013e18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	330b      	adds	r3, #11
 8013e1e:	220f      	movs	r2, #15
 8013e20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	330c      	adds	r3, #12
 8013e26:	2200      	movs	r2, #0
 8013e28:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	331a      	adds	r3, #26
 8013e2e:	2100      	movs	r1, #0
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fe ffc0 	bl	8012db6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013e36:	79fb      	ldrb	r3, [r7, #7]
 8013e38:	1e5a      	subs	r2, r3, #1
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	009b      	lsls	r3, r3, #2
 8013e42:	4413      	add	r3, r2
 8013e44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013e46:	2300      	movs	r3, #0
 8013e48:	82fb      	strh	r3, [r7, #22]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013e4e:	8afb      	ldrh	r3, [r7, #22]
 8013e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e54:	4293      	cmp	r3, r2
 8013e56:	d007      	beq.n	8013e68 <put_lfn+0x6c>
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	1c5a      	adds	r2, r3, #1
 8013e5c:	61fa      	str	r2, [r7, #28]
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	4413      	add	r3, r2
 8013e64:	881b      	ldrh	r3, [r3, #0]
 8013e66:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013e68:	4a17      	ldr	r2, [pc, #92]	; (8013ec8 <put_lfn+0xcc>)
 8013e6a:	69bb      	ldr	r3, [r7, #24]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	461a      	mov	r2, r3
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	4413      	add	r3, r2
 8013e76:	8afa      	ldrh	r2, [r7, #22]
 8013e78:	4611      	mov	r1, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fe ff9b 	bl	8012db6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013e80:	8afb      	ldrh	r3, [r7, #22]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d102      	bne.n	8013e8c <put_lfn+0x90>
 8013e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e8a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	3301      	adds	r3, #1
 8013e90:	61bb      	str	r3, [r7, #24]
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	2b0c      	cmp	r3, #12
 8013e96:	d9da      	bls.n	8013e4e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013e98:	8afb      	ldrh	r3, [r7, #22]
 8013e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d006      	beq.n	8013eb0 <put_lfn+0xb4>
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	881b      	ldrh	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d103      	bne.n	8013eb8 <put_lfn+0xbc>
 8013eb0:	79fb      	ldrb	r3, [r7, #7]
 8013eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eb6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	79fa      	ldrb	r2, [r7, #7]
 8013ebc:	701a      	strb	r2, [r3, #0]
}
 8013ebe:	bf00      	nop
 8013ec0:	3720      	adds	r7, #32
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	0801b9c0 	.word	0x0801b9c0

08013ecc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b08c      	sub	sp, #48	; 0x30
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
 8013ed8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013eda:	220b      	movs	r2, #11
 8013edc:	68b9      	ldr	r1, [r7, #8]
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f7fe ffb0 	bl	8012e44 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b05      	cmp	r3, #5
 8013ee8:	d92b      	bls.n	8013f42 <gen_numname+0x76>
		sr = seq;
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013eee:	e022      	b.n	8013f36 <gen_numname+0x6a>
			wc = *lfn++;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	1c9a      	adds	r2, r3, #2
 8013ef4:	607a      	str	r2, [r7, #4]
 8013ef6:	881b      	ldrh	r3, [r3, #0]
 8013ef8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8013efa:	2300      	movs	r3, #0
 8013efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8013efe:	e017      	b.n	8013f30 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	005a      	lsls	r2, r3, #1
 8013f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f06:	f003 0301 	and.w	r3, r3, #1
 8013f0a:	4413      	add	r3, r2
 8013f0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f10:	085b      	lsrs	r3, r3, #1
 8013f12:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d005      	beq.n	8013f2a <gen_numname+0x5e>
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8013f24:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013f28:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f32:	2b0f      	cmp	r3, #15
 8013f34:	d9e4      	bls.n	8013f00 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	881b      	ldrh	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d1d8      	bne.n	8013ef0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013f42:	2307      	movs	r3, #7
 8013f44:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	f003 030f 	and.w	r3, r3, #15
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	3330      	adds	r3, #48	; 0x30
 8013f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f5a:	2b39      	cmp	r3, #57	; 0x39
 8013f5c:	d904      	bls.n	8013f68 <gen_numname+0x9c>
 8013f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f62:	3307      	adds	r3, #7
 8013f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6a:	1e5a      	subs	r2, r3, #1
 8013f6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8013f6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f72:	4413      	add	r3, r2
 8013f74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f78:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	091b      	lsrs	r3, r3, #4
 8013f80:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1de      	bne.n	8013f46 <gen_numname+0x7a>
	ns[i] = '~';
 8013f88:	f107 0214 	add.w	r2, r7, #20
 8013f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8e:	4413      	add	r3, r2
 8013f90:	227e      	movs	r2, #126	; 0x7e
 8013f92:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013f94:	2300      	movs	r3, #0
 8013f96:	627b      	str	r3, [r7, #36]	; 0x24
 8013f98:	e002      	b.n	8013fa0 <gen_numname+0xd4>
 8013f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8013fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d205      	bcs.n	8013fb4 <gen_numname+0xe8>
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fac:	4413      	add	r3, r2
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b20      	cmp	r3, #32
 8013fb2:	d1f2      	bne.n	8013f9a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb6:	2b07      	cmp	r3, #7
 8013fb8:	d808      	bhi.n	8013fcc <gen_numname+0x100>
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	1c5a      	adds	r2, r3, #1
 8013fbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8013fc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013fca:	e000      	b.n	8013fce <gen_numname+0x102>
 8013fcc:	2120      	movs	r1, #32
 8013fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd0:	1c5a      	adds	r2, r3, #1
 8013fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	460a      	mov	r2, r1
 8013fda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fde:	2b07      	cmp	r3, #7
 8013fe0:	d9e8      	bls.n	8013fb4 <gen_numname+0xe8>
}
 8013fe2:	bf00      	nop
 8013fe4:	3730      	adds	r7, #48	; 0x30
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013fea:	b480      	push	{r7}
 8013fec:	b085      	sub	sp, #20
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013ff6:	230b      	movs	r3, #11
 8013ff8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013ffa:	7bfb      	ldrb	r3, [r7, #15]
 8013ffc:	b2da      	uxtb	r2, r3
 8013ffe:	0852      	lsrs	r2, r2, #1
 8014000:	01db      	lsls	r3, r3, #7
 8014002:	4313      	orrs	r3, r2
 8014004:	b2da      	uxtb	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	1c59      	adds	r1, r3, #1
 801400a:	6079      	str	r1, [r7, #4]
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	4413      	add	r3, r2
 8014010:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	3b01      	subs	r3, #1
 8014016:	60bb      	str	r3, [r7, #8]
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1ed      	bne.n	8013ffa <sum_sfn+0x10>
	return sum;
 801401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014020:	4618      	mov	r0, r3
 8014022:	3714      	adds	r7, #20
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr

0801402c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801403a:	2100      	movs	r1, #0
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7ff fca7 	bl	8013990 <dir_sdi>
 8014042:	4603      	mov	r3, r0
 8014044:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014046:	7dfb      	ldrb	r3, [r7, #23]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d001      	beq.n	8014050 <dir_find+0x24>
 801404c:	7dfb      	ldrb	r3, [r7, #23]
 801404e:	e0a9      	b.n	80141a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014050:	23ff      	movs	r3, #255	; 0xff
 8014052:	753b      	strb	r3, [r7, #20]
 8014054:	7d3b      	ldrb	r3, [r7, #20]
 8014056:	757b      	strb	r3, [r7, #21]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f04f 32ff 	mov.w	r2, #4294967295
 801405e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	69db      	ldr	r3, [r3, #28]
 8014064:	4619      	mov	r1, r3
 8014066:	6938      	ldr	r0, [r7, #16]
 8014068:	f7ff f91a 	bl	80132a0 <move_window>
 801406c:	4603      	mov	r3, r0
 801406e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014070:	7dfb      	ldrb	r3, [r7, #23]
 8014072:	2b00      	cmp	r3, #0
 8014074:	f040 8090 	bne.w	8014198 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6a1b      	ldr	r3, [r3, #32]
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014080:	7dbb      	ldrb	r3, [r7, #22]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d102      	bne.n	801408c <dir_find+0x60>
 8014086:	2304      	movs	r3, #4
 8014088:	75fb      	strb	r3, [r7, #23]
 801408a:	e08a      	b.n	80141a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6a1b      	ldr	r3, [r3, #32]
 8014090:	330b      	adds	r3, #11
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014098:	73fb      	strb	r3, [r7, #15]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	7bfa      	ldrb	r2, [r7, #15]
 801409e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80140a0:	7dbb      	ldrb	r3, [r7, #22]
 80140a2:	2be5      	cmp	r3, #229	; 0xe5
 80140a4:	d007      	beq.n	80140b6 <dir_find+0x8a>
 80140a6:	7bfb      	ldrb	r3, [r7, #15]
 80140a8:	f003 0308 	and.w	r3, r3, #8
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d009      	beq.n	80140c4 <dir_find+0x98>
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
 80140b2:	2b0f      	cmp	r3, #15
 80140b4:	d006      	beq.n	80140c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80140b6:	23ff      	movs	r3, #255	; 0xff
 80140b8:	757b      	strb	r3, [r7, #21]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f04f 32ff 	mov.w	r2, #4294967295
 80140c0:	631a      	str	r2, [r3, #48]	; 0x30
 80140c2:	e05e      	b.n	8014182 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80140c4:	7bfb      	ldrb	r3, [r7, #15]
 80140c6:	2b0f      	cmp	r3, #15
 80140c8:	d136      	bne.n	8014138 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80140d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d154      	bne.n	8014182 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80140d8:	7dbb      	ldrb	r3, [r7, #22]
 80140da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00d      	beq.n	80140fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6a1b      	ldr	r3, [r3, #32]
 80140e6:	7b5b      	ldrb	r3, [r3, #13]
 80140e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80140ea:	7dbb      	ldrb	r3, [r7, #22]
 80140ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80140f0:	75bb      	strb	r3, [r7, #22]
 80140f2:	7dbb      	ldrb	r3, [r7, #22]
 80140f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	695a      	ldr	r2, [r3, #20]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80140fe:	7dba      	ldrb	r2, [r7, #22]
 8014100:	7d7b      	ldrb	r3, [r7, #21]
 8014102:	429a      	cmp	r2, r3
 8014104:	d115      	bne.n	8014132 <dir_find+0x106>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a1b      	ldr	r3, [r3, #32]
 801410a:	330d      	adds	r3, #13
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	7d3a      	ldrb	r2, [r7, #20]
 8014110:	429a      	cmp	r2, r3
 8014112:	d10e      	bne.n	8014132 <dir_find+0x106>
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	68da      	ldr	r2, [r3, #12]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a1b      	ldr	r3, [r3, #32]
 801411c:	4619      	mov	r1, r3
 801411e:	4610      	mov	r0, r2
 8014120:	f7ff fdfc 	bl	8013d1c <cmp_lfn>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d003      	beq.n	8014132 <dir_find+0x106>
 801412a:	7d7b      	ldrb	r3, [r7, #21]
 801412c:	3b01      	subs	r3, #1
 801412e:	b2db      	uxtb	r3, r3
 8014130:	e000      	b.n	8014134 <dir_find+0x108>
 8014132:	23ff      	movs	r3, #255	; 0xff
 8014134:	757b      	strb	r3, [r7, #21]
 8014136:	e024      	b.n	8014182 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014138:	7d7b      	ldrb	r3, [r7, #21]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d109      	bne.n	8014152 <dir_find+0x126>
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6a1b      	ldr	r3, [r3, #32]
 8014142:	4618      	mov	r0, r3
 8014144:	f7ff ff51 	bl	8013fea <sum_sfn>
 8014148:	4603      	mov	r3, r0
 801414a:	461a      	mov	r2, r3
 801414c:	7d3b      	ldrb	r3, [r7, #20]
 801414e:	4293      	cmp	r3, r2
 8014150:	d024      	beq.n	801419c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014158:	f003 0301 	and.w	r3, r3, #1
 801415c:	2b00      	cmp	r3, #0
 801415e:	d10a      	bne.n	8014176 <dir_find+0x14a>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6a18      	ldr	r0, [r3, #32]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	3324      	adds	r3, #36	; 0x24
 8014168:	220b      	movs	r2, #11
 801416a:	4619      	mov	r1, r3
 801416c:	f7fe fea5 	bl	8012eba <mem_cmp>
 8014170:	4603      	mov	r3, r0
 8014172:	2b00      	cmp	r3, #0
 8014174:	d014      	beq.n	80141a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014176:	23ff      	movs	r3, #255	; 0xff
 8014178:	757b      	strb	r3, [r7, #21]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f04f 32ff 	mov.w	r2, #4294967295
 8014180:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014182:	2100      	movs	r1, #0
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ff fc7e 	bl	8013a86 <dir_next>
 801418a:	4603      	mov	r3, r0
 801418c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801418e:	7dfb      	ldrb	r3, [r7, #23]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f43f af65 	beq.w	8014060 <dir_find+0x34>
 8014196:	e004      	b.n	80141a2 <dir_find+0x176>
		if (res != FR_OK) break;
 8014198:	bf00      	nop
 801419a:	e002      	b.n	80141a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801419c:	bf00      	nop
 801419e:	e000      	b.n	80141a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80141a0:	bf00      	nop

	return res;
 80141a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3718      	adds	r7, #24
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b08c      	sub	sp, #48	; 0x30
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80141c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d001      	beq.n	80141cc <dir_register+0x20>
 80141c8:	2306      	movs	r3, #6
 80141ca:	e0e0      	b.n	801438e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80141cc:	2300      	movs	r3, #0
 80141ce:	627b      	str	r3, [r7, #36]	; 0x24
 80141d0:	e002      	b.n	80141d8 <dir_register+0x2c>
 80141d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d4:	3301      	adds	r3, #1
 80141d6:	627b      	str	r3, [r7, #36]	; 0x24
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	68da      	ldr	r2, [r3, #12]
 80141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d1f4      	bne.n	80141d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80141ee:	f107 030c 	add.w	r3, r7, #12
 80141f2:	220c      	movs	r2, #12
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7fe fe25 	bl	8012e44 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	f003 0301 	and.w	r3, r3, #1
 8014200:	2b00      	cmp	r3, #0
 8014202:	d032      	beq.n	801426a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2240      	movs	r2, #64	; 0x40
 8014208:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801420c:	2301      	movs	r3, #1
 801420e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014210:	e016      	b.n	8014240 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	68da      	ldr	r2, [r3, #12]
 801421c:	f107 010c 	add.w	r1, r7, #12
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	f7ff fe53 	bl	8013ecc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7ff ff00 	bl	801402c <dir_find>
 801422c:	4603      	mov	r3, r0
 801422e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8014232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014236:	2b00      	cmp	r3, #0
 8014238:	d106      	bne.n	8014248 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423c:	3301      	adds	r3, #1
 801423e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014242:	2b63      	cmp	r3, #99	; 0x63
 8014244:	d9e5      	bls.n	8014212 <dir_register+0x66>
 8014246:	e000      	b.n	801424a <dir_register+0x9e>
			if (res != FR_OK) break;
 8014248:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424c:	2b64      	cmp	r3, #100	; 0x64
 801424e:	d101      	bne.n	8014254 <dir_register+0xa8>
 8014250:	2307      	movs	r3, #7
 8014252:	e09c      	b.n	801438e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014258:	2b04      	cmp	r3, #4
 801425a:	d002      	beq.n	8014262 <dir_register+0xb6>
 801425c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014260:	e095      	b.n	801438e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8014262:	7dfa      	ldrb	r2, [r7, #23]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	f003 0302 	and.w	r3, r3, #2
 8014270:	2b00      	cmp	r3, #0
 8014272:	d007      	beq.n	8014284 <dir_register+0xd8>
 8014274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014276:	330c      	adds	r3, #12
 8014278:	4a47      	ldr	r2, [pc, #284]	; (8014398 <dir_register+0x1ec>)
 801427a:	fba2 2303 	umull	r2, r3, r2, r3
 801427e:	089b      	lsrs	r3, r3, #2
 8014280:	3301      	adds	r3, #1
 8014282:	e000      	b.n	8014286 <dir_register+0xda>
 8014284:	2301      	movs	r3, #1
 8014286:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014288:	6a39      	ldr	r1, [r7, #32]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7ff fcc0 	bl	8013c10 <dir_alloc>
 8014290:	4603      	mov	r3, r0
 8014292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8014296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801429a:	2b00      	cmp	r3, #0
 801429c:	d148      	bne.n	8014330 <dir_register+0x184>
 801429e:	6a3b      	ldr	r3, [r7, #32]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	623b      	str	r3, [r7, #32]
 80142a4:	6a3b      	ldr	r3, [r7, #32]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d042      	beq.n	8014330 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	695a      	ldr	r2, [r3, #20]
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	015b      	lsls	r3, r3, #5
 80142b2:	1ad3      	subs	r3, r2, r3
 80142b4:	4619      	mov	r1, r3
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f7ff fb6a 	bl	8013990 <dir_sdi>
 80142bc:	4603      	mov	r3, r0
 80142be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80142c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d132      	bne.n	8014330 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	3324      	adds	r3, #36	; 0x24
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7ff fe8b 	bl	8013fea <sum_sfn>
 80142d4:	4603      	mov	r3, r0
 80142d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	69db      	ldr	r3, [r3, #28]
 80142dc:	4619      	mov	r1, r3
 80142de:	69f8      	ldr	r0, [r7, #28]
 80142e0:	f7fe ffde 	bl	80132a0 <move_window>
 80142e4:	4603      	mov	r3, r0
 80142e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80142ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d11d      	bne.n	801432e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	68d8      	ldr	r0, [r3, #12]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6a19      	ldr	r1, [r3, #32]
 80142fa:	6a3b      	ldr	r3, [r7, #32]
 80142fc:	b2da      	uxtb	r2, r3
 80142fe:	7efb      	ldrb	r3, [r7, #27]
 8014300:	f7ff fd7c 	bl	8013dfc <put_lfn>
				fs->wflag = 1;
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	2201      	movs	r2, #1
 8014308:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801430a:	2100      	movs	r1, #0
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f7ff fbba 	bl	8013a86 <dir_next>
 8014312:	4603      	mov	r3, r0
 8014314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8014318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801431c:	2b00      	cmp	r3, #0
 801431e:	d107      	bne.n	8014330 <dir_register+0x184>
 8014320:	6a3b      	ldr	r3, [r7, #32]
 8014322:	3b01      	subs	r3, #1
 8014324:	623b      	str	r3, [r7, #32]
 8014326:	6a3b      	ldr	r3, [r7, #32]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d1d5      	bne.n	80142d8 <dir_register+0x12c>
 801432c:	e000      	b.n	8014330 <dir_register+0x184>
				if (res != FR_OK) break;
 801432e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014334:	2b00      	cmp	r3, #0
 8014336:	d128      	bne.n	801438a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	69db      	ldr	r3, [r3, #28]
 801433c:	4619      	mov	r1, r3
 801433e:	69f8      	ldr	r0, [r7, #28]
 8014340:	f7fe ffae 	bl	80132a0 <move_window>
 8014344:	4603      	mov	r3, r0
 8014346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801434a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801434e:	2b00      	cmp	r3, #0
 8014350:	d11b      	bne.n	801438a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6a1b      	ldr	r3, [r3, #32]
 8014356:	2220      	movs	r2, #32
 8014358:	2100      	movs	r1, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fd93 	bl	8012e86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6a18      	ldr	r0, [r3, #32]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	3324      	adds	r3, #36	; 0x24
 8014368:	220b      	movs	r2, #11
 801436a:	4619      	mov	r1, r3
 801436c:	f7fe fd6a 	bl	8012e44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6a1b      	ldr	r3, [r3, #32]
 801437a:	330c      	adds	r3, #12
 801437c:	f002 0218 	and.w	r2, r2, #24
 8014380:	b2d2      	uxtb	r2, r2
 8014382:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	2201      	movs	r2, #1
 8014388:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801438a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801438e:	4618      	mov	r0, r3
 8014390:	3730      	adds	r7, #48	; 0x30
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	4ec4ec4f 	.word	0x4ec4ec4f

0801439c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b08a      	sub	sp, #40	; 0x28
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	613b      	str	r3, [r7, #16]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	2300      	movs	r3, #0
 80143b6:	617b      	str	r3, [r7, #20]
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	1c5a      	adds	r2, r3, #1
 80143c0:	61ba      	str	r2, [r7, #24]
 80143c2:	693a      	ldr	r2, [r7, #16]
 80143c4:	4413      	add	r3, r2
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80143ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143cc:	2b1f      	cmp	r3, #31
 80143ce:	d940      	bls.n	8014452 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80143d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143d2:	2b2f      	cmp	r3, #47	; 0x2f
 80143d4:	d006      	beq.n	80143e4 <create_name+0x48>
 80143d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143d8:	2b5c      	cmp	r3, #92	; 0x5c
 80143da:	d110      	bne.n	80143fe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80143dc:	e002      	b.n	80143e4 <create_name+0x48>
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	3301      	adds	r3, #1
 80143e2:	61bb      	str	r3, [r7, #24]
 80143e4:	693a      	ldr	r2, [r7, #16]
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	4413      	add	r3, r2
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	2b2f      	cmp	r3, #47	; 0x2f
 80143ee:	d0f6      	beq.n	80143de <create_name+0x42>
 80143f0:	693a      	ldr	r2, [r7, #16]
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	4413      	add	r3, r2
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2b5c      	cmp	r3, #92	; 0x5c
 80143fa:	d0f0      	beq.n	80143de <create_name+0x42>
			break;
 80143fc:	e02a      	b.n	8014454 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	2bfe      	cmp	r3, #254	; 0xfe
 8014402:	d901      	bls.n	8014408 <create_name+0x6c>
 8014404:	2306      	movs	r3, #6
 8014406:	e1c9      	b.n	801479c <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801440a:	b2db      	uxtb	r3, r3
 801440c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801440e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014410:	2101      	movs	r1, #1
 8014412:	4618      	mov	r0, r3
 8014414:	f002 f8fc 	bl	8016610 <ff_convert>
 8014418:	4603      	mov	r3, r0
 801441a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801441c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <create_name+0x8a>
 8014422:	2306      	movs	r3, #6
 8014424:	e1ba      	b.n	801479c <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8014426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014428:	2b7f      	cmp	r3, #127	; 0x7f
 801442a:	d809      	bhi.n	8014440 <create_name+0xa4>
 801442c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801442e:	4619      	mov	r1, r3
 8014430:	48a5      	ldr	r0, [pc, #660]	; (80146c8 <create_name+0x32c>)
 8014432:	f7fe fd69 	bl	8012f08 <chk_chr>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d001      	beq.n	8014440 <create_name+0xa4>
 801443c:	2306      	movs	r3, #6
 801443e:	e1ad      	b.n	801479c <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	1c5a      	adds	r2, r3, #1
 8014444:	617a      	str	r2, [r7, #20]
 8014446:	005b      	lsls	r3, r3, #1
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	4413      	add	r3, r2
 801444c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801444e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8014450:	e7b4      	b.n	80143bc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8014452:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8014454:	693a      	ldr	r2, [r7, #16]
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	441a      	add	r2, r3
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801445e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014460:	2b1f      	cmp	r3, #31
 8014462:	d801      	bhi.n	8014468 <create_name+0xcc>
 8014464:	2304      	movs	r3, #4
 8014466:	e000      	b.n	801446a <create_name+0xce>
 8014468:	2300      	movs	r3, #0
 801446a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	2b01      	cmp	r3, #1
 8014472:	d109      	bne.n	8014488 <create_name+0xec>
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801447a:	3b01      	subs	r3, #1
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	4413      	add	r3, r2
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	2b2e      	cmp	r3, #46	; 0x2e
 8014486:	d016      	beq.n	80144b6 <create_name+0x11a>
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	2b02      	cmp	r3, #2
 801448c:	d14e      	bne.n	801452c <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014494:	3b01      	subs	r3, #1
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	68fa      	ldr	r2, [r7, #12]
 801449a:	4413      	add	r3, r2
 801449c:	881b      	ldrh	r3, [r3, #0]
 801449e:	2b2e      	cmp	r3, #46	; 0x2e
 80144a0:	d144      	bne.n	801452c <create_name+0x190>
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144a8:	3b02      	subs	r3, #2
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	68fa      	ldr	r2, [r7, #12]
 80144ae:	4413      	add	r3, r2
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	2b2e      	cmp	r3, #46	; 0x2e
 80144b4:	d13a      	bne.n	801452c <create_name+0x190>
		lfn[di] = 0;
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	68fa      	ldr	r2, [r7, #12]
 80144bc:	4413      	add	r3, r2
 80144be:	2200      	movs	r2, #0
 80144c0:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80144c2:	2300      	movs	r3, #0
 80144c4:	623b      	str	r3, [r7, #32]
 80144c6:	e00f      	b.n	80144e8 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80144c8:	6a3a      	ldr	r2, [r7, #32]
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d201      	bcs.n	80144d4 <create_name+0x138>
 80144d0:	212e      	movs	r1, #46	; 0x2e
 80144d2:	e000      	b.n	80144d6 <create_name+0x13a>
 80144d4:	2120      	movs	r1, #32
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	4413      	add	r3, r2
 80144dc:	3324      	adds	r3, #36	; 0x24
 80144de:	460a      	mov	r2, r1
 80144e0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	3301      	adds	r3, #1
 80144e6:	623b      	str	r3, [r7, #32]
 80144e8:	6a3b      	ldr	r3, [r7, #32]
 80144ea:	2b0a      	cmp	r3, #10
 80144ec:	d9ec      	bls.n	80144c8 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80144ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144f2:	f043 0320 	orr.w	r3, r3, #32
 80144f6:	b2d9      	uxtb	r1, r3
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	4413      	add	r3, r2
 80144fe:	3324      	adds	r3, #36	; 0x24
 8014500:	460a      	mov	r2, r1
 8014502:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	e149      	b.n	801479c <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801450e:	3b01      	subs	r3, #1
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	4413      	add	r3, r2
 8014516:	881b      	ldrh	r3, [r3, #0]
 8014518:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801451a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801451c:	2b20      	cmp	r3, #32
 801451e:	d002      	beq.n	8014526 <create_name+0x18a>
 8014520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014522:	2b2e      	cmp	r3, #46	; 0x2e
 8014524:	d106      	bne.n	8014534 <create_name+0x198>
		di--;
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	3b01      	subs	r3, #1
 801452a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d1ea      	bne.n	8014508 <create_name+0x16c>
 8014532:	e000      	b.n	8014536 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8014534:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	4413      	add	r3, r2
 801453e:	2200      	movs	r2, #0
 8014540:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d101      	bne.n	801454c <create_name+0x1b0>
 8014548:	2306      	movs	r3, #6
 801454a:	e127      	b.n	801479c <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	3324      	adds	r3, #36	; 0x24
 8014550:	220b      	movs	r2, #11
 8014552:	2120      	movs	r1, #32
 8014554:	4618      	mov	r0, r3
 8014556:	f7fe fc96 	bl	8012e86 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801455a:	2300      	movs	r3, #0
 801455c:	61bb      	str	r3, [r7, #24]
 801455e:	e002      	b.n	8014566 <create_name+0x1ca>
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	3301      	adds	r3, #1
 8014564:	61bb      	str	r3, [r7, #24]
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	005b      	lsls	r3, r3, #1
 801456a:	68fa      	ldr	r2, [r7, #12]
 801456c:	4413      	add	r3, r2
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	2b20      	cmp	r3, #32
 8014572:	d0f5      	beq.n	8014560 <create_name+0x1c4>
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	005b      	lsls	r3, r3, #1
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	2b2e      	cmp	r3, #46	; 0x2e
 8014580:	d0ee      	beq.n	8014560 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d009      	beq.n	801459c <create_name+0x200>
 8014588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801458c:	f043 0303 	orr.w	r3, r3, #3
 8014590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014594:	e002      	b.n	801459c <create_name+0x200>
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	3b01      	subs	r3, #1
 801459a:	617b      	str	r3, [r7, #20]
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d009      	beq.n	80145b6 <create_name+0x21a>
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80145a8:	3b01      	subs	r3, #1
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	68fa      	ldr	r2, [r7, #12]
 80145ae:	4413      	add	r3, r2
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	2b2e      	cmp	r3, #46	; 0x2e
 80145b4:	d1ef      	bne.n	8014596 <create_name+0x1fa>

	i = b = 0; ni = 8;
 80145b6:	2300      	movs	r3, #0
 80145b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80145bc:	2300      	movs	r3, #0
 80145be:	623b      	str	r3, [r7, #32]
 80145c0:	2308      	movs	r3, #8
 80145c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	1c5a      	adds	r2, r3, #1
 80145c8:	61ba      	str	r2, [r7, #24]
 80145ca:	005b      	lsls	r3, r3, #1
 80145cc:	68fa      	ldr	r2, [r7, #12]
 80145ce:	4413      	add	r3, r2
 80145d0:	881b      	ldrh	r3, [r3, #0]
 80145d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80145d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	f000 8096 	beq.w	8014708 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80145dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145de:	2b20      	cmp	r3, #32
 80145e0:	d006      	beq.n	80145f0 <create_name+0x254>
 80145e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145e4:	2b2e      	cmp	r3, #46	; 0x2e
 80145e6:	d10a      	bne.n	80145fe <create_name+0x262>
 80145e8:	69ba      	ldr	r2, [r7, #24]
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d006      	beq.n	80145fe <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 80145f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145f4:	f043 0303 	orr.w	r3, r3, #3
 80145f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145fc:	e083      	b.n	8014706 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80145fe:	6a3a      	ldr	r2, [r7, #32]
 8014600:	69fb      	ldr	r3, [r7, #28]
 8014602:	429a      	cmp	r2, r3
 8014604:	d203      	bcs.n	801460e <create_name+0x272>
 8014606:	69ba      	ldr	r2, [r7, #24]
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	429a      	cmp	r2, r3
 801460c:	d123      	bne.n	8014656 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	2b0b      	cmp	r3, #11
 8014612:	d106      	bne.n	8014622 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8014614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014618:	f043 0303 	orr.w	r3, r3, #3
 801461c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014620:	e075      	b.n	801470e <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014622:	69ba      	ldr	r2, [r7, #24]
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	429a      	cmp	r2, r3
 8014628:	d005      	beq.n	8014636 <create_name+0x29a>
 801462a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801462e:	f043 0303 	orr.w	r3, r3, #3
 8014632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014636:	69ba      	ldr	r2, [r7, #24]
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	429a      	cmp	r2, r3
 801463c:	d866      	bhi.n	801470c <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	61bb      	str	r3, [r7, #24]
 8014642:	2308      	movs	r3, #8
 8014644:	623b      	str	r3, [r7, #32]
 8014646:	230b      	movs	r3, #11
 8014648:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801464a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014654:	e057      	b.n	8014706 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014658:	2b7f      	cmp	r3, #127	; 0x7f
 801465a:	d914      	bls.n	8014686 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801465c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801465e:	2100      	movs	r1, #0
 8014660:	4618      	mov	r0, r3
 8014662:	f001 ffd5 	bl	8016610 <ff_convert>
 8014666:	4603      	mov	r3, r0
 8014668:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801466a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801466c:	2b00      	cmp	r3, #0
 801466e:	d004      	beq.n	801467a <create_name+0x2de>
 8014670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014672:	3b80      	subs	r3, #128	; 0x80
 8014674:	4a15      	ldr	r2, [pc, #84]	; (80146cc <create_name+0x330>)
 8014676:	5cd3      	ldrb	r3, [r2, r3]
 8014678:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801467a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801467e:	f043 0302 	orr.w	r3, r3, #2
 8014682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014688:	2b00      	cmp	r3, #0
 801468a:	d007      	beq.n	801469c <create_name+0x300>
 801468c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801468e:	4619      	mov	r1, r3
 8014690:	480f      	ldr	r0, [pc, #60]	; (80146d0 <create_name+0x334>)
 8014692:	f7fe fc39 	bl	8012f08 <chk_chr>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d008      	beq.n	80146ae <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801469c:	235f      	movs	r3, #95	; 0x5f
 801469e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80146a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146a4:	f043 0303 	orr.w	r3, r3, #3
 80146a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80146ac:	e021      	b.n	80146f2 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80146ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146b0:	2b40      	cmp	r3, #64	; 0x40
 80146b2:	d90f      	bls.n	80146d4 <create_name+0x338>
 80146b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146b6:	2b5a      	cmp	r3, #90	; 0x5a
 80146b8:	d80c      	bhi.n	80146d4 <create_name+0x338>
					b |= 2;
 80146ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80146be:	f043 0302 	orr.w	r3, r3, #2
 80146c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80146c6:	e014      	b.n	80146f2 <create_name+0x356>
 80146c8:	08017c70 	.word	0x08017c70
 80146cc:	0801b940 	.word	0x0801b940
 80146d0:	08017c7c 	.word	0x08017c7c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80146d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146d6:	2b60      	cmp	r3, #96	; 0x60
 80146d8:	d90b      	bls.n	80146f2 <create_name+0x356>
 80146da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146dc:	2b7a      	cmp	r3, #122	; 0x7a
 80146de:	d808      	bhi.n	80146f2 <create_name+0x356>
						b |= 1; w -= 0x20;
 80146e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80146e4:	f043 0301 	orr.w	r3, r3, #1
 80146e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80146ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146ee:	3b20      	subs	r3, #32
 80146f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80146f2:	6a3b      	ldr	r3, [r7, #32]
 80146f4:	1c5a      	adds	r2, r3, #1
 80146f6:	623a      	str	r2, [r7, #32]
 80146f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80146fa:	b2d1      	uxtb	r1, r2
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	4413      	add	r3, r2
 8014700:	460a      	mov	r2, r1
 8014702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8014706:	e75d      	b.n	80145c4 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 8014708:	bf00      	nop
 801470a:	e000      	b.n	801470e <create_name+0x372>
			if (si > di) break;			/* No extension */
 801470c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014714:	2be5      	cmp	r3, #229	; 0xe5
 8014716:	d103      	bne.n	8014720 <create_name+0x384>
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2205      	movs	r2, #5
 801471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8014720:	69fb      	ldr	r3, [r7, #28]
 8014722:	2b08      	cmp	r3, #8
 8014724:	d104      	bne.n	8014730 <create_name+0x394>
 8014726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014734:	f003 030c 	and.w	r3, r3, #12
 8014738:	2b0c      	cmp	r3, #12
 801473a:	d005      	beq.n	8014748 <create_name+0x3ac>
 801473c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014740:	f003 0303 	and.w	r3, r3, #3
 8014744:	2b03      	cmp	r3, #3
 8014746:	d105      	bne.n	8014754 <create_name+0x3b8>
 8014748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801474c:	f043 0302 	orr.w	r3, r3, #2
 8014750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014758:	f003 0302 	and.w	r3, r3, #2
 801475c:	2b00      	cmp	r3, #0
 801475e:	d117      	bne.n	8014790 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014764:	f003 0303 	and.w	r3, r3, #3
 8014768:	2b01      	cmp	r3, #1
 801476a:	d105      	bne.n	8014778 <create_name+0x3dc>
 801476c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014770:	f043 0310 	orr.w	r3, r3, #16
 8014774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801477c:	f003 030c 	and.w	r3, r3, #12
 8014780:	2b04      	cmp	r3, #4
 8014782:	d105      	bne.n	8014790 <create_name+0x3f4>
 8014784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014788:	f043 0308 	orr.w	r3, r3, #8
 801478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014796:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801479a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801479c:	4618      	mov	r0, r3
 801479e:	3728      	adds	r7, #40	; 0x28
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	2b2f      	cmp	r3, #47	; 0x2f
 80147be:	d00b      	beq.n	80147d8 <follow_path+0x34>
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	2b5c      	cmp	r3, #92	; 0x5c
 80147c6:	d007      	beq.n	80147d8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	699a      	ldr	r2, [r3, #24]
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	609a      	str	r2, [r3, #8]
 80147d0:	e00d      	b.n	80147ee <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	3301      	adds	r3, #1
 80147d6:	603b      	str	r3, [r7, #0]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	2b2f      	cmp	r3, #47	; 0x2f
 80147de:	d0f8      	beq.n	80147d2 <follow_path+0x2e>
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b5c      	cmp	r3, #92	; 0x5c
 80147e6:	d0f4      	beq.n	80147d2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	2200      	movs	r2, #0
 80147ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	2b1f      	cmp	r3, #31
 80147f4:	d80a      	bhi.n	801480c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2280      	movs	r2, #128	; 0x80
 80147fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80147fe:	2100      	movs	r1, #0
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7ff f8c5 	bl	8013990 <dir_sdi>
 8014806:	4603      	mov	r3, r0
 8014808:	75fb      	strb	r3, [r7, #23]
 801480a:	e056      	b.n	80148ba <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801480c:	463b      	mov	r3, r7
 801480e:	4619      	mov	r1, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff fdc3 	bl	801439c <create_name>
 8014816:	4603      	mov	r3, r0
 8014818:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d147      	bne.n	80148b0 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7ff fc03 	bl	801402c <dir_find>
 8014826:	4603      	mov	r3, r0
 8014828:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014830:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014832:	7dfb      	ldrb	r3, [r7, #23]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d01b      	beq.n	8014870 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014838:	7dfb      	ldrb	r3, [r7, #23]
 801483a:	2b04      	cmp	r3, #4
 801483c:	d13a      	bne.n	80148b4 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801483e:	7afb      	ldrb	r3, [r7, #11]
 8014840:	f003 0320 	and.w	r3, r3, #32
 8014844:	2b00      	cmp	r3, #0
 8014846:	d00b      	beq.n	8014860 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014848:	7afb      	ldrb	r3, [r7, #11]
 801484a:	f003 0304 	and.w	r3, r3, #4
 801484e:	2b00      	cmp	r3, #0
 8014850:	d02c      	beq.n	80148ac <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2280      	movs	r2, #128	; 0x80
 8014856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801485a:	2300      	movs	r3, #0
 801485c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801485e:	e029      	b.n	80148b4 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014860:	7afb      	ldrb	r3, [r7, #11]
 8014862:	f003 0304 	and.w	r3, r3, #4
 8014866:	2b00      	cmp	r3, #0
 8014868:	d124      	bne.n	80148b4 <follow_path+0x110>
 801486a:	2305      	movs	r3, #5
 801486c:	75fb      	strb	r3, [r7, #23]
				break;
 801486e:	e021      	b.n	80148b4 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014870:	7afb      	ldrb	r3, [r7, #11]
 8014872:	f003 0304 	and.w	r3, r3, #4
 8014876:	2b00      	cmp	r3, #0
 8014878:	d11e      	bne.n	80148b8 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	799b      	ldrb	r3, [r3, #6]
 801487e:	f003 0310 	and.w	r3, r3, #16
 8014882:	2b00      	cmp	r3, #0
 8014884:	d102      	bne.n	801488c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8014886:	2305      	movs	r3, #5
 8014888:	75fb      	strb	r3, [r7, #23]
 801488a:	e016      	b.n	80148ba <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	695b      	ldr	r3, [r3, #20]
 8014896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801489a:	4413      	add	r3, r2
 801489c:	4619      	mov	r1, r3
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f7ff f9fd 	bl	8013c9e <ld_clust>
 80148a4:	4602      	mov	r2, r0
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	609a      	str	r2, [r3, #8]
 80148aa:	e7af      	b.n	801480c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80148ac:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80148ae:	e7ad      	b.n	801480c <follow_path+0x68>
			if (res != FR_OK) break;
 80148b0:	bf00      	nop
 80148b2:	e002      	b.n	80148ba <follow_path+0x116>
				break;
 80148b4:	bf00      	nop
 80148b6:	e000      	b.n	80148ba <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80148b8:	bf00      	nop
			}
		}
	}

	return res;
 80148ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3718      	adds	r7, #24
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80148c4:	b480      	push	{r7}
 80148c6:	b087      	sub	sp, #28
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80148cc:	f04f 33ff 	mov.w	r3, #4294967295
 80148d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d031      	beq.n	801493e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	617b      	str	r3, [r7, #20]
 80148e0:	e002      	b.n	80148e8 <get_ldnumber+0x24>
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	3301      	adds	r3, #1
 80148e6:	617b      	str	r3, [r7, #20]
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	2b1f      	cmp	r3, #31
 80148ee:	d903      	bls.n	80148f8 <get_ldnumber+0x34>
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	2b3a      	cmp	r3, #58	; 0x3a
 80148f6:	d1f4      	bne.n	80148e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2b3a      	cmp	r3, #58	; 0x3a
 80148fe:	d11c      	bne.n	801493a <get_ldnumber+0x76>
			tp = *path;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	1c5a      	adds	r2, r3, #1
 801490a:	60fa      	str	r2, [r7, #12]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	3b30      	subs	r3, #48	; 0x30
 8014910:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	2b09      	cmp	r3, #9
 8014916:	d80e      	bhi.n	8014936 <get_ldnumber+0x72>
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	429a      	cmp	r2, r3
 801491e:	d10a      	bne.n	8014936 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d107      	bne.n	8014936 <get_ldnumber+0x72>
					vol = (int)i;
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	3301      	adds	r3, #1
 801492e:	617b      	str	r3, [r7, #20]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	697a      	ldr	r2, [r7, #20]
 8014934:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	e002      	b.n	8014940 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801493a:	2300      	movs	r3, #0
 801493c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801493e:	693b      	ldr	r3, [r7, #16]
}
 8014940:	4618      	mov	r0, r3
 8014942:	371c      	adds	r7, #28
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2200      	movs	r2, #0
 801495a:	70da      	strb	r2, [r3, #3]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f04f 32ff 	mov.w	r2, #4294967295
 8014962:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014964:	6839      	ldr	r1, [r7, #0]
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7fe fc9a 	bl	80132a0 <move_window>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d001      	beq.n	8014976 <check_fs+0x2a>
 8014972:	2304      	movs	r3, #4
 8014974:	e038      	b.n	80149e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	3338      	adds	r3, #56	; 0x38
 801497a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801497e:	4618      	mov	r0, r3
 8014980:	f7fe f9de 	bl	8012d40 <ld_word>
 8014984:	4603      	mov	r3, r0
 8014986:	461a      	mov	r2, r3
 8014988:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801498c:	429a      	cmp	r2, r3
 801498e:	d001      	beq.n	8014994 <check_fs+0x48>
 8014990:	2303      	movs	r3, #3
 8014992:	e029      	b.n	80149e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801499a:	2be9      	cmp	r3, #233	; 0xe9
 801499c:	d009      	beq.n	80149b2 <check_fs+0x66>
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80149a4:	2beb      	cmp	r3, #235	; 0xeb
 80149a6:	d11e      	bne.n	80149e6 <check_fs+0x9a>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80149ae:	2b90      	cmp	r3, #144	; 0x90
 80149b0:	d119      	bne.n	80149e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	3338      	adds	r3, #56	; 0x38
 80149b6:	3336      	adds	r3, #54	; 0x36
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7fe f9d9 	bl	8012d70 <ld_dword>
 80149be:	4603      	mov	r3, r0
 80149c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80149c4:	4a0a      	ldr	r2, [pc, #40]	; (80149f0 <check_fs+0xa4>)
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d101      	bne.n	80149ce <check_fs+0x82>
 80149ca:	2300      	movs	r3, #0
 80149cc:	e00c      	b.n	80149e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	3338      	adds	r3, #56	; 0x38
 80149d2:	3352      	adds	r3, #82	; 0x52
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fe f9cb 	bl	8012d70 <ld_dword>
 80149da:	4602      	mov	r2, r0
 80149dc:	4b05      	ldr	r3, [pc, #20]	; (80149f4 <check_fs+0xa8>)
 80149de:	429a      	cmp	r2, r3
 80149e0:	d101      	bne.n	80149e6 <check_fs+0x9a>
 80149e2:	2300      	movs	r3, #0
 80149e4:	e000      	b.n	80149e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80149e6:	2302      	movs	r3, #2
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	00544146 	.word	0x00544146
 80149f4:	33544146 	.word	0x33544146

080149f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b096      	sub	sp, #88	; 0x58
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	4613      	mov	r3, r2
 8014a04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	f7ff ff59 	bl	80148c4 <get_ldnumber>
 8014a12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	da01      	bge.n	8014a1e <find_volume+0x26>
 8014a1a:	230b      	movs	r3, #11
 8014a1c:	e234      	b.n	8014e88 <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014a1e:	4aa8      	ldr	r2, [pc, #672]	; (8014cc0 <find_volume+0x2c8>)
 8014a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d101      	bne.n	8014a32 <find_volume+0x3a>
 8014a2e:	230c      	movs	r3, #12
 8014a30:	e22a      	b.n	8014e88 <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014a38:	79fb      	ldrb	r3, [r7, #7]
 8014a3a:	f023 0301 	bic.w	r3, r3, #1
 8014a3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d01a      	beq.n	8014a7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	785b      	ldrb	r3, [r3, #1]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fe f8d9 	bl	8012c04 <disk_status>
 8014a52:	4603      	mov	r3, r0
 8014a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a5c:	f003 0301 	and.w	r3, r3, #1
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d10c      	bne.n	8014a7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014a64:	79fb      	ldrb	r3, [r7, #7]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d007      	beq.n	8014a7a <find_volume+0x82>
 8014a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a6e:	f003 0304 	and.w	r3, r3, #4
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d001      	beq.n	8014a7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014a76:	230a      	movs	r3, #10
 8014a78:	e206      	b.n	8014e88 <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	e204      	b.n	8014e88 <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a80:	2200      	movs	r2, #0
 8014a82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8e:	785b      	ldrb	r3, [r3, #1]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7fe f8d1 	bl	8012c38 <disk_initialize>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014aa0:	f003 0301 	and.w	r3, r3, #1
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014aa8:	2303      	movs	r3, #3
 8014aaa:	e1ed      	b.n	8014e88 <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014aac:	79fb      	ldrb	r3, [r7, #7]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d007      	beq.n	8014ac2 <find_volume+0xca>
 8014ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ab6:	f003 0304 	and.w	r3, r3, #4
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d001      	beq.n	8014ac2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014abe:	230a      	movs	r3, #10
 8014ac0:	e1e2      	b.n	8014e88 <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014ac6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014aca:	f7ff ff3f 	bl	801494c <check_fs>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d14b      	bne.n	8014b74 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014adc:	2300      	movs	r3, #0
 8014ade:	643b      	str	r3, [r7, #64]	; 0x40
 8014ae0:	e01f      	b.n	8014b22 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aea:	011b      	lsls	r3, r3, #4
 8014aec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014af0:	4413      	add	r3, r2
 8014af2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af6:	3304      	adds	r3, #4
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d006      	beq.n	8014b0c <find_volume+0x114>
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	3308      	adds	r3, #8
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fe f934 	bl	8012d70 <ld_dword>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	e000      	b.n	8014b0e <find_volume+0x116>
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014b16:	440b      	add	r3, r1
 8014b18:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b1e:	3301      	adds	r3, #1
 8014b20:	643b      	str	r3, [r7, #64]	; 0x40
 8014b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b24:	2b03      	cmp	r3, #3
 8014b26:	d9dc      	bls.n	8014ae2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014b28:	2300      	movs	r3, #0
 8014b2a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d002      	beq.n	8014b38 <find_volume+0x140>
 8014b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b34:	3b01      	subs	r3, #1
 8014b36:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014b40:	4413      	add	r3, r2
 8014b42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014b46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d005      	beq.n	8014b5a <find_volume+0x162>
 8014b4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b52:	f7ff fefb 	bl	801494c <check_fs>
 8014b56:	4603      	mov	r3, r0
 8014b58:	e000      	b.n	8014b5c <find_volume+0x164>
 8014b5a:	2303      	movs	r3, #3
 8014b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d905      	bls.n	8014b74 <find_volume+0x17c>
 8014b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8014b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b70:	2b03      	cmp	r3, #3
 8014b72:	d9e1      	bls.n	8014b38 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b78:	2b04      	cmp	r3, #4
 8014b7a:	d101      	bne.n	8014b80 <find_volume+0x188>
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e183      	b.n	8014e88 <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d901      	bls.n	8014b8c <find_volume+0x194>
 8014b88:	230d      	movs	r3, #13
 8014b8a:	e17d      	b.n	8014e88 <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8e:	3338      	adds	r3, #56	; 0x38
 8014b90:	330b      	adds	r3, #11
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fe f8d4 	bl	8012d40 <ld_word>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b9e:	d001      	beq.n	8014ba4 <find_volume+0x1ac>
 8014ba0:	230d      	movs	r3, #13
 8014ba2:	e171      	b.n	8014e88 <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba6:	3338      	adds	r3, #56	; 0x38
 8014ba8:	3316      	adds	r3, #22
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7fe f8c8 	bl	8012d40 <ld_word>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <find_volume+0x1d0>
 8014bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bbc:	3338      	adds	r3, #56	; 0x38
 8014bbe:	3324      	adds	r3, #36	; 0x24
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7fe f8d5 	bl	8012d70 <ld_dword>
 8014bc6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bcc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	789b      	ldrb	r3, [r3, #2]
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d005      	beq.n	8014bec <find_volume+0x1f4>
 8014be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be2:	789b      	ldrb	r3, [r3, #2]
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d001      	beq.n	8014bec <find_volume+0x1f4>
 8014be8:	230d      	movs	r3, #13
 8014bea:	e14d      	b.n	8014e88 <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bee:	789b      	ldrb	r3, [r3, #2]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf4:	fb02 f303 	mul.w	r3, r2, r3
 8014bf8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c00:	b29a      	uxth	r2, r3
 8014c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c04:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c08:	895b      	ldrh	r3, [r3, #10]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d008      	beq.n	8014c20 <find_volume+0x228>
 8014c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c10:	895b      	ldrh	r3, [r3, #10]
 8014c12:	461a      	mov	r2, r3
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	895b      	ldrh	r3, [r3, #10]
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	4013      	ands	r3, r2
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d001      	beq.n	8014c24 <find_volume+0x22c>
 8014c20:	230d      	movs	r3, #13
 8014c22:	e131      	b.n	8014e88 <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c26:	3338      	adds	r3, #56	; 0x38
 8014c28:	3311      	adds	r3, #17
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7fe f888 	bl	8012d40 <ld_word>
 8014c30:	4603      	mov	r3, r0
 8014c32:	461a      	mov	r2, r3
 8014c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c36:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3a:	891b      	ldrh	r3, [r3, #8]
 8014c3c:	f003 030f 	and.w	r3, r3, #15
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d001      	beq.n	8014c4a <find_volume+0x252>
 8014c46:	230d      	movs	r3, #13
 8014c48:	e11e      	b.n	8014e88 <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4c:	3338      	adds	r3, #56	; 0x38
 8014c4e:	3313      	adds	r3, #19
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fe f875 	bl	8012d40 <ld_word>
 8014c56:	4603      	mov	r3, r0
 8014c58:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d106      	bne.n	8014c6e <find_volume+0x276>
 8014c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c62:	3338      	adds	r3, #56	; 0x38
 8014c64:	3320      	adds	r3, #32
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fe f882 	bl	8012d70 <ld_dword>
 8014c6c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c70:	3338      	adds	r3, #56	; 0x38
 8014c72:	330e      	adds	r3, #14
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fe f863 	bl	8012d40 <ld_word>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d101      	bne.n	8014c88 <find_volume+0x290>
 8014c84:	230d      	movs	r3, #13
 8014c86:	e0ff      	b.n	8014e88 <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014c88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c8c:	4413      	add	r3, r2
 8014c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c90:	8912      	ldrh	r2, [r2, #8]
 8014c92:	0912      	lsrs	r2, r2, #4
 8014c94:	b292      	uxth	r2, r2
 8014c96:	4413      	add	r3, r2
 8014c98:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d201      	bcs.n	8014ca6 <find_volume+0x2ae>
 8014ca2:	230d      	movs	r3, #13
 8014ca4:	e0f0      	b.n	8014e88 <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014caa:	1ad3      	subs	r3, r2, r3
 8014cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cae:	8952      	ldrh	r2, [r2, #10]
 8014cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d103      	bne.n	8014cc4 <find_volume+0x2cc>
 8014cbc:	230d      	movs	r3, #13
 8014cbe:	e0e3      	b.n	8014e88 <find_volume+0x490>
 8014cc0:	20000c04 	.word	0x20000c04
		fmt = FS_FAT32;
 8014cc4:	2303      	movs	r3, #3
 8014cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ccc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d802      	bhi.n	8014cda <find_volume+0x2e2>
 8014cd4:	2302      	movs	r3, #2
 8014cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cdc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d802      	bhi.n	8014cea <find_volume+0x2f2>
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cec:	1c9a      	adds	r2, r3, #2
 8014cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014cf6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014cf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cfc:	441a      	add	r2, r3
 8014cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d00:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8014d02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d06:	441a      	add	r2, r3
 8014d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d0a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d10:	2b03      	cmp	r3, #3
 8014d12:	d11e      	bne.n	8014d52 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d16:	3338      	adds	r3, #56	; 0x38
 8014d18:	332a      	adds	r3, #42	; 0x2a
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7fe f810 	bl	8012d40 <ld_word>
 8014d20:	4603      	mov	r3, r0
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d001      	beq.n	8014d2a <find_volume+0x332>
 8014d26:	230d      	movs	r3, #13
 8014d28:	e0ae      	b.n	8014e88 <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d2c:	891b      	ldrh	r3, [r3, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d001      	beq.n	8014d36 <find_volume+0x33e>
 8014d32:	230d      	movs	r3, #13
 8014d34:	e0a8      	b.n	8014e88 <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d38:	3338      	adds	r3, #56	; 0x38
 8014d3a:	332c      	adds	r3, #44	; 0x2c
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fe f817 	bl	8012d70 <ld_dword>
 8014d42:	4602      	mov	r2, r0
 8014d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d46:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4a:	69db      	ldr	r3, [r3, #28]
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8014d50:	e01f      	b.n	8014d92 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d54:	891b      	ldrh	r3, [r3, #8]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d101      	bne.n	8014d5e <find_volume+0x366>
 8014d5a:	230d      	movs	r3, #13
 8014d5c:	e094      	b.n	8014e88 <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d64:	441a      	add	r2, r3
 8014d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d68:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014d6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d103      	bne.n	8014d7a <find_volume+0x382>
 8014d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d74:	69db      	ldr	r3, [r3, #28]
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	e00a      	b.n	8014d90 <find_volume+0x398>
 8014d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7c:	69da      	ldr	r2, [r3, #28]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	085a      	lsrs	r2, r3, #1
 8014d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d88:	69db      	ldr	r3, [r3, #28]
 8014d8a:	f003 0301 	and.w	r3, r3, #1
 8014d8e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014d90:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d94:	6a1a      	ldr	r2, [r3, #32]
 8014d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014d9c:	0a5b      	lsrs	r3, r3, #9
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d201      	bcs.n	8014da6 <find_volume+0x3ae>
 8014da2:	230d      	movs	r3, #13
 8014da4:	e070      	b.n	8014e88 <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dac:	615a      	str	r2, [r3, #20]
 8014dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db0:	695a      	ldr	r2, [r3, #20]
 8014db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db8:	2280      	movs	r2, #128	; 0x80
 8014dba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014dc0:	2b03      	cmp	r3, #3
 8014dc2:	d149      	bne.n	8014e58 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc6:	3338      	adds	r3, #56	; 0x38
 8014dc8:	3330      	adds	r3, #48	; 0x30
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fd ffb8 	bl	8012d40 <ld_word>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d140      	bne.n	8014e58 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dd8:	3301      	adds	r3, #1
 8014dda:	4619      	mov	r1, r3
 8014ddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014dde:	f7fe fa5f 	bl	80132a0 <move_window>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d137      	bne.n	8014e58 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8014de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dea:	2200      	movs	r2, #0
 8014dec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df0:	3338      	adds	r3, #56	; 0x38
 8014df2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7fd ffa2 	bl	8012d40 <ld_word>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	461a      	mov	r2, r3
 8014e00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d127      	bne.n	8014e58 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0a:	3338      	adds	r3, #56	; 0x38
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fd ffaf 	bl	8012d70 <ld_dword>
 8014e12:	4602      	mov	r2, r0
 8014e14:	4b1e      	ldr	r3, [pc, #120]	; (8014e90 <find_volume+0x498>)
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d11e      	bne.n	8014e58 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1c:	3338      	adds	r3, #56	; 0x38
 8014e1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd ffa4 	bl	8012d70 <ld_dword>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	4b1a      	ldr	r3, [pc, #104]	; (8014e94 <find_volume+0x49c>)
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d113      	bne.n	8014e58 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e32:	3338      	adds	r3, #56	; 0x38
 8014e34:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fd ff99 	bl	8012d70 <ld_dword>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e42:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e46:	3338      	adds	r3, #56	; 0x38
 8014e48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fd ff8f 	bl	8012d70 <ld_dword>
 8014e52:	4602      	mov	r2, r0
 8014e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e56:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014e5e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014e60:	4b0d      	ldr	r3, [pc, #52]	; (8014e98 <find_volume+0x4a0>)
 8014e62:	881b      	ldrh	r3, [r3, #0]
 8014e64:	3301      	adds	r3, #1
 8014e66:	b29a      	uxth	r2, r3
 8014e68:	4b0b      	ldr	r3, [pc, #44]	; (8014e98 <find_volume+0x4a0>)
 8014e6a:	801a      	strh	r2, [r3, #0]
 8014e6c:	4b0a      	ldr	r3, [pc, #40]	; (8014e98 <find_volume+0x4a0>)
 8014e6e:	881a      	ldrh	r2, [r3, #0]
 8014e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e72:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e76:	4a09      	ldr	r2, [pc, #36]	; (8014e9c <find_volume+0x4a4>)
 8014e78:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014e80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014e82:	f7fe f9a5 	bl	80131d0 <clear_lock>
#endif
	return FR_OK;
 8014e86:	2300      	movs	r3, #0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3758      	adds	r7, #88	; 0x58
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	41615252 	.word	0x41615252
 8014e94:	61417272 	.word	0x61417272
 8014e98:	20000c08 	.word	0x20000c08
 8014e9c:	20000c2c 	.word	0x20000c2c

08014ea0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014eaa:	2309      	movs	r3, #9
 8014eac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d01c      	beq.n	8014eee <validate+0x4e>
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d018      	beq.n	8014eee <validate+0x4e>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d013      	beq.n	8014eee <validate+0x4e>
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	889a      	ldrh	r2, [r3, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	88db      	ldrh	r3, [r3, #6]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d10c      	bne.n	8014eee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	785b      	ldrb	r3, [r3, #1]
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fd fe92 	bl	8012c04 <disk_status>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	f003 0301 	and.w	r3, r3, #1
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d101      	bne.n	8014eee <validate+0x4e>
			res = FR_OK;
 8014eea:	2300      	movs	r3, #0
 8014eec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014eee:	7bfb      	ldrb	r3, [r7, #15]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d102      	bne.n	8014efa <validate+0x5a>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	e000      	b.n	8014efc <validate+0x5c>
 8014efa:	2300      	movs	r3, #0
 8014efc:	683a      	ldr	r2, [r7, #0]
 8014efe:	6013      	str	r3, [r2, #0]
	return res;
 8014f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
	...

08014f0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b088      	sub	sp, #32
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	4613      	mov	r3, r2
 8014f18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014f1e:	f107 0310 	add.w	r3, r7, #16
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7ff fcce 	bl	80148c4 <get_ldnumber>
 8014f28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	da01      	bge.n	8014f34 <f_mount+0x28>
 8014f30:	230b      	movs	r3, #11
 8014f32:	e02b      	b.n	8014f8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014f34:	4a17      	ldr	r2, [pc, #92]	; (8014f94 <f_mount+0x88>)
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d005      	beq.n	8014f50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014f44:	69b8      	ldr	r0, [r7, #24]
 8014f46:	f7fe f943 	bl	80131d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d002      	beq.n	8014f5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	490d      	ldr	r1, [pc, #52]	; (8014f94 <f_mount+0x88>)
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d002      	beq.n	8014f72 <f_mount+0x66>
 8014f6c:	79fb      	ldrb	r3, [r7, #7]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d001      	beq.n	8014f76 <f_mount+0x6a>
 8014f72:	2300      	movs	r3, #0
 8014f74:	e00a      	b.n	8014f8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014f76:	f107 010c 	add.w	r1, r7, #12
 8014f7a:	f107 0308 	add.w	r3, r7, #8
 8014f7e:	2200      	movs	r2, #0
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7ff fd39 	bl	80149f8 <find_volume>
 8014f86:	4603      	mov	r3, r0
 8014f88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3720      	adds	r7, #32
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	20000c04 	.word	0x20000c04

08014f98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b09a      	sub	sp, #104	; 0x68
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d101      	bne.n	8014fb0 <f_open+0x18>
 8014fac:	2309      	movs	r3, #9
 8014fae:	e1ad      	b.n	801530c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014fb0:	79fb      	ldrb	r3, [r7, #7]
 8014fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014fb8:	79fa      	ldrb	r2, [r7, #7]
 8014fba:	f107 0114 	add.w	r1, r7, #20
 8014fbe:	f107 0308 	add.w	r3, r7, #8
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7ff fd18 	bl	80149f8 <find_volume>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014fce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f040 8191 	bne.w	80152fa <f_open+0x362>
		dj.obj.fs = fs;
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014fdc:	68ba      	ldr	r2, [r7, #8]
 8014fde:	f107 0318 	add.w	r3, r7, #24
 8014fe2:	4611      	mov	r1, r2
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7ff fbdd 	bl	80147a4 <follow_path>
 8014fea:	4603      	mov	r3, r0
 8014fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d11a      	bne.n	801502e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014ffc:	b25b      	sxtb	r3, r3
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	da03      	bge.n	801500a <f_open+0x72>
				res = FR_INVALID_NAME;
 8015002:	2306      	movs	r3, #6
 8015004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015008:	e011      	b.n	801502e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801500a:	79fb      	ldrb	r3, [r7, #7]
 801500c:	f023 0301 	bic.w	r3, r3, #1
 8015010:	2b00      	cmp	r3, #0
 8015012:	bf14      	ite	ne
 8015014:	2301      	movne	r3, #1
 8015016:	2300      	moveq	r3, #0
 8015018:	b2db      	uxtb	r3, r3
 801501a:	461a      	mov	r2, r3
 801501c:	f107 0318 	add.w	r3, r7, #24
 8015020:	4611      	mov	r1, r2
 8015022:	4618      	mov	r0, r3
 8015024:	f7fd ff8c 	bl	8012f40 <chk_lock>
 8015028:	4603      	mov	r3, r0
 801502a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801502e:	79fb      	ldrb	r3, [r7, #7]
 8015030:	f003 031c 	and.w	r3, r3, #28
 8015034:	2b00      	cmp	r3, #0
 8015036:	d07f      	beq.n	8015138 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8015038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801503c:	2b00      	cmp	r3, #0
 801503e:	d017      	beq.n	8015070 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015040:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015044:	2b04      	cmp	r3, #4
 8015046:	d10e      	bne.n	8015066 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015048:	f7fd ffd6 	bl	8012ff8 <enq_lock>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d006      	beq.n	8015060 <f_open+0xc8>
 8015052:	f107 0318 	add.w	r3, r7, #24
 8015056:	4618      	mov	r0, r3
 8015058:	f7ff f8a8 	bl	80141ac <dir_register>
 801505c:	4603      	mov	r3, r0
 801505e:	e000      	b.n	8015062 <f_open+0xca>
 8015060:	2312      	movs	r3, #18
 8015062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015066:	79fb      	ldrb	r3, [r7, #7]
 8015068:	f043 0308 	orr.w	r3, r3, #8
 801506c:	71fb      	strb	r3, [r7, #7]
 801506e:	e010      	b.n	8015092 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015070:	7fbb      	ldrb	r3, [r7, #30]
 8015072:	f003 0311 	and.w	r3, r3, #17
 8015076:	2b00      	cmp	r3, #0
 8015078:	d003      	beq.n	8015082 <f_open+0xea>
					res = FR_DENIED;
 801507a:	2307      	movs	r3, #7
 801507c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015080:	e007      	b.n	8015092 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015082:	79fb      	ldrb	r3, [r7, #7]
 8015084:	f003 0304 	and.w	r3, r3, #4
 8015088:	2b00      	cmp	r3, #0
 801508a:	d002      	beq.n	8015092 <f_open+0xfa>
 801508c:	2308      	movs	r3, #8
 801508e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015092:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015096:	2b00      	cmp	r3, #0
 8015098:	d168      	bne.n	801516c <f_open+0x1d4>
 801509a:	79fb      	ldrb	r3, [r7, #7]
 801509c:	f003 0308 	and.w	r3, r3, #8
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d063      	beq.n	801516c <f_open+0x1d4>
				dw = GET_FATTIME();
 80150a4:	f7f7 fca8 	bl	800c9f8 <get_fattime>
 80150a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80150aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ac:	330e      	adds	r3, #14
 80150ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7fd fe9b 	bl	8012dec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80150b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b8:	3316      	adds	r3, #22
 80150ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80150bc:	4618      	mov	r0, r3
 80150be:	f7fd fe95 	bl	8012dec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80150c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c4:	330b      	adds	r3, #11
 80150c6:	2220      	movs	r2, #32
 80150c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150ce:	4611      	mov	r1, r2
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fe fde4 	bl	8013c9e <ld_clust>
 80150d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80150dc:	2200      	movs	r2, #0
 80150de:	4618      	mov	r0, r3
 80150e0:	f7fe fdfc 	bl	8013cdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80150e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e6:	331c      	adds	r3, #28
 80150e8:	2100      	movs	r1, #0
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fd fe7e 	bl	8012dec <st_dword>
					fs->wflag = 1;
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	2201      	movs	r2, #1
 80150f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80150f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d037      	beq.n	801516c <f_open+0x1d4>
						dw = fs->winsect;
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015100:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8015102:	f107 0318 	add.w	r3, r7, #24
 8015106:	2200      	movs	r2, #0
 8015108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801510a:	4618      	mov	r0, r3
 801510c:	f7fe fb0f 	bl	801372e <remove_chain>
 8015110:	4603      	mov	r3, r0
 8015112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8015116:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801511a:	2b00      	cmp	r3, #0
 801511c:	d126      	bne.n	801516c <f_open+0x1d4>
							res = move_window(fs, dw);
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015122:	4618      	mov	r0, r3
 8015124:	f7fe f8bc 	bl	80132a0 <move_window>
 8015128:	4603      	mov	r3, r0
 801512a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015132:	3a01      	subs	r2, #1
 8015134:	611a      	str	r2, [r3, #16]
 8015136:	e019      	b.n	801516c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801513c:	2b00      	cmp	r3, #0
 801513e:	d115      	bne.n	801516c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015140:	7fbb      	ldrb	r3, [r7, #30]
 8015142:	f003 0310 	and.w	r3, r3, #16
 8015146:	2b00      	cmp	r3, #0
 8015148:	d003      	beq.n	8015152 <f_open+0x1ba>
					res = FR_NO_FILE;
 801514a:	2304      	movs	r3, #4
 801514c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015150:	e00c      	b.n	801516c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015152:	79fb      	ldrb	r3, [r7, #7]
 8015154:	f003 0302 	and.w	r3, r3, #2
 8015158:	2b00      	cmp	r3, #0
 801515a:	d007      	beq.n	801516c <f_open+0x1d4>
 801515c:	7fbb      	ldrb	r3, [r7, #30]
 801515e:	f003 0301 	and.w	r3, r3, #1
 8015162:	2b00      	cmp	r3, #0
 8015164:	d002      	beq.n	801516c <f_open+0x1d4>
						res = FR_DENIED;
 8015166:	2307      	movs	r3, #7
 8015168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801516c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015170:	2b00      	cmp	r3, #0
 8015172:	d128      	bne.n	80151c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015174:	79fb      	ldrb	r3, [r7, #7]
 8015176:	f003 0308 	and.w	r3, r3, #8
 801517a:	2b00      	cmp	r3, #0
 801517c:	d003      	beq.n	8015186 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801517e:	79fb      	ldrb	r3, [r7, #7]
 8015180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015184:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801518e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015194:	79fb      	ldrb	r3, [r7, #7]
 8015196:	f023 0301 	bic.w	r3, r3, #1
 801519a:	2b00      	cmp	r3, #0
 801519c:	bf14      	ite	ne
 801519e:	2301      	movne	r3, #1
 80151a0:	2300      	moveq	r3, #0
 80151a2:	b2db      	uxtb	r3, r3
 80151a4:	461a      	mov	r2, r3
 80151a6:	f107 0318 	add.w	r3, r7, #24
 80151aa:	4611      	mov	r1, r2
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fd ff45 	bl	801303c <inc_lock>
 80151b2:	4602      	mov	r2, r0
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	691b      	ldr	r3, [r3, #16]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d102      	bne.n	80151c6 <f_open+0x22e>
 80151c0:	2302      	movs	r3, #2
 80151c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80151c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f040 8095 	bne.w	80152fa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151d4:	4611      	mov	r1, r2
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fe fd61 	bl	8013c9e <ld_clust>
 80151dc:	4602      	mov	r2, r0
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80151e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e4:	331c      	adds	r3, #28
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7fd fdc2 	bl	8012d70 <ld_dword>
 80151ec:	4602      	mov	r2, r0
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2200      	movs	r2, #0
 80151f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80151f8:	697a      	ldr	r2, [r7, #20]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	88da      	ldrh	r2, [r3, #6]
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	79fa      	ldrb	r2, [r7, #7]
 801520a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2200      	movs	r2, #0
 8015210:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2200      	movs	r2, #0
 8015216:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2200      	movs	r2, #0
 801521c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	3330      	adds	r3, #48	; 0x30
 8015222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015226:	2100      	movs	r1, #0
 8015228:	4618      	mov	r0, r3
 801522a:	f7fd fe2c 	bl	8012e86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801522e:	79fb      	ldrb	r3, [r7, #7]
 8015230:	f003 0320 	and.w	r3, r3, #32
 8015234:	2b00      	cmp	r3, #0
 8015236:	d060      	beq.n	80152fa <f_open+0x362>
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d05c      	beq.n	80152fa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	68da      	ldr	r2, [r3, #12]
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	025b      	lsls	r3, r3, #9
 801524e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	689b      	ldr	r3, [r3, #8]
 8015254:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801525c:	e016      	b.n	801528c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015262:	4618      	mov	r0, r3
 8015264:	f7fe f8d7 	bl	8013416 <get_fat>
 8015268:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801526a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801526c:	2b01      	cmp	r3, #1
 801526e:	d802      	bhi.n	8015276 <f_open+0x2de>
 8015270:	2302      	movs	r3, #2
 8015272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527c:	d102      	bne.n	8015284 <f_open+0x2ec>
 801527e:	2301      	movs	r3, #1
 8015280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801528c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015290:	2b00      	cmp	r3, #0
 8015292:	d103      	bne.n	801529c <f_open+0x304>
 8015294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015298:	429a      	cmp	r2, r3
 801529a:	d8e0      	bhi.n	801525e <f_open+0x2c6>
				}
				fp->clust = clst;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80152a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80152a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d127      	bne.n	80152fa <f_open+0x362>
 80152aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d022      	beq.n	80152fa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fe f88d 	bl	80133d8 <clust2sect>
 80152be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80152c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d103      	bne.n	80152ce <f_open+0x336>
						res = FR_INT_ERR;
 80152c6:	2302      	movs	r3, #2
 80152c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80152cc:	e015      	b.n	80152fa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80152ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152d0:	0a5a      	lsrs	r2, r3, #9
 80152d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152d4:	441a      	add	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	7858      	ldrb	r0, [r3, #1]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	6a1a      	ldr	r2, [r3, #32]
 80152e8:	2301      	movs	r3, #1
 80152ea:	f7fd fccb 	bl	8012c84 <disk_read>
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d002      	beq.n	80152fa <f_open+0x362>
 80152f4:	2301      	movs	r3, #1
 80152f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80152fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d002      	beq.n	8015308 <f_open+0x370>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	2200      	movs	r2, #0
 8015306:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801530c:	4618      	mov	r0, r3
 801530e:	3768      	adds	r7, #104	; 0x68
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b08c      	sub	sp, #48	; 0x30
 8015318:	af00      	add	r7, sp, #0
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	60b9      	str	r1, [r7, #8]
 801531e:	607a      	str	r2, [r7, #4]
 8015320:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	2200      	movs	r2, #0
 801532a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f107 0210 	add.w	r2, r7, #16
 8015332:	4611      	mov	r1, r2
 8015334:	4618      	mov	r0, r3
 8015336:	f7ff fdb3 	bl	8014ea0 <validate>
 801533a:	4603      	mov	r3, r0
 801533c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015344:	2b00      	cmp	r3, #0
 8015346:	d107      	bne.n	8015358 <f_write+0x44>
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	7d5b      	ldrb	r3, [r3, #21]
 801534c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <f_write+0x4a>
 8015358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801535c:	e14b      	b.n	80155f6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	7d1b      	ldrb	r3, [r3, #20]
 8015362:	f003 0302 	and.w	r3, r3, #2
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <f_write+0x5a>
 801536a:	2307      	movs	r3, #7
 801536c:	e143      	b.n	80155f6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	699a      	ldr	r2, [r3, #24]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	441a      	add	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	699b      	ldr	r3, [r3, #24]
 801537a:	429a      	cmp	r2, r3
 801537c:	f080 812d 	bcs.w	80155da <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	43db      	mvns	r3, r3
 8015386:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015388:	e127      	b.n	80155da <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	699b      	ldr	r3, [r3, #24]
 801538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015392:	2b00      	cmp	r3, #0
 8015394:	f040 80e3 	bne.w	801555e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	699b      	ldr	r3, [r3, #24]
 801539c:	0a5b      	lsrs	r3, r3, #9
 801539e:	693a      	ldr	r2, [r7, #16]
 80153a0:	8952      	ldrh	r2, [r2, #10]
 80153a2:	3a01      	subs	r2, #1
 80153a4:	4013      	ands	r3, r2
 80153a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80153a8:	69bb      	ldr	r3, [r7, #24]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d143      	bne.n	8015436 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	699b      	ldr	r3, [r3, #24]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d10c      	bne.n	80153d0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	689b      	ldr	r3, [r3, #8]
 80153ba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80153bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d11a      	bne.n	80153f8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	2100      	movs	r1, #0
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7fe fa16 	bl	80137f8 <create_chain>
 80153cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80153ce:	e013      	b.n	80153f8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d007      	beq.n	80153e8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	699b      	ldr	r3, [r3, #24]
 80153dc:	4619      	mov	r1, r3
 80153de:	68f8      	ldr	r0, [r7, #12]
 80153e0:	f7fe faa2 	bl	8013928 <clmt_clust>
 80153e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80153e6:	e007      	b.n	80153f8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	69db      	ldr	r3, [r3, #28]
 80153ee:	4619      	mov	r1, r3
 80153f0:	4610      	mov	r0, r2
 80153f2:	f7fe fa01 	bl	80137f8 <create_chain>
 80153f6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f000 80f2 	beq.w	80155e4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015402:	2b01      	cmp	r3, #1
 8015404:	d104      	bne.n	8015410 <f_write+0xfc>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2202      	movs	r2, #2
 801540a:	755a      	strb	r2, [r3, #21]
 801540c:	2302      	movs	r3, #2
 801540e:	e0f2      	b.n	80155f6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015416:	d104      	bne.n	8015422 <f_write+0x10e>
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2201      	movs	r2, #1
 801541c:	755a      	strb	r2, [r3, #21]
 801541e:	2301      	movs	r3, #1
 8015420:	e0e9      	b.n	80155f6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015426:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	689b      	ldr	r3, [r3, #8]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d102      	bne.n	8015436 <f_write+0x122>
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015434:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	7d1b      	ldrb	r3, [r3, #20]
 801543a:	b25b      	sxtb	r3, r3
 801543c:	2b00      	cmp	r3, #0
 801543e:	da18      	bge.n	8015472 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	7858      	ldrb	r0, [r3, #1]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	6a1a      	ldr	r2, [r3, #32]
 801544e:	2301      	movs	r3, #1
 8015450:	f7fd fc38 	bl	8012cc4 <disk_write>
 8015454:	4603      	mov	r3, r0
 8015456:	2b00      	cmp	r3, #0
 8015458:	d004      	beq.n	8015464 <f_write+0x150>
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	2201      	movs	r2, #1
 801545e:	755a      	strb	r2, [r3, #21]
 8015460:	2301      	movs	r3, #1
 8015462:	e0c8      	b.n	80155f6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	7d1b      	ldrb	r3, [r3, #20]
 8015468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801546c:	b2da      	uxtb	r2, r3
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015472:	693a      	ldr	r2, [r7, #16]
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	69db      	ldr	r3, [r3, #28]
 8015478:	4619      	mov	r1, r3
 801547a:	4610      	mov	r0, r2
 801547c:	f7fd ffac 	bl	80133d8 <clust2sect>
 8015480:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d104      	bne.n	8015492 <f_write+0x17e>
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2202      	movs	r2, #2
 801548c:	755a      	strb	r2, [r3, #21]
 801548e:	2302      	movs	r3, #2
 8015490:	e0b1      	b.n	80155f6 <f_write+0x2e2>
			sect += csect;
 8015492:	697a      	ldr	r2, [r7, #20]
 8015494:	69bb      	ldr	r3, [r7, #24]
 8015496:	4413      	add	r3, r2
 8015498:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	0a5b      	lsrs	r3, r3, #9
 801549e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80154a0:	6a3b      	ldr	r3, [r7, #32]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d03c      	beq.n	8015520 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80154a6:	69ba      	ldr	r2, [r7, #24]
 80154a8:	6a3b      	ldr	r3, [r7, #32]
 80154aa:	4413      	add	r3, r2
 80154ac:	693a      	ldr	r2, [r7, #16]
 80154ae:	8952      	ldrh	r2, [r2, #10]
 80154b0:	4293      	cmp	r3, r2
 80154b2:	d905      	bls.n	80154c0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	895b      	ldrh	r3, [r3, #10]
 80154b8:	461a      	mov	r2, r3
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	1ad3      	subs	r3, r2, r3
 80154be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	7858      	ldrb	r0, [r3, #1]
 80154c4:	6a3b      	ldr	r3, [r7, #32]
 80154c6:	697a      	ldr	r2, [r7, #20]
 80154c8:	69f9      	ldr	r1, [r7, #28]
 80154ca:	f7fd fbfb 	bl	8012cc4 <disk_write>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d004      	beq.n	80154de <f_write+0x1ca>
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	2201      	movs	r2, #1
 80154d8:	755a      	strb	r2, [r3, #21]
 80154da:	2301      	movs	r3, #1
 80154dc:	e08b      	b.n	80155f6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	6a1a      	ldr	r2, [r3, #32]
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	1ad3      	subs	r3, r2, r3
 80154e6:	6a3a      	ldr	r2, [r7, #32]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d915      	bls.n	8015518 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	6a1a      	ldr	r2, [r3, #32]
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	025b      	lsls	r3, r3, #9
 80154fc:	69fa      	ldr	r2, [r7, #28]
 80154fe:	4413      	add	r3, r2
 8015500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015504:	4619      	mov	r1, r3
 8015506:	f7fd fc9d 	bl	8012e44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	7d1b      	ldrb	r3, [r3, #20]
 801550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015512:	b2da      	uxtb	r2, r3
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015518:	6a3b      	ldr	r3, [r7, #32]
 801551a:	025b      	lsls	r3, r3, #9
 801551c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801551e:	e03f      	b.n	80155a0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6a1b      	ldr	r3, [r3, #32]
 8015524:	697a      	ldr	r2, [r7, #20]
 8015526:	429a      	cmp	r2, r3
 8015528:	d016      	beq.n	8015558 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	699a      	ldr	r2, [r3, #24]
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015532:	429a      	cmp	r2, r3
 8015534:	d210      	bcs.n	8015558 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	7858      	ldrb	r0, [r3, #1]
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015540:	2301      	movs	r3, #1
 8015542:	697a      	ldr	r2, [r7, #20]
 8015544:	f7fd fb9e 	bl	8012c84 <disk_read>
 8015548:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801554a:	2b00      	cmp	r3, #0
 801554c:	d004      	beq.n	8015558 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2201      	movs	r2, #1
 8015552:	755a      	strb	r2, [r3, #21]
 8015554:	2301      	movs	r3, #1
 8015556:	e04e      	b.n	80155f6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	697a      	ldr	r2, [r7, #20]
 801555c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	699b      	ldr	r3, [r3, #24]
 8015562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015566:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801556a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801556c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	429a      	cmp	r2, r3
 8015572:	d901      	bls.n	8015578 <f_write+0x264>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	699b      	ldr	r3, [r3, #24]
 8015582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015586:	4413      	add	r3, r2
 8015588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801558a:	69f9      	ldr	r1, [r7, #28]
 801558c:	4618      	mov	r0, r3
 801558e:	f7fd fc59 	bl	8012e44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	7d1b      	ldrb	r3, [r3, #20]
 8015596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801559a:	b2da      	uxtb	r2, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80155a0:	69fa      	ldr	r2, [r7, #28]
 80155a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a4:	4413      	add	r3, r2
 80155a6:	61fb      	str	r3, [r7, #28]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	699a      	ldr	r2, [r3, #24]
 80155ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ae:	441a      	add	r2, r3
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	619a      	str	r2, [r3, #24]
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	68da      	ldr	r2, [r3, #12]
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	699b      	ldr	r3, [r3, #24]
 80155bc:	429a      	cmp	r2, r3
 80155be:	bf38      	it	cc
 80155c0:	461a      	movcc	r2, r3
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	60da      	str	r2, [r3, #12]
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155cc:	441a      	add	r2, r3
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	601a      	str	r2, [r3, #0]
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d6:	1ad3      	subs	r3, r2, r3
 80155d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f47f aed4 	bne.w	801538a <f_write+0x76>
 80155e2:	e000      	b.n	80155e6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80155e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	7d1b      	ldrb	r3, [r3, #20]
 80155ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ee:	b2da      	uxtb	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3730      	adds	r7, #48	; 0x30
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b086      	sub	sp, #24
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f107 0208 	add.w	r2, r7, #8
 801560c:	4611      	mov	r1, r2
 801560e:	4618      	mov	r0, r3
 8015610:	f7ff fc46 	bl	8014ea0 <validate>
 8015614:	4603      	mov	r3, r0
 8015616:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015618:	7dfb      	ldrb	r3, [r7, #23]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d168      	bne.n	80156f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	7d1b      	ldrb	r3, [r3, #20]
 8015622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015626:	2b00      	cmp	r3, #0
 8015628:	d062      	beq.n	80156f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	7d1b      	ldrb	r3, [r3, #20]
 801562e:	b25b      	sxtb	r3, r3
 8015630:	2b00      	cmp	r3, #0
 8015632:	da15      	bge.n	8015660 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	7858      	ldrb	r0, [r3, #1]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6a1a      	ldr	r2, [r3, #32]
 8015642:	2301      	movs	r3, #1
 8015644:	f7fd fb3e 	bl	8012cc4 <disk_write>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	d001      	beq.n	8015652 <f_sync+0x54>
 801564e:	2301      	movs	r3, #1
 8015650:	e04f      	b.n	80156f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	7d1b      	ldrb	r3, [r3, #20]
 8015656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801565a:	b2da      	uxtb	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015660:	f7f7 f9ca 	bl	800c9f8 <get_fattime>
 8015664:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566c:	4619      	mov	r1, r3
 801566e:	4610      	mov	r0, r2
 8015670:	f7fd fe16 	bl	80132a0 <move_window>
 8015674:	4603      	mov	r3, r0
 8015676:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015678:	7dfb      	ldrb	r3, [r7, #23]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d138      	bne.n	80156f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015682:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	330b      	adds	r3, #11
 8015688:	781a      	ldrb	r2, [r3, #0]
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	330b      	adds	r3, #11
 801568e:	f042 0220 	orr.w	r2, r2, #32
 8015692:	b2d2      	uxtb	r2, r2
 8015694:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6818      	ldr	r0, [r3, #0]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	689b      	ldr	r3, [r3, #8]
 801569e:	461a      	mov	r2, r3
 80156a0:	68f9      	ldr	r1, [r7, #12]
 80156a2:	f7fe fb1b 	bl	8013cdc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	f103 021c 	add.w	r2, r3, #28
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	68db      	ldr	r3, [r3, #12]
 80156b0:	4619      	mov	r1, r3
 80156b2:	4610      	mov	r0, r2
 80156b4:	f7fd fb9a 	bl	8012dec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	3316      	adds	r3, #22
 80156bc:	6939      	ldr	r1, [r7, #16]
 80156be:	4618      	mov	r0, r3
 80156c0:	f7fd fb94 	bl	8012dec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	3312      	adds	r3, #18
 80156c8:	2100      	movs	r1, #0
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7fd fb73 	bl	8012db6 <st_word>
					fs->wflag = 1;
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	2201      	movs	r2, #1
 80156d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	4618      	mov	r0, r3
 80156da:	f7fd fe0f 	bl	80132fc <sync_fs>
 80156de:	4603      	mov	r3, r0
 80156e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	7d1b      	ldrb	r3, [r3, #20]
 80156e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80156f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3718      	adds	r7, #24
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}

080156fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b084      	sub	sp, #16
 80156fe:	af00      	add	r7, sp, #0
 8015700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f7ff ff7b 	bl	80155fe <f_sync>
 8015708:	4603      	mov	r3, r0
 801570a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801570c:	7bfb      	ldrb	r3, [r7, #15]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d118      	bne.n	8015744 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f107 0208 	add.w	r2, r7, #8
 8015718:	4611      	mov	r1, r2
 801571a:	4618      	mov	r0, r3
 801571c:	f7ff fbc0 	bl	8014ea0 <validate>
 8015720:	4603      	mov	r3, r0
 8015722:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d10c      	bne.n	8015744 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	4618      	mov	r0, r3
 8015730:	f7fd fd12 	bl	8013158 <dec_lock>
 8015734:	4603      	mov	r3, r0
 8015736:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015738:	7bfb      	ldrb	r3, [r7, #15]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d102      	bne.n	8015744 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015744:	7bfb      	ldrb	r3, [r7, #15]
}
 8015746:	4618      	mov	r0, r3
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801574e:	b590      	push	{r4, r7, lr}
 8015750:	b093      	sub	sp, #76	; 0x4c
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015756:	f107 010c 	add.w	r1, r7, #12
 801575a:	1d3b      	adds	r3, r7, #4
 801575c:	2200      	movs	r2, #0
 801575e:	4618      	mov	r0, r3
 8015760:	f7ff f94a 	bl	80149f8 <find_volume>
 8015764:	4603      	mov	r3, r0
 8015766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801576a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801576e:	2b00      	cmp	r3, #0
 8015770:	d131      	bne.n	80157d6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	f107 0310 	add.w	r3, r7, #16
 801577c:	4611      	mov	r1, r2
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff f810 	bl	80147a4 <follow_path>
 8015784:	4603      	mov	r3, r0
 8015786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 801578a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801578e:	2b00      	cmp	r3, #0
 8015790:	d11a      	bne.n	80157c8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015796:	b25b      	sxtb	r3, r3
 8015798:	2b00      	cmp	r3, #0
 801579a:	da03      	bge.n	80157a4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	69ba      	ldr	r2, [r7, #24]
 80157a0:	619a      	str	r2, [r3, #24]
 80157a2:	e011      	b.n	80157c8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80157a4:	7dbb      	ldrb	r3, [r7, #22]
 80157a6:	f003 0310 	and.w	r3, r3, #16
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d009      	beq.n	80157c2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157b2:	68fc      	ldr	r4, [r7, #12]
 80157b4:	4611      	mov	r1, r2
 80157b6:	4618      	mov	r0, r3
 80157b8:	f7fe fa71 	bl	8013c9e <ld_clust>
 80157bc:	4603      	mov	r3, r0
 80157be:	61a3      	str	r3, [r4, #24]
 80157c0:	e002      	b.n	80157c8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80157c2:	2305      	movs	r3, #5
 80157c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80157c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157cc:	2b04      	cmp	r3, #4
 80157ce:	d102      	bne.n	80157d6 <f_chdir+0x88>
 80157d0:	2305      	movs	r3, #5
 80157d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80157d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80157da:	4618      	mov	r0, r3
 80157dc:	374c      	adds	r7, #76	; 0x4c
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd90      	pop	{r4, r7, pc}

080157e2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80157e2:	b580      	push	{r7, lr}
 80157e4:	b086      	sub	sp, #24
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
 80157ea:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d101      	bne.n	80157f6 <f_opendir+0x14>
 80157f2:	2309      	movs	r3, #9
 80157f4:	e064      	b.n	80158c0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80157fa:	f107 010c 	add.w	r1, r7, #12
 80157fe:	463b      	mov	r3, r7
 8015800:	2200      	movs	r2, #0
 8015802:	4618      	mov	r0, r3
 8015804:	f7ff f8f8 	bl	80149f8 <find_volume>
 8015808:	4603      	mov	r3, r0
 801580a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801580c:	7dfb      	ldrb	r3, [r7, #23]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d14f      	bne.n	80158b2 <f_opendir+0xd0>
		obj->fs = fs;
 8015812:	68fa      	ldr	r2, [r7, #12]
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	4619      	mov	r1, r3
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7fe ffc1 	bl	80147a4 <follow_path>
 8015822:	4603      	mov	r3, r0
 8015824:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015826:	7dfb      	ldrb	r3, [r7, #23]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d13d      	bne.n	80158a8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015832:	b25b      	sxtb	r3, r3
 8015834:	2b00      	cmp	r3, #0
 8015836:	db12      	blt.n	801585e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	799b      	ldrb	r3, [r3, #6]
 801583c:	f003 0310 	and.w	r3, r3, #16
 8015840:	2b00      	cmp	r3, #0
 8015842:	d00a      	beq.n	801585a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015844:	68fa      	ldr	r2, [r7, #12]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6a1b      	ldr	r3, [r3, #32]
 801584a:	4619      	mov	r1, r3
 801584c:	4610      	mov	r0, r2
 801584e:	f7fe fa26 	bl	8013c9e <ld_clust>
 8015852:	4602      	mov	r2, r0
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	609a      	str	r2, [r3, #8]
 8015858:	e001      	b.n	801585e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801585a:	2305      	movs	r3, #5
 801585c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801585e:	7dfb      	ldrb	r3, [r7, #23]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d121      	bne.n	80158a8 <f_opendir+0xc6>
				obj->id = fs->id;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	88da      	ldrh	r2, [r3, #6]
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801586c:	2100      	movs	r1, #0
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7fe f88e 	bl	8013990 <dir_sdi>
 8015874:	4603      	mov	r3, r0
 8015876:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015878:	7dfb      	ldrb	r3, [r7, #23]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d114      	bne.n	80158a8 <f_opendir+0xc6>
					if (obj->sclust) {
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	689b      	ldr	r3, [r3, #8]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00d      	beq.n	80158a2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015886:	2100      	movs	r1, #0
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f7fd fbd7 	bl	801303c <inc_lock>
 801588e:	4602      	mov	r2, r0
 8015890:	693b      	ldr	r3, [r7, #16]
 8015892:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	691b      	ldr	r3, [r3, #16]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d105      	bne.n	80158a8 <f_opendir+0xc6>
 801589c:	2312      	movs	r3, #18
 801589e:	75fb      	strb	r3, [r7, #23]
 80158a0:	e002      	b.n	80158a8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	2200      	movs	r2, #0
 80158a6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80158a8:	7dfb      	ldrb	r3, [r7, #23]
 80158aa:	2b04      	cmp	r3, #4
 80158ac:	d101      	bne.n	80158b2 <f_opendir+0xd0>
 80158ae:	2305      	movs	r3, #5
 80158b0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80158b2:	7dfb      	ldrb	r3, [r7, #23]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d002      	beq.n	80158be <f_opendir+0xdc>
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	2200      	movs	r2, #0
 80158bc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80158be:	7dfb      	ldrb	r3, [r7, #23]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3718      	adds	r7, #24
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b084      	sub	sp, #16
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f107 0208 	add.w	r2, r7, #8
 80158d6:	4611      	mov	r1, r2
 80158d8:	4618      	mov	r0, r3
 80158da:	f7ff fae1 	bl	8014ea0 <validate>
 80158de:	4603      	mov	r3, r0
 80158e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80158e2:	7bfb      	ldrb	r3, [r7, #15]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d110      	bne.n	801590a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	691b      	ldr	r3, [r3, #16]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d006      	beq.n	80158fe <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	691b      	ldr	r3, [r3, #16]
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7fd fc2f 	bl	8013158 <dec_lock>
 80158fa:	4603      	mov	r3, r0
 80158fc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d102      	bne.n	801590a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	2200      	movs	r2, #0
 8015908:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801590a:	7bfb      	ldrb	r3, [r7, #15]
}
 801590c:	4618      	mov	r0, r3
 801590e:	3710      	adds	r7, #16
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b098      	sub	sp, #96	; 0x60
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801591c:	f107 010c 	add.w	r1, r7, #12
 8015920:	1d3b      	adds	r3, r7, #4
 8015922:	2202      	movs	r2, #2
 8015924:	4618      	mov	r0, r3
 8015926:	f7ff f867 	bl	80149f8 <find_volume>
 801592a:	4603      	mov	r3, r0
 801592c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8015934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015938:	2b00      	cmp	r3, #0
 801593a:	f040 80f9 	bne.w	8015b30 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	f107 0310 	add.w	r3, r7, #16
 8015944:	4611      	mov	r1, r2
 8015946:	4618      	mov	r0, r3
 8015948:	f7fe ff2c 	bl	80147a4 <follow_path>
 801594c:	4603      	mov	r3, r0
 801594e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015956:	2b00      	cmp	r3, #0
 8015958:	d102      	bne.n	8015960 <f_mkdir+0x4c>
 801595a:	2308      	movs	r3, #8
 801595c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015964:	2b04      	cmp	r3, #4
 8015966:	d108      	bne.n	801597a <f_mkdir+0x66>
 8015968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801596c:	f003 0320 	and.w	r3, r3, #32
 8015970:	2b00      	cmp	r3, #0
 8015972:	d002      	beq.n	801597a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015974:	2306      	movs	r3, #6
 8015976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801597a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801597e:	2b04      	cmp	r3, #4
 8015980:	f040 80d6 	bne.w	8015b30 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015984:	f107 0310 	add.w	r3, r7, #16
 8015988:	2100      	movs	r1, #0
 801598a:	4618      	mov	r0, r3
 801598c:	f7fd ff34 	bl	80137f8 <create_chain>
 8015990:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	895b      	ldrh	r3, [r3, #10]
 8015996:	025b      	lsls	r3, r3, #9
 8015998:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80159a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d102      	bne.n	80159ac <f_mkdir+0x98>
 80159a6:	2307      	movs	r3, #7
 80159a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 80159ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	d102      	bne.n	80159b8 <f_mkdir+0xa4>
 80159b2:	2302      	movs	r3, #2
 80159b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80159b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159be:	d102      	bne.n	80159c6 <f_mkdir+0xb2>
 80159c0:	2301      	movs	r3, #1
 80159c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80159c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d106      	bne.n	80159dc <f_mkdir+0xc8>
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7fd fc21 	bl	8013218 <sync_window>
 80159d6:	4603      	mov	r3, r0
 80159d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 80159dc:	f7f7 f80c 	bl	800c9f8 <get_fattime>
 80159e0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 80159e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d16a      	bne.n	8015ac0 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fd fcf2 	bl	80133d8 <clust2sect>
 80159f4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3338      	adds	r3, #56	; 0x38
 80159fa:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 80159fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a00:	2100      	movs	r1, #0
 8015a02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a04:	f7fd fa3f 	bl	8012e86 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015a08:	220b      	movs	r2, #11
 8015a0a:	2120      	movs	r1, #32
 8015a0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a0e:	f7fd fa3a 	bl	8012e86 <mem_set>
					dir[DIR_Name] = '.';
 8015a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a14:	222e      	movs	r2, #46	; 0x2e
 8015a16:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a1a:	330b      	adds	r3, #11
 8015a1c:	2210      	movs	r2, #16
 8015a1e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a22:	3316      	adds	r3, #22
 8015a24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fd f9e0 	bl	8012dec <st_dword>
					st_clust(fs, dir, dcl);
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7fe f952 	bl	8013cdc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a3a:	3320      	adds	r3, #32
 8015a3c:	2220      	movs	r2, #32
 8015a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fd f9ff 	bl	8012e44 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a48:	3321      	adds	r3, #33	; 0x21
 8015a4a:	222e      	movs	r2, #46	; 0x2e
 8015a4c:	701a      	strb	r2, [r3, #0]
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2b03      	cmp	r3, #3
 8015a58:	d106      	bne.n	8015a68 <f_mkdir+0x154>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d101      	bne.n	8015a68 <f_mkdir+0x154>
 8015a64:	2300      	movs	r3, #0
 8015a66:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8015a68:	68f8      	ldr	r0, [r7, #12]
 8015a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a6c:	3320      	adds	r3, #32
 8015a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a70:	4619      	mov	r1, r3
 8015a72:	f7fe f933 	bl	8013cdc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	895b      	ldrh	r3, [r3, #10]
 8015a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8015a7c:	e01b      	b.n	8015ab6 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8015a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a80:	1c5a      	adds	r2, r3, #1
 8015a82:	657a      	str	r2, [r7, #84]	; 0x54
 8015a84:	68fa      	ldr	r2, [r7, #12]
 8015a86:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fd fbc1 	bl	8013218 <sync_window>
 8015a96:	4603      	mov	r3, r0
 8015a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8015a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10c      	bne.n	8015abe <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8015aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015aac:	f7fd f9eb 	bl	8012e86 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ab2:	3b01      	subs	r3, #1
 8015ab4:	65bb      	str	r3, [r7, #88]	; 0x58
 8015ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1e0      	bne.n	8015a7e <f_mkdir+0x16a>
 8015abc:	e000      	b.n	8015ac0 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8015abe:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d107      	bne.n	8015ad8 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015ac8:	f107 0310 	add.w	r3, r7, #16
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7fe fb6d 	bl	80141ac <dir_register>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8015ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d120      	bne.n	8015b22 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae2:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ae6:	3316      	adds	r3, #22
 8015ae8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fd f97e 	bl	8012dec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015af4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fe f8f0 	bl	8013cdc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015afe:	330b      	adds	r3, #11
 8015b00:	2210      	movs	r2, #16
 8015b02:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2201      	movs	r2, #1
 8015b08:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d10e      	bne.n	8015b30 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7fd fbf1 	bl	80132fc <sync_fs>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015b20:	e006      	b.n	8015b30 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015b22:	f107 0310 	add.w	r3, r7, #16
 8015b26:	2200      	movs	r2, #0
 8015b28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7fd fdff 	bl	801372e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3760      	adds	r7, #96	; 0x60
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8015b3c:	b590      	push	{r4, r7, lr}
 8015b3e:	b09d      	sub	sp, #116	; 0x74
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	607a      	str	r2, [r7, #4]
 8015b46:	603b      	str	r3, [r7, #0]
 8015b48:	460b      	mov	r3, r1
 8015b4a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8015b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b54:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8015b56:	f107 030c 	add.w	r3, r7, #12
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7fe feb2 	bl	80148c4 <get_ldnumber>
 8015b60:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	da02      	bge.n	8015b6e <f_mkfs+0x32>
 8015b68:	230b      	movs	r3, #11
 8015b6a:	f000 bc0d 	b.w	8016388 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8015b6e:	4a94      	ldr	r2, [pc, #592]	; (8015dc0 <f_mkfs+0x284>)
 8015b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d005      	beq.n	8015b86 <f_mkfs+0x4a>
 8015b7a:	4a91      	ldr	r2, [pc, #580]	; (8015dc0 <f_mkfs+0x284>)
 8015b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b82:	2200      	movs	r2, #0
 8015b84:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8015b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8015b92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7fd f84e 	bl	8012c38 <disk_initialize>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8015ba2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015ba6:	f003 0301 	and.w	r3, r3, #1
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d001      	beq.n	8015bb2 <f_mkfs+0x76>
 8015bae:	2303      	movs	r3, #3
 8015bb0:	e3ea      	b.n	8016388 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8015bb2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015bb6:	f003 0304 	and.w	r3, r3, #4
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d001      	beq.n	8015bc2 <f_mkfs+0x86>
 8015bbe:	230a      	movs	r3, #10
 8015bc0:	e3e2      	b.n	8016388 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8015bc2:	f107 0214 	add.w	r2, r7, #20
 8015bc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015bca:	2103      	movs	r1, #3
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fd f899 	bl	8012d04 <disk_ioctl>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d10c      	bne.n	8015bf2 <f_mkfs+0xb6>
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d009      	beq.n	8015bf2 <f_mkfs+0xb6>
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015be4:	d805      	bhi.n	8015bf2 <f_mkfs+0xb6>
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	1e5a      	subs	r2, r3, #1
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	4013      	ands	r3, r2
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d001      	beq.n	8015bf6 <f_mkfs+0xba>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8015bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bfa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d003      	beq.n	8015c0a <f_mkfs+0xce>
 8015c02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d309      	bcc.n	8015c1e <f_mkfs+0xe2>
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015c10:	d805      	bhi.n	8015c1e <f_mkfs+0xe2>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	1e5a      	subs	r2, r3, #1
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	4013      	ands	r3, r2
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d001      	beq.n	8015c22 <f_mkfs+0xe6>
 8015c1e:	2313      	movs	r3, #19
 8015c20:	e3b2      	b.n	8016388 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8015c22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c2a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8015c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8015c3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	fb02 f303 	mul.w	r3, r2, r3
 8015c44:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8015c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d101      	bne.n	8015c50 <f_mkfs+0x114>
 8015c4c:	230e      	movs	r3, #14
 8015c4e:	e39b      	b.n	8016388 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8015c50:	f107 0210 	add.w	r2, r7, #16
 8015c54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015c58:	2101      	movs	r1, #1
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7fd f852 	bl	8012d04 <disk_ioctl>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d001      	beq.n	8015c6a <f_mkfs+0x12e>
 8015c66:	2301      	movs	r3, #1
 8015c68:	e38e      	b.n	8016388 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8015c6a:	7afb      	ldrb	r3, [r7, #11]
 8015c6c:	f003 0308 	and.w	r3, r3, #8
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d001      	beq.n	8015c78 <f_mkfs+0x13c>
 8015c74:	2300      	movs	r3, #0
 8015c76:	e000      	b.n	8015c7a <f_mkfs+0x13e>
 8015c78:	233f      	movs	r3, #63	; 0x3f
 8015c7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c80:	429a      	cmp	r2, r3
 8015c82:	d901      	bls.n	8015c88 <f_mkfs+0x14c>
 8015c84:	230e      	movs	r3, #14
 8015c86:	e37f      	b.n	8016388 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8015c88:	693a      	ldr	r2, [r7, #16]
 8015c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8c:	1ad3      	subs	r3, r2, r3
 8015c8e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	2b7f      	cmp	r3, #127	; 0x7f
 8015c94:	d801      	bhi.n	8015c9a <f_mkfs+0x15e>
 8015c96:	230e      	movs	r3, #14
 8015c98:	e376      	b.n	8016388 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2b80      	cmp	r3, #128	; 0x80
 8015c9e:	d901      	bls.n	8015ca4 <f_mkfs+0x168>
 8015ca0:	2313      	movs	r3, #19
 8015ca2:	e371      	b.n	8016388 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8015ca4:	7afb      	ldrb	r3, [r7, #11]
 8015ca6:	f003 0302 	and.w	r3, r3, #2
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d00d      	beq.n	8015cca <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8015cae:	7afb      	ldrb	r3, [r7, #11]
 8015cb0:	f003 0307 	and.w	r3, r3, #7
 8015cb4:	2b02      	cmp	r3, #2
 8015cb6:	d004      	beq.n	8015cc2 <f_mkfs+0x186>
 8015cb8:	7afb      	ldrb	r3, [r7, #11]
 8015cba:	f003 0301 	and.w	r3, r3, #1
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d103      	bne.n	8015cca <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015cc8:	e009      	b.n	8015cde <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8015cca:	7afb      	ldrb	r3, [r7, #11]
 8015ccc:	f003 0301 	and.w	r3, r3, #1
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d101      	bne.n	8015cd8 <f_mkfs+0x19c>
 8015cd4:	2313      	movs	r3, #19
 8015cd6:	e357      	b.n	8016388 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8015cd8:	2302      	movs	r3, #2
 8015cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8015ce2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ce6:	2b03      	cmp	r3, #3
 8015ce8:	d13c      	bne.n	8015d64 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8015cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d11b      	bne.n	8015d28 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	0c5b      	lsrs	r3, r3, #17
 8015cf4:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015cfe:	e005      	b.n	8015d0c <f_mkfs+0x1d0>
 8015d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d02:	3301      	adds	r3, #1
 8015d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d08:	005b      	lsls	r3, r3, #1
 8015d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d0c:	4a2d      	ldr	r2, [pc, #180]	; (8015dc4 <f_mkfs+0x288>)
 8015d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d007      	beq.n	8015d28 <f_mkfs+0x1ec>
 8015d18:	4a2a      	ldr	r2, [pc, #168]	; (8015dc4 <f_mkfs+0x288>)
 8015d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d20:	461a      	mov	r2, r3
 8015d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d2eb      	bcs.n	8015d00 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8015d28:	693a      	ldr	r2, [r7, #16]
 8015d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d30:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015d32:	6a3b      	ldr	r3, [r7, #32]
 8015d34:	3302      	adds	r3, #2
 8015d36:	009a      	lsls	r2, r3, #2
 8015d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d3a:	4413      	add	r3, r2
 8015d3c:	1e5a      	subs	r2, r3, #1
 8015d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d44:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8015d46:	2320      	movs	r3, #32
 8015d48:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015d4e:	6a3b      	ldr	r3, [r7, #32]
 8015d50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015d54:	4293      	cmp	r3, r2
 8015d56:	d903      	bls.n	8015d60 <f_mkfs+0x224>
 8015d58:	6a3b      	ldr	r3, [r7, #32]
 8015d5a:	4a1b      	ldr	r2, [pc, #108]	; (8015dc8 <f_mkfs+0x28c>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d952      	bls.n	8015e06 <f_mkfs+0x2ca>
 8015d60:	230e      	movs	r3, #14
 8015d62:	e311      	b.n	8016388 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d11b      	bne.n	8015da2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	0b1b      	lsrs	r3, r3, #12
 8015d6e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015d70:	2300      	movs	r3, #0
 8015d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d74:	2301      	movs	r3, #1
 8015d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d78:	e005      	b.n	8015d86 <f_mkfs+0x24a>
 8015d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d82:	005b      	lsls	r3, r3, #1
 8015d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d86:	4a11      	ldr	r2, [pc, #68]	; (8015dcc <f_mkfs+0x290>)
 8015d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d007      	beq.n	8015da2 <f_mkfs+0x266>
 8015d92:	4a0e      	ldr	r2, [pc, #56]	; (8015dcc <f_mkfs+0x290>)
 8015d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	d2eb      	bcs.n	8015d7a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8015da2:	693a      	ldr	r2, [r7, #16]
 8015da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015daa:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d90c      	bls.n	8015dd0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	3302      	adds	r3, #2
 8015dba:	005b      	lsls	r3, r3, #1
 8015dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8015dbe:	e012      	b.n	8015de6 <f_mkfs+0x2aa>
 8015dc0:	20000c04 	.word	0x20000c04
 8015dc4:	0801b9d0 	.word	0x0801b9d0
 8015dc8:	0ffffff5 	.word	0x0ffffff5
 8015dcc:	0801b9e0 	.word	0x0801b9e0
				} else {
					fmt = FS_FAT12;
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015dd6:	6a3a      	ldr	r2, [r7, #32]
 8015dd8:	4613      	mov	r3, r2
 8015dda:	005b      	lsls	r3, r3, #1
 8015ddc:	4413      	add	r3, r2
 8015dde:	3301      	adds	r3, #1
 8015de0:	085b      	lsrs	r3, r3, #1
 8015de2:	3303      	adds	r3, #3
 8015de4:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8015de6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015dea:	4413      	add	r3, r2
 8015dec:	1e5a      	subs	r2, r3, #1
 8015dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8015df4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8015df6:	2301      	movs	r3, #1
 8015df8:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8015dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015dfc:	015a      	lsls	r2, r3, #5
 8015dfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e04:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e0a:	4413      	add	r3, r2
 8015e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e12:	fb02 f203 	mul.w	r2, r2, r3
 8015e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e18:	4413      	add	r3, r2
 8015e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015e1c:	4413      	add	r3, r2
 8015e1e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015e20:	697a      	ldr	r2, [r7, #20]
 8015e22:	69fb      	ldr	r3, [r7, #28]
 8015e24:	4413      	add	r3, r2
 8015e26:	1e5a      	subs	r2, r3, #1
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	425b      	negs	r3, r3
 8015e2c:	401a      	ands	r2, r3
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	1ad3      	subs	r3, r2, r3
 8015e32:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015e34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e38:	2b03      	cmp	r3, #3
 8015e3a:	d108      	bne.n	8015e4e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e40:	4413      	add	r3, r2
 8015e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8015e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e48:	4413      	add	r3, r2
 8015e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e4c:	e006      	b.n	8015e5c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015e4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015e58:	4413      	add	r3, r2
 8015e5a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8015e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e5e:	011a      	lsls	r2, r3, #4
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	441a      	add	r2, r3
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	1ad2      	subs	r2, r2, r3
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d901      	bls.n	8015e72 <f_mkfs+0x336>
 8015e6e:	230e      	movs	r3, #14
 8015e70:	e28a      	b.n	8016388 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8015e72:	693a      	ldr	r2, [r7, #16]
 8015e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e76:	1ad2      	subs	r2, r2, r3
 8015e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015e7c:	fb01 f303 	mul.w	r3, r1, r3
 8015e80:	1ad2      	subs	r2, r2, r3
 8015e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e84:	1ad2      	subs	r2, r2, r3
 8015e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e8c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8015e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e92:	2b03      	cmp	r3, #3
 8015e94:	d10f      	bne.n	8015eb6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8015e96:	6a3b      	ldr	r3, [r7, #32]
 8015e98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015e9c:	4293      	cmp	r3, r2
 8015e9e:	d80a      	bhi.n	8015eb6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d105      	bne.n	8015eb2 <f_mkfs+0x376>
 8015ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ea8:	085b      	lsrs	r3, r3, #1
 8015eaa:	607b      	str	r3, [r7, #4]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d144      	bne.n	8015f3c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8015eb2:	230e      	movs	r3, #14
 8015eb4:	e268      	b.n	8016388 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8015eb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015eba:	2b02      	cmp	r3, #2
 8015ebc:	d133      	bne.n	8015f26 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015ebe:	6a3b      	ldr	r3, [r7, #32]
 8015ec0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d91e      	bls.n	8015f06 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d107      	bne.n	8015ede <f_mkfs+0x3a2>
 8015ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	2b40      	cmp	r3, #64	; 0x40
 8015ed4:	d803      	bhi.n	8015ede <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ed8:	005b      	lsls	r3, r3, #1
 8015eda:	607b      	str	r3, [r7, #4]
 8015edc:	e033      	b.n	8015f46 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8015ede:	7afb      	ldrb	r3, [r7, #11]
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d003      	beq.n	8015ef0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015ee8:	2303      	movs	r3, #3
 8015eea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015eee:	e02a      	b.n	8015f46 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d105      	bne.n	8015f02 <f_mkfs+0x3c6>
 8015ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	607b      	str	r3, [r7, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2b80      	cmp	r3, #128	; 0x80
 8015f00:	d91e      	bls.n	8015f40 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8015f02:	230e      	movs	r3, #14
 8015f04:	e240      	b.n	8016388 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015f06:	6a3b      	ldr	r3, [r7, #32]
 8015f08:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d80a      	bhi.n	8015f26 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d105      	bne.n	8015f22 <f_mkfs+0x3e6>
 8015f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f18:	005b      	lsls	r3, r3, #1
 8015f1a:	607b      	str	r3, [r7, #4]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2b80      	cmp	r3, #128	; 0x80
 8015f20:	d910      	bls.n	8015f44 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015f22:	230e      	movs	r3, #14
 8015f24:	e230      	b.n	8016388 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015f26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	d10c      	bne.n	8015f48 <f_mkfs+0x40c>
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d907      	bls.n	8015f48 <f_mkfs+0x40c>
 8015f38:	230e      	movs	r3, #14
 8015f3a:	e225      	b.n	8016388 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015f3c:	bf00      	nop
 8015f3e:	e6ce      	b.n	8015cde <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015f40:	bf00      	nop
 8015f42:	e6cc      	b.n	8015cde <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015f44:	bf00      	nop
			pau = au;
 8015f46:	e6ca      	b.n	8015cde <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015f48:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f4c:	461a      	mov	r2, r3
 8015f4e:	2100      	movs	r1, #0
 8015f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f52:	f7fc ff98 	bl	8012e86 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015f56:	220b      	movs	r2, #11
 8015f58:	49bc      	ldr	r1, [pc, #752]	; (801624c <f_mkfs+0x710>)
 8015f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f5c:	f7fc ff72 	bl	8012e44 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f62:	330b      	adds	r3, #11
 8015f64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015f66:	4611      	mov	r1, r2
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7fc ff24 	bl	8012db6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f70:	330d      	adds	r3, #13
 8015f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f74:	b2d2      	uxtb	r2, r2
 8015f76:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f7a:	330e      	adds	r3, #14
 8015f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f7e:	b292      	uxth	r2, r2
 8015f80:	4611      	mov	r1, r2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fc ff17 	bl	8012db6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f8a:	3310      	adds	r3, #16
 8015f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015f8e:	b2d2      	uxtb	r2, r2
 8015f90:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f94:	f103 0211 	add.w	r2, r3, #17
 8015f98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f9c:	2b03      	cmp	r3, #3
 8015f9e:	d002      	beq.n	8015fa6 <f_mkfs+0x46a>
 8015fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	e000      	b.n	8015fa8 <f_mkfs+0x46c>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	4619      	mov	r1, r3
 8015faa:	4610      	mov	r0, r2
 8015fac:	f7fc ff03 	bl	8012db6 <st_word>
		if (sz_vol < 0x10000) {
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fb6:	d208      	bcs.n	8015fca <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fba:	3313      	adds	r3, #19
 8015fbc:	693a      	ldr	r2, [r7, #16]
 8015fbe:	b292      	uxth	r2, r2
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fc fef7 	bl	8012db6 <st_word>
 8015fc8:	e006      	b.n	8015fd8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fcc:	3320      	adds	r3, #32
 8015fce:	693a      	ldr	r2, [r7, #16]
 8015fd0:	4611      	mov	r1, r2
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fc ff0a 	bl	8012dec <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fda:	3315      	adds	r3, #21
 8015fdc:	22f8      	movs	r2, #248	; 0xf8
 8015fde:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe2:	3318      	adds	r3, #24
 8015fe4:	213f      	movs	r1, #63	; 0x3f
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fc fee5 	bl	8012db6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fee:	331a      	adds	r3, #26
 8015ff0:	21ff      	movs	r1, #255	; 0xff
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fc fedf 	bl	8012db6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffa:	331c      	adds	r3, #28
 8015ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7fc fef4 	bl	8012dec <st_dword>
		if (fmt == FS_FAT32) {
 8016004:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016008:	2b03      	cmp	r3, #3
 801600a:	d131      	bne.n	8016070 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8016012:	f7f6 fcf1 	bl	800c9f8 <get_fattime>
 8016016:	4603      	mov	r3, r0
 8016018:	4619      	mov	r1, r3
 801601a:	4620      	mov	r0, r4
 801601c:	f7fc fee6 	bl	8012dec <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8016020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016022:	3324      	adds	r3, #36	; 0x24
 8016024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016026:	4618      	mov	r0, r3
 8016028:	f7fc fee0 	bl	8012dec <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602e:	332c      	adds	r3, #44	; 0x2c
 8016030:	2102      	movs	r1, #2
 8016032:	4618      	mov	r0, r3
 8016034:	f7fc feda 	bl	8012dec <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8016038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603a:	3330      	adds	r3, #48	; 0x30
 801603c:	2101      	movs	r1, #1
 801603e:	4618      	mov	r0, r3
 8016040:	f7fc feb9 	bl	8012db6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	3332      	adds	r3, #50	; 0x32
 8016048:	2106      	movs	r1, #6
 801604a:	4618      	mov	r0, r3
 801604c:	f7fc feb3 	bl	8012db6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8016050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016052:	3340      	adds	r3, #64	; 0x40
 8016054:	2280      	movs	r2, #128	; 0x80
 8016056:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8016058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605a:	3342      	adds	r3, #66	; 0x42
 801605c:	2229      	movs	r2, #41	; 0x29
 801605e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8016060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016062:	3347      	adds	r3, #71	; 0x47
 8016064:	2213      	movs	r2, #19
 8016066:	497a      	ldr	r1, [pc, #488]	; (8016250 <f_mkfs+0x714>)
 8016068:	4618      	mov	r0, r3
 801606a:	f7fc feeb 	bl	8012e44 <mem_cpy>
 801606e:	e020      	b.n	80160b2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8016070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016072:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8016076:	f7f6 fcbf 	bl	800c9f8 <get_fattime>
 801607a:	4603      	mov	r3, r0
 801607c:	4619      	mov	r1, r3
 801607e:	4620      	mov	r0, r4
 8016080:	f7fc feb4 	bl	8012dec <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8016084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016086:	3316      	adds	r3, #22
 8016088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801608a:	b292      	uxth	r2, r2
 801608c:	4611      	mov	r1, r2
 801608e:	4618      	mov	r0, r3
 8016090:	f7fc fe91 	bl	8012db6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8016094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016096:	3324      	adds	r3, #36	; 0x24
 8016098:	2280      	movs	r2, #128	; 0x80
 801609a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801609e:	3326      	adds	r3, #38	; 0x26
 80160a0:	2229      	movs	r2, #41	; 0x29
 80160a2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80160a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a6:	332b      	adds	r3, #43	; 0x2b
 80160a8:	2213      	movs	r2, #19
 80160aa:	496a      	ldr	r1, [pc, #424]	; (8016254 <f_mkfs+0x718>)
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fc fec9 	bl	8012e44 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80160b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80160b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80160bc:	4618      	mov	r0, r3
 80160be:	f7fc fe7a 	bl	8012db6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80160c2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80160c6:	2301      	movs	r3, #1
 80160c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160cc:	f7fc fdfa 	bl	8012cc4 <disk_write>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <f_mkfs+0x59e>
 80160d6:	2301      	movs	r3, #1
 80160d8:	e156      	b.n	8016388 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80160da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80160de:	2b03      	cmp	r3, #3
 80160e0:	d140      	bne.n	8016164 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80160e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e4:	1d9a      	adds	r2, r3, #6
 80160e6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80160ea:	2301      	movs	r3, #1
 80160ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160ee:	f7fc fde9 	bl	8012cc4 <disk_write>
			mem_set(buf, 0, ss);
 80160f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80160f4:	461a      	mov	r2, r3
 80160f6:	2100      	movs	r1, #0
 80160f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160fa:	f7fc fec4 	bl	8012e86 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80160fe:	4956      	ldr	r1, [pc, #344]	; (8016258 <f_mkfs+0x71c>)
 8016100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016102:	f7fc fe73 	bl	8012dec <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8016106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016108:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801610c:	4953      	ldr	r1, [pc, #332]	; (801625c <f_mkfs+0x720>)
 801610e:	4618      	mov	r0, r3
 8016110:	f7fc fe6c 	bl	8012dec <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8016114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016116:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	3b01      	subs	r3, #1
 801611e:	4619      	mov	r1, r3
 8016120:	4610      	mov	r0, r2
 8016122:	f7fc fe63 	bl	8012dec <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8016126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016128:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801612c:	2102      	movs	r1, #2
 801612e:	4618      	mov	r0, r3
 8016130:	f7fc fe5c 	bl	8012dec <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8016134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016136:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801613a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801613e:	4618      	mov	r0, r3
 8016140:	f7fc fe39 	bl	8012db6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8016144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016146:	1dda      	adds	r2, r3, #7
 8016148:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801614c:	2301      	movs	r3, #1
 801614e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016150:	f7fc fdb8 	bl	8012cc4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8016154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016156:	1c5a      	adds	r2, r3, #1
 8016158:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801615c:	2301      	movs	r3, #1
 801615e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016160:	f7fc fdb0 	bl	8012cc4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8016164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016166:	2100      	movs	r1, #0
 8016168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801616a:	f7fc fe8c 	bl	8012e86 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801616e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016170:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8016172:	2300      	movs	r3, #0
 8016174:	64bb      	str	r3, [r7, #72]	; 0x48
 8016176:	e04b      	b.n	8016210 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8016178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801617c:	2b03      	cmp	r3, #3
 801617e:	d113      	bne.n	80161a8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8016180:	f06f 0107 	mvn.w	r1, #7
 8016184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016186:	f7fc fe31 	bl	8012dec <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618c:	3304      	adds	r3, #4
 801618e:	f04f 31ff 	mov.w	r1, #4294967295
 8016192:	4618      	mov	r0, r3
 8016194:	f7fc fe2a 	bl	8012dec <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8016198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619a:	3308      	adds	r3, #8
 801619c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fc fe23 	bl	8012dec <st_dword>
 80161a6:	e00b      	b.n	80161c0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80161a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161ac:	2b01      	cmp	r3, #1
 80161ae:	d101      	bne.n	80161b4 <f_mkfs+0x678>
 80161b0:	4b2b      	ldr	r3, [pc, #172]	; (8016260 <f_mkfs+0x724>)
 80161b2:	e001      	b.n	80161b8 <f_mkfs+0x67c>
 80161b4:	f06f 0307 	mvn.w	r3, #7
 80161b8:	4619      	mov	r1, r3
 80161ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161bc:	f7fc fe16 	bl	8012dec <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80161c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161c2:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80161c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	4293      	cmp	r3, r2
 80161ca:	bf28      	it	cs
 80161cc:	4613      	movcs	r3, r2
 80161ce:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80161d0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80161d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80161d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161da:	f7fc fd73 	bl	8012cc4 <disk_write>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d001      	beq.n	80161e8 <f_mkfs+0x6ac>
 80161e4:	2301      	movs	r3, #1
 80161e6:	e0cf      	b.n	8016388 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80161e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80161ea:	461a      	mov	r2, r3
 80161ec:	2100      	movs	r1, #0
 80161ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161f0:	f7fc fe49 	bl	8012e86 <mem_set>
				sect += n; nsect -= n;
 80161f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80161f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161f8:	4413      	add	r3, r2
 80161fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80161fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80161fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8016204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016206:	2b00      	cmp	r3, #0
 8016208:	d1dc      	bne.n	80161c4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801620c:	3301      	adds	r3, #1
 801620e:	64bb      	str	r3, [r7, #72]	; 0x48
 8016210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016214:	429a      	cmp	r2, r3
 8016216:	d3af      	bcc.n	8016178 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8016218:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801621c:	2b03      	cmp	r3, #3
 801621e:	d101      	bne.n	8016224 <f_mkfs+0x6e8>
 8016220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016222:	e000      	b.n	8016226 <f_mkfs+0x6ea>
 8016224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016226:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8016228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622c:	4293      	cmp	r3, r2
 801622e:	bf28      	it	cs
 8016230:	4613      	movcs	r3, r2
 8016232:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8016234:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8016238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801623a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801623c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801623e:	f7fc fd41 	bl	8012cc4 <disk_write>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d00d      	beq.n	8016264 <f_mkfs+0x728>
 8016248:	2301      	movs	r3, #1
 801624a:	e09d      	b.n	8016388 <f_mkfs+0x84c>
 801624c:	08017c84 	.word	0x08017c84
 8016250:	08017c90 	.word	0x08017c90
 8016254:	08017ca4 	.word	0x08017ca4
 8016258:	41615252 	.word	0x41615252
 801625c:	61417272 	.word	0x61417272
 8016260:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8016264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016268:	4413      	add	r3, r2
 801626a:	66bb      	str	r3, [r7, #104]	; 0x68
 801626c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801626e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016270:	1ad3      	subs	r3, r2, r3
 8016272:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8016274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016276:	2b00      	cmp	r3, #0
 8016278:	d1d6      	bne.n	8016228 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801627a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801627e:	2b03      	cmp	r3, #3
 8016280:	d103      	bne.n	801628a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8016282:	230c      	movs	r3, #12
 8016284:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8016288:	e010      	b.n	80162ac <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801628a:	693b      	ldr	r3, [r7, #16]
 801628c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016290:	d303      	bcc.n	801629a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8016292:	2306      	movs	r3, #6
 8016294:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8016298:	e008      	b.n	80162ac <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801629a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801629e:	2b02      	cmp	r3, #2
 80162a0:	d101      	bne.n	80162a6 <f_mkfs+0x76a>
 80162a2:	2304      	movs	r3, #4
 80162a4:	e000      	b.n	80162a8 <f_mkfs+0x76c>
 80162a6:	2301      	movs	r3, #1
 80162a8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80162ac:	7afb      	ldrb	r3, [r7, #11]
 80162ae:	f003 0308 	and.w	r3, r3, #8
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d15b      	bne.n	801636e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80162b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80162b8:	461a      	mov	r2, r3
 80162ba:	2100      	movs	r1, #0
 80162bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162be:	f7fc fde2 	bl	8012e86 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80162c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80162c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fc fd72 	bl	8012db6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80162d8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	2200      	movs	r2, #0
 80162de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	3301      	adds	r3, #1
 80162e4:	2201      	movs	r2, #1
 80162e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	3302      	adds	r3, #2
 80162ec:	2201      	movs	r2, #1
 80162ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	3303      	adds	r3, #3
 80162f4:	2200      	movs	r2, #0
 80162f6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	3304      	adds	r3, #4
 80162fc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8016300:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8016302:	693a      	ldr	r2, [r7, #16]
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	441a      	add	r2, r3
 8016308:	4b21      	ldr	r3, [pc, #132]	; (8016390 <f_mkfs+0x854>)
 801630a:	fba3 1302 	umull	r1, r3, r3, r2
 801630e:	1ad2      	subs	r2, r2, r3
 8016310:	0852      	lsrs	r2, r2, #1
 8016312:	4413      	add	r3, r2
 8016314:	0b5b      	lsrs	r3, r3, #13
 8016316:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8016318:	69bb      	ldr	r3, [r7, #24]
 801631a:	3305      	adds	r3, #5
 801631c:	22fe      	movs	r2, #254	; 0xfe
 801631e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8016320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016322:	089b      	lsrs	r3, r3, #2
 8016324:	b2da      	uxtb	r2, r3
 8016326:	69bb      	ldr	r3, [r7, #24]
 8016328:	3306      	adds	r3, #6
 801632a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801632e:	b2d2      	uxtb	r2, r2
 8016330:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8016332:	69bb      	ldr	r3, [r7, #24]
 8016334:	3307      	adds	r3, #7
 8016336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016338:	b2d2      	uxtb	r2, r2
 801633a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	3308      	adds	r3, #8
 8016340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016342:	4618      	mov	r0, r3
 8016344:	f7fc fd52 	bl	8012dec <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	330c      	adds	r3, #12
 801634c:	693a      	ldr	r2, [r7, #16]
 801634e:	4611      	mov	r1, r2
 8016350:	4618      	mov	r0, r3
 8016352:	f7fc fd4b 	bl	8012dec <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8016356:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801635a:	2301      	movs	r3, #1
 801635c:	2200      	movs	r2, #0
 801635e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016360:	f7fc fcb0 	bl	8012cc4 <disk_write>
 8016364:	4603      	mov	r3, r0
 8016366:	2b00      	cmp	r3, #0
 8016368:	d001      	beq.n	801636e <f_mkfs+0x832>
 801636a:	2301      	movs	r3, #1
 801636c:	e00c      	b.n	8016388 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801636e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016372:	2200      	movs	r2, #0
 8016374:	2100      	movs	r1, #0
 8016376:	4618      	mov	r0, r3
 8016378:	f7fc fcc4 	bl	8012d04 <disk_ioctl>
 801637c:	4603      	mov	r3, r0
 801637e:	2b00      	cmp	r3, #0
 8016380:	d001      	beq.n	8016386 <f_mkfs+0x84a>
 8016382:	2301      	movs	r3, #1
 8016384:	e000      	b.n	8016388 <f_mkfs+0x84c>

	return FR_OK;
 8016386:	2300      	movs	r3, #0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3774      	adds	r7, #116	; 0x74
 801638c:	46bd      	mov	sp, r7
 801638e:	bd90      	pop	{r4, r7, pc}
 8016390:	0515565b 	.word	0x0515565b

08016394 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	460b      	mov	r3, r1
 801639e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80163a0:	78fb      	ldrb	r3, [r7, #3]
 80163a2:	2b0a      	cmp	r3, #10
 80163a4:	d103      	bne.n	80163ae <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80163a6:	210d      	movs	r1, #13
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7ff fff3 	bl	8016394 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	db25      	blt.n	8016406 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	1c5a      	adds	r2, r3, #1
 80163be:	60fa      	str	r2, [r7, #12]
 80163c0:	687a      	ldr	r2, [r7, #4]
 80163c2:	4413      	add	r3, r2
 80163c4:	78fa      	ldrb	r2, [r7, #3]
 80163c6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2b3c      	cmp	r3, #60	; 0x3c
 80163cc:	dd12      	ble.n	80163f4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6818      	ldr	r0, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f103 010c 	add.w	r1, r3, #12
 80163d8:	68fa      	ldr	r2, [r7, #12]
 80163da:	f107 0308 	add.w	r3, r7, #8
 80163de:	f7fe ff99 	bl	8015314 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80163e2:	68ba      	ldr	r2, [r7, #8]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d101      	bne.n	80163ee <putc_bfd+0x5a>
 80163ea:	2300      	movs	r3, #0
 80163ec:	e001      	b.n	80163f2 <putc_bfd+0x5e>
 80163ee:	f04f 33ff 	mov.w	r3, #4294967295
 80163f2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	68fa      	ldr	r2, [r7, #12]
 80163f8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	689b      	ldr	r3, [r3, #8]
 80163fe:	1c5a      	adds	r2, r3, #1
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	609a      	str	r2, [r3, #8]
 8016404:	e000      	b.n	8016408 <putc_bfd+0x74>
	if (i < 0) return;
 8016406:	bf00      	nop
}
 8016408:	3710      	adds	r7, #16
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}

0801640e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801640e:	b580      	push	{r7, lr}
 8016410:	b084      	sub	sp, #16
 8016412:	af00      	add	r7, sp, #0
 8016414:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	2b00      	cmp	r3, #0
 801641c:	db17      	blt.n	801644e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	6818      	ldr	r0, [r3, #0]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f103 010c 	add.w	r1, r3, #12
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	685b      	ldr	r3, [r3, #4]
 801642c:	461a      	mov	r2, r3
 801642e:	f107 030c 	add.w	r3, r7, #12
 8016432:	f7fe ff6f 	bl	8015314 <f_write>
 8016436:	4603      	mov	r3, r0
 8016438:	2b00      	cmp	r3, #0
 801643a:	d108      	bne.n	801644e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	461a      	mov	r2, r3
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	429a      	cmp	r2, r3
 8016446:	d102      	bne.n	801644e <putc_flush+0x40>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	689b      	ldr	r3, [r3, #8]
 801644c:	e001      	b.n	8016452 <putc_flush+0x44>
	return EOF;
 801644e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016452:	4618      	mov	r0, r3
 8016454:	3710      	adds	r7, #16
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801645a:	b480      	push	{r7}
 801645c:	b083      	sub	sp, #12
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
 8016462:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	683a      	ldr	r2, [r7, #0]
 8016468:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2200      	movs	r2, #0
 801646e:	605a      	str	r2, [r3, #4]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	685a      	ldr	r2, [r3, #4]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	609a      	str	r2, [r3, #8]
}
 8016478:	bf00      	nop
 801647a:	370c      	adds	r7, #12
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b096      	sub	sp, #88	; 0x58
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801648e:	f107 030c 	add.w	r3, r7, #12
 8016492:	6839      	ldr	r1, [r7, #0]
 8016494:	4618      	mov	r0, r3
 8016496:	f7ff ffe0 	bl	801645a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801649a:	e009      	b.n	80164b0 <f_puts+0x2c>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	1c5a      	adds	r2, r3, #1
 80164a0:	607a      	str	r2, [r7, #4]
 80164a2:	781a      	ldrb	r2, [r3, #0]
 80164a4:	f107 030c 	add.w	r3, r7, #12
 80164a8:	4611      	mov	r1, r2
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7ff ff72 	bl	8016394 <putc_bfd>
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d1f1      	bne.n	801649c <f_puts+0x18>
	return putc_flush(&pb);
 80164b8:	f107 030c 	add.w	r3, r7, #12
 80164bc:	4618      	mov	r0, r3
 80164be:	f7ff ffa6 	bl	801640e <putc_flush>
 80164c2:	4603      	mov	r3, r0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3758      	adds	r7, #88	; 0x58
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}

080164cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80164cc:	b480      	push	{r7}
 80164ce:	b087      	sub	sp, #28
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	4613      	mov	r3, r2
 80164d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80164da:	2301      	movs	r3, #1
 80164dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80164de:	2300      	movs	r3, #0
 80164e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80164e2:	4b1f      	ldr	r3, [pc, #124]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 80164e4:	7a5b      	ldrb	r3, [r3, #9]
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d131      	bne.n	8016550 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80164ec:	4b1c      	ldr	r3, [pc, #112]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 80164ee:	7a5b      	ldrb	r3, [r3, #9]
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	461a      	mov	r2, r3
 80164f4:	4b1a      	ldr	r3, [pc, #104]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 80164f6:	2100      	movs	r1, #0
 80164f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80164fa:	4b19      	ldr	r3, [pc, #100]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 80164fc:	7a5b      	ldrb	r3, [r3, #9]
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	4a17      	ldr	r2, [pc, #92]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	4413      	add	r3, r2
 8016506:	68fa      	ldr	r2, [r7, #12]
 8016508:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801650a:	4b15      	ldr	r3, [pc, #84]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 801650c:	7a5b      	ldrb	r3, [r3, #9]
 801650e:	b2db      	uxtb	r3, r3
 8016510:	461a      	mov	r2, r3
 8016512:	4b13      	ldr	r3, [pc, #76]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 8016514:	4413      	add	r3, r2
 8016516:	79fa      	ldrb	r2, [r7, #7]
 8016518:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801651a:	4b11      	ldr	r3, [pc, #68]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 801651c:	7a5b      	ldrb	r3, [r3, #9]
 801651e:	b2db      	uxtb	r3, r3
 8016520:	1c5a      	adds	r2, r3, #1
 8016522:	b2d1      	uxtb	r1, r2
 8016524:	4a0e      	ldr	r2, [pc, #56]	; (8016560 <FATFS_LinkDriverEx+0x94>)
 8016526:	7251      	strb	r1, [r2, #9]
 8016528:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801652a:	7dbb      	ldrb	r3, [r7, #22]
 801652c:	3330      	adds	r3, #48	; 0x30
 801652e:	b2da      	uxtb	r2, r3
 8016530:	68bb      	ldr	r3, [r7, #8]
 8016532:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	3301      	adds	r3, #1
 8016538:	223a      	movs	r2, #58	; 0x3a
 801653a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	3302      	adds	r3, #2
 8016540:	222f      	movs	r2, #47	; 0x2f
 8016542:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	3303      	adds	r3, #3
 8016548:	2200      	movs	r2, #0
 801654a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801654c:	2300      	movs	r3, #0
 801654e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016550:	7dfb      	ldrb	r3, [r7, #23]
}
 8016552:	4618      	mov	r0, r3
 8016554:	371c      	adds	r7, #28
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop
 8016560:	20000e2c 	.word	0x20000e2c

08016564 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801656e:	2200      	movs	r2, #0
 8016570:	6839      	ldr	r1, [r7, #0]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7ff ffaa 	bl	80164cc <FATFS_LinkDriverEx>
 8016578:	4603      	mov	r3, r0
}
 801657a:	4618      	mov	r0, r3
 801657c:	3708      	adds	r7, #8
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}
	...

08016584 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8016584:	b480      	push	{r7}
 8016586:	b085      	sub	sp, #20
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	460b      	mov	r3, r1
 801658e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8016590:	2300      	movs	r3, #0
 8016592:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8016594:	2301      	movs	r3, #1
 8016596:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8016598:	4b15      	ldr	r3, [pc, #84]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 801659a:	7a5b      	ldrb	r3, [r3, #9]
 801659c:	b2db      	uxtb	r3, r3
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d01e      	beq.n	80165e0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	3b30      	subs	r3, #48	; 0x30
 80165a8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80165aa:	7bbb      	ldrb	r3, [r7, #14]
 80165ac:	4a10      	ldr	r2, [pc, #64]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	4413      	add	r3, r2
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d013      	beq.n	80165e0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80165b8:	7bbb      	ldrb	r3, [r7, #14]
 80165ba:	4a0d      	ldr	r2, [pc, #52]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	4413      	add	r3, r2
 80165c0:	2200      	movs	r2, #0
 80165c2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80165c4:	7bbb      	ldrb	r3, [r7, #14]
 80165c6:	4a0a      	ldr	r2, [pc, #40]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 80165c8:	4413      	add	r3, r2
 80165ca:	2200      	movs	r2, #0
 80165cc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80165ce:	4b08      	ldr	r3, [pc, #32]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 80165d0:	7a5b      	ldrb	r3, [r3, #9]
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	3b01      	subs	r3, #1
 80165d6:	b2da      	uxtb	r2, r3
 80165d8:	4b05      	ldr	r3, [pc, #20]	; (80165f0 <FATFS_UnLinkDriverEx+0x6c>)
 80165da:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80165dc:	2300      	movs	r3, #0
 80165de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3714      	adds	r7, #20
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	20000e2c 	.word	0x20000e2c

080165f4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80165fc:	2100      	movs	r1, #0
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f7ff ffc0 	bl	8016584 <FATFS_UnLinkDriverEx>
 8016604:	4603      	mov	r3, r0
}
 8016606:	4618      	mov	r0, r3
 8016608:	3708      	adds	r7, #8
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
	...

08016610 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016610:	b480      	push	{r7}
 8016612:	b085      	sub	sp, #20
 8016614:	af00      	add	r7, sp, #0
 8016616:	4603      	mov	r3, r0
 8016618:	6039      	str	r1, [r7, #0]
 801661a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801661c:	88fb      	ldrh	r3, [r7, #6]
 801661e:	2b7f      	cmp	r3, #127	; 0x7f
 8016620:	d802      	bhi.n	8016628 <ff_convert+0x18>
		c = chr;
 8016622:	88fb      	ldrh	r3, [r7, #6]
 8016624:	81fb      	strh	r3, [r7, #14]
 8016626:	e025      	b.n	8016674 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00b      	beq.n	8016646 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801662e:	88fb      	ldrh	r3, [r7, #6]
 8016630:	2bff      	cmp	r3, #255	; 0xff
 8016632:	d805      	bhi.n	8016640 <ff_convert+0x30>
 8016634:	88fb      	ldrh	r3, [r7, #6]
 8016636:	3b80      	subs	r3, #128	; 0x80
 8016638:	4a12      	ldr	r2, [pc, #72]	; (8016684 <ff_convert+0x74>)
 801663a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801663e:	e000      	b.n	8016642 <ff_convert+0x32>
 8016640:	2300      	movs	r3, #0
 8016642:	81fb      	strh	r3, [r7, #14]
 8016644:	e016      	b.n	8016674 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016646:	2300      	movs	r3, #0
 8016648:	81fb      	strh	r3, [r7, #14]
 801664a:	e009      	b.n	8016660 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801664c:	89fb      	ldrh	r3, [r7, #14]
 801664e:	4a0d      	ldr	r2, [pc, #52]	; (8016684 <ff_convert+0x74>)
 8016650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016654:	88fa      	ldrh	r2, [r7, #6]
 8016656:	429a      	cmp	r2, r3
 8016658:	d006      	beq.n	8016668 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801665a:	89fb      	ldrh	r3, [r7, #14]
 801665c:	3301      	adds	r3, #1
 801665e:	81fb      	strh	r3, [r7, #14]
 8016660:	89fb      	ldrh	r3, [r7, #14]
 8016662:	2b7f      	cmp	r3, #127	; 0x7f
 8016664:	d9f2      	bls.n	801664c <ff_convert+0x3c>
 8016666:	e000      	b.n	801666a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016668:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801666a:	89fb      	ldrh	r3, [r7, #14]
 801666c:	3380      	adds	r3, #128	; 0x80
 801666e:	b29b      	uxth	r3, r3
 8016670:	b2db      	uxtb	r3, r3
 8016672:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016674:	89fb      	ldrh	r3, [r7, #14]
}
 8016676:	4618      	mov	r0, r3
 8016678:	3714      	adds	r7, #20
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	0801b9f0 	.word	0x0801b9f0

08016688 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016688:	b480      	push	{r7}
 801668a:	b087      	sub	sp, #28
 801668c:	af00      	add	r7, sp, #0
 801668e:	4603      	mov	r3, r0
 8016690:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016692:	88fb      	ldrh	r3, [r7, #6]
 8016694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016698:	d201      	bcs.n	801669e <ff_wtoupper+0x16>
 801669a:	4b3e      	ldr	r3, [pc, #248]	; (8016794 <ff_wtoupper+0x10c>)
 801669c:	e000      	b.n	80166a0 <ff_wtoupper+0x18>
 801669e:	4b3e      	ldr	r3, [pc, #248]	; (8016798 <ff_wtoupper+0x110>)
 80166a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	1c9a      	adds	r2, r3, #2
 80166a6:	617a      	str	r2, [r7, #20]
 80166a8:	881b      	ldrh	r3, [r3, #0]
 80166aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80166ac:	8a7b      	ldrh	r3, [r7, #18]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d068      	beq.n	8016784 <ff_wtoupper+0xfc>
 80166b2:	88fa      	ldrh	r2, [r7, #6]
 80166b4:	8a7b      	ldrh	r3, [r7, #18]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d364      	bcc.n	8016784 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	1c9a      	adds	r2, r3, #2
 80166be:	617a      	str	r2, [r7, #20]
 80166c0:	881b      	ldrh	r3, [r3, #0]
 80166c2:	823b      	strh	r3, [r7, #16]
 80166c4:	8a3b      	ldrh	r3, [r7, #16]
 80166c6:	0a1b      	lsrs	r3, r3, #8
 80166c8:	81fb      	strh	r3, [r7, #14]
 80166ca:	8a3b      	ldrh	r3, [r7, #16]
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80166d0:	88fa      	ldrh	r2, [r7, #6]
 80166d2:	8a79      	ldrh	r1, [r7, #18]
 80166d4:	8a3b      	ldrh	r3, [r7, #16]
 80166d6:	440b      	add	r3, r1
 80166d8:	429a      	cmp	r2, r3
 80166da:	da49      	bge.n	8016770 <ff_wtoupper+0xe8>
			switch (cmd) {
 80166dc:	89fb      	ldrh	r3, [r7, #14]
 80166de:	2b08      	cmp	r3, #8
 80166e0:	d84f      	bhi.n	8016782 <ff_wtoupper+0xfa>
 80166e2:	a201      	add	r2, pc, #4	; (adr r2, 80166e8 <ff_wtoupper+0x60>)
 80166e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166e8:	0801670d 	.word	0x0801670d
 80166ec:	0801671f 	.word	0x0801671f
 80166f0:	08016735 	.word	0x08016735
 80166f4:	0801673d 	.word	0x0801673d
 80166f8:	08016745 	.word	0x08016745
 80166fc:	0801674d 	.word	0x0801674d
 8016700:	08016755 	.word	0x08016755
 8016704:	0801675d 	.word	0x0801675d
 8016708:	08016765 	.word	0x08016765
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801670c:	88fa      	ldrh	r2, [r7, #6]
 801670e:	8a7b      	ldrh	r3, [r7, #18]
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	697a      	ldr	r2, [r7, #20]
 8016716:	4413      	add	r3, r2
 8016718:	881b      	ldrh	r3, [r3, #0]
 801671a:	80fb      	strh	r3, [r7, #6]
 801671c:	e027      	b.n	801676e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801671e:	88fa      	ldrh	r2, [r7, #6]
 8016720:	8a7b      	ldrh	r3, [r7, #18]
 8016722:	1ad3      	subs	r3, r2, r3
 8016724:	b29b      	uxth	r3, r3
 8016726:	f003 0301 	and.w	r3, r3, #1
 801672a:	b29b      	uxth	r3, r3
 801672c:	88fa      	ldrh	r2, [r7, #6]
 801672e:	1ad3      	subs	r3, r2, r3
 8016730:	80fb      	strh	r3, [r7, #6]
 8016732:	e01c      	b.n	801676e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016734:	88fb      	ldrh	r3, [r7, #6]
 8016736:	3b10      	subs	r3, #16
 8016738:	80fb      	strh	r3, [r7, #6]
 801673a:	e018      	b.n	801676e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801673c:	88fb      	ldrh	r3, [r7, #6]
 801673e:	3b20      	subs	r3, #32
 8016740:	80fb      	strh	r3, [r7, #6]
 8016742:	e014      	b.n	801676e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016744:	88fb      	ldrh	r3, [r7, #6]
 8016746:	3b30      	subs	r3, #48	; 0x30
 8016748:	80fb      	strh	r3, [r7, #6]
 801674a:	e010      	b.n	801676e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801674c:	88fb      	ldrh	r3, [r7, #6]
 801674e:	3b1a      	subs	r3, #26
 8016750:	80fb      	strh	r3, [r7, #6]
 8016752:	e00c      	b.n	801676e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016754:	88fb      	ldrh	r3, [r7, #6]
 8016756:	3308      	adds	r3, #8
 8016758:	80fb      	strh	r3, [r7, #6]
 801675a:	e008      	b.n	801676e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801675c:	88fb      	ldrh	r3, [r7, #6]
 801675e:	3b50      	subs	r3, #80	; 0x50
 8016760:	80fb      	strh	r3, [r7, #6]
 8016762:	e004      	b.n	801676e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016764:	88fb      	ldrh	r3, [r7, #6]
 8016766:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801676a:	80fb      	strh	r3, [r7, #6]
 801676c:	bf00      	nop
			}
			break;
 801676e:	e008      	b.n	8016782 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016770:	89fb      	ldrh	r3, [r7, #14]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d195      	bne.n	80166a2 <ff_wtoupper+0x1a>
 8016776:	8a3b      	ldrh	r3, [r7, #16]
 8016778:	005b      	lsls	r3, r3, #1
 801677a:	697a      	ldr	r2, [r7, #20]
 801677c:	4413      	add	r3, r2
 801677e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016780:	e78f      	b.n	80166a2 <ff_wtoupper+0x1a>
			break;
 8016782:	bf00      	nop
	}

	return chr;
 8016784:	88fb      	ldrh	r3, [r7, #6]
}
 8016786:	4618      	mov	r0, r3
 8016788:	371c      	adds	r7, #28
 801678a:	46bd      	mov	sp, r7
 801678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016790:	4770      	bx	lr
 8016792:	bf00      	nop
 8016794:	0801baf0 	.word	0x0801baf0
 8016798:	0801bce4 	.word	0x0801bce4

0801679c <rxCliInput>:

	cliInitialized = true;
	return CLI_OK;
}

void rxCliInput(uint8_t* Buf, uint32_t *Len) {
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
	if (Buf[0] != 13){					// Ignore Return Character
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	2b0d      	cmp	r3, #13
 80167ac:	d00d      	beq.n	80167ca <rxCliInput+0x2e>
		usbCli.rxFlag = true;			/* Set the flag for the parser				*/
 80167ae:	4b09      	ldr	r3, [pc, #36]	; (80167d4 <rxCliInput+0x38>)
 80167b0:	2201      	movs	r2, #1
 80167b2:	719a      	strb	r2, [r3, #6]
		usbCli.cmd_len = Len[0];		/* Store the command length for the parser	*/
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	4a06      	ldr	r2, [pc, #24]	; (80167d4 <rxCliInput+0x38>)
 80167ba:	6093      	str	r3, [r2, #8]

		// Copy the Received String to the Buffer in the structure
		memcpy(usbCli.cmd_buffer, Buf, usbCli.cmd_len);
 80167bc:	4b05      	ldr	r3, [pc, #20]	; (80167d4 <rxCliInput+0x38>)
 80167be:	689b      	ldr	r3, [r3, #8]
 80167c0:	461a      	mov	r2, r3
 80167c2:	6879      	ldr	r1, [r7, #4]
 80167c4:	4804      	ldr	r0, [pc, #16]	; (80167d8 <rxCliInput+0x3c>)
 80167c6:	f000 fd6a 	bl	801729e <memcpy>
	}
}
 80167ca:	bf00      	nop
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	20000e38 	.word	0x20000e38
 80167d8:	20000e44 	.word	0x20000e44

080167dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80167e0:	2200      	movs	r2, #0
 80167e2:	4912      	ldr	r1, [pc, #72]	; (801682c <MX_USB_DEVICE_Init+0x50>)
 80167e4:	4812      	ldr	r0, [pc, #72]	; (8016830 <MX_USB_DEVICE_Init+0x54>)
 80167e6:	f7fb f9b3 	bl	8011b50 <USBD_Init>
 80167ea:	4603      	mov	r3, r0
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d001      	beq.n	80167f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80167f0:	f7ee fa88 	bl	8004d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80167f4:	490f      	ldr	r1, [pc, #60]	; (8016834 <MX_USB_DEVICE_Init+0x58>)
 80167f6:	480e      	ldr	r0, [pc, #56]	; (8016830 <MX_USB_DEVICE_Init+0x54>)
 80167f8:	f7fb f9d5 	bl	8011ba6 <USBD_RegisterClass>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d001      	beq.n	8016806 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016802:	f7ee fa7f 	bl	8004d04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016806:	490c      	ldr	r1, [pc, #48]	; (8016838 <MX_USB_DEVICE_Init+0x5c>)
 8016808:	4809      	ldr	r0, [pc, #36]	; (8016830 <MX_USB_DEVICE_Init+0x54>)
 801680a:	f7fb f903 	bl	8011a14 <USBD_CDC_RegisterInterface>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016814:	f7ee fa76 	bl	8004d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016818:	4805      	ldr	r0, [pc, #20]	; (8016830 <MX_USB_DEVICE_Init+0x54>)
 801681a:	f7fb f9de 	bl	8011bda <USBD_Start>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d001      	beq.n	8016828 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016824:	f7ee fa6e 	bl	8004d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016828:	bf00      	nop
 801682a:	bd80      	pop	{r7, pc}
 801682c:	20000184 	.word	0x20000184
 8016830:	200017b0 	.word	0x200017b0
 8016834:	20000068 	.word	0x20000068
 8016838:	20000174 	.word	0x20000174

0801683c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016840:	2200      	movs	r2, #0
 8016842:	4905      	ldr	r1, [pc, #20]	; (8016858 <CDC_Init_FS+0x1c>)
 8016844:	4805      	ldr	r0, [pc, #20]	; (801685c <CDC_Init_FS+0x20>)
 8016846:	f7fb f8fc 	bl	8011a42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801684a:	4905      	ldr	r1, [pc, #20]	; (8016860 <CDC_Init_FS+0x24>)
 801684c:	4803      	ldr	r0, [pc, #12]	; (801685c <CDC_Init_FS+0x20>)
 801684e:	f7fb f912 	bl	8011a76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016852:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016854:	4618      	mov	r0, r3
 8016856:	bd80      	pop	{r7, pc}
 8016858:	20001e4c 	.word	0x20001e4c
 801685c:	200017b0 	.word	0x200017b0
 8016860:	20001a4c 	.word	0x20001a4c

08016864 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016864:	b480      	push	{r7}
 8016866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016868:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801686a:	4618      	mov	r0, r3
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016874:	b480      	push	{r7}
 8016876:	b083      	sub	sp, #12
 8016878:	af00      	add	r7, sp, #0
 801687a:	4603      	mov	r3, r0
 801687c:	6039      	str	r1, [r7, #0]
 801687e:	71fb      	strb	r3, [r7, #7]
 8016880:	4613      	mov	r3, r2
 8016882:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016884:	79fb      	ldrb	r3, [r7, #7]
 8016886:	2b23      	cmp	r3, #35	; 0x23
 8016888:	d85c      	bhi.n	8016944 <CDC_Control_FS+0xd0>
 801688a:	a201      	add	r2, pc, #4	; (adr r2, 8016890 <CDC_Control_FS+0x1c>)
 801688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016890:	08016945 	.word	0x08016945
 8016894:	08016945 	.word	0x08016945
 8016898:	08016945 	.word	0x08016945
 801689c:	08016945 	.word	0x08016945
 80168a0:	08016945 	.word	0x08016945
 80168a4:	08016945 	.word	0x08016945
 80168a8:	08016945 	.word	0x08016945
 80168ac:	08016945 	.word	0x08016945
 80168b0:	08016945 	.word	0x08016945
 80168b4:	08016945 	.word	0x08016945
 80168b8:	08016945 	.word	0x08016945
 80168bc:	08016945 	.word	0x08016945
 80168c0:	08016945 	.word	0x08016945
 80168c4:	08016945 	.word	0x08016945
 80168c8:	08016945 	.word	0x08016945
 80168cc:	08016945 	.word	0x08016945
 80168d0:	08016945 	.word	0x08016945
 80168d4:	08016945 	.word	0x08016945
 80168d8:	08016945 	.word	0x08016945
 80168dc:	08016945 	.word	0x08016945
 80168e0:	08016945 	.word	0x08016945
 80168e4:	08016945 	.word	0x08016945
 80168e8:	08016945 	.word	0x08016945
 80168ec:	08016945 	.word	0x08016945
 80168f0:	08016945 	.word	0x08016945
 80168f4:	08016945 	.word	0x08016945
 80168f8:	08016945 	.word	0x08016945
 80168fc:	08016945 	.word	0x08016945
 8016900:	08016945 	.word	0x08016945
 8016904:	08016945 	.word	0x08016945
 8016908:	08016945 	.word	0x08016945
 801690c:	08016945 	.word	0x08016945
 8016910:	08016921 	.word	0x08016921
 8016914:	08016933 	.word	0x08016933
 8016918:	08016945 	.word	0x08016945
 801691c:	08016945 	.word	0x08016945
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8016920:	4b0c      	ldr	r3, [pc, #48]	; (8016954 <CDC_Control_FS+0xe0>)
 8016922:	683a      	ldr	r2, [r7, #0]
 8016924:	6810      	ldr	r0, [r2, #0]
 8016926:	6018      	str	r0, [r3, #0]
 8016928:	8891      	ldrh	r1, [r2, #4]
 801692a:	7992      	ldrb	r2, [r2, #6]
 801692c:	8099      	strh	r1, [r3, #4]
 801692e:	719a      	strb	r2, [r3, #6]
    break;
 8016930:	e009      	b.n	8016946 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	4a07      	ldr	r2, [pc, #28]	; (8016954 <CDC_Control_FS+0xe0>)
 8016936:	6810      	ldr	r0, [r2, #0]
 8016938:	6018      	str	r0, [r3, #0]
 801693a:	8891      	ldrh	r1, [r2, #4]
 801693c:	7992      	ldrb	r2, [r2, #6]
 801693e:	8099      	strh	r1, [r3, #4]
 8016940:	719a      	strb	r2, [r3, #6]
    break;
 8016942:	e000      	b.n	8016946 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016944:	bf00      	nop
  }

  return (USBD_OK);
 8016946:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016948:	4618      	mov	r0, r3
 801694a:	370c      	adds	r7, #12
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	2000016c 	.word	0x2000016c

08016958 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016962:	6879      	ldr	r1, [r7, #4]
 8016964:	4807      	ldr	r0, [pc, #28]	; (8016984 <CDC_Receive_FS+0x2c>)
 8016966:	f7fb f886 	bl	8011a76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801696a:	4806      	ldr	r0, [pc, #24]	; (8016984 <CDC_Receive_FS+0x2c>)
 801696c:	f7fb f8c6 	bl	8011afc <USBD_CDC_ReceivePacket>

  // Feed the buffer through to the CLI parser
  rxCliInput(Buf, Len);
 8016970:	6839      	ldr	r1, [r7, #0]
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7ff ff12 	bl	801679c <rxCliInput>

  return (USBD_OK);
 8016978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801697a:	4618      	mov	r0, r3
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	200017b0 	.word	0x200017b0

08016988 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	460b      	mov	r3, r1
 8016992:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016998:	4b0d      	ldr	r3, [pc, #52]	; (80169d0 <CDC_Transmit_FS+0x48>)
 801699a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801699e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d001      	beq.n	80169ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80169aa:	2301      	movs	r3, #1
 80169ac:	e00b      	b.n	80169c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80169ae:	887b      	ldrh	r3, [r7, #2]
 80169b0:	461a      	mov	r2, r3
 80169b2:	6879      	ldr	r1, [r7, #4]
 80169b4:	4806      	ldr	r0, [pc, #24]	; (80169d0 <CDC_Transmit_FS+0x48>)
 80169b6:	f7fb f844 	bl	8011a42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80169ba:	4805      	ldr	r0, [pc, #20]	; (80169d0 <CDC_Transmit_FS+0x48>)
 80169bc:	f7fb f86f 	bl	8011a9e <USBD_CDC_TransmitPacket>
 80169c0:	4603      	mov	r3, r0
 80169c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	200017b0 	.word	0x200017b0

080169d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	6039      	str	r1, [r7, #0]
 80169de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	2212      	movs	r2, #18
 80169e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80169e6:	4b03      	ldr	r3, [pc, #12]	; (80169f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	370c      	adds	r7, #12
 80169ec:	46bd      	mov	sp, r7
 80169ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f2:	4770      	bx	lr
 80169f4:	200001a0 	.word	0x200001a0

080169f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b083      	sub	sp, #12
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	4603      	mov	r3, r0
 8016a00:	6039      	str	r1, [r7, #0]
 8016a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	2204      	movs	r2, #4
 8016a08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016a0a:	4b03      	ldr	r3, [pc, #12]	; (8016a18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	370c      	adds	r7, #12
 8016a10:	46bd      	mov	sp, r7
 8016a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a16:	4770      	bx	lr
 8016a18:	200001b4 	.word	0x200001b4

08016a1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4603      	mov	r3, r0
 8016a24:	6039      	str	r1, [r7, #0]
 8016a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a28:	79fb      	ldrb	r3, [r7, #7]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d105      	bne.n	8016a3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a2e:	683a      	ldr	r2, [r7, #0]
 8016a30:	4907      	ldr	r1, [pc, #28]	; (8016a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a32:	4808      	ldr	r0, [pc, #32]	; (8016a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8016a34:	f7fc f808 	bl	8012a48 <USBD_GetString>
 8016a38:	e004      	b.n	8016a44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a3a:	683a      	ldr	r2, [r7, #0]
 8016a3c:	4904      	ldr	r1, [pc, #16]	; (8016a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a3e:	4805      	ldr	r0, [pc, #20]	; (8016a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8016a40:	f7fc f802 	bl	8012a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a44:	4b02      	ldr	r3, [pc, #8]	; (8016a50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3708      	adds	r7, #8
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	2000224c 	.word	0x2000224c
 8016a54:	08017cb8 	.word	0x08017cb8

08016a58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	4603      	mov	r3, r0
 8016a60:	6039      	str	r1, [r7, #0]
 8016a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016a64:	683a      	ldr	r2, [r7, #0]
 8016a66:	4904      	ldr	r1, [pc, #16]	; (8016a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016a68:	4804      	ldr	r0, [pc, #16]	; (8016a7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016a6a:	f7fb ffed 	bl	8012a48 <USBD_GetString>
  return USBD_StrDesc;
 8016a6e:	4b02      	ldr	r3, [pc, #8]	; (8016a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	2000224c 	.word	0x2000224c
 8016a7c:	08017cd0 	.word	0x08017cd0

08016a80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	6039      	str	r1, [r7, #0]
 8016a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	221a      	movs	r2, #26
 8016a90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016a92:	f000 f843 	bl	8016b1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016a96:	4b02      	ldr	r3, [pc, #8]	; (8016aa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3708      	adds	r7, #8
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	200001b8 	.word	0x200001b8

08016aa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	4603      	mov	r3, r0
 8016aac:	6039      	str	r1, [r7, #0]
 8016aae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016ab0:	79fb      	ldrb	r3, [r7, #7]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d105      	bne.n	8016ac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ab6:	683a      	ldr	r2, [r7, #0]
 8016ab8:	4907      	ldr	r1, [pc, #28]	; (8016ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016aba:	4808      	ldr	r0, [pc, #32]	; (8016adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016abc:	f7fb ffc4 	bl	8012a48 <USBD_GetString>
 8016ac0:	e004      	b.n	8016acc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ac2:	683a      	ldr	r2, [r7, #0]
 8016ac4:	4904      	ldr	r1, [pc, #16]	; (8016ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016ac6:	4805      	ldr	r0, [pc, #20]	; (8016adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ac8:	f7fb ffbe 	bl	8012a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016acc:	4b02      	ldr	r3, [pc, #8]	; (8016ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	2000224c 	.word	0x2000224c
 8016adc:	08017ce4 	.word	0x08017ce4

08016ae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	6039      	str	r1, [r7, #0]
 8016aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016aec:	79fb      	ldrb	r3, [r7, #7]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d105      	bne.n	8016afe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016af2:	683a      	ldr	r2, [r7, #0]
 8016af4:	4907      	ldr	r1, [pc, #28]	; (8016b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016af6:	4808      	ldr	r0, [pc, #32]	; (8016b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016af8:	f7fb ffa6 	bl	8012a48 <USBD_GetString>
 8016afc:	e004      	b.n	8016b08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	4904      	ldr	r1, [pc, #16]	; (8016b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b02:	4805      	ldr	r0, [pc, #20]	; (8016b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b04:	f7fb ffa0 	bl	8012a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b08:	4b02      	ldr	r3, [pc, #8]	; (8016b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3708      	adds	r7, #8
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	2000224c 	.word	0x2000224c
 8016b18:	08017cf0 	.word	0x08017cf0

08016b1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016b22:	4b0f      	ldr	r3, [pc, #60]	; (8016b60 <Get_SerialNum+0x44>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b28:	4b0e      	ldr	r3, [pc, #56]	; (8016b64 <Get_SerialNum+0x48>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b2e:	4b0e      	ldr	r3, [pc, #56]	; (8016b68 <Get_SerialNum+0x4c>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016b34:	68fa      	ldr	r2, [r7, #12]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	4413      	add	r3, r2
 8016b3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d009      	beq.n	8016b56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016b42:	2208      	movs	r2, #8
 8016b44:	4909      	ldr	r1, [pc, #36]	; (8016b6c <Get_SerialNum+0x50>)
 8016b46:	68f8      	ldr	r0, [r7, #12]
 8016b48:	f000 f814 	bl	8016b74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016b4c:	2204      	movs	r2, #4
 8016b4e:	4908      	ldr	r1, [pc, #32]	; (8016b70 <Get_SerialNum+0x54>)
 8016b50:	68b8      	ldr	r0, [r7, #8]
 8016b52:	f000 f80f 	bl	8016b74 <IntToUnicode>
  }
}
 8016b56:	bf00      	nop
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	1fff7a10 	.word	0x1fff7a10
 8016b64:	1fff7a14 	.word	0x1fff7a14
 8016b68:	1fff7a18 	.word	0x1fff7a18
 8016b6c:	200001ba 	.word	0x200001ba
 8016b70:	200001ca 	.word	0x200001ca

08016b74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b087      	sub	sp, #28
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	60f8      	str	r0, [r7, #12]
 8016b7c:	60b9      	str	r1, [r7, #8]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016b82:	2300      	movs	r3, #0
 8016b84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016b86:	2300      	movs	r3, #0
 8016b88:	75fb      	strb	r3, [r7, #23]
 8016b8a:	e027      	b.n	8016bdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	0f1b      	lsrs	r3, r3, #28
 8016b90:	2b09      	cmp	r3, #9
 8016b92:	d80b      	bhi.n	8016bac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	0f1b      	lsrs	r3, r3, #28
 8016b98:	b2da      	uxtb	r2, r3
 8016b9a:	7dfb      	ldrb	r3, [r7, #23]
 8016b9c:	005b      	lsls	r3, r3, #1
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	440b      	add	r3, r1
 8016ba4:	3230      	adds	r2, #48	; 0x30
 8016ba6:	b2d2      	uxtb	r2, r2
 8016ba8:	701a      	strb	r2, [r3, #0]
 8016baa:	e00a      	b.n	8016bc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	0f1b      	lsrs	r3, r3, #28
 8016bb0:	b2da      	uxtb	r2, r3
 8016bb2:	7dfb      	ldrb	r3, [r7, #23]
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	440b      	add	r3, r1
 8016bbc:	3237      	adds	r2, #55	; 0x37
 8016bbe:	b2d2      	uxtb	r2, r2
 8016bc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	011b      	lsls	r3, r3, #4
 8016bc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016bc8:	7dfb      	ldrb	r3, [r7, #23]
 8016bca:	005b      	lsls	r3, r3, #1
 8016bcc:	3301      	adds	r3, #1
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016bd6:	7dfb      	ldrb	r3, [r7, #23]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	75fb      	strb	r3, [r7, #23]
 8016bdc:	7dfa      	ldrb	r2, [r7, #23]
 8016bde:	79fb      	ldrb	r3, [r7, #7]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d3d3      	bcc.n	8016b8c <IntToUnicode+0x18>
  }
}
 8016be4:	bf00      	nop
 8016be6:	371c      	adds	r7, #28
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b08a      	sub	sp, #40	; 0x28
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016bf8:	f107 0314 	add.w	r3, r7, #20
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	601a      	str	r2, [r3, #0]
 8016c00:	605a      	str	r2, [r3, #4]
 8016c02:	609a      	str	r2, [r3, #8]
 8016c04:	60da      	str	r2, [r3, #12]
 8016c06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016c10:	d152      	bne.n	8016cb8 <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8016c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016c16:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016c20:	2302      	movs	r3, #2
 8016c22:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016c24:	f107 0314 	add.w	r3, r7, #20
 8016c28:	4619      	mov	r1, r3
 8016c2a:	4825      	ldr	r0, [pc, #148]	; (8016cc0 <HAL_PCD_MspInit+0xd0>)
 8016c2c:	f7ee fdec 	bl	8005808 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8016c30:	2200      	movs	r2, #0
 8016c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8016c36:	4822      	ldr	r0, [pc, #136]	; (8016cc0 <HAL_PCD_MspInit+0xd0>)
 8016c38:	f7ee ff80 	bl	8005b3c <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8016c3c:	2005      	movs	r0, #5
 8016c3e:	f7ee fc8d 	bl	800555c <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016c42:	2300      	movs	r3, #0
 8016c44:	613b      	str	r3, [r7, #16]
 8016c46:	4b1f      	ldr	r3, [pc, #124]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c4a:	4a1e      	ldr	r2, [pc, #120]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c4c:	f043 0301 	orr.w	r3, r3, #1
 8016c50:	6313      	str	r3, [r2, #48]	; 0x30
 8016c52:	4b1c      	ldr	r3, [pc, #112]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c56:	f003 0301 	and.w	r3, r3, #1
 8016c5a:	613b      	str	r3, [r7, #16]
 8016c5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016c5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016c64:	2302      	movs	r3, #2
 8016c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016c6c:	2303      	movs	r3, #3
 8016c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016c70:	230a      	movs	r3, #10
 8016c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016c74:	f107 0314 	add.w	r3, r7, #20
 8016c78:	4619      	mov	r1, r3
 8016c7a:	4811      	ldr	r0, [pc, #68]	; (8016cc0 <HAL_PCD_MspInit+0xd0>)
 8016c7c:	f7ee fdc4 	bl	8005808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016c80:	4b10      	ldr	r3, [pc, #64]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c84:	4a0f      	ldr	r2, [pc, #60]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c8a:	6353      	str	r3, [r2, #52]	; 0x34
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	60fb      	str	r3, [r7, #12]
 8016c90:	4b0c      	ldr	r3, [pc, #48]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c94:	4a0b      	ldr	r2, [pc, #44]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8016c9c:	4b09      	ldr	r3, [pc, #36]	; (8016cc4 <HAL_PCD_MspInit+0xd4>)
 8016c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ca4:	60fb      	str	r3, [r7, #12]
 8016ca6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016ca8:	2200      	movs	r2, #0
 8016caa:	2100      	movs	r1, #0
 8016cac:	2043      	movs	r0, #67	; 0x43
 8016cae:	f7ee fd52 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016cb2:	2043      	movs	r0, #67	; 0x43
 8016cb4:	f7ee fd6b 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016cb8:	bf00      	nop
 8016cba:	3728      	adds	r7, #40	; 0x28
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	40020000 	.word	0x40020000
 8016cc4:	40023800 	.word	0x40023800

08016cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016cdc:	4619      	mov	r1, r3
 8016cde:	4610      	mov	r0, r2
 8016ce0:	f7fa ffc4 	bl	8011c6c <USBD_LL_SetupStage>
}
 8016ce4:	bf00      	nop
 8016ce6:	3708      	adds	r7, #8
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016cfe:	78fa      	ldrb	r2, [r7, #3]
 8016d00:	6879      	ldr	r1, [r7, #4]
 8016d02:	4613      	mov	r3, r2
 8016d04:	00db      	lsls	r3, r3, #3
 8016d06:	1a9b      	subs	r3, r3, r2
 8016d08:	009b      	lsls	r3, r3, #2
 8016d0a:	440b      	add	r3, r1
 8016d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	78fb      	ldrb	r3, [r7, #3]
 8016d14:	4619      	mov	r1, r3
 8016d16:	f7fa fff4 	bl	8011d02 <USBD_LL_DataOutStage>
}
 8016d1a:	bf00      	nop
 8016d1c:	3708      	adds	r7, #8
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}

08016d22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d22:	b580      	push	{r7, lr}
 8016d24:	b082      	sub	sp, #8
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
 8016d2a:	460b      	mov	r3, r1
 8016d2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016d34:	78fa      	ldrb	r2, [r7, #3]
 8016d36:	6879      	ldr	r1, [r7, #4]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	00db      	lsls	r3, r3, #3
 8016d3c:	1a9b      	subs	r3, r3, r2
 8016d3e:	009b      	lsls	r3, r3, #2
 8016d40:	440b      	add	r3, r1
 8016d42:	3348      	adds	r3, #72	; 0x48
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	78fb      	ldrb	r3, [r7, #3]
 8016d48:	4619      	mov	r1, r3
 8016d4a:	f7fb f84b 	bl	8011de4 <USBD_LL_DataInStage>
}
 8016d4e:	bf00      	nop
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b082      	sub	sp, #8
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7fb f959 	bl	801201c <USBD_LL_SOF>
}
 8016d6a:	bf00      	nop
 8016d6c:	3708      	adds	r7, #8
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}

08016d72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016d72:	b580      	push	{r7, lr}
 8016d74:	b084      	sub	sp, #16
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	2b02      	cmp	r3, #2
 8016d84:	d001      	beq.n	8016d8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016d86:	f7ed ffbd 	bl	8004d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016d90:	7bfa      	ldrb	r2, [r7, #15]
 8016d92:	4611      	mov	r1, r2
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fb f90b 	bl	8011fb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fb f8c4 	bl	8011f2e <USBD_LL_Reset>
}
 8016da6:	bf00      	nop
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
	...

08016db0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7fb f906 	bl	8011fd0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	6812      	ldr	r2, [r2, #0]
 8016dd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016dd6:	f043 0301 	orr.w	r3, r3, #1
 8016dda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	6a1b      	ldr	r3, [r3, #32]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d005      	beq.n	8016df0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016de4:	4b04      	ldr	r3, [pc, #16]	; (8016df8 <HAL_PCD_SuspendCallback+0x48>)
 8016de6:	691b      	ldr	r3, [r3, #16]
 8016de8:	4a03      	ldr	r2, [pc, #12]	; (8016df8 <HAL_PCD_SuspendCallback+0x48>)
 8016dea:	f043 0306 	orr.w	r3, r3, #6
 8016dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016df0:	bf00      	nop
 8016df2:	3708      	adds	r7, #8
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	e000ed00 	.word	0xe000ed00

08016dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7fb f8f5 	bl	8011ffa <USBD_LL_Resume>
}
 8016e10:	bf00      	nop
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b082      	sub	sp, #8
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	460b      	mov	r3, r1
 8016e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e2a:	78fa      	ldrb	r2, [r7, #3]
 8016e2c:	4611      	mov	r1, r2
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7fb f91b 	bl	801206a <USBD_LL_IsoOUTIncomplete>
}
 8016e34:	bf00      	nop
 8016e36:	3708      	adds	r7, #8
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	460b      	mov	r3, r1
 8016e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e4e:	78fa      	ldrb	r2, [r7, #3]
 8016e50:	4611      	mov	r1, r2
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7fb f8fc 	bl	8012050 <USBD_LL_IsoINIncomplete>
}
 8016e58:	bf00      	nop
 8016e5a:	3708      	adds	r7, #8
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	bd80      	pop	{r7, pc}

08016e60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b082      	sub	sp, #8
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7fb f908 	bl	8012084 <USBD_LL_DevConnected>
}
 8016e74:	bf00      	nop
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7fb f905 	bl	801209a <USBD_LL_DevDisconnected>
}
 8016e90:	bf00      	nop
 8016e92:	3708      	adds	r7, #8
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d13c      	bne.n	8016f22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016ea8:	4a20      	ldr	r2, [pc, #128]	; (8016f2c <USBD_LL_Init+0x94>)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	4a1e      	ldr	r2, [pc, #120]	; (8016f2c <USBD_LL_Init+0x94>)
 8016eb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016eb8:	4b1c      	ldr	r3, [pc, #112]	; (8016f2c <USBD_LL_Init+0x94>)
 8016eba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016ebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016ec0:	4b1a      	ldr	r3, [pc, #104]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ec2:	2204      	movs	r2, #4
 8016ec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016ec6:	4b19      	ldr	r3, [pc, #100]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ec8:	2202      	movs	r2, #2
 8016eca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016ecc:	4b17      	ldr	r3, [pc, #92]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ece:	2200      	movs	r2, #0
 8016ed0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016ed2:	4b16      	ldr	r3, [pc, #88]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ed4:	2202      	movs	r2, #2
 8016ed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016ed8:	4b14      	ldr	r3, [pc, #80]	; (8016f2c <USBD_LL_Init+0x94>)
 8016eda:	2200      	movs	r2, #0
 8016edc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016ede:	4b13      	ldr	r3, [pc, #76]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016ee4:	4b11      	ldr	r3, [pc, #68]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016eea:	4b10      	ldr	r3, [pc, #64]	; (8016f2c <USBD_LL_Init+0x94>)
 8016eec:	2200      	movs	r2, #0
 8016eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016ef0:	4b0e      	ldr	r3, [pc, #56]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016ef6:	480d      	ldr	r0, [pc, #52]	; (8016f2c <USBD_LL_Init+0x94>)
 8016ef8:	f7ef fc3e 	bl	8006778 <HAL_PCD_Init>
 8016efc:	4603      	mov	r3, r0
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d001      	beq.n	8016f06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016f02:	f7ed feff 	bl	8004d04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016f06:	2180      	movs	r1, #128	; 0x80
 8016f08:	4808      	ldr	r0, [pc, #32]	; (8016f2c <USBD_LL_Init+0x94>)
 8016f0a:	f7f0 fda2 	bl	8007a52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016f0e:	2240      	movs	r2, #64	; 0x40
 8016f10:	2100      	movs	r1, #0
 8016f12:	4806      	ldr	r0, [pc, #24]	; (8016f2c <USBD_LL_Init+0x94>)
 8016f14:	f7f0 fd56 	bl	80079c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016f18:	2280      	movs	r2, #128	; 0x80
 8016f1a:	2101      	movs	r1, #1
 8016f1c:	4803      	ldr	r0, [pc, #12]	; (8016f2c <USBD_LL_Init+0x94>)
 8016f1e:	f7f0 fd51 	bl	80079c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016f22:	2300      	movs	r3, #0
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3708      	adds	r7, #8
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	2000244c 	.word	0x2000244c

08016f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b084      	sub	sp, #16
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7ef fd33 	bl	80069b2 <HAL_PCD_Start>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016f50:	7bfb      	ldrb	r3, [r7, #15]
 8016f52:	4618      	mov	r0, r3
 8016f54:	f000 f92e 	bl	80171b4 <USBD_Get_USB_Status>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}

08016f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b084      	sub	sp, #16
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	6078      	str	r0, [r7, #4]
 8016f6e:	4608      	mov	r0, r1
 8016f70:	4611      	mov	r1, r2
 8016f72:	461a      	mov	r2, r3
 8016f74:	4603      	mov	r3, r0
 8016f76:	70fb      	strb	r3, [r7, #3]
 8016f78:	460b      	mov	r3, r1
 8016f7a:	70bb      	strb	r3, [r7, #2]
 8016f7c:	4613      	mov	r3, r2
 8016f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f80:	2300      	movs	r3, #0
 8016f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f84:	2300      	movs	r3, #0
 8016f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016f8e:	78bb      	ldrb	r3, [r7, #2]
 8016f90:	883a      	ldrh	r2, [r7, #0]
 8016f92:	78f9      	ldrb	r1, [r7, #3]
 8016f94:	f7f0 f908 	bl	80071a8 <HAL_PCD_EP_Open>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f9c:	7bfb      	ldrb	r3, [r7, #15]
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f000 f908 	bl	80171b4 <USBD_Get_USB_Status>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	3710      	adds	r7, #16
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}

08016fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fb2:	b580      	push	{r7, lr}
 8016fb4:	b084      	sub	sp, #16
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	6078      	str	r0, [r7, #4]
 8016fba:	460b      	mov	r3, r1
 8016fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016fcc:	78fa      	ldrb	r2, [r7, #3]
 8016fce:	4611      	mov	r1, r2
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7f0 f951 	bl	8007278 <HAL_PCD_EP_Close>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016fda:	7bfb      	ldrb	r3, [r7, #15]
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f000 f8e9 	bl	80171b4 <USBD_Get_USB_Status>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3710      	adds	r7, #16
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017000:	2300      	movs	r3, #0
 8017002:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801700a:	78fa      	ldrb	r2, [r7, #3]
 801700c:	4611      	mov	r1, r2
 801700e:	4618      	mov	r0, r3
 8017010:	f7f0 fa29 	bl	8007466 <HAL_PCD_EP_SetStall>
 8017014:	4603      	mov	r3, r0
 8017016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017018:	7bfb      	ldrb	r3, [r7, #15]
 801701a:	4618      	mov	r0, r3
 801701c:	f000 f8ca 	bl	80171b4 <USBD_Get_USB_Status>
 8017020:	4603      	mov	r3, r0
 8017022:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017024:	7bbb      	ldrb	r3, [r7, #14]
}
 8017026:	4618      	mov	r0, r3
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}

0801702e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801702e:	b580      	push	{r7, lr}
 8017030:	b084      	sub	sp, #16
 8017032:	af00      	add	r7, sp, #0
 8017034:	6078      	str	r0, [r7, #4]
 8017036:	460b      	mov	r3, r1
 8017038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801703a:	2300      	movs	r3, #0
 801703c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801703e:	2300      	movs	r3, #0
 8017040:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017048:	78fa      	ldrb	r2, [r7, #3]
 801704a:	4611      	mov	r1, r2
 801704c:	4618      	mov	r0, r3
 801704e:	f7f0 fa6e 	bl	800752e <HAL_PCD_EP_ClrStall>
 8017052:	4603      	mov	r3, r0
 8017054:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8017056:	7bfb      	ldrb	r3, [r7, #15]
 8017058:	4618      	mov	r0, r3
 801705a:	f000 f8ab 	bl	80171b4 <USBD_Get_USB_Status>
 801705e:	4603      	mov	r3, r0
 8017060:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8017062:	7bbb      	ldrb	r3, [r7, #14]
}
 8017064:	4618      	mov	r0, r3
 8017066:	3710      	adds	r7, #16
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}

0801706c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801706c:	b480      	push	{r7}
 801706e:	b085      	sub	sp, #20
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	460b      	mov	r3, r1
 8017076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801707e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017084:	2b00      	cmp	r3, #0
 8017086:	da0b      	bge.n	80170a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8017088:	78fb      	ldrb	r3, [r7, #3]
 801708a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801708e:	68f9      	ldr	r1, [r7, #12]
 8017090:	4613      	mov	r3, r2
 8017092:	00db      	lsls	r3, r3, #3
 8017094:	1a9b      	subs	r3, r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	440b      	add	r3, r1
 801709a:	333e      	adds	r3, #62	; 0x3e
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	e00b      	b.n	80170b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80170a0:	78fb      	ldrb	r3, [r7, #3]
 80170a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170a6:	68f9      	ldr	r1, [r7, #12]
 80170a8:	4613      	mov	r3, r2
 80170aa:	00db      	lsls	r3, r3, #3
 80170ac:	1a9b      	subs	r3, r3, r2
 80170ae:	009b      	lsls	r3, r3, #2
 80170b0:	440b      	add	r3, r1
 80170b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80170b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	3714      	adds	r7, #20
 80170bc:	46bd      	mov	sp, r7
 80170be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c2:	4770      	bx	lr

080170c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	460b      	mov	r3, r1
 80170ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170d0:	2300      	movs	r3, #0
 80170d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170d4:	2300      	movs	r3, #0
 80170d6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80170de:	78fa      	ldrb	r2, [r7, #3]
 80170e0:	4611      	mov	r1, r2
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7f0 f83b 	bl	800715e <HAL_PCD_SetAddress>
 80170e8:	4603      	mov	r3, r0
 80170ea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80170ec:	7bfb      	ldrb	r3, [r7, #15]
 80170ee:	4618      	mov	r0, r3
 80170f0:	f000 f860 	bl	80171b4 <USBD_Get_USB_Status>
 80170f4:	4603      	mov	r3, r0
 80170f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80170f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3710      	adds	r7, #16
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017102:	b580      	push	{r7, lr}
 8017104:	b086      	sub	sp, #24
 8017106:	af00      	add	r7, sp, #0
 8017108:	60f8      	str	r0, [r7, #12]
 801710a:	607a      	str	r2, [r7, #4]
 801710c:	461a      	mov	r2, r3
 801710e:	460b      	mov	r3, r1
 8017110:	72fb      	strb	r3, [r7, #11]
 8017112:	4613      	mov	r3, r2
 8017114:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017116:	2300      	movs	r3, #0
 8017118:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801711a:	2300      	movs	r3, #0
 801711c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017124:	893b      	ldrh	r3, [r7, #8]
 8017126:	7af9      	ldrb	r1, [r7, #11]
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	f7f0 f952 	bl	80073d2 <HAL_PCD_EP_Transmit>
 801712e:	4603      	mov	r3, r0
 8017130:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017132:	7dfb      	ldrb	r3, [r7, #23]
 8017134:	4618      	mov	r0, r3
 8017136:	f000 f83d 	bl	80171b4 <USBD_Get_USB_Status>
 801713a:	4603      	mov	r3, r0
 801713c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801713e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017140:	4618      	mov	r0, r3
 8017142:	3718      	adds	r7, #24
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}

08017148 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b086      	sub	sp, #24
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	607a      	str	r2, [r7, #4]
 8017152:	461a      	mov	r2, r3
 8017154:	460b      	mov	r3, r1
 8017156:	72fb      	strb	r3, [r7, #11]
 8017158:	4613      	mov	r3, r2
 801715a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801715c:	2300      	movs	r3, #0
 801715e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017160:	2300      	movs	r3, #0
 8017162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801716a:	893b      	ldrh	r3, [r7, #8]
 801716c:	7af9      	ldrb	r1, [r7, #11]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	f7f0 f8cc 	bl	800730c <HAL_PCD_EP_Receive>
 8017174:	4603      	mov	r3, r0
 8017176:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017178:	7dfb      	ldrb	r3, [r7, #23]
 801717a:	4618      	mov	r0, r3
 801717c:	f000 f81a 	bl	80171b4 <USBD_Get_USB_Status>
 8017180:	4603      	mov	r3, r0
 8017182:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8017184:	7dbb      	ldrb	r3, [r7, #22]
}
 8017186:	4618      	mov	r0, r3
 8017188:	3718      	adds	r7, #24
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}

0801718e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801718e:	b580      	push	{r7, lr}
 8017190:	b082      	sub	sp, #8
 8017192:	af00      	add	r7, sp, #0
 8017194:	6078      	str	r0, [r7, #4]
 8017196:	460b      	mov	r3, r1
 8017198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80171a0:	78fa      	ldrb	r2, [r7, #3]
 80171a2:	4611      	mov	r1, r2
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7f0 f8fc 	bl	80073a2 <HAL_PCD_EP_GetRxCount>
 80171aa:	4603      	mov	r3, r0
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3708      	adds	r7, #8
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}

080171b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80171b4:	b480      	push	{r7}
 80171b6:	b085      	sub	sp, #20
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	4603      	mov	r3, r0
 80171bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171be:	2300      	movs	r3, #0
 80171c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80171c2:	79fb      	ldrb	r3, [r7, #7]
 80171c4:	2b03      	cmp	r3, #3
 80171c6:	d817      	bhi.n	80171f8 <USBD_Get_USB_Status+0x44>
 80171c8:	a201      	add	r2, pc, #4	; (adr r2, 80171d0 <USBD_Get_USB_Status+0x1c>)
 80171ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171ce:	bf00      	nop
 80171d0:	080171e1 	.word	0x080171e1
 80171d4:	080171e7 	.word	0x080171e7
 80171d8:	080171ed 	.word	0x080171ed
 80171dc:	080171f3 	.word	0x080171f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80171e0:	2300      	movs	r3, #0
 80171e2:	73fb      	strb	r3, [r7, #15]
    break;
 80171e4:	e00b      	b.n	80171fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80171e6:	2302      	movs	r3, #2
 80171e8:	73fb      	strb	r3, [r7, #15]
    break;
 80171ea:	e008      	b.n	80171fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80171ec:	2301      	movs	r3, #1
 80171ee:	73fb      	strb	r3, [r7, #15]
    break;
 80171f0:	e005      	b.n	80171fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80171f2:	2302      	movs	r3, #2
 80171f4:	73fb      	strb	r3, [r7, #15]
    break;
 80171f6:	e002      	b.n	80171fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80171f8:	2302      	movs	r3, #2
 80171fa:	73fb      	strb	r3, [r7, #15]
    break;
 80171fc:	bf00      	nop
  }
  return usb_status;
 80171fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017200:	4618      	mov	r0, r3
 8017202:	3714      	adds	r7, #20
 8017204:	46bd      	mov	sp, r7
 8017206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720a:	4770      	bx	lr

0801720c <__errno>:
 801720c:	4b01      	ldr	r3, [pc, #4]	; (8017214 <__errno+0x8>)
 801720e:	6818      	ldr	r0, [r3, #0]
 8017210:	4770      	bx	lr
 8017212:	bf00      	nop
 8017214:	200001d4 	.word	0x200001d4

08017218 <__libc_init_array>:
 8017218:	b570      	push	{r4, r5, r6, lr}
 801721a:	4e0d      	ldr	r6, [pc, #52]	; (8017250 <__libc_init_array+0x38>)
 801721c:	4c0d      	ldr	r4, [pc, #52]	; (8017254 <__libc_init_array+0x3c>)
 801721e:	1ba4      	subs	r4, r4, r6
 8017220:	10a4      	asrs	r4, r4, #2
 8017222:	2500      	movs	r5, #0
 8017224:	42a5      	cmp	r5, r4
 8017226:	d109      	bne.n	801723c <__libc_init_array+0x24>
 8017228:	4e0b      	ldr	r6, [pc, #44]	; (8017258 <__libc_init_array+0x40>)
 801722a:	4c0c      	ldr	r4, [pc, #48]	; (801725c <__libc_init_array+0x44>)
 801722c:	f000 fc4e 	bl	8017acc <_init>
 8017230:	1ba4      	subs	r4, r4, r6
 8017232:	10a4      	asrs	r4, r4, #2
 8017234:	2500      	movs	r5, #0
 8017236:	42a5      	cmp	r5, r4
 8017238:	d105      	bne.n	8017246 <__libc_init_array+0x2e>
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017240:	4798      	blx	r3
 8017242:	3501      	adds	r5, #1
 8017244:	e7ee      	b.n	8017224 <__libc_init_array+0xc>
 8017246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801724a:	4798      	blx	r3
 801724c:	3501      	adds	r5, #1
 801724e:	e7f2      	b.n	8017236 <__libc_init_array+0x1e>
 8017250:	0801bddc 	.word	0x0801bddc
 8017254:	0801bddc 	.word	0x0801bddc
 8017258:	0801bddc 	.word	0x0801bddc
 801725c:	0801bde0 	.word	0x0801bde0

08017260 <malloc>:
 8017260:	4b02      	ldr	r3, [pc, #8]	; (801726c <malloc+0xc>)
 8017262:	4601      	mov	r1, r0
 8017264:	6818      	ldr	r0, [r3, #0]
 8017266:	f000 b87b 	b.w	8017360 <_malloc_r>
 801726a:	bf00      	nop
 801726c:	200001d4 	.word	0x200001d4

08017270 <free>:
 8017270:	4b02      	ldr	r3, [pc, #8]	; (801727c <free+0xc>)
 8017272:	4601      	mov	r1, r0
 8017274:	6818      	ldr	r0, [r3, #0]
 8017276:	f000 b825 	b.w	80172c4 <_free_r>
 801727a:	bf00      	nop
 801727c:	200001d4 	.word	0x200001d4

08017280 <memcmp>:
 8017280:	b530      	push	{r4, r5, lr}
 8017282:	2400      	movs	r4, #0
 8017284:	42a2      	cmp	r2, r4
 8017286:	d101      	bne.n	801728c <memcmp+0xc>
 8017288:	2000      	movs	r0, #0
 801728a:	e007      	b.n	801729c <memcmp+0x1c>
 801728c:	5d03      	ldrb	r3, [r0, r4]
 801728e:	3401      	adds	r4, #1
 8017290:	190d      	adds	r5, r1, r4
 8017292:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017296:	42ab      	cmp	r3, r5
 8017298:	d0f4      	beq.n	8017284 <memcmp+0x4>
 801729a:	1b58      	subs	r0, r3, r5
 801729c:	bd30      	pop	{r4, r5, pc}

0801729e <memcpy>:
 801729e:	b510      	push	{r4, lr}
 80172a0:	1e43      	subs	r3, r0, #1
 80172a2:	440a      	add	r2, r1
 80172a4:	4291      	cmp	r1, r2
 80172a6:	d100      	bne.n	80172aa <memcpy+0xc>
 80172a8:	bd10      	pop	{r4, pc}
 80172aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172b2:	e7f7      	b.n	80172a4 <memcpy+0x6>

080172b4 <memset>:
 80172b4:	4402      	add	r2, r0
 80172b6:	4603      	mov	r3, r0
 80172b8:	4293      	cmp	r3, r2
 80172ba:	d100      	bne.n	80172be <memset+0xa>
 80172bc:	4770      	bx	lr
 80172be:	f803 1b01 	strb.w	r1, [r3], #1
 80172c2:	e7f9      	b.n	80172b8 <memset+0x4>

080172c4 <_free_r>:
 80172c4:	b538      	push	{r3, r4, r5, lr}
 80172c6:	4605      	mov	r5, r0
 80172c8:	2900      	cmp	r1, #0
 80172ca:	d045      	beq.n	8017358 <_free_r+0x94>
 80172cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172d0:	1f0c      	subs	r4, r1, #4
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	bfb8      	it	lt
 80172d6:	18e4      	addlt	r4, r4, r3
 80172d8:	f000 f8d4 	bl	8017484 <__malloc_lock>
 80172dc:	4a1f      	ldr	r2, [pc, #124]	; (801735c <_free_r+0x98>)
 80172de:	6813      	ldr	r3, [r2, #0]
 80172e0:	4610      	mov	r0, r2
 80172e2:	b933      	cbnz	r3, 80172f2 <_free_r+0x2e>
 80172e4:	6063      	str	r3, [r4, #4]
 80172e6:	6014      	str	r4, [r2, #0]
 80172e8:	4628      	mov	r0, r5
 80172ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172ee:	f000 b8ca 	b.w	8017486 <__malloc_unlock>
 80172f2:	42a3      	cmp	r3, r4
 80172f4:	d90c      	bls.n	8017310 <_free_r+0x4c>
 80172f6:	6821      	ldr	r1, [r4, #0]
 80172f8:	1862      	adds	r2, r4, r1
 80172fa:	4293      	cmp	r3, r2
 80172fc:	bf04      	itt	eq
 80172fe:	681a      	ldreq	r2, [r3, #0]
 8017300:	685b      	ldreq	r3, [r3, #4]
 8017302:	6063      	str	r3, [r4, #4]
 8017304:	bf04      	itt	eq
 8017306:	1852      	addeq	r2, r2, r1
 8017308:	6022      	streq	r2, [r4, #0]
 801730a:	6004      	str	r4, [r0, #0]
 801730c:	e7ec      	b.n	80172e8 <_free_r+0x24>
 801730e:	4613      	mov	r3, r2
 8017310:	685a      	ldr	r2, [r3, #4]
 8017312:	b10a      	cbz	r2, 8017318 <_free_r+0x54>
 8017314:	42a2      	cmp	r2, r4
 8017316:	d9fa      	bls.n	801730e <_free_r+0x4a>
 8017318:	6819      	ldr	r1, [r3, #0]
 801731a:	1858      	adds	r0, r3, r1
 801731c:	42a0      	cmp	r0, r4
 801731e:	d10b      	bne.n	8017338 <_free_r+0x74>
 8017320:	6820      	ldr	r0, [r4, #0]
 8017322:	4401      	add	r1, r0
 8017324:	1858      	adds	r0, r3, r1
 8017326:	4282      	cmp	r2, r0
 8017328:	6019      	str	r1, [r3, #0]
 801732a:	d1dd      	bne.n	80172e8 <_free_r+0x24>
 801732c:	6810      	ldr	r0, [r2, #0]
 801732e:	6852      	ldr	r2, [r2, #4]
 8017330:	605a      	str	r2, [r3, #4]
 8017332:	4401      	add	r1, r0
 8017334:	6019      	str	r1, [r3, #0]
 8017336:	e7d7      	b.n	80172e8 <_free_r+0x24>
 8017338:	d902      	bls.n	8017340 <_free_r+0x7c>
 801733a:	230c      	movs	r3, #12
 801733c:	602b      	str	r3, [r5, #0]
 801733e:	e7d3      	b.n	80172e8 <_free_r+0x24>
 8017340:	6820      	ldr	r0, [r4, #0]
 8017342:	1821      	adds	r1, r4, r0
 8017344:	428a      	cmp	r2, r1
 8017346:	bf04      	itt	eq
 8017348:	6811      	ldreq	r1, [r2, #0]
 801734a:	6852      	ldreq	r2, [r2, #4]
 801734c:	6062      	str	r2, [r4, #4]
 801734e:	bf04      	itt	eq
 8017350:	1809      	addeq	r1, r1, r0
 8017352:	6021      	streq	r1, [r4, #0]
 8017354:	605c      	str	r4, [r3, #4]
 8017356:	e7c7      	b.n	80172e8 <_free_r+0x24>
 8017358:	bd38      	pop	{r3, r4, r5, pc}
 801735a:	bf00      	nop
 801735c:	20000ea8 	.word	0x20000ea8

08017360 <_malloc_r>:
 8017360:	b570      	push	{r4, r5, r6, lr}
 8017362:	1ccd      	adds	r5, r1, #3
 8017364:	f025 0503 	bic.w	r5, r5, #3
 8017368:	3508      	adds	r5, #8
 801736a:	2d0c      	cmp	r5, #12
 801736c:	bf38      	it	cc
 801736e:	250c      	movcc	r5, #12
 8017370:	2d00      	cmp	r5, #0
 8017372:	4606      	mov	r6, r0
 8017374:	db01      	blt.n	801737a <_malloc_r+0x1a>
 8017376:	42a9      	cmp	r1, r5
 8017378:	d903      	bls.n	8017382 <_malloc_r+0x22>
 801737a:	230c      	movs	r3, #12
 801737c:	6033      	str	r3, [r6, #0]
 801737e:	2000      	movs	r0, #0
 8017380:	bd70      	pop	{r4, r5, r6, pc}
 8017382:	f000 f87f 	bl	8017484 <__malloc_lock>
 8017386:	4a21      	ldr	r2, [pc, #132]	; (801740c <_malloc_r+0xac>)
 8017388:	6814      	ldr	r4, [r2, #0]
 801738a:	4621      	mov	r1, r4
 801738c:	b991      	cbnz	r1, 80173b4 <_malloc_r+0x54>
 801738e:	4c20      	ldr	r4, [pc, #128]	; (8017410 <_malloc_r+0xb0>)
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	b91b      	cbnz	r3, 801739c <_malloc_r+0x3c>
 8017394:	4630      	mov	r0, r6
 8017396:	f000 f83d 	bl	8017414 <_sbrk_r>
 801739a:	6020      	str	r0, [r4, #0]
 801739c:	4629      	mov	r1, r5
 801739e:	4630      	mov	r0, r6
 80173a0:	f000 f838 	bl	8017414 <_sbrk_r>
 80173a4:	1c43      	adds	r3, r0, #1
 80173a6:	d124      	bne.n	80173f2 <_malloc_r+0x92>
 80173a8:	230c      	movs	r3, #12
 80173aa:	6033      	str	r3, [r6, #0]
 80173ac:	4630      	mov	r0, r6
 80173ae:	f000 f86a 	bl	8017486 <__malloc_unlock>
 80173b2:	e7e4      	b.n	801737e <_malloc_r+0x1e>
 80173b4:	680b      	ldr	r3, [r1, #0]
 80173b6:	1b5b      	subs	r3, r3, r5
 80173b8:	d418      	bmi.n	80173ec <_malloc_r+0x8c>
 80173ba:	2b0b      	cmp	r3, #11
 80173bc:	d90f      	bls.n	80173de <_malloc_r+0x7e>
 80173be:	600b      	str	r3, [r1, #0]
 80173c0:	50cd      	str	r5, [r1, r3]
 80173c2:	18cc      	adds	r4, r1, r3
 80173c4:	4630      	mov	r0, r6
 80173c6:	f000 f85e 	bl	8017486 <__malloc_unlock>
 80173ca:	f104 000b 	add.w	r0, r4, #11
 80173ce:	1d23      	adds	r3, r4, #4
 80173d0:	f020 0007 	bic.w	r0, r0, #7
 80173d4:	1ac3      	subs	r3, r0, r3
 80173d6:	d0d3      	beq.n	8017380 <_malloc_r+0x20>
 80173d8:	425a      	negs	r2, r3
 80173da:	50e2      	str	r2, [r4, r3]
 80173dc:	e7d0      	b.n	8017380 <_malloc_r+0x20>
 80173de:	428c      	cmp	r4, r1
 80173e0:	684b      	ldr	r3, [r1, #4]
 80173e2:	bf16      	itet	ne
 80173e4:	6063      	strne	r3, [r4, #4]
 80173e6:	6013      	streq	r3, [r2, #0]
 80173e8:	460c      	movne	r4, r1
 80173ea:	e7eb      	b.n	80173c4 <_malloc_r+0x64>
 80173ec:	460c      	mov	r4, r1
 80173ee:	6849      	ldr	r1, [r1, #4]
 80173f0:	e7cc      	b.n	801738c <_malloc_r+0x2c>
 80173f2:	1cc4      	adds	r4, r0, #3
 80173f4:	f024 0403 	bic.w	r4, r4, #3
 80173f8:	42a0      	cmp	r0, r4
 80173fa:	d005      	beq.n	8017408 <_malloc_r+0xa8>
 80173fc:	1a21      	subs	r1, r4, r0
 80173fe:	4630      	mov	r0, r6
 8017400:	f000 f808 	bl	8017414 <_sbrk_r>
 8017404:	3001      	adds	r0, #1
 8017406:	d0cf      	beq.n	80173a8 <_malloc_r+0x48>
 8017408:	6025      	str	r5, [r4, #0]
 801740a:	e7db      	b.n	80173c4 <_malloc_r+0x64>
 801740c:	20000ea8 	.word	0x20000ea8
 8017410:	20000eac 	.word	0x20000eac

08017414 <_sbrk_r>:
 8017414:	b538      	push	{r3, r4, r5, lr}
 8017416:	4c06      	ldr	r4, [pc, #24]	; (8017430 <_sbrk_r+0x1c>)
 8017418:	2300      	movs	r3, #0
 801741a:	4605      	mov	r5, r0
 801741c:	4608      	mov	r0, r1
 801741e:	6023      	str	r3, [r4, #0]
 8017420:	f7ed ffbe 	bl	80053a0 <_sbrk>
 8017424:	1c43      	adds	r3, r0, #1
 8017426:	d102      	bne.n	801742e <_sbrk_r+0x1a>
 8017428:	6823      	ldr	r3, [r4, #0]
 801742a:	b103      	cbz	r3, 801742e <_sbrk_r+0x1a>
 801742c:	602b      	str	r3, [r5, #0]
 801742e:	bd38      	pop	{r3, r4, r5, pc}
 8017430:	20002854 	.word	0x20002854

08017434 <siprintf>:
 8017434:	b40e      	push	{r1, r2, r3}
 8017436:	b500      	push	{lr}
 8017438:	b09c      	sub	sp, #112	; 0x70
 801743a:	ab1d      	add	r3, sp, #116	; 0x74
 801743c:	9002      	str	r0, [sp, #8]
 801743e:	9006      	str	r0, [sp, #24]
 8017440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017444:	4809      	ldr	r0, [pc, #36]	; (801746c <siprintf+0x38>)
 8017446:	9107      	str	r1, [sp, #28]
 8017448:	9104      	str	r1, [sp, #16]
 801744a:	4909      	ldr	r1, [pc, #36]	; (8017470 <siprintf+0x3c>)
 801744c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017450:	9105      	str	r1, [sp, #20]
 8017452:	6800      	ldr	r0, [r0, #0]
 8017454:	9301      	str	r3, [sp, #4]
 8017456:	a902      	add	r1, sp, #8
 8017458:	f000 f870 	bl	801753c <_svfiprintf_r>
 801745c:	9b02      	ldr	r3, [sp, #8]
 801745e:	2200      	movs	r2, #0
 8017460:	701a      	strb	r2, [r3, #0]
 8017462:	b01c      	add	sp, #112	; 0x70
 8017464:	f85d eb04 	ldr.w	lr, [sp], #4
 8017468:	b003      	add	sp, #12
 801746a:	4770      	bx	lr
 801746c:	200001d4 	.word	0x200001d4
 8017470:	ffff0208 	.word	0xffff0208

08017474 <strcpy>:
 8017474:	4603      	mov	r3, r0
 8017476:	f811 2b01 	ldrb.w	r2, [r1], #1
 801747a:	f803 2b01 	strb.w	r2, [r3], #1
 801747e:	2a00      	cmp	r2, #0
 8017480:	d1f9      	bne.n	8017476 <strcpy+0x2>
 8017482:	4770      	bx	lr

08017484 <__malloc_lock>:
 8017484:	4770      	bx	lr

08017486 <__malloc_unlock>:
 8017486:	4770      	bx	lr

08017488 <__ssputs_r>:
 8017488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801748c:	688e      	ldr	r6, [r1, #8]
 801748e:	429e      	cmp	r6, r3
 8017490:	4682      	mov	sl, r0
 8017492:	460c      	mov	r4, r1
 8017494:	4690      	mov	r8, r2
 8017496:	4699      	mov	r9, r3
 8017498:	d837      	bhi.n	801750a <__ssputs_r+0x82>
 801749a:	898a      	ldrh	r2, [r1, #12]
 801749c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80174a0:	d031      	beq.n	8017506 <__ssputs_r+0x7e>
 80174a2:	6825      	ldr	r5, [r4, #0]
 80174a4:	6909      	ldr	r1, [r1, #16]
 80174a6:	1a6f      	subs	r7, r5, r1
 80174a8:	6965      	ldr	r5, [r4, #20]
 80174aa:	2302      	movs	r3, #2
 80174ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80174b4:	f109 0301 	add.w	r3, r9, #1
 80174b8:	443b      	add	r3, r7
 80174ba:	429d      	cmp	r5, r3
 80174bc:	bf38      	it	cc
 80174be:	461d      	movcc	r5, r3
 80174c0:	0553      	lsls	r3, r2, #21
 80174c2:	d530      	bpl.n	8017526 <__ssputs_r+0x9e>
 80174c4:	4629      	mov	r1, r5
 80174c6:	f7ff ff4b 	bl	8017360 <_malloc_r>
 80174ca:	4606      	mov	r6, r0
 80174cc:	b950      	cbnz	r0, 80174e4 <__ssputs_r+0x5c>
 80174ce:	230c      	movs	r3, #12
 80174d0:	f8ca 3000 	str.w	r3, [sl]
 80174d4:	89a3      	ldrh	r3, [r4, #12]
 80174d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174da:	81a3      	strh	r3, [r4, #12]
 80174dc:	f04f 30ff 	mov.w	r0, #4294967295
 80174e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174e4:	463a      	mov	r2, r7
 80174e6:	6921      	ldr	r1, [r4, #16]
 80174e8:	f7ff fed9 	bl	801729e <memcpy>
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80174f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174f6:	81a3      	strh	r3, [r4, #12]
 80174f8:	6126      	str	r6, [r4, #16]
 80174fa:	6165      	str	r5, [r4, #20]
 80174fc:	443e      	add	r6, r7
 80174fe:	1bed      	subs	r5, r5, r7
 8017500:	6026      	str	r6, [r4, #0]
 8017502:	60a5      	str	r5, [r4, #8]
 8017504:	464e      	mov	r6, r9
 8017506:	454e      	cmp	r6, r9
 8017508:	d900      	bls.n	801750c <__ssputs_r+0x84>
 801750a:	464e      	mov	r6, r9
 801750c:	4632      	mov	r2, r6
 801750e:	4641      	mov	r1, r8
 8017510:	6820      	ldr	r0, [r4, #0]
 8017512:	f000 fa93 	bl	8017a3c <memmove>
 8017516:	68a3      	ldr	r3, [r4, #8]
 8017518:	1b9b      	subs	r3, r3, r6
 801751a:	60a3      	str	r3, [r4, #8]
 801751c:	6823      	ldr	r3, [r4, #0]
 801751e:	441e      	add	r6, r3
 8017520:	6026      	str	r6, [r4, #0]
 8017522:	2000      	movs	r0, #0
 8017524:	e7dc      	b.n	80174e0 <__ssputs_r+0x58>
 8017526:	462a      	mov	r2, r5
 8017528:	f000 faa1 	bl	8017a6e <_realloc_r>
 801752c:	4606      	mov	r6, r0
 801752e:	2800      	cmp	r0, #0
 8017530:	d1e2      	bne.n	80174f8 <__ssputs_r+0x70>
 8017532:	6921      	ldr	r1, [r4, #16]
 8017534:	4650      	mov	r0, sl
 8017536:	f7ff fec5 	bl	80172c4 <_free_r>
 801753a:	e7c8      	b.n	80174ce <__ssputs_r+0x46>

0801753c <_svfiprintf_r>:
 801753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017540:	461d      	mov	r5, r3
 8017542:	898b      	ldrh	r3, [r1, #12]
 8017544:	061f      	lsls	r7, r3, #24
 8017546:	b09d      	sub	sp, #116	; 0x74
 8017548:	4680      	mov	r8, r0
 801754a:	460c      	mov	r4, r1
 801754c:	4616      	mov	r6, r2
 801754e:	d50f      	bpl.n	8017570 <_svfiprintf_r+0x34>
 8017550:	690b      	ldr	r3, [r1, #16]
 8017552:	b96b      	cbnz	r3, 8017570 <_svfiprintf_r+0x34>
 8017554:	2140      	movs	r1, #64	; 0x40
 8017556:	f7ff ff03 	bl	8017360 <_malloc_r>
 801755a:	6020      	str	r0, [r4, #0]
 801755c:	6120      	str	r0, [r4, #16]
 801755e:	b928      	cbnz	r0, 801756c <_svfiprintf_r+0x30>
 8017560:	230c      	movs	r3, #12
 8017562:	f8c8 3000 	str.w	r3, [r8]
 8017566:	f04f 30ff 	mov.w	r0, #4294967295
 801756a:	e0c8      	b.n	80176fe <_svfiprintf_r+0x1c2>
 801756c:	2340      	movs	r3, #64	; 0x40
 801756e:	6163      	str	r3, [r4, #20]
 8017570:	2300      	movs	r3, #0
 8017572:	9309      	str	r3, [sp, #36]	; 0x24
 8017574:	2320      	movs	r3, #32
 8017576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801757a:	2330      	movs	r3, #48	; 0x30
 801757c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017580:	9503      	str	r5, [sp, #12]
 8017582:	f04f 0b01 	mov.w	fp, #1
 8017586:	4637      	mov	r7, r6
 8017588:	463d      	mov	r5, r7
 801758a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801758e:	b10b      	cbz	r3, 8017594 <_svfiprintf_r+0x58>
 8017590:	2b25      	cmp	r3, #37	; 0x25
 8017592:	d13e      	bne.n	8017612 <_svfiprintf_r+0xd6>
 8017594:	ebb7 0a06 	subs.w	sl, r7, r6
 8017598:	d00b      	beq.n	80175b2 <_svfiprintf_r+0x76>
 801759a:	4653      	mov	r3, sl
 801759c:	4632      	mov	r2, r6
 801759e:	4621      	mov	r1, r4
 80175a0:	4640      	mov	r0, r8
 80175a2:	f7ff ff71 	bl	8017488 <__ssputs_r>
 80175a6:	3001      	adds	r0, #1
 80175a8:	f000 80a4 	beq.w	80176f4 <_svfiprintf_r+0x1b8>
 80175ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ae:	4453      	add	r3, sl
 80175b0:	9309      	str	r3, [sp, #36]	; 0x24
 80175b2:	783b      	ldrb	r3, [r7, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 809d 	beq.w	80176f4 <_svfiprintf_r+0x1b8>
 80175ba:	2300      	movs	r3, #0
 80175bc:	f04f 32ff 	mov.w	r2, #4294967295
 80175c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175c4:	9304      	str	r3, [sp, #16]
 80175c6:	9307      	str	r3, [sp, #28]
 80175c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175cc:	931a      	str	r3, [sp, #104]	; 0x68
 80175ce:	462f      	mov	r7, r5
 80175d0:	2205      	movs	r2, #5
 80175d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80175d6:	4850      	ldr	r0, [pc, #320]	; (8017718 <_svfiprintf_r+0x1dc>)
 80175d8:	f7e8 fe0a 	bl	80001f0 <memchr>
 80175dc:	9b04      	ldr	r3, [sp, #16]
 80175de:	b9d0      	cbnz	r0, 8017616 <_svfiprintf_r+0xda>
 80175e0:	06d9      	lsls	r1, r3, #27
 80175e2:	bf44      	itt	mi
 80175e4:	2220      	movmi	r2, #32
 80175e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175ea:	071a      	lsls	r2, r3, #28
 80175ec:	bf44      	itt	mi
 80175ee:	222b      	movmi	r2, #43	; 0x2b
 80175f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175f4:	782a      	ldrb	r2, [r5, #0]
 80175f6:	2a2a      	cmp	r2, #42	; 0x2a
 80175f8:	d015      	beq.n	8017626 <_svfiprintf_r+0xea>
 80175fa:	9a07      	ldr	r2, [sp, #28]
 80175fc:	462f      	mov	r7, r5
 80175fe:	2000      	movs	r0, #0
 8017600:	250a      	movs	r5, #10
 8017602:	4639      	mov	r1, r7
 8017604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017608:	3b30      	subs	r3, #48	; 0x30
 801760a:	2b09      	cmp	r3, #9
 801760c:	d94d      	bls.n	80176aa <_svfiprintf_r+0x16e>
 801760e:	b1b8      	cbz	r0, 8017640 <_svfiprintf_r+0x104>
 8017610:	e00f      	b.n	8017632 <_svfiprintf_r+0xf6>
 8017612:	462f      	mov	r7, r5
 8017614:	e7b8      	b.n	8017588 <_svfiprintf_r+0x4c>
 8017616:	4a40      	ldr	r2, [pc, #256]	; (8017718 <_svfiprintf_r+0x1dc>)
 8017618:	1a80      	subs	r0, r0, r2
 801761a:	fa0b f000 	lsl.w	r0, fp, r0
 801761e:	4318      	orrs	r0, r3
 8017620:	9004      	str	r0, [sp, #16]
 8017622:	463d      	mov	r5, r7
 8017624:	e7d3      	b.n	80175ce <_svfiprintf_r+0x92>
 8017626:	9a03      	ldr	r2, [sp, #12]
 8017628:	1d11      	adds	r1, r2, #4
 801762a:	6812      	ldr	r2, [r2, #0]
 801762c:	9103      	str	r1, [sp, #12]
 801762e:	2a00      	cmp	r2, #0
 8017630:	db01      	blt.n	8017636 <_svfiprintf_r+0xfa>
 8017632:	9207      	str	r2, [sp, #28]
 8017634:	e004      	b.n	8017640 <_svfiprintf_r+0x104>
 8017636:	4252      	negs	r2, r2
 8017638:	f043 0302 	orr.w	r3, r3, #2
 801763c:	9207      	str	r2, [sp, #28]
 801763e:	9304      	str	r3, [sp, #16]
 8017640:	783b      	ldrb	r3, [r7, #0]
 8017642:	2b2e      	cmp	r3, #46	; 0x2e
 8017644:	d10c      	bne.n	8017660 <_svfiprintf_r+0x124>
 8017646:	787b      	ldrb	r3, [r7, #1]
 8017648:	2b2a      	cmp	r3, #42	; 0x2a
 801764a:	d133      	bne.n	80176b4 <_svfiprintf_r+0x178>
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	1d1a      	adds	r2, r3, #4
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	9203      	str	r2, [sp, #12]
 8017654:	2b00      	cmp	r3, #0
 8017656:	bfb8      	it	lt
 8017658:	f04f 33ff 	movlt.w	r3, #4294967295
 801765c:	3702      	adds	r7, #2
 801765e:	9305      	str	r3, [sp, #20]
 8017660:	4d2e      	ldr	r5, [pc, #184]	; (801771c <_svfiprintf_r+0x1e0>)
 8017662:	7839      	ldrb	r1, [r7, #0]
 8017664:	2203      	movs	r2, #3
 8017666:	4628      	mov	r0, r5
 8017668:	f7e8 fdc2 	bl	80001f0 <memchr>
 801766c:	b138      	cbz	r0, 801767e <_svfiprintf_r+0x142>
 801766e:	2340      	movs	r3, #64	; 0x40
 8017670:	1b40      	subs	r0, r0, r5
 8017672:	fa03 f000 	lsl.w	r0, r3, r0
 8017676:	9b04      	ldr	r3, [sp, #16]
 8017678:	4303      	orrs	r3, r0
 801767a:	3701      	adds	r7, #1
 801767c:	9304      	str	r3, [sp, #16]
 801767e:	7839      	ldrb	r1, [r7, #0]
 8017680:	4827      	ldr	r0, [pc, #156]	; (8017720 <_svfiprintf_r+0x1e4>)
 8017682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017686:	2206      	movs	r2, #6
 8017688:	1c7e      	adds	r6, r7, #1
 801768a:	f7e8 fdb1 	bl	80001f0 <memchr>
 801768e:	2800      	cmp	r0, #0
 8017690:	d038      	beq.n	8017704 <_svfiprintf_r+0x1c8>
 8017692:	4b24      	ldr	r3, [pc, #144]	; (8017724 <_svfiprintf_r+0x1e8>)
 8017694:	bb13      	cbnz	r3, 80176dc <_svfiprintf_r+0x1a0>
 8017696:	9b03      	ldr	r3, [sp, #12]
 8017698:	3307      	adds	r3, #7
 801769a:	f023 0307 	bic.w	r3, r3, #7
 801769e:	3308      	adds	r3, #8
 80176a0:	9303      	str	r3, [sp, #12]
 80176a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176a4:	444b      	add	r3, r9
 80176a6:	9309      	str	r3, [sp, #36]	; 0x24
 80176a8:	e76d      	b.n	8017586 <_svfiprintf_r+0x4a>
 80176aa:	fb05 3202 	mla	r2, r5, r2, r3
 80176ae:	2001      	movs	r0, #1
 80176b0:	460f      	mov	r7, r1
 80176b2:	e7a6      	b.n	8017602 <_svfiprintf_r+0xc6>
 80176b4:	2300      	movs	r3, #0
 80176b6:	3701      	adds	r7, #1
 80176b8:	9305      	str	r3, [sp, #20]
 80176ba:	4619      	mov	r1, r3
 80176bc:	250a      	movs	r5, #10
 80176be:	4638      	mov	r0, r7
 80176c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176c4:	3a30      	subs	r2, #48	; 0x30
 80176c6:	2a09      	cmp	r2, #9
 80176c8:	d903      	bls.n	80176d2 <_svfiprintf_r+0x196>
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d0c8      	beq.n	8017660 <_svfiprintf_r+0x124>
 80176ce:	9105      	str	r1, [sp, #20]
 80176d0:	e7c6      	b.n	8017660 <_svfiprintf_r+0x124>
 80176d2:	fb05 2101 	mla	r1, r5, r1, r2
 80176d6:	2301      	movs	r3, #1
 80176d8:	4607      	mov	r7, r0
 80176da:	e7f0      	b.n	80176be <_svfiprintf_r+0x182>
 80176dc:	ab03      	add	r3, sp, #12
 80176de:	9300      	str	r3, [sp, #0]
 80176e0:	4622      	mov	r2, r4
 80176e2:	4b11      	ldr	r3, [pc, #68]	; (8017728 <_svfiprintf_r+0x1ec>)
 80176e4:	a904      	add	r1, sp, #16
 80176e6:	4640      	mov	r0, r8
 80176e8:	f3af 8000 	nop.w
 80176ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80176f0:	4681      	mov	r9, r0
 80176f2:	d1d6      	bne.n	80176a2 <_svfiprintf_r+0x166>
 80176f4:	89a3      	ldrh	r3, [r4, #12]
 80176f6:	065b      	lsls	r3, r3, #25
 80176f8:	f53f af35 	bmi.w	8017566 <_svfiprintf_r+0x2a>
 80176fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176fe:	b01d      	add	sp, #116	; 0x74
 8017700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017704:	ab03      	add	r3, sp, #12
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	4622      	mov	r2, r4
 801770a:	4b07      	ldr	r3, [pc, #28]	; (8017728 <_svfiprintf_r+0x1ec>)
 801770c:	a904      	add	r1, sp, #16
 801770e:	4640      	mov	r0, r8
 8017710:	f000 f882 	bl	8017818 <_printf_i>
 8017714:	e7ea      	b.n	80176ec <_svfiprintf_r+0x1b0>
 8017716:	bf00      	nop
 8017718:	0801bda0 	.word	0x0801bda0
 801771c:	0801bda6 	.word	0x0801bda6
 8017720:	0801bdaa 	.word	0x0801bdaa
 8017724:	00000000 	.word	0x00000000
 8017728:	08017489 	.word	0x08017489

0801772c <_printf_common>:
 801772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017730:	4691      	mov	r9, r2
 8017732:	461f      	mov	r7, r3
 8017734:	688a      	ldr	r2, [r1, #8]
 8017736:	690b      	ldr	r3, [r1, #16]
 8017738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801773c:	4293      	cmp	r3, r2
 801773e:	bfb8      	it	lt
 8017740:	4613      	movlt	r3, r2
 8017742:	f8c9 3000 	str.w	r3, [r9]
 8017746:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801774a:	4606      	mov	r6, r0
 801774c:	460c      	mov	r4, r1
 801774e:	b112      	cbz	r2, 8017756 <_printf_common+0x2a>
 8017750:	3301      	adds	r3, #1
 8017752:	f8c9 3000 	str.w	r3, [r9]
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	0699      	lsls	r1, r3, #26
 801775a:	bf42      	ittt	mi
 801775c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017760:	3302      	addmi	r3, #2
 8017762:	f8c9 3000 	strmi.w	r3, [r9]
 8017766:	6825      	ldr	r5, [r4, #0]
 8017768:	f015 0506 	ands.w	r5, r5, #6
 801776c:	d107      	bne.n	801777e <_printf_common+0x52>
 801776e:	f104 0a19 	add.w	sl, r4, #25
 8017772:	68e3      	ldr	r3, [r4, #12]
 8017774:	f8d9 2000 	ldr.w	r2, [r9]
 8017778:	1a9b      	subs	r3, r3, r2
 801777a:	42ab      	cmp	r3, r5
 801777c:	dc28      	bgt.n	80177d0 <_printf_common+0xa4>
 801777e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017782:	6822      	ldr	r2, [r4, #0]
 8017784:	3300      	adds	r3, #0
 8017786:	bf18      	it	ne
 8017788:	2301      	movne	r3, #1
 801778a:	0692      	lsls	r2, r2, #26
 801778c:	d42d      	bmi.n	80177ea <_printf_common+0xbe>
 801778e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017792:	4639      	mov	r1, r7
 8017794:	4630      	mov	r0, r6
 8017796:	47c0      	blx	r8
 8017798:	3001      	adds	r0, #1
 801779a:	d020      	beq.n	80177de <_printf_common+0xb2>
 801779c:	6823      	ldr	r3, [r4, #0]
 801779e:	68e5      	ldr	r5, [r4, #12]
 80177a0:	f8d9 2000 	ldr.w	r2, [r9]
 80177a4:	f003 0306 	and.w	r3, r3, #6
 80177a8:	2b04      	cmp	r3, #4
 80177aa:	bf08      	it	eq
 80177ac:	1aad      	subeq	r5, r5, r2
 80177ae:	68a3      	ldr	r3, [r4, #8]
 80177b0:	6922      	ldr	r2, [r4, #16]
 80177b2:	bf0c      	ite	eq
 80177b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177b8:	2500      	movne	r5, #0
 80177ba:	4293      	cmp	r3, r2
 80177bc:	bfc4      	itt	gt
 80177be:	1a9b      	subgt	r3, r3, r2
 80177c0:	18ed      	addgt	r5, r5, r3
 80177c2:	f04f 0900 	mov.w	r9, #0
 80177c6:	341a      	adds	r4, #26
 80177c8:	454d      	cmp	r5, r9
 80177ca:	d11a      	bne.n	8017802 <_printf_common+0xd6>
 80177cc:	2000      	movs	r0, #0
 80177ce:	e008      	b.n	80177e2 <_printf_common+0xb6>
 80177d0:	2301      	movs	r3, #1
 80177d2:	4652      	mov	r2, sl
 80177d4:	4639      	mov	r1, r7
 80177d6:	4630      	mov	r0, r6
 80177d8:	47c0      	blx	r8
 80177da:	3001      	adds	r0, #1
 80177dc:	d103      	bne.n	80177e6 <_printf_common+0xba>
 80177de:	f04f 30ff 	mov.w	r0, #4294967295
 80177e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177e6:	3501      	adds	r5, #1
 80177e8:	e7c3      	b.n	8017772 <_printf_common+0x46>
 80177ea:	18e1      	adds	r1, r4, r3
 80177ec:	1c5a      	adds	r2, r3, #1
 80177ee:	2030      	movs	r0, #48	; 0x30
 80177f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80177f4:	4422      	add	r2, r4
 80177f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177fe:	3302      	adds	r3, #2
 8017800:	e7c5      	b.n	801778e <_printf_common+0x62>
 8017802:	2301      	movs	r3, #1
 8017804:	4622      	mov	r2, r4
 8017806:	4639      	mov	r1, r7
 8017808:	4630      	mov	r0, r6
 801780a:	47c0      	blx	r8
 801780c:	3001      	adds	r0, #1
 801780e:	d0e6      	beq.n	80177de <_printf_common+0xb2>
 8017810:	f109 0901 	add.w	r9, r9, #1
 8017814:	e7d8      	b.n	80177c8 <_printf_common+0x9c>
	...

08017818 <_printf_i>:
 8017818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801781c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017820:	460c      	mov	r4, r1
 8017822:	7e09      	ldrb	r1, [r1, #24]
 8017824:	b085      	sub	sp, #20
 8017826:	296e      	cmp	r1, #110	; 0x6e
 8017828:	4617      	mov	r7, r2
 801782a:	4606      	mov	r6, r0
 801782c:	4698      	mov	r8, r3
 801782e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017830:	f000 80b3 	beq.w	801799a <_printf_i+0x182>
 8017834:	d822      	bhi.n	801787c <_printf_i+0x64>
 8017836:	2963      	cmp	r1, #99	; 0x63
 8017838:	d036      	beq.n	80178a8 <_printf_i+0x90>
 801783a:	d80a      	bhi.n	8017852 <_printf_i+0x3a>
 801783c:	2900      	cmp	r1, #0
 801783e:	f000 80b9 	beq.w	80179b4 <_printf_i+0x19c>
 8017842:	2958      	cmp	r1, #88	; 0x58
 8017844:	f000 8083 	beq.w	801794e <_printf_i+0x136>
 8017848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801784c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017850:	e032      	b.n	80178b8 <_printf_i+0xa0>
 8017852:	2964      	cmp	r1, #100	; 0x64
 8017854:	d001      	beq.n	801785a <_printf_i+0x42>
 8017856:	2969      	cmp	r1, #105	; 0x69
 8017858:	d1f6      	bne.n	8017848 <_printf_i+0x30>
 801785a:	6820      	ldr	r0, [r4, #0]
 801785c:	6813      	ldr	r3, [r2, #0]
 801785e:	0605      	lsls	r5, r0, #24
 8017860:	f103 0104 	add.w	r1, r3, #4
 8017864:	d52a      	bpl.n	80178bc <_printf_i+0xa4>
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	6011      	str	r1, [r2, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	da03      	bge.n	8017876 <_printf_i+0x5e>
 801786e:	222d      	movs	r2, #45	; 0x2d
 8017870:	425b      	negs	r3, r3
 8017872:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017876:	486f      	ldr	r0, [pc, #444]	; (8017a34 <_printf_i+0x21c>)
 8017878:	220a      	movs	r2, #10
 801787a:	e039      	b.n	80178f0 <_printf_i+0xd8>
 801787c:	2973      	cmp	r1, #115	; 0x73
 801787e:	f000 809d 	beq.w	80179bc <_printf_i+0x1a4>
 8017882:	d808      	bhi.n	8017896 <_printf_i+0x7e>
 8017884:	296f      	cmp	r1, #111	; 0x6f
 8017886:	d020      	beq.n	80178ca <_printf_i+0xb2>
 8017888:	2970      	cmp	r1, #112	; 0x70
 801788a:	d1dd      	bne.n	8017848 <_printf_i+0x30>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	f043 0320 	orr.w	r3, r3, #32
 8017892:	6023      	str	r3, [r4, #0]
 8017894:	e003      	b.n	801789e <_printf_i+0x86>
 8017896:	2975      	cmp	r1, #117	; 0x75
 8017898:	d017      	beq.n	80178ca <_printf_i+0xb2>
 801789a:	2978      	cmp	r1, #120	; 0x78
 801789c:	d1d4      	bne.n	8017848 <_printf_i+0x30>
 801789e:	2378      	movs	r3, #120	; 0x78
 80178a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80178a4:	4864      	ldr	r0, [pc, #400]	; (8017a38 <_printf_i+0x220>)
 80178a6:	e055      	b.n	8017954 <_printf_i+0x13c>
 80178a8:	6813      	ldr	r3, [r2, #0]
 80178aa:	1d19      	adds	r1, r3, #4
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	6011      	str	r1, [r2, #0]
 80178b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178b8:	2301      	movs	r3, #1
 80178ba:	e08c      	b.n	80179d6 <_printf_i+0x1be>
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	6011      	str	r1, [r2, #0]
 80178c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80178c4:	bf18      	it	ne
 80178c6:	b21b      	sxthne	r3, r3
 80178c8:	e7cf      	b.n	801786a <_printf_i+0x52>
 80178ca:	6813      	ldr	r3, [r2, #0]
 80178cc:	6825      	ldr	r5, [r4, #0]
 80178ce:	1d18      	adds	r0, r3, #4
 80178d0:	6010      	str	r0, [r2, #0]
 80178d2:	0628      	lsls	r0, r5, #24
 80178d4:	d501      	bpl.n	80178da <_printf_i+0xc2>
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	e002      	b.n	80178e0 <_printf_i+0xc8>
 80178da:	0668      	lsls	r0, r5, #25
 80178dc:	d5fb      	bpl.n	80178d6 <_printf_i+0xbe>
 80178de:	881b      	ldrh	r3, [r3, #0]
 80178e0:	4854      	ldr	r0, [pc, #336]	; (8017a34 <_printf_i+0x21c>)
 80178e2:	296f      	cmp	r1, #111	; 0x6f
 80178e4:	bf14      	ite	ne
 80178e6:	220a      	movne	r2, #10
 80178e8:	2208      	moveq	r2, #8
 80178ea:	2100      	movs	r1, #0
 80178ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178f0:	6865      	ldr	r5, [r4, #4]
 80178f2:	60a5      	str	r5, [r4, #8]
 80178f4:	2d00      	cmp	r5, #0
 80178f6:	f2c0 8095 	blt.w	8017a24 <_printf_i+0x20c>
 80178fa:	6821      	ldr	r1, [r4, #0]
 80178fc:	f021 0104 	bic.w	r1, r1, #4
 8017900:	6021      	str	r1, [r4, #0]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d13d      	bne.n	8017982 <_printf_i+0x16a>
 8017906:	2d00      	cmp	r5, #0
 8017908:	f040 808e 	bne.w	8017a28 <_printf_i+0x210>
 801790c:	4665      	mov	r5, ip
 801790e:	2a08      	cmp	r2, #8
 8017910:	d10b      	bne.n	801792a <_printf_i+0x112>
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	07db      	lsls	r3, r3, #31
 8017916:	d508      	bpl.n	801792a <_printf_i+0x112>
 8017918:	6923      	ldr	r3, [r4, #16]
 801791a:	6862      	ldr	r2, [r4, #4]
 801791c:	429a      	cmp	r2, r3
 801791e:	bfde      	ittt	le
 8017920:	2330      	movle	r3, #48	; 0x30
 8017922:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017926:	f105 35ff 	addle.w	r5, r5, #4294967295
 801792a:	ebac 0305 	sub.w	r3, ip, r5
 801792e:	6123      	str	r3, [r4, #16]
 8017930:	f8cd 8000 	str.w	r8, [sp]
 8017934:	463b      	mov	r3, r7
 8017936:	aa03      	add	r2, sp, #12
 8017938:	4621      	mov	r1, r4
 801793a:	4630      	mov	r0, r6
 801793c:	f7ff fef6 	bl	801772c <_printf_common>
 8017940:	3001      	adds	r0, #1
 8017942:	d14d      	bne.n	80179e0 <_printf_i+0x1c8>
 8017944:	f04f 30ff 	mov.w	r0, #4294967295
 8017948:	b005      	add	sp, #20
 801794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801794e:	4839      	ldr	r0, [pc, #228]	; (8017a34 <_printf_i+0x21c>)
 8017950:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017954:	6813      	ldr	r3, [r2, #0]
 8017956:	6821      	ldr	r1, [r4, #0]
 8017958:	1d1d      	adds	r5, r3, #4
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	6015      	str	r5, [r2, #0]
 801795e:	060a      	lsls	r2, r1, #24
 8017960:	d50b      	bpl.n	801797a <_printf_i+0x162>
 8017962:	07ca      	lsls	r2, r1, #31
 8017964:	bf44      	itt	mi
 8017966:	f041 0120 	orrmi.w	r1, r1, #32
 801796a:	6021      	strmi	r1, [r4, #0]
 801796c:	b91b      	cbnz	r3, 8017976 <_printf_i+0x15e>
 801796e:	6822      	ldr	r2, [r4, #0]
 8017970:	f022 0220 	bic.w	r2, r2, #32
 8017974:	6022      	str	r2, [r4, #0]
 8017976:	2210      	movs	r2, #16
 8017978:	e7b7      	b.n	80178ea <_printf_i+0xd2>
 801797a:	064d      	lsls	r5, r1, #25
 801797c:	bf48      	it	mi
 801797e:	b29b      	uxthmi	r3, r3
 8017980:	e7ef      	b.n	8017962 <_printf_i+0x14a>
 8017982:	4665      	mov	r5, ip
 8017984:	fbb3 f1f2 	udiv	r1, r3, r2
 8017988:	fb02 3311 	mls	r3, r2, r1, r3
 801798c:	5cc3      	ldrb	r3, [r0, r3]
 801798e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017992:	460b      	mov	r3, r1
 8017994:	2900      	cmp	r1, #0
 8017996:	d1f5      	bne.n	8017984 <_printf_i+0x16c>
 8017998:	e7b9      	b.n	801790e <_printf_i+0xf6>
 801799a:	6813      	ldr	r3, [r2, #0]
 801799c:	6825      	ldr	r5, [r4, #0]
 801799e:	6961      	ldr	r1, [r4, #20]
 80179a0:	1d18      	adds	r0, r3, #4
 80179a2:	6010      	str	r0, [r2, #0]
 80179a4:	0628      	lsls	r0, r5, #24
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	d501      	bpl.n	80179ae <_printf_i+0x196>
 80179aa:	6019      	str	r1, [r3, #0]
 80179ac:	e002      	b.n	80179b4 <_printf_i+0x19c>
 80179ae:	066a      	lsls	r2, r5, #25
 80179b0:	d5fb      	bpl.n	80179aa <_printf_i+0x192>
 80179b2:	8019      	strh	r1, [r3, #0]
 80179b4:	2300      	movs	r3, #0
 80179b6:	6123      	str	r3, [r4, #16]
 80179b8:	4665      	mov	r5, ip
 80179ba:	e7b9      	b.n	8017930 <_printf_i+0x118>
 80179bc:	6813      	ldr	r3, [r2, #0]
 80179be:	1d19      	adds	r1, r3, #4
 80179c0:	6011      	str	r1, [r2, #0]
 80179c2:	681d      	ldr	r5, [r3, #0]
 80179c4:	6862      	ldr	r2, [r4, #4]
 80179c6:	2100      	movs	r1, #0
 80179c8:	4628      	mov	r0, r5
 80179ca:	f7e8 fc11 	bl	80001f0 <memchr>
 80179ce:	b108      	cbz	r0, 80179d4 <_printf_i+0x1bc>
 80179d0:	1b40      	subs	r0, r0, r5
 80179d2:	6060      	str	r0, [r4, #4]
 80179d4:	6863      	ldr	r3, [r4, #4]
 80179d6:	6123      	str	r3, [r4, #16]
 80179d8:	2300      	movs	r3, #0
 80179da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179de:	e7a7      	b.n	8017930 <_printf_i+0x118>
 80179e0:	6923      	ldr	r3, [r4, #16]
 80179e2:	462a      	mov	r2, r5
 80179e4:	4639      	mov	r1, r7
 80179e6:	4630      	mov	r0, r6
 80179e8:	47c0      	blx	r8
 80179ea:	3001      	adds	r0, #1
 80179ec:	d0aa      	beq.n	8017944 <_printf_i+0x12c>
 80179ee:	6823      	ldr	r3, [r4, #0]
 80179f0:	079b      	lsls	r3, r3, #30
 80179f2:	d413      	bmi.n	8017a1c <_printf_i+0x204>
 80179f4:	68e0      	ldr	r0, [r4, #12]
 80179f6:	9b03      	ldr	r3, [sp, #12]
 80179f8:	4298      	cmp	r0, r3
 80179fa:	bfb8      	it	lt
 80179fc:	4618      	movlt	r0, r3
 80179fe:	e7a3      	b.n	8017948 <_printf_i+0x130>
 8017a00:	2301      	movs	r3, #1
 8017a02:	464a      	mov	r2, r9
 8017a04:	4639      	mov	r1, r7
 8017a06:	4630      	mov	r0, r6
 8017a08:	47c0      	blx	r8
 8017a0a:	3001      	adds	r0, #1
 8017a0c:	d09a      	beq.n	8017944 <_printf_i+0x12c>
 8017a0e:	3501      	adds	r5, #1
 8017a10:	68e3      	ldr	r3, [r4, #12]
 8017a12:	9a03      	ldr	r2, [sp, #12]
 8017a14:	1a9b      	subs	r3, r3, r2
 8017a16:	42ab      	cmp	r3, r5
 8017a18:	dcf2      	bgt.n	8017a00 <_printf_i+0x1e8>
 8017a1a:	e7eb      	b.n	80179f4 <_printf_i+0x1dc>
 8017a1c:	2500      	movs	r5, #0
 8017a1e:	f104 0919 	add.w	r9, r4, #25
 8017a22:	e7f5      	b.n	8017a10 <_printf_i+0x1f8>
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d1ac      	bne.n	8017982 <_printf_i+0x16a>
 8017a28:	7803      	ldrb	r3, [r0, #0]
 8017a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a32:	e76c      	b.n	801790e <_printf_i+0xf6>
 8017a34:	0801bdb1 	.word	0x0801bdb1
 8017a38:	0801bdc2 	.word	0x0801bdc2

08017a3c <memmove>:
 8017a3c:	4288      	cmp	r0, r1
 8017a3e:	b510      	push	{r4, lr}
 8017a40:	eb01 0302 	add.w	r3, r1, r2
 8017a44:	d807      	bhi.n	8017a56 <memmove+0x1a>
 8017a46:	1e42      	subs	r2, r0, #1
 8017a48:	4299      	cmp	r1, r3
 8017a4a:	d00a      	beq.n	8017a62 <memmove+0x26>
 8017a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017a54:	e7f8      	b.n	8017a48 <memmove+0xc>
 8017a56:	4283      	cmp	r3, r0
 8017a58:	d9f5      	bls.n	8017a46 <memmove+0xa>
 8017a5a:	1881      	adds	r1, r0, r2
 8017a5c:	1ad2      	subs	r2, r2, r3
 8017a5e:	42d3      	cmn	r3, r2
 8017a60:	d100      	bne.n	8017a64 <memmove+0x28>
 8017a62:	bd10      	pop	{r4, pc}
 8017a64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017a6c:	e7f7      	b.n	8017a5e <memmove+0x22>

08017a6e <_realloc_r>:
 8017a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a70:	4607      	mov	r7, r0
 8017a72:	4614      	mov	r4, r2
 8017a74:	460e      	mov	r6, r1
 8017a76:	b921      	cbnz	r1, 8017a82 <_realloc_r+0x14>
 8017a78:	4611      	mov	r1, r2
 8017a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a7e:	f7ff bc6f 	b.w	8017360 <_malloc_r>
 8017a82:	b922      	cbnz	r2, 8017a8e <_realloc_r+0x20>
 8017a84:	f7ff fc1e 	bl	80172c4 <_free_r>
 8017a88:	4625      	mov	r5, r4
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a8e:	f000 f814 	bl	8017aba <_malloc_usable_size_r>
 8017a92:	42a0      	cmp	r0, r4
 8017a94:	d20f      	bcs.n	8017ab6 <_realloc_r+0x48>
 8017a96:	4621      	mov	r1, r4
 8017a98:	4638      	mov	r0, r7
 8017a9a:	f7ff fc61 	bl	8017360 <_malloc_r>
 8017a9e:	4605      	mov	r5, r0
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d0f2      	beq.n	8017a8a <_realloc_r+0x1c>
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	4622      	mov	r2, r4
 8017aa8:	f7ff fbf9 	bl	801729e <memcpy>
 8017aac:	4631      	mov	r1, r6
 8017aae:	4638      	mov	r0, r7
 8017ab0:	f7ff fc08 	bl	80172c4 <_free_r>
 8017ab4:	e7e9      	b.n	8017a8a <_realloc_r+0x1c>
 8017ab6:	4635      	mov	r5, r6
 8017ab8:	e7e7      	b.n	8017a8a <_realloc_r+0x1c>

08017aba <_malloc_usable_size_r>:
 8017aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017abe:	1f18      	subs	r0, r3, #4
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	bfbc      	itt	lt
 8017ac4:	580b      	ldrlt	r3, [r1, r0]
 8017ac6:	18c0      	addlt	r0, r0, r3
 8017ac8:	4770      	bx	lr
	...

08017acc <_init>:
 8017acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ace:	bf00      	nop
 8017ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ad2:	bc08      	pop	{r3}
 8017ad4:	469e      	mov	lr, r3
 8017ad6:	4770      	bx	lr

08017ad8 <_fini>:
 8017ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ada:	bf00      	nop
 8017adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ade:	bc08      	pop	{r3}
 8017ae0:	469e      	mov	lr, r3
 8017ae2:	4770      	bx	lr
