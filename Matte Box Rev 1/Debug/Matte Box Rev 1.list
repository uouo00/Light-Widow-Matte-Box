
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd48  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cd8  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bb8  08013bb8  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08013bb8  08013bb8  00023bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013bc0  08013bc0  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bc0  08013bc0  00023bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bc4  08013bc4  00023bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08013bc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d38  20000238  08013e00  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001f70  08013e00  00031f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031483  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b1b  00000000  00000000  000616eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e60  00000000  00000000  00068208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b70  00000000  00000000  0006a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d7aa  00000000  00000000  0006bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023b65  00000000  00000000  00079382  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1a53  00000000  00000000  0009cee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e93a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c84  00000000  00000000  0014e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000238 	.word	0x20000238
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800fec8 	.word	0x0800fec8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000023c 	.word	0x2000023c
 80001d4:	0800fec8 	.word	0x0800fec8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b972 	b.w	8000cc0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14b      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4615      	mov	r5, r2
 8000a06:	d967      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0720 	rsb	r7, r2, #32
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	fa20 f707 	lsr.w	r7, r0, r7
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	ea47 0803 	orr.w	r8, r7, r3
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a2c:	fa1f fc85 	uxth.w	ip, r5
 8000a30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a38:	fb07 f10c 	mul.w	r1, r7, ip
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18eb      	adds	r3, r5, r3
 8000a42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a46:	f080 811b 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8118 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a50:	3f02      	subs	r7, #2
 8000a52:	442b      	add	r3, r5
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a68:	45a4      	cmp	ip, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	192c      	adds	r4, r5, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8107 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	f240 8104 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	442c      	add	r4, r5
 8000a80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a84:	eba4 040c 	sub.w	r4, r4, ip
 8000a88:	2700      	movs	r7, #0
 8000a8a:	b11e      	cbz	r6, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c6 4300 	strd	r4, r3, [r6]
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xbe>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80eb 	beq.w	8000c7a <__udivmoddi4+0x286>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aaa:	4638      	mov	r0, r7
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f783 	clz	r7, r3
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d147      	bne.n	8000b4a <__udivmoddi4+0x156>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd0>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80fa 	bhi.w	8000cb8 <__udivmoddi4+0x2c4>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	4698      	mov	r8, r3
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000ad2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xe8>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 808f 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae6:	1b49      	subs	r1, r1, r5
 8000ae8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aec:	fa1f f885 	uxth.w	r8, r5
 8000af0:	2701      	movs	r7, #1
 8000af2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb08 f10c 	mul.w	r1, r8, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x14c>
 8000b30:	192c      	adds	r4, r5, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x14a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80b6 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e79f      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b4e:	40bb      	lsls	r3, r7
 8000b50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b58:	fa01 f407 	lsl.w	r4, r1, r7
 8000b5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b68:	4325      	orrs	r5, r4
 8000b6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b6e:	0c2c      	lsrs	r4, r5, #16
 8000b70:	fb08 3319 	mls	r3, r8, r9, r3
 8000b74:	fa1f fa8e 	uxth.w	sl, lr
 8000b78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b80:	429c      	cmp	r4, r3
 8000b82:	fa02 f207 	lsl.w	r2, r2, r7
 8000b86:	fa00 f107 	lsl.w	r1, r0, r7
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ba2:	4473      	add	r3, lr
 8000ba4:	1b1b      	subs	r3, r3, r4
 8000ba6:	b2ad      	uxth	r5, r5
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb8:	45a2      	cmp	sl, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a2      	cmp	sl, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4474      	add	r4, lr
 8000bce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd6:	eba4 040a 	sub.w	r4, r4, sl
 8000bda:	454c      	cmp	r4, r9
 8000bdc:	46c2      	mov	sl, r8
 8000bde:	464b      	mov	r3, r9
 8000be0:	d354      	bcc.n	8000c8c <__udivmoddi4+0x298>
 8000be2:	d051      	beq.n	8000c88 <__udivmoddi4+0x294>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d069      	beq.n	8000cbc <__udivmoddi4+0x2c8>
 8000be8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bec:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bf4:	40fd      	lsrs	r5, r7
 8000bf6:	40fc      	lsrs	r4, r7
 8000bf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000c00:	2700      	movs	r7, #0
 8000c02:	e747      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f703 	lsr.w	r7, r0, r3
 8000c0c:	4095      	lsls	r5, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	fa21 f303 	lsr.w	r3, r1, r3
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	4338      	orrs	r0, r7
 8000c1c:	0c01      	lsrs	r1, r0, #16
 8000c1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c22:	fa1f f885 	uxth.w	r8, r5
 8000c26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb07 f308 	mul.w	r3, r7, r8
 8000c32:	428b      	cmp	r3, r1
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c3a:	1869      	adds	r1, r5, r1
 8000c3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3f02      	subs	r7, #2
 8000c48:	4429      	add	r1, r5
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	b281      	uxth	r1, r0
 8000c4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb00 f308 	mul.w	r3, r0, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x27e>
 8000c62:	1869      	adds	r1, r5, r1
 8000c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c68:	d217      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d915      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6e:	3802      	subs	r0, #2
 8000c70:	4429      	add	r1, r5
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c78:	e73b      	b.n	8000af2 <__udivmoddi4+0xfe>
 8000c7a:	4637      	mov	r7, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e709      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e6e7      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6fb      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c88:	4541      	cmp	r1, r8
 8000c8a:	d2ab      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c90:	eb69 020e 	sbc.w	r2, r9, lr
 8000c94:	3801      	subs	r0, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	e7e9      	b.n	8000c72 <__udivmoddi4+0x27e>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4667      	mov	r7, ip
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3802      	subs	r0, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	e747      	b.n	8000b40 <__udivmoddi4+0x14c>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	e72f      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb8:	4638      	mov	r0, r7
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xda>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0xa0>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <DWT_Init>:
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <DWT_Init+0x2c>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <DWT_Init+0x2c>)
 8000cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cd2:	60d3      	str	r3, [r2, #12]
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <DWT_Init+0x30>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <DWT_Init+0x30>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <DWT_Init+0x30>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000edf0 	.word	0xe000edf0
 8000cf4:	e0001000 	.word	0xe0001000

08000cf8 <DWT_Delay>:
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <DWT_Delay+0x40>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <DWT_Delay+0x44>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <DWT_Delay+0x48>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9a      	lsrs	r2, r3, #18
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	bf00      	nop
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <DWT_Delay+0x40>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8f8      	bhi.n	8000d1c <DWT_Delay+0x24>
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e0001000 	.word	0xe0001000
 8000d3c:	2000004c 	.word	0x2000004c
 8000d40:	431bde83 	.word	0x431bde83

08000d44 <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000d52:	2300      	movs	r3, #0
 8000d54:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	773b      	strb	r3, [r7, #28]
 8000d66:	e07d      	b.n	8000e64 <updateFilterSection+0x120>
		UIDMatched = false;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	777b      	strb	r3, [r7, #29]
 8000d70:	e02f      	b.n	8000dd2 <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000d72:	7f7a      	ldrb	r2, [r7, #29]
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	1c58      	adds	r0, r3, #1
 8000d82:	7f3a      	ldrb	r2, [r7, #28]
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3308      	adds	r3, #8
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	3303      	adds	r3, #3
 8000d96:	2208      	movs	r2, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f00e ffb9 	bl	800fd10 <memcmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d113      	bne.n	8000dcc <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000da4:	7f7a      	ldrb	r2, [r7, #29]
 8000da6:	4613      	mov	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	3301      	adds	r3, #1
 8000db4:	f107 010c 	add.w	r1, r7, #12
 8000db8:	2208      	movs	r2, #8
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00e ffa8 	bl	800fd10 <memcmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	77bb      	strb	r3, [r7, #30]
					break;
 8000dca:	e005      	b.n	8000dd8 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000dcc:	7f7b      	ldrb	r3, [r7, #29]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	777b      	strb	r3, [r7, #29]
 8000dd2:	7f7b      	ldrb	r3, [r7, #29]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d9cc      	bls.n	8000d72 <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000dd8:	7fbb      	ldrb	r3, [r7, #30]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03c      	beq.n	8000e5e <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000de4:	7f3a      	ldrb	r2, [r7, #28]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4413      	add	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	3308      	adds	r3, #8
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	3303      	adds	r3, #3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00e ff86 	bl	800fd10 <memcmp>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d029      	beq.n	8000e5e <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000e0a:	7f3a      	ldrb	r2, [r7, #28]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4413      	add	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	3308      	adds	r3, #8
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3303      	adds	r3, #3
 8000e1e:	2208      	movs	r2, #8
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00e ff8e 	bl	800fd44 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000e28:	7f3a      	ldrb	r2, [r7, #28]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	3301      	adds	r3, #1
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00e ff80 	bl	800fd44 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000e44:	7f3a      	ldrb	r2, [r7, #28]
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	3313      	adds	r3, #19
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e5e:	7f3b      	ldrb	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	773b      	strb	r3, [r7, #28]
 8000e64:	7f3b      	ldrb	r3, [r7, #28]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	f67f af7e 	bls.w	8000d68 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	777b      	strb	r3, [r7, #29]
 8000e70:	e0bc      	b.n	8000fec <updateFilterSection+0x2a8>
		UIDMatched = false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	773b      	strb	r3, [r7, #28]
 8000e7a:	e01e      	b.n	8000eba <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e7c:	7f7a      	ldrb	r2, [r7, #29]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	1c58      	adds	r0, r3, #1
 8000e8c:	7f3a      	ldrb	r2, [r7, #28]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	3308      	adds	r3, #8
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f00e ff34 	bl	800fd10 <memcmp>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	77bb      	strb	r3, [r7, #30]
				break;
 8000eb2:	e005      	b.n	8000ec0 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000eb4:	7f3b      	ldrb	r3, [r7, #28]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	773b      	strb	r3, [r7, #28]
 8000eba:	7f3b      	ldrb	r3, [r7, #28]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d9dd      	bls.n	8000e7c <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000ec0:	7fbb      	ldrb	r3, [r7, #30]
 8000ec2:	f083 0301 	eor.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 808c 	beq.w	8000fe6 <updateFilterSection+0x2a2>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000ece:	7f7a      	ldrb	r2, [r7, #29]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	f107 010c 	add.w	r1, r7, #12
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00e ff13 	bl	800fd10 <memcmp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d07a      	beq.n	8000fe6 <updateFilterSection+0x2a2>
				// A new filter has been installed.
				bool stageEmpty; // Holder for the empty stage
				uint8_t stagePos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000ef0:	7f7a      	ldrb	r2, [r7, #29]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	3308      	adds	r3, #8
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	3301      	adds	r3, #1
 8000f02:	f107 010c 	add.w	r1, r7, #12
 8000f06:	220a      	movs	r2, #10
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00e ff01 	bl	800fd10 <memcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d066      	beq.n	8000fe2 <updateFilterSection+0x29e>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000f14:	2300      	movs	r3, #0
 8000f16:	76bb      	strb	r3, [r7, #26]
 8000f18:	e021      	b.n	8000f5e <updateFilterSection+0x21a>
						stageEmpty = true; // Assume the stage is empty
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	767b      	strb	r3, [r7, #25]
 8000f22:	e013      	b.n	8000f4c <updateFilterSection+0x208>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000f24:	7e7a      	ldrb	r2, [r7, #25]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	3313      	adds	r3, #19
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	7ebb      	ldrb	r3, [r7, #26]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d101      	bne.n	8000f46 <updateFilterSection+0x202>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000f46:	7e7b      	ldrb	r3, [r7, #25]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	767b      	strb	r3, [r7, #25]
 8000f4c:	7e7b      	ldrb	r3, [r7, #25]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d9e8      	bls.n	8000f24 <updateFilterSection+0x1e0>
							}
						}

						if (stageEmpty) {
 8000f52:	7efb      	ldrb	r3, [r7, #27]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <updateFilterSection+0x222>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000f58:	7ebb      	ldrb	r3, [r7, #26]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	76bb      	strb	r3, [r7, #26]
 8000f5e:	7ebb      	ldrb	r3, [r7, #26]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d9da      	bls.n	8000f1a <updateFilterSection+0x1d6>
 8000f64:	e000      	b.n	8000f68 <updateFilterSection+0x224>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 8000f66:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[stagePos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 8000f68:	7eba      	ldrb	r2, [r7, #26]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3308      	adds	r3, #8
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	1cd8      	adds	r0, r3, #3
 8000f7c:	7f7a      	ldrb	r2, [r7, #29]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f00e fecd 	bl	800fd2e <memcpy>
					memcpy(currentFilters->filter[stagePos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 8000f94:	7eba      	ldrb	r2, [r7, #26]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	1c58      	adds	r0, r3, #1
 8000fa6:	7f7a      	ldrb	r2, [r7, #29]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	220a      	movs	r2, #10
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f00e feb7 	bl	800fd2e <memcpy>
					currentFilters->filter[stagePos].position = stagePos + 1;
 8000fc0:	7eba      	ldrb	r2, [r7, #26]
 8000fc2:	7ebb      	ldrb	r3, [r7, #26]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3313      	adds	r3, #19
 8000fd8:	4602      	mov	r2, r0
 8000fda:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	77fb      	strb	r3, [r7, #31]
 8000fe0:	e001      	b.n	8000fe6 <updateFilterSection+0x2a2>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000fe6:	7f7b      	ldrb	r3, [r7, #29]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	777b      	strb	r3, [r7, #29]
 8000fec:	7f7b      	ldrb	r3, [r7, #29]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	f67f af3f 	bls.w	8000e72 <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	701a      	strb	r2, [r3, #0]

	return status;
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8

  // Initialize the temperature sensor
  LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 800100e:	2220      	movs	r2, #32
 8001010:	491f      	ldr	r1, [pc, #124]	; (8001090 <setupIOs+0x88>)
 8001012:	4820      	ldr	r0, [pc, #128]	; (8001094 <setupIOs+0x8c>)
 8001014:	f001 fe2a 	bl	8002c6c <LM75B_Init>

  // Initialize and Setup the E-Paper Display
  EPD_Init(EPD_2_0, &hspi2, &epd1);
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <setupIOs+0x90>)
 800101a:	4920      	ldr	r1, [pc, #128]	; (800109c <setupIOs+0x94>)
 800101c:	2002      	movs	r0, #2
 800101e:	f000 f879 	bl	8001114 <EPD_Init>

  // Initialize the GFX Library for the EPD
  Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <setupIOs+0x90>)
 8001024:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <setupIOs+0x90>)
 8001028:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800102a:	461a      	mov	r2, r3
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <setupIOs+0x98>)
 800102e:	f001 fa2f 	bl	8002490 <Canvas_Init>
  // Text rotation for a vertical display orientation
  canvas_SetRotate(&canvas1, ROTATE_90);
 8001032:	2101      	movs	r1, #1
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <setupIOs+0x98>)
 8001036:	f001 fc01 	bl	800283c <canvas_SetRotate>

  // Clear the EPD
  EPD_begin(&epd1);
 800103a:	4817      	ldr	r0, [pc, #92]	; (8001098 <setupIOs+0x90>)
 800103c:	f000 f99e 	bl	800137c <EPD_begin>
  EPD_clear(&epd1);
 8001040:	4815      	ldr	r0, [pc, #84]	; (8001098 <setupIOs+0x90>)
 8001042:	f000 fd27 	bl	8001a94 <EPD_clear>
  EPD_end(&epd1);
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <setupIOs+0x90>)
 8001048:	f000 fc08 	bl	800185c <EPD_end>

  // Render a string of text to the buffer image
  canvas_setBGImage(&canvas1, image_background);
 800104c:	4915      	ldr	r1, [pc, #84]	; (80010a4 <setupIOs+0x9c>)
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <setupIOs+0x98>)
 8001050:	f001 fddd 	bl	8002c0e <canvas_setBGImage>
  canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <setupIOs+0xa0>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <setupIOs+0xa4>)
 800105e:	2203      	movs	r2, #3
 8001060:	210a      	movs	r1, #10
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <setupIOs+0x98>)
 8001064:	f001 fd8d 	bl	8002b82 <canvas_DrawStringAt>
  // Update the EPD with the new image
  canvas_PrintEPD(&canvas1, &epd1);
 8001068:	490b      	ldr	r1, [pc, #44]	; (8001098 <setupIOs+0x90>)
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <setupIOs+0x98>)
 800106c:	f001 fdba 	bl	8002be4 <canvas_PrintEPD>
//  dataLoggerInit();
//
//  rtcModuleInit(&hrtc);


  HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2108      	movs	r1, #8
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <setupIOs+0xa8>)
 8001076:	f003 fc85 	bl	8004984 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800107a:	2005      	movs	r0, #5
 800107c:	f003 f992 	bl	80043a4 <HAL_Delay>
  spiInit(&hspi1);
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <setupIOs+0xac>)
 8001082:	f002 fbfd 	bl	8003880 <spiInit>

  rfidControllerInit();
 8001086:	f002 fb17 	bl	80036b8 <rfidControllerInit>
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020400 	.word	0x40020400
 8001094:	20000d74 	.word	0x20000d74
 8001098:	20000c74 	.word	0x20000c74
 800109c:	20000d1c 	.word	0x20000d1c
 80010a0:	20000d00 	.word	0x20000d00
 80010a4:	0800ff8c 	.word	0x0800ff8c
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	0800fee0 	.word	0x0800fee0
 80010b0:	40020000 	.word	0x40020000
 80010b4:	20000e6c 	.word	0x20000e6c

080010b8 <processIOs>:


void processIOs(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

	while (1) {
		// Check on the CLI to see if any new commands are present
//		checkCliStatus();

		checkFilterTags(&dTags);
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <processIOs+0x4c>)
 80010c0:	f002 fb12 	bl	80036e8 <checkFilterTags>

		filterStatus = updateFilterSection(&dTags, &fSection);
 80010c4:	4910      	ldr	r1, [pc, #64]	; (8001108 <processIOs+0x50>)
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <processIOs+0x4c>)
 80010c8:	f7ff fe3c 	bl	8000d44 <updateFilterSection>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]

		switch (filterStatus) {
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d810      	bhi.n	80010f8 <processIOs+0x40>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <processIOs+0x24>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010f9 	.word	0x080010f9
 80010e0:	080010ed 	.word	0x080010ed
 80010e4:	080010ed 	.word	0x080010ed
 80010e8:	080010f9 	.word	0x080010f9
				break;

			case FILTER_REMOVED:
			case FILTER_INSTALLED:
				// Update the EPD with the new filter line up.
				canvas_DrawFilters(&canvas1, &epd1, &fSection);
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <processIOs+0x50>)
 80010ee:	4907      	ldr	r1, [pc, #28]	; (800110c <processIOs+0x54>)
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <processIOs+0x58>)
 80010f2:	f001 fa11 	bl	8002518 <canvas_DrawFilters>
				// Log to the SD Card

				break;
 80010f6:	bf00      	nop

				break;
		}
		// TODO -  Go to sleep here

		HAL_Delay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f003 f952 	bl	80043a4 <HAL_Delay>
		checkFilterTags(&dTags);
 8001100:	e7dd      	b.n	80010be <processIOs+0x6>
 8001102:	bf00      	nop
 8001104:	20000c3c 	.word	0x20000c3c
 8001108:	20000cc4 	.word	0x20000cc4
 800110c:	20000c74 	.word	0x20000c74
 8001110:	20000d00 	.word	0x20000d00

08001114 <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001122:	f7ff fdcf 	bl	8000cc4 <DWT_Init>

	epd->status = EPD_OK;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2204      	movs	r2, #4
 800114e:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a81      	ldr	r2, [pc, #516]	; (8001360 <EPD_Init+0x24c>)
 800115a:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a81      	ldr	r2, [pc, #516]	; (8001364 <EPD_Init+0x250>)
 8001160:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a7f      	ldr	r2, [pc, #508]	; (8001364 <EPD_Init+0x250>)
 8001166:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a7e      	ldr	r2, [pc, #504]	; (8001364 <EPD_Init+0x250>)
 800116c:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a7b      	ldr	r2, [pc, #492]	; (8001360 <EPD_Init+0x24c>)
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800117a:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3b01      	subs	r3, #1
 8001180:	2b03      	cmp	r3, #3
 8001182:	d80b      	bhi.n	800119c <EPD_Init+0x88>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <EPD_Init+0x78>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011db 	.word	0x080011db
 8001190:	08001219 	.word	0x08001219
 8001194:	08001257 	.word	0x08001257
 8001198:	0800129d 	.word	0x0800129d
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2260      	movs	r2, #96	; 0x60
 80011a0:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2210      	movs	r2, #16
 80011ac:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2218      	movs	r2, #24
 80011b2:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a6c      	ldr	r2, [pc, #432]	; (8001368 <EPD_Init+0x254>)
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2209      	movs	r2, #9
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 80011d8:	e080      	b.n	80012dc <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2290      	movs	r2, #144	; 0x90
 80011e4:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2212      	movs	r2, #18
 80011ea:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2210      	movs	r2, #16
 80011f8:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a5b      	ldr	r2, [pc, #364]	; (800136c <EPD_Init+0x258>)
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2209      	movs	r2, #9
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001216:	e061      	b.n	80012dc <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2260      	movs	r2, #96	; 0x60
 800121c:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	22c8      	movs	r2, #200	; 0xc8
 8001222:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2219      	movs	r2, #25
 8001228:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2218      	movs	r2, #24
 800122e:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <EPD_Init+0x25c>)
 8001234:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2209      	movs	r2, #9
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001254:	e042      	b.n	80012dc <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f240 2276 	movw	r2, #630	; 0x276
 800125c:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	22e8      	movs	r2, #232	; 0xe8
 8001268:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	221d      	movs	r2, #29
 800126e:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2210      	movs	r2, #16
 800127c:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <EPD_Init+0x260>)
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2209      	movs	r2, #9
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2202      	movs	r2, #2
 8001296:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 800129a:	e01f      	b.n	80012dc <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f240 2276 	movw	r2, #630	; 0x276
 80012a2:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22b0      	movs	r2, #176	; 0xb0
 80012a8:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f44f 7284 	mov.w	r2, #264	; 0x108
 80012b0:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2221      	movs	r2, #33	; 0x21
 80012b6:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	222c      	movs	r2, #44	; 0x2c
 80012bc:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <EPD_Init+0x264>)
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2209      	movs	r2, #9
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 80012da:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 80012e4:	2119      	movs	r1, #25
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fbaa 	bl	8001a40 <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00a      	beq.n	800130c <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012fa:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001300:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001302:	3303      	adds	r3, #3
 8001304:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	649a      	str	r2, [r3, #72]	; 0x48
 800130a:	e00a      	b.n	8001322 <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001310:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 800131a:	3303      	adds	r3, #3
 800131c:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	4618      	mov	r0, r3
 800132c:	f00e fce0 	bl	800fcf0 <malloc>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	f00e fcfe 	bl	800fd44 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fb4d 	bl	80019e8 <power_off>

	// COG state for partial update
	epd->COG_on = false;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020800 	.word	0x40020800
 8001364:	40020000 	.word	0x40020000
 8001368:	20000000 	.word	0x20000000
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000018 	.word	0x20000018
 8001374:	20000024 	.word	0x20000024
 8001378:	20000030 	.word	0x20000030

0800137c <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b0a8      	sub	sp, #160	; 0xa0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 823f 	bne.w	800180e <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <EPD_begin+0x1d4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 8001398:	f107 030f 	add.w	r3, r7, #15
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fca9 	bl	8002cf4 <LM75B_ReadTemp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d106      	bne.n	80013b6 <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fb46 	bl	8001a40 <EPD_set_temperature>
 80013b4:	e003      	b.n	80013be <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 80013b6:	2119      	movs	r1, #25
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fb41 	bl	8001a40 <EPD_set_temperature>
		}
		setTemp = false;
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <EPD_begin+0x1d4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6958      	ldr	r0, [r3, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8a1b      	ldrh	r3, [r3, #16]
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	f003 fad5 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6858      	ldr	r0, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	885b      	ldrh	r3, [r3, #2]
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	f003 facd 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68d8      	ldr	r0, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	891b      	ldrh	r3, [r3, #8]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	f003 fac5 	bl	8004984 <HAL_GPIO_WritePin>

	Delay_ms(5);
 80013fa:	2005      	movs	r0, #5
 80013fc:	f002 ffd2 	bl	80043a4 <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8c1b      	ldrh	r3, [r3, #32]
 8001408:	2201      	movs	r2, #1
 800140a:	4619      	mov	r1, r3
 800140c:	f003 faba 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6858      	ldr	r0, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	885b      	ldrh	r3, [r3, #2]
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	f003 fab2 	bl	8004984 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f002 ffbf 	bl	80043a4 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6958      	ldr	r0, [r3, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	8a1b      	ldrh	r3, [r3, #16]
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f003 faa7 	bl	8004984 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f002 ffb4 	bl	80043a4 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6958      	ldr	r0, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	8a1b      	ldrh	r3, [r3, #16]
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	f003 fa9c 	bl	8004984 <HAL_GPIO_WritePin>
	Delay_ms(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f002 ffa9 	bl	80043a4 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6958      	ldr	r0, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	8a1b      	ldrh	r3, [r3, #16]
 800145a:	2201      	movs	r2, #1
 800145c:	4619      	mov	r1, r3
 800145e:	f003 fa91 	bl	8004984 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001462:	2005      	movs	r0, #5
 8001464:	f002 ff9e 	bl	80043a4 <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001468:	e002      	b.n	8001470 <EPD_begin+0xf4>
		Delay_us(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff fc44 	bl	8000cf8 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69da      	ldr	r2, [r3, #28]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8b1b      	ldrh	r3, [r3, #24]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f003 fa6a 	bl	8004954 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d0f1      	beq.n	800146a <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001486:	2371      	movs	r3, #113	; 0x71
 8001488:	743b      	strb	r3, [r7, #16]
 800148a:	2300      	movs	r3, #0
 800148c:	747b      	strb	r3, [r7, #17]
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	f107 0110 	add.w	r1, r7, #16
 8001496:	2302      	movs	r3, #2
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 ffcf 	bl	800243c <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 800149e:	2371      	movs	r3, #113	; 0x71
 80014a0:	753b      	strb	r3, [r7, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	757b      	strb	r3, [r7, #21]
 80014a6:	f107 020c 	add.w	r2, r7, #12
 80014aa:	f107 0114 	add.w	r1, r7, #20
 80014ae:	2302      	movs	r3, #2
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 ffc3 	bl	800243c <SPI_read>
	int cog_id = receive_buffer[1];
 80014b6:	7b7b      	ldrb	r3, [r7, #13]
 80014b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 80014bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d006      	beq.n	80014d6 <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fa8a 	bl	80019e8 <power_off>
		return;
 80014d4:	e19c      	b.n	8001810 <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <EPD_begin+0x1d8>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	833b      	strh	r3, [r7, #24]
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2202      	movs	r2, #2
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 ff83 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <EPD_begin+0x1dc>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	83bb      	strh	r3, [r7, #28]
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2202      	movs	r2, #2
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 ff79 	bl	80023f0 <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <EPD_begin+0x1e0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	843b      	strh	r3, [r7, #32]
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	2202      	movs	r2, #2
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 ff6f 	bl	80023f0 <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8001512:	2373      	movs	r3, #115	; 0x73
 8001514:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001526:	2302      	movs	r3, #2
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 ff87 	bl	800243c <SPI_read>
	int broken_panel = receive_buffer[1];
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10f      	bne.n	8001560 <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fa4e 	bl	80019e8 <power_off>
		return;
 800154c:	e160      	b.n	8001810 <EPD_begin+0x494>
 800154e:	bf00      	nop
 8001550:	20000254 	.word	0x20000254
 8001554:	0800fee8 	.word	0x0800fee8
 8001558:	0800feec 	.word	0x0800feec
 800155c:	0800fef0 	.word	0x0800fef0
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8001560:	4bad      	ldr	r3, [pc, #692]	; (8001818 <EPD_begin+0x49c>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	853b      	strh	r3, [r7, #40]	; 0x28
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2202      	movs	r2, #2
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 ff3e 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8001574:	4ba9      	ldr	r3, [pc, #676]	; (800181c <EPD_begin+0x4a0>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	2202      	movs	r2, #2
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 ff34 	bl	80023f0 <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 8001588:	4ba5      	ldr	r3, [pc, #660]	; (8001820 <EPD_begin+0x4a4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	863b      	strh	r3, [r7, #48]	; 0x30
 800158e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001592:	2202      	movs	r2, #2
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 ff2a 	bl	80023f0 <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 ff21 	bl	80023f0 <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 80015ae:	4b9d      	ldr	r3, [pc, #628]	; (8001824 <EPD_begin+0x4a8>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80015b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b8:	2202      	movs	r2, #2
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 ff17 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 80015c2:	4b99      	ldr	r3, [pc, #612]	; (8001828 <EPD_begin+0x4ac>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80015c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015cc:	2202      	movs	r2, #2
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 ff0d 	bl	80023f0 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 80015d6:	4b95      	ldr	r3, [pc, #596]	; (800182c <EPD_begin+0x4b0>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80015dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e0:	2202      	movs	r2, #2
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 ff03 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 80015ea:	4b8c      	ldr	r3, [pc, #560]	; (800181c <EPD_begin+0x4a0>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80015f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f6:	2202      	movs	r2, #2
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fef8 	bl	80023f0 <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 8001600:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <EPD_begin+0x4b4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001608:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800160c:	2202      	movs	r2, #2
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 feed 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 8001616:	4b87      	ldr	r3, [pc, #540]	; (8001834 <EPD_begin+0x4b8>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800161e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001622:	2202      	movs	r2, #2
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fee2 	bl	80023f0 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 800162c:	4b82      	ldr	r3, [pc, #520]	; (8001838 <EPD_begin+0x4bc>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001634:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001638:	2202      	movs	r2, #2
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fed7 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8001642:	4b7e      	ldr	r3, [pc, #504]	; (800183c <EPD_begin+0x4c0>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800164a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164e:	2202      	movs	r2, #2
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fecc 	bl	80023f0 <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <EPD_begin+0x4c4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001664:	2202      	movs	r2, #2
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fec1 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <EPD_begin+0x4c8>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800167a:	2202      	movs	r2, #2
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 feb6 	bl	80023f0 <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <EPD_begin+0x4c4>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800168c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001690:	2202      	movs	r2, #2
 8001692:	4619      	mov	r1, r3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 feab 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 800169a:	2372      	movs	r3, #114	; 0x72
 800169c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80016a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016aa:	2202      	movs	r2, #2
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fe9e 	bl	80023f0 <SPI_send>

	Delay_ms(5);
 80016b4:	2005      	movs	r0, #5
 80016b6:	f002 fe75 	bl	80043a4 <HAL_Delay>

	bool dc_ok = false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016c6:	e075      	b.n	80017b4 <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80016c8:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <EPD_begin+0x4cc>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80016d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d4:	2202      	movs	r2, #2
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fe89 	bl	80023f0 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 80016de:	4b59      	ldr	r3, [pc, #356]	; (8001844 <EPD_begin+0x4c8>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80016e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ea:	2202      	movs	r2, #2
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fe7e 	bl	80023f0 <SPI_send>

		Delay_ms(240);
 80016f4:	20f0      	movs	r0, #240	; 0xf0
 80016f6:	f002 fe55 	bl	80043a4 <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <EPD_begin+0x4cc>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001702:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001706:	2202      	movs	r2, #2
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fe70 	bl	80023f0 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <EPD_begin+0x4c0>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001718:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800171c:	2202      	movs	r2, #2
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fe65 	bl	80023f0 <SPI_send>

		Delay_ms(40);
 8001726:	2028      	movs	r0, #40	; 0x28
 8001728:	f002 fe3c 	bl	80043a4 <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <EPD_begin+0x4cc>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001734:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001738:	2202      	movs	r2, #2
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fe57 	bl	80023f0 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <EPD_begin+0x4d0>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800174a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800174e:	2202      	movs	r2, #2
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fe4c 	bl	80023f0 <SPI_send>

		Delay_ms(40);
 8001758:	2028      	movs	r0, #40	; 0x28
 800175a:	f002 fe23 	bl	80043a4 <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <EPD_begin+0x4d4>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001766:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800176a:	2202      	movs	r2, #2
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fe3e 	bl	80023f0 <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8001774:	2373      	movs	r3, #115	; 0x73
 8001776:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001788:	2302      	movs	r3, #2
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fe56 	bl	800243c <SPI_read>
		int dc_state = receive_buffer[1];
 8001790:	7b7b      	ldrb	r3, [r7, #13]
 8001792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 8001796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <EPD_begin+0x42e>
			dc_ok = true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 80017a8:	e008      	b.n	80017bc <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 80017aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017ae:	3301      	adds	r3, #1
 80017b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	dd85      	ble.n	80016c8 <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 80017bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f909 	bl	80019e8 <power_off>
		return;
 80017d6:	e01b      	b.n	8001810 <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <EPD_begin+0x4d8>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80017e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017e4:	2202      	movs	r2, #2
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fe01 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <EPD_begin+0x4dc>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80017f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017fa:	2202      	movs	r2, #2
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fdf6 	bl	80023f0 <SPI_send>

	epd->COG_on = true;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800180c:	e000      	b.n	8001810 <EPD_begin+0x494>
		return;
 800180e:	bf00      	nop
}
 8001810:	37a0      	adds	r7, #160	; 0xa0
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	0800fef4 	.word	0x0800fef4
 800181c:	0800fef8 	.word	0x0800fef8
 8001820:	0800fefc 	.word	0x0800fefc
 8001824:	0800ff00 	.word	0x0800ff00
 8001828:	0800ff04 	.word	0x0800ff04
 800182c:	0800ff08 	.word	0x0800ff08
 8001830:	0800ff0c 	.word	0x0800ff0c
 8001834:	0800ff10 	.word	0x0800ff10
 8001838:	0800ff14 	.word	0x0800ff14
 800183c:	0800ff18 	.word	0x0800ff18
 8001840:	0800ff1c 	.word	0x0800ff1c
 8001844:	0800ff20 	.word	0x0800ff20
 8001848:	0800ff24 	.word	0x0800ff24
 800184c:	0800ff28 	.word	0x0800ff28
 8001850:	0800fef0 	.word	0x0800fef0
 8001854:	0800fee8 	.word	0x0800fee8
 8001858:	0800ff2c 	.word	0x0800ff2c

0800185c <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	; 0x40
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fa48 	bl	8001cfa <nothing_frame>

	if (EPD_2_7 == epd->size) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	2b04      	cmp	r3, #4
 8001870:	d103      	bne.n	800187a <EPD_end+0x1e>
		dummy_line(epd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fa60 	bl	8001d38 <dummy_line>
 8001878:	e005      	b.n	8001886 <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fa6f 	bl	8001d5e <border_dummy_line>
		Delay_ms(200);
 8001880:	20c8      	movs	r0, #200	; 0xc8
 8001882:	f002 fd8f 	bl	80043a4 <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <EPD_end+0x16c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	813b      	strh	r3, [r7, #8]
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2202      	movs	r2, #2
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fdab 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 800189a:	2372      	movs	r3, #114	; 0x72
 800189c:	733b      	strb	r3, [r7, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	737b      	strb	r3, [r7, #13]
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	2202      	movs	r2, #2
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fda0 	bl	80023f0 <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <EPD_end+0x170>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	823b      	strh	r3, [r7, #16]
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	2202      	movs	r2, #2
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fd96 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <EPD_end+0x174>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	82bb      	strh	r3, [r7, #20]
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2202      	movs	r2, #2
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fd8c 	bl	80023f0 <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <EPD_end+0x178>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	833b      	strh	r3, [r7, #24]
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2202      	movs	r2, #2
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fd82 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <EPD_end+0x17c>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	83bb      	strh	r3, [r7, #28]
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	2202      	movs	r2, #2
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fd78 	bl	80023f0 <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <EPD_end+0x178>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	843b      	strh	r3, [r7, #32]
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2202      	movs	r2, #2
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fd6e 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <EPD_end+0x174>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	84bb      	strh	r3, [r7, #36]	; 0x24
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	2202      	movs	r2, #2
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fd64 	bl	80023f0 <SPI_send>

	Delay_ms(120);
 8001928:	2078      	movs	r0, #120	; 0x78
 800192a:	f002 fd3b 	bl	80043a4 <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <EPD_end+0x180>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	853b      	strh	r3, [r7, #40]	; 0x28
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	2202      	movs	r2, #2
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fd57 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <EPD_end+0x184>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	2202      	movs	r2, #2
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fd4d 	bl	80023f0 <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <EPD_end+0x178>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	863b      	strh	r3, [r7, #48]	; 0x30
 800195c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001960:	2202      	movs	r2, #2
 8001962:	4619      	mov	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fd43 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 800196a:	2372      	movs	r3, #114	; 0x72
 800196c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001976:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800197a:	2202      	movs	r2, #2
 800197c:	4619      	mov	r1, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fd36 	bl	80023f0 <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <EPD_end+0x188>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	873b      	strh	r3, [r7, #56]	; 0x38
 800198a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800198e:	2202      	movs	r2, #2
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fd2c 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <EPD_end+0x174>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800199e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019a2:	2202      	movs	r2, #2
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fd22 	bl	80023f0 <SPI_send>

	Delay_ms(50);
 80019ac:	2032      	movs	r0, #50	; 0x32
 80019ae:	f002 fcf9 	bl	80043a4 <HAL_Delay>

	power_off(epd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f818 	bl	80019e8 <power_off>

	epd->COG_on = false;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80019c0:	bf00      	nop
 80019c2:	3740      	adds	r7, #64	; 0x40
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0800fef4 	.word	0x0800fef4
 80019cc:	0800ff1c 	.word	0x0800ff1c
 80019d0:	0800ff20 	.word	0x0800ff20
 80019d4:	0800ff24 	.word	0x0800ff24
 80019d8:	0800ff18 	.word	0x0800ff18
 80019dc:	0800ff14 	.word	0x0800ff14
 80019e0:	0800ff30 	.word	0x0800ff30
 80019e4:	0800ff00 	.word	0x0800ff00

080019e8 <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6958      	ldr	r0, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	8a1b      	ldrh	r3, [r3, #16]
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	f002 ffc2 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6858      	ldr	r0, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f002 ffba 	bl	8004984 <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68d8      	ldr	r0, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	891b      	ldrh	r3, [r3, #8]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f002 ffb2 	bl	8004984 <HAL_GPIO_WritePin>
	Delay_ms(150);
 8001a20:	2096      	movs	r0, #150	; 0x96
 8001a22:	f002 fcbf 	bl	80043a4 <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68d8      	ldr	r0, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	891b      	ldrh	r3, [r3, #8]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	f002 ffa7 	bl	8004984 <HAL_GPIO_WritePin>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a4e:	461c      	mov	r4, r3
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f000 f86a 	bl	8001b2a <temperature_to_factor_10x>
 8001a56:	4603      	mov	r3, r0
 8001a58:	fb03 f304 	mul.w	r3, r3, r4
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <EPD_set_temperature+0x38>)
 8001a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a62:	1092      	asrs	r2, r2, #2
 8001a64:	17db      	asrs	r3, r3, #31
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	66666667 	.word	0x66666667

08001a7c <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
	setTemp = true;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <EPD_set_enable_temperature+0x14>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000254 	.word	0x20000254

08001a94 <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	21ff      	movs	r1, #255	; 0xff
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8e5 	bl	8001c70 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	21ff      	movs	r1, #255	; 0xff
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8e0 	bl	8001c70 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	21aa      	movs	r1, #170	; 0xaa
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8db 	bl	8001c70 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 8001aba:	2203      	movs	r2, #3
 8001abc:	21aa      	movs	r1, #170	; 0xaa
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8d6 	bl	8001c70 <frame_fixed_repeat>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	21aa      	movs	r1, #170	; 0xaa
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8c8 	bl	8001c70 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	21aa      	movs	r1, #170	; 0xaa
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f8c3 	bl	8001c70 <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 8001aea:	2302      	movs	r3, #2
 8001aec:	2200      	movs	r2, #0
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8e0 	bl	8001cb6 <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 8001af6:	2303      	movs	r3, #3
 8001af8:	2200      	movs	r2, #0
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8da 	bl	8001cb6 <frame_data_repeat>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 8001b16:	2303      	movs	r3, #3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f8ca 	bl	8001cb6 <frame_data_repeat>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f113 0f09 	cmn.w	r3, #9
 8001b38:	da01      	bge.n	8001b3e <temperature_to_factor_10x+0x14>
		return 170;
 8001b3a:	23aa      	movs	r3, #170	; 0xaa
 8001b3c:	e01f      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f113 0f04 	cmn.w	r3, #4
 8001b44:	da01      	bge.n	8001b4a <temperature_to_factor_10x+0x20>
		return 120;
 8001b46:	2378      	movs	r3, #120	; 0x78
 8001b48:	e019      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	dc01      	bgt.n	8001b54 <temperature_to_factor_10x+0x2a>
		return 80;
 8001b50:	2350      	movs	r3, #80	; 0x50
 8001b52:	e014      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	dc01      	bgt.n	8001b5e <temperature_to_factor_10x+0x34>
		return 40;
 8001b5a:	2328      	movs	r3, #40	; 0x28
 8001b5c:	e00f      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	dc01      	bgt.n	8001b68 <temperature_to_factor_10x+0x3e>
		return 30;
 8001b64:	231e      	movs	r3, #30
 8001b66:	e00a      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b14      	cmp	r3, #20
 8001b6c:	dc01      	bgt.n	8001b72 <temperature_to_factor_10x+0x48>
		return 20;
 8001b6e:	2314      	movs	r3, #20
 8001b70:	e005      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b28      	cmp	r3, #40	; 0x28
 8001b76:	dc01      	bgt.n	8001b7c <temperature_to_factor_10x+0x52>
		return 10;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	e000      	b.n	8001b7e <temperature_to_factor_10x+0x54>
	}
	return 7;
 8001b7c:	2307      	movs	r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af02      	add	r7, sp, #8
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
 8001b96:	4613      	mov	r3, r2
 8001b98:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e00e      	b.n	8001bbe <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	78bb      	ldrb	r3, [r7, #2]
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fb06 	bl	80021c4 <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3ea      	bcc.n	8001ba0 <frame_fixed+0x16>
	}
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11e      	bne.n	8001c24 <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	e014      	b.n	8001c16 <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	441a      	add	r2, r3
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fada 	bl	80021c4 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	3301      	adds	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3e4      	bcc.n	8001bec <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 8001c22:	e021      	b.n	8001c68 <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	75bb      	strb	r3, [r7, #22]
 8001c28:	e018      	b.n	8001c5c <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 8001c2a:	7dbb      	ldrb	r3, [r7, #22]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 8001c36:	7dbb      	ldrb	r3, [r7, #22]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	18d0      	adds	r0, r2, r3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4413      	add	r3, r2
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	9201      	str	r2, [sp, #4]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fab7 	bl	80021c4 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8001c56:	7dbb      	ldrb	r3, [r7, #22]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	75bb      	strb	r3, [r7, #22]
 8001c5c:	7dbb      	ldrb	r3, [r7, #22]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3e0      	bcc.n	8001c2a <frame_data+0x58>
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 8001c84:	f002 fb82 	bl	800438c <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 8001c8a:	78ba      	ldrb	r2, [r7, #2]
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff7a 	bl	8001b8a <frame_fixed>
		iters++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8001c9c:	f002 fb76 	bl	800438c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d3ed      	bcc.n	8001c8a <frame_fixed_repeat+0x1a>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 8001cc8:	f002 fb60 	bl	800438c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ff7c 	bl	8001bd2 <frame_data>
		iters++;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8001ce0:	f002 fb54 	bl	800438c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d3ed      	bcc.n	8001cce <frame_data_repeat+0x18>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e00d      	b.n	8001d24 <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2300      	movs	r3, #0
 8001d12:	2200      	movs	r2, #0
 8001d14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fa53 	bl	80021c4 <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	dbeb      	blt.n	8001d08 <nothing_frame+0xe>
	}
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa37 	bl	80021c4 <one_line>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af02      	add	r7, sp, #8
 8001d64:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 8001d66:	2303      	movs	r3, #3
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa24 	bl	80021c4 <one_line>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	82fb      	strh	r3, [r7, #22]
 8001d96:	e098      	b.n	8001eca <even_pixels+0x146>
		if (NULL != data) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 808b 	beq.w	8001eb6 <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8001dac:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8001dae:	23ff      	movs	r3, #255	; 0xff
 8001db0:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00f      	beq.n	8001dd8 <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 8001db8:	8afb      	ldrh	r3, [r7, #22]
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	7d7b      	ldrb	r3, [r7, #21]
 8001dc2:	4053      	eors	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8001dca:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 8001dcc:	7d3b      	ldrb	r3, [r7, #20]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	7d3b      	ldrb	r3, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8001dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d82e      	bhi.n	8001e3e <even_pixels+0xba>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <even_pixels+0x64>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e0d 	.word	0x08001e0d
 8001df0:	08001e1f 	.word	0x08001e1f
 8001df4:	08001e31 	.word	0x08001e31
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 8001df8:	7d7b      	ldrb	r3, [r7, #21]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f063 0355 	orn	r3, r3, #85	; 0x55
 8001e08:	757b      	strb	r3, [r7, #21]
				break;
 8001e0a:	e018      	b.n	8001e3e <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 8001e0c:	7d7b      	ldrb	r3, [r7, #21]
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3355      	adds	r3, #85	; 0x55
 8001e1a:	757b      	strb	r3, [r7, #21]
				break;
 8001e1c:	e00f      	b.n	8001e3e <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 8001e1e:	7d7b      	ldrb	r3, [r7, #21]
 8001e20:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001e24:	43db      	mvns	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001e2c:	757b      	strb	r3, [r7, #21]
				break;
 8001e2e:	e006      	b.n	8001e3e <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 8001e30:	7d7b      	ldrb	r3, [r7, #21]
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f063 0355 	orn	r3, r3, #85	; 0x55
 8001e3a:	757b      	strb	r3, [r7, #21]
				break;
 8001e3c:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8001e3e:	7d7a      	ldrb	r2, [r7, #21]
 8001e40:	7d3b      	ldrb	r3, [r7, #20]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 8001e5c:	7d7b      	ldrb	r3, [r7, #21]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 8001e62:	7d7b      	ldrb	r3, [r7, #21]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 8001e6e:	7d7b      	ldrb	r3, [r7, #21]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 8001e7a:	7d7b      	ldrb	r3, [r7, #21]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 8001e82:	7cbb      	ldrb	r3, [r7, #18]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	b25a      	sxtb	r2, r3
 8001e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	7c7b      	ldrb	r3, [r7, #17]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	7c3b      	ldrb	r3, [r7, #16]
 8001e9c:	019b      	lsls	r3, r3, #6
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	1c59      	adds	r1, r3, #1
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	6011      	str	r1, [r2, #0]
 8001eb0:	7d7a      	ldrb	r2, [r7, #21]
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e006      	b.n	8001ec4 <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	6011      	str	r1, [r2, #0]
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 8001ec4:	8afb      	ldrh	r3, [r7, #22]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	82fb      	strh	r3, [r7, #22]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001ece:	8afa      	ldrh	r2, [r7, #22]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f4ff af61 	bcc.w	8001d98 <even_pixels+0x14>
		}
	}
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop

08001ee4 <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001ef6:	82fb      	strh	r3, [r7, #22]
 8001ef8:	e072      	b.n	8001fe0 <odd_pixels+0xfc>
		if (NULL != data) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d065      	beq.n	8001fcc <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001f0e:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8001f10:	23ff      	movs	r3, #255	; 0xff
 8001f12:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 8001f1a:	8afb      	ldrh	r3, [r7, #22]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	6a3a      	ldr	r2, [r7, #32]
 8001f20:	4413      	add	r3, r2
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	7d7b      	ldrb	r3, [r7, #21]
 8001f26:	4053      	eors	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001f2e:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 8001f30:	7d3b      	ldrb	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b25a      	sxtb	r2, r3
 8001f36:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8001f40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d82a      	bhi.n	8001f9e <odd_pixels+0xba>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <odd_pixels+0x6c>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f71 	.word	0x08001f71
 8001f58:	08001f7f 	.word	0x08001f7f
 8001f5c:	08001f95 	.word	0x08001f95
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 8001f60:	7d7b      	ldrb	r3, [r7, #21]
 8001f62:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f063 0355 	orn	r3, r3, #85	; 0x55
 8001f6c:	757b      	strb	r3, [r7, #21]
				break;
 8001f6e:	e016      	b.n	8001f9e <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 8001f70:	7d7b      	ldrb	r3, [r7, #21]
 8001f72:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3355      	adds	r3, #85	; 0x55
 8001f7a:	757b      	strb	r3, [r7, #21]
				break;
 8001f7c:	e00f      	b.n	8001f9e <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 8001f7e:	7d7b      	ldrb	r3, [r7, #21]
 8001f80:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	757b      	strb	r3, [r7, #21]
				break;
 8001f92:	e004      	b.n	8001f9e <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 8001f94:	7d7b      	ldrb	r3, [r7, #21]
 8001f96:	f063 0355 	orn	r3, r3, #85	; 0x55
 8001f9a:	757b      	strb	r3, [r7, #21]
				break;
 8001f9c:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8001f9e:	7d7a      	ldrb	r2, [r7, #21]
 8001fa0:	7d3b      	ldrb	r3, [r7, #20]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b25b      	sxtb	r3, r3
 8001fba:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1c59      	adds	r1, r3, #1
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	7d7a      	ldrb	r2, [r7, #21]
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e006      	b.n	8001fda <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	82fb      	strh	r3, [r7, #22]
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d189      	bne.n	8001efa <odd_pixels+0x16>
		}
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	b21a      	sxth	r2, r3
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	4313      	orrs	r3, r2
 800200a:	b21b      	sxth	r3, r3
 800200c:	b29a      	uxth	r2, r3
 800200e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002012:	4013      	ands	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	b21a      	sxth	r2, r3
 800201c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	b29a      	uxth	r2, r3
 8002026:	f243 3333 	movw	r3, #13107	; 0x3333
 800202a:	4013      	ands	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b21a      	sxth	r2, r3
 8002034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002038:	4313      	orrs	r3, r2
 800203a:	b21b      	sxth	r3, r3
 800203c:	b29a      	uxth	r2, r3
 800203e:	f245 5355 	movw	r3, #21845	; 0x5555
 8002042:	4013      	ands	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
	return value;
 8002046:	88fb      	ldrh	r3, [r7, #6]
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002066:	82fb      	strh	r3, [r7, #22]
 8002068:	e0a1      	b.n	80021ae <all_pixels+0x15a>
		if (NULL != data) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 808d 	beq.w	800218c <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	3b01      	subs	r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffb8 	bl	8001ff4 <interleave_bits>
 8002084:	4603      	mov	r3, r0
 8002086:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 8002088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208c:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01a      	beq.n	80020ca <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	3b01      	subs	r3, #1
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ffa7 	bl	8001ff4 <interleave_bits>
 80020a6:	4603      	mov	r3, r0
 80020a8:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 80020aa:	8a3a      	ldrh	r2, [r7, #16]
 80020ac:	8abb      	ldrh	r3, [r7, #20]
 80020ae:	4053      	eors	r3, r2
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f245 5355 	movw	r3, #21845	; 0x5555
 80020b6:	4013      	ands	r3, r2
 80020b8:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 80020ba:	8a3b      	ldrh	r3, [r7, #16]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	b21a      	sxth	r2, r3
 80020c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 80020ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d839      	bhi.n	8002146 <all_pixels+0xf2>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <all_pixels+0x84>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020fd 	.word	0x080020fd
 80020e0:	08002113 	.word	0x08002113
 80020e4:	08002131 	.word	0x08002131
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 80020e8:	8abb      	ldrh	r3, [r7, #20]
 80020ea:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 80020ee:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <all_pixels+0x16c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	82bb      	strh	r3, [r7, #20]
				break;
 80020fa:	e024      	b.n	8002146 <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 80020fc:	8abb      	ldrh	r3, [r7, #20]
 80020fe:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002102:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002106:	b29b      	uxth	r3, r3
 8002108:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800210c:	3355      	adds	r3, #85	; 0x55
 800210e:	82bb      	strh	r3, [r7, #20]
				break;
 8002110:	e019      	b.n	8002146 <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002112:	8abb      	ldrh	r3, [r7, #20]
 8002114:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002118:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800211c:	b29b      	uxth	r3, r3
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	b21b      	sxth	r3, r3
 8002122:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002126:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800212a:	b21b      	sxth	r3, r3
 800212c:	82bb      	strh	r3, [r7, #20]
				break;
 800212e:	e00a      	b.n	8002146 <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002130:	8abb      	ldrh	r3, [r7, #20]
 8002132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213a:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800213e:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8002142:	82bb      	strh	r3, [r7, #20]
				break;
 8002144:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 8002146:	8aba      	ldrh	r2, [r7, #20]
 8002148:	8a7b      	ldrh	r3, [r7, #18]
 800214a:	4013      	ands	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	b21a      	sxth	r2, r3
 8002150:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002154:	43db      	mvns	r3, r3
 8002156:	b219      	sxth	r1, r3
 8002158:	f245 5355 	movw	r3, #21845	; 0x5555
 800215c:	400b      	ands	r3, r1
 800215e:	b21b      	sxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b21b      	sxth	r3, r3
 8002164:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 8002166:	8abb      	ldrh	r3, [r7, #20]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	b298      	uxth	r0, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	6011      	str	r1, [r2, #0]
 8002176:	b2c2      	uxtb	r2, r0
 8002178:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	6011      	str	r1, [r2, #0]
 8002184:	8aba      	ldrh	r2, [r7, #20]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e00d      	b.n	80021a8 <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c59      	adds	r1, r3, #1
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	6011      	str	r1, [r2, #0]
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 80021a8:	8afb      	ldrh	r3, [r7, #22]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	82fb      	strh	r3, [r7, #22]
 80021ae:	8afb      	ldrh	r3, [r7, #22]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f af5a 	bne.w	800206a <all_pixels+0x16>
		}
	}
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	ffffaaaa 	.word	0xffffaaaa

080021c4 <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	461a      	mov	r2, r3
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
 80021d4:	4613      	mov	r3, r2
 80021d6:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 80021d8:	4b82      	ldr	r3, [pc, #520]	; (80023e4 <one_line+0x220>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	833b      	strh	r3, [r7, #24]
 80021de:	f107 0318 	add.w	r3, r7, #24
 80021e2:	2202      	movs	r2, #2
 80021e4:	4619      	mov	r1, r3
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f902 	bl	80023f0 <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	617a      	str	r2, [r7, #20]
 80021f8:	2272      	movs	r2, #114	; 0x72
 80021fa:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <one_line+0x4c>
		*p++ = 0x00;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	617a      	str	r2, [r7, #20]
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03e      	beq.n	8002298 <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 800221a:	7a7a      	ldrb	r2, [r7, #9]
 800221c:	f107 0114 	add.w	r1, r7, #20
 8002220:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff fe58 	bl	8001ee4 <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	84fb      	strh	r3, [r7, #38]	; 0x26
 800223a:	e01c      	b.n	8002276 <one_line+0xb2>
			if (line / 4 == b - 1) {
 800223c:	897b      	ldrh	r3, [r7, #10]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002246:	3b01      	subs	r3, #1
 8002248:	429a      	cmp	r2, r3
 800224a:	d10c      	bne.n	8002266 <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f103 	lsl.w	r1, r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	617a      	str	r2, [r7, #20]
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e004      	b.n	8002270 <one_line+0xac>
			} else {
				*p++ = 0x00;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	617a      	str	r2, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002272:	3b01      	subs	r3, #1
 8002274:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1df      	bne.n	800223c <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 800227c:	7a7a      	ldrb	r2, [r7, #9]
 800227e:	f107 0114 	add.w	r1, r7, #20
 8002282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fd77 	bl	8001d84 <even_pixels>
 8002296:	e05b      	b.n	8002350 <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002298:	2300      	movs	r3, #0
 800229a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800229c:	e01e      	b.n	80022dc <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d011      	beq.n	80022cc <one_line+0x108>
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	08db      	lsrs	r3, r3, #3
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10b      	bne.n	80022cc <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	f003 0306 	and.w	r3, r3, #6
 80022ba:	22c0      	movs	r2, #192	; 0xc0
 80022bc:	fa42 f103 	asr.w	r1, r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	617a      	str	r2, [r7, #20]
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e004      	b.n	80022d6 <one_line+0x112>
			} else {
				*p++ = 0x00;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	617a      	str	r2, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 80022d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d8:	3301      	adds	r3, #1
 80022da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3db      	bcc.n	800229e <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 80022e6:	7a7a      	ldrb	r2, [r7, #9]
 80022e8:	f107 0114 	add.w	r1, r7, #20
 80022ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff feaa 	bl	8002054 <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	847b      	strh	r3, [r7, #34]	; 0x22
 8002306:	e020      	b.n	800234a <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d113      	bne.n	800233a <one_line+0x176>
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800231c:	3b01      	subs	r3, #1
 800231e:	429a      	cmp	r2, r3
 8002320:	d10b      	bne.n	800233a <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	f003 0306 	and.w	r3, r3, #6
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f103 	lsl.w	r1, r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	617a      	str	r2, [r7, #20]
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e004      	b.n	8002344 <one_line+0x180>
			} else {
				*p++ = 0x00;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	617a      	str	r2, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002346:	3b01      	subs	r3, #1
 8002348:	847b      	strh	r3, [r7, #34]	; 0x22
 800234a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1db      	bne.n	8002308 <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <one_line+0x19e>
 800235a:	2b02      	cmp	r3, #2
 800235c:	d007      	beq.n	800236e <one_line+0x1aa>
 800235e:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 8002360:	e01b      	b.n	800239a <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	617a      	str	r2, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
		break;
 800236c:	e015      	b.n	800239a <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 800236e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	db10      	blt.n	8002398 <one_line+0x1d4>
 8002376:	2b02      	cmp	r3, #2
 8002378:	dd02      	ble.n	8002380 <one_line+0x1bc>
 800237a:	2b03      	cmp	r3, #3
 800237c:	d006      	beq.n	800238c <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 800237e:	e00b      	b.n	8002398 <one_line+0x1d4>
			*p++ = 0x00;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	617a      	str	r2, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
			break;
 800238a:	e005      	b.n	8002398 <one_line+0x1d4>
			*p++ = 0xaa;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	617a      	str	r2, [r7, #20]
 8002392:	22aa      	movs	r2, #170	; 0xaa
 8002394:	701a      	strb	r2, [r3, #0]
			break;
 8002396:	bf00      	nop
		break;
 8002398:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f81f 	bl	80023f0 <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <one_line+0x224>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	83bb      	strh	r3, [r7, #28]
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2202      	movs	r2, #2
 80023be:	4619      	mov	r1, r3
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f815 	bl	80023f0 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <one_line+0x228>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	843b      	strh	r3, [r7, #32]
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	2202      	movs	r2, #2
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f80b 	bl	80023f0 <SPI_send>

	//Delay_ms(1);
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800ff34 	.word	0x0800ff34
 80023e8:	0800fee8 	.word	0x0800fee8
 80023ec:	0800ff38 	.word	0x0800ff38

080023f0 <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8c1b      	ldrh	r3, [r3, #32]
 8002406:	2200      	movs	r2, #0
 8002408:	4619      	mov	r1, r3
 800240a:	f002 fabb 	bl	8004984 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	f005 fd51 	bl	8007ec0 <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8c1b      	ldrh	r3, [r3, #32]
 8002426:	2201      	movs	r2, #1
 8002428:	4619      	mov	r1, r3
 800242a:	f002 faab 	bl	8004984 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 800242e:	200a      	movs	r0, #10
 8002430:	f7fe fc62 	bl	8000cf8 <DWT_Delay>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8c1b      	ldrh	r3, [r3, #32]
 8002452:	2200      	movs	r2, #0
 8002454:	4619      	mov	r1, r3
 8002456:	f002 fa95 	bl	8004984 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	f005 fe5c 	bl	8008128 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8c1b      	ldrh	r3, [r3, #32]
 8002478:	2201      	movs	r2, #1
 800247a:	4619      	mov	r1, r3
 800247c:	f002 fa82 	bl	8004984 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002480:	200a      	movs	r0, #10
 8002482:	f7fe fc39 	bl	8000cf8 <DWT_Delay>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <Canvas_Init>:
#include "epd_gfx.h"
#include "epd_g2.h"

uint8_t* b_canvas;

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	883a      	ldrh	r2, [r7, #0]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00d fc21 	bl	800fcf0 <malloc>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <Canvas_Init+0x84>)
 80024b4:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <Canvas_Init+0x84>)
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	883a      	ldrh	r2, [r7, #0]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	f00d fc3d 	bl	800fd44 <memset>

	if (b_canvas == NULL){
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <Canvas_Init+0x84>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01a      	b.n	800250c <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <Canvas_Init+0x84>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <Canvas_Init+0x6e>
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	f023 0307 	bic.w	r3, r3, #7
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3308      	adds	r3, #8
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	e000      	b.n	8002500 <Canvas_Init+0x70>
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	883a      	ldrh	r2, [r7, #0]
 8002508:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000d10 	.word	0x20000d10

08002518 <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters){
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 800251e:	af02      	add	r7, sp, #8
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	6018      	str	r0, [r3, #0]
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	6019      	str	r1, [r3, #0]
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	601a      	str	r2, [r3, #0]
// It also keeps track of how many times the screen has been refreshed
	// If it has been refreshed 5+ times, perform a full refresh

// At some point, this will need to know how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 8002530:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002550:	461a      	mov	r2, r3
 8002552:	f00d fbec 	bl	800fd2e <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	49b2      	ldr	r1, [pc, #712]	; (8002824 <canvas_DrawFilters+0x30c>)
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f000 fb56 	bl	8002c0e <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 8002562:	f107 000c 	add.w	r0, r7, #12
 8002566:	2301      	movs	r3, #1
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	4baf      	ldr	r3, [pc, #700]	; (8002828 <canvas_DrawFilters+0x310>)
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	4baf      	ldr	r3, [pc, #700]	; (800282c <canvas_DrawFilters+0x314>)
 8002570:	2203      	movs	r2, #3
 8002572:	210a      	movs	r1, #10
 8002574:	6800      	ldr	r0, [r0, #0]
 8002576:	f000 fb04 	bl	8002b82 <canvas_DrawStringAt>

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8002580:	e123      	b.n	80027ca <canvas_DrawFilters+0x2b2>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8002588:	e115      	b.n	80027b6 <canvas_DrawFilters+0x29e>
			if (currentFilters->filter[filter].position == filterStage){
 800258a:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	440b      	add	r3, r1
 800259e:	3313      	adds	r3, #19
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f040 8100 	bne.w	80027ac <canvas_DrawFilters+0x294>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 80025ac:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 80025b0:	1d39      	adds	r1, r7, #4
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	680a      	ldr	r2, [r1, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	f607 1384 	addw	r3, r7, #2436	; 0x984
 80025c6:	6810      	ldr	r0, [r2, #0]
 80025c8:	6851      	ldr	r1, [r2, #4]
 80025ca:	c303      	stmia	r3!, {r0, r1}
 80025cc:	8912      	ldrh	r2, [r2, #8]
 80025ce:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 80025d6:	e00d      	b.n	80025f4 <canvas_DrawFilters+0xdc>
					if (tmpName[nameLen] == 0x00){
 80025d8:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80025dc:	f607 1298 	addw	r2, r7, #2456	; 0x998
 80025e0:	4413      	add	r3, r2
 80025e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <canvas_DrawFilters+0xe6>
				for (nameLen = 0; nameLen < 10; nameLen++){
 80025ea:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80025ee:	3301      	adds	r3, #1
 80025f0:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 80025f4:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d9ed      	bls.n	80025d8 <canvas_DrawFilters+0xc0>
 80025fc:	e000      	b.n	8002600 <canvas_DrawFilters+0xe8>
						break;
 80025fe:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 8002600:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8002604:	2b05      	cmp	r3, #5
 8002606:	d856      	bhi.n	80026b6 <canvas_DrawFilters+0x19e>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3b0f      	subs	r3, #15
 8002614:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8002618:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 800261c:	4a84      	ldr	r2, [pc, #528]	; (8002830 <canvas_DrawFilters+0x318>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8002628:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 800262c:	3b01      	subs	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 8002634:	fb12 f303 	smulbb	r3, r2, r3
 8002638:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 800263c:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002648:	4413      	add	r3, r2
 800264a:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 800264e:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002652:	3b0c      	subs	r3, #12
 8002654:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8002658:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800265c:	330f      	adds	r3, #15
 800265e:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 8002672:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	0fda      	lsrs	r2, r3, #31
 800267e:	4413      	add	r3, r2
 8002680:	105b      	asrs	r3, r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 800268a:	4413      	add	r3, r2
 800268c:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, 0);
 8002690:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 8002694:	b299      	uxth	r1, r3
 8002696:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800269a:	b29a      	uxth	r2, r3
 800269c:	f607 1484 	addw	r4, r7, #2436	; 0x984
 80026a0:	f107 000c 	add.w	r0, r7, #12
 80026a4:	2300      	movs	r3, #0
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	4b62      	ldr	r3, [pc, #392]	; (8002834 <canvas_DrawFilters+0x31c>)
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4623      	mov	r3, r4
 80026ae:	6800      	ldr	r0, [r0, #0]
 80026b0:	f000 fa67 	bl	8002b82 <canvas_DrawStringAt>
 80026b4:	e07a      	b.n	80027ac <canvas_DrawFilters+0x294>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 80026ca:	f607 1184 	addw	r1, r7, #2436	; 0x984
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	2205      	movs	r2, #5
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00d fb2a 	bl	800fd2e <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 80026da:	2305      	movs	r3, #5
 80026dc:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 80026e0:	e011      	b.n	8002706 <canvas_DrawFilters+0x1ee>
						botLine[i - 5] = tmpName[i];
 80026e2:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 80026e6:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80026ea:	3b05      	subs	r3, #5
 80026ec:	f607 1198 	addw	r1, r7, #2456	; 0x998
 80026f0:	440a      	add	r2, r1
 80026f2:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80026f6:	f107 0214 	add.w	r2, r7, #20
 80026fa:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 80026fc:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8002700:	3301      	adds	r3, #1
 8002702:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8002706:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 800270a:	2b09      	cmp	r3, #9
 800270c:	d9e9      	bls.n	80026e2 <canvas_DrawFilters+0x1ca>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3b0f      	subs	r3, #15
 800271a:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 800271e:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8002722:	4a43      	ldr	r2, [pc, #268]	; (8002830 <canvas_DrawFilters+0x318>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 800272e:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8002732:	3b01      	subs	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 800273a:	fb12 f303 	smulbb	r3, r2, r3
 800273e:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8002742:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800274e:	4413      	add	r3, r2
 8002750:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 8002754:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002758:	3b18      	subs	r3, #24
 800275a:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 800275e:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002762:	330f      	adds	r3, #15
 8002764:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, 0);
 8002768:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800276c:	b29a      	uxth	r2, r3
 800276e:	f107 011c 	add.w	r1, r7, #28
 8002772:	f107 000c 	add.w	r0, r7, #12
 8002776:	2300      	movs	r3, #0
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <canvas_DrawFilters+0x31c>)
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	460b      	mov	r3, r1
 8002780:	2106      	movs	r1, #6
 8002782:	6800      	ldr	r0, [r0, #0]
 8002784:	f000 f9fd 	bl	8002b82 <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, 0);
 8002788:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800278c:	b29b      	uxth	r3, r3
 800278e:	3318      	adds	r3, #24
 8002790:	b29a      	uxth	r2, r3
 8002792:	f107 0114 	add.w	r1, r7, #20
 8002796:	f107 000c 	add.w	r0, r7, #12
 800279a:	2300      	movs	r3, #0
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <canvas_DrawFilters+0x31c>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	460b      	mov	r3, r1
 80027a4:	2106      	movs	r1, #6
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f000 f9eb 	bl	8002b82 <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 80027ac:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 80027b0:	3301      	adds	r3, #1
 80027b2:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 80027b6:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f67f aee5 	bls.w	800258a <canvas_DrawFilters+0x72>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 80027c0:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80027c4:	3301      	adds	r3, #1
 80027c6:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 80027ca:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	f67f aed7 	bls.w	8002582 <canvas_DrawFilters+0x6a>
	}


	// Right now, it just does a complete refresh - Need to change in the future
	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <canvas_DrawFilters+0x320>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d812      	bhi.n	8002802 <canvas_DrawFilters+0x2ea>
		EPD_set_enable_temperature();
 80027dc:	f7ff f94e 	bl	8001a7c <EPD_set_enable_temperature>
		canvas_UpdateEPD(canvas, epd, prevImage);
 80027e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027e4:	f107 0108 	add.w	r1, r7, #8
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	6809      	ldr	r1, [r1, #0]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f000 fa24 	bl	8002c3c <canvas_UpdateEPD>
		refreshCount++;
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <canvas_DrawFilters+0x320>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <canvas_DrawFilters+0x320>)
 80027fe:	701a      	strb	r2, [r3, #0]
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}


}
 8002800:	e00a      	b.n	8002818 <canvas_DrawFilters+0x300>
		canvas_PrintEPD(canvas, epd);
 8002802:	f107 0208 	add.w	r2, r7, #8
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	6811      	ldr	r1, [r2, #0]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f000 f9e9 	bl	8002be4 <canvas_PrintEPD>
		refreshCount = 0;
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <canvas_DrawFilters+0x320>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
}
 8002818:	bf00      	nop
 800281a:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	080108ec 	.word	0x080108ec
 8002828:	2000003c 	.word	0x2000003c
 800282c:	0800ff3c 	.word	0x0800ff3c
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	20000044 	.word	0x20000044
 8002838:	20000255 	.word	0x20000255

0800283c <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	721a      	strb	r2, [r3, #8]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	4613      	mov	r3, r2
 800286c:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d82a      	bhi.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <canvas_DrawAbsolutePixel+0x28>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028a5 	.word	0x080028a5
 8002888:	080028ab 	.word	0x080028ab
 800288c:	080028b1 	.word	0x080028b1
 8002890:	080028b7 	.word	0x080028b7
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028c3 	.word	0x080028c3
 800289c:	080028c9 	.word	0x080028c9
 80028a0:	080028cf 	.word	0x080028cf
		case 0:
			bit_pos = 7;
 80028a4:	2307      	movs	r3, #7
 80028a6:	75fb      	strb	r3, [r7, #23]
			break;
 80028a8:	e014      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 80028aa:	2306      	movs	r3, #6
 80028ac:	75fb      	strb	r3, [r7, #23]
			break;
 80028ae:	e011      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 80028b0:	2305      	movs	r3, #5
 80028b2:	75fb      	strb	r3, [r7, #23]
			break;
 80028b4:	e00e      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 80028b6:	2304      	movs	r3, #4
 80028b8:	75fb      	strb	r3, [r7, #23]
			break;
 80028ba:	e00b      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 80028bc:	2303      	movs	r3, #3
 80028be:	75fb      	strb	r3, [r7, #23]
			break;
 80028c0:	e008      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 80028c2:	2302      	movs	r3, #2
 80028c4:	75fb      	strb	r3, [r7, #23]
			break;
 80028c6:	e005      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
			break;
 80028cc:	e002      	b.n	80028d4 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
			break;
 80028d2:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d249      	bcs.n	8002972 <canvas_DrawAbsolutePixel+0x116>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	88db      	ldrh	r3, [r3, #6]
 80028e2:	893a      	ldrh	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d244      	bcs.n	8002972 <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d021      	beq.n	8002932 <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	8880      	ldrh	r0, [r0, #4]
 80028fa:	fb00 f303 	mul.w	r3, r0, r3
 80028fe:	440b      	add	r3, r1
 8002900:	2b00      	cmp	r3, #0
 8002902:	da00      	bge.n	8002906 <canvas_DrawAbsolutePixel+0xaa>
 8002904:	3307      	adds	r3, #7
 8002906:	10db      	asrs	r3, r3, #3
 8002908:	4618      	mov	r0, r3
 800290a:	4603      	mov	r3, r0
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b25a      	sxtb	r2, r3
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	fa41 f303 	asr.w	r3, r1, r3
 800291a:	b25b      	sxtb	r3, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	b25b      	sxtb	r3, r3
 8002920:	4013      	ands	r3, r2
 8002922:	b25a      	sxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4601      	mov	r1, r0
 800292a:	440b      	add	r3, r1
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e020      	b.n	8002974 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	8880      	ldrh	r0, [r0, #4]
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	440b      	add	r3, r1
 8002944:	2b00      	cmp	r3, #0
 8002946:	da00      	bge.n	800294a <canvas_DrawAbsolutePixel+0xee>
 8002948:	3307      	adds	r3, #7
 800294a:	10db      	asrs	r3, r3, #3
 800294c:	4618      	mov	r0, r3
 800294e:	4603      	mov	r3, r0
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b25a      	sxtb	r2, r3
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	fa41 f303 	asr.w	r3, r1, r3
 800295e:	b25b      	sxtb	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b25a      	sxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4601      	mov	r1, r0
 800296a:	440b      	add	r3, r1
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e000      	b.n	8002974 <canvas_DrawAbsolutePixel+0x118>
        return;
 8002972:	bf00      	nop
        }
    }
}
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	4613      	mov	r3, r2
 8002990:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	7a1b      	ldrb	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d110      	bne.n	80029bc <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	889b      	ldrh	r3, [r3, #4]
 800299e:	897a      	ldrh	r2, [r7, #10]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d267      	bcs.n	8002a74 <canvas_DrawPixel+0xf4>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88db      	ldrh	r3, [r3, #6]
 80029a8:	893a      	ldrh	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d262      	bcs.n	8002a74 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80029ae:	893a      	ldrh	r2, [r7, #8]
 80029b0:	8979      	ldrh	r1, [r7, #10]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff ff51 	bl	800285c <canvas_DrawAbsolutePixel>
 80029ba:	e062      	b.n	8002a82 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	7a1b      	ldrb	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88db      	ldrh	r3, [r3, #6]
 80029c8:	897a      	ldrh	r2, [r7, #10]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d254      	bcs.n	8002a78 <canvas_DrawPixel+0xf8>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	889b      	ldrh	r3, [r3, #4]
 80029d2:	893a      	ldrh	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d24f      	bcs.n	8002a78 <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 80029d8:	897b      	ldrh	r3, [r7, #10]
 80029da:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	889a      	ldrh	r2, [r3, #4]
 80029e0:	893b      	ldrh	r3, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80029ea:	893a      	ldrh	r2, [r7, #8]
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff33 	bl	800285c <canvas_DrawAbsolutePixel>
 80029f6:	e044      	b.n	8002a82 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	7a1b      	ldrb	r3, [r3, #8]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d11a      	bne.n	8002a36 <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	889b      	ldrh	r3, [r3, #4]
 8002a04:	897a      	ldrh	r2, [r7, #10]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d238      	bcs.n	8002a7c <canvas_DrawPixel+0xfc>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88db      	ldrh	r3, [r3, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d233      	bcs.n	8002a7c <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	889a      	ldrh	r2, [r3, #4]
 8002a18:	897b      	ldrh	r3, [r7, #10]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88da      	ldrh	r2, [r3, #6]
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8002a28:	893a      	ldrh	r2, [r7, #8]
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff ff14 	bl	800285c <canvas_DrawAbsolutePixel>
 8002a34:	e025      	b.n	8002a82 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	7a1b      	ldrb	r3, [r3, #8]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d121      	bne.n	8002a82 <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	88db      	ldrh	r3, [r3, #6]
 8002a42:	897a      	ldrh	r2, [r7, #10]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d21b      	bcs.n	8002a80 <canvas_DrawPixel+0x100>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d216      	bcs.n	8002a80 <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	617b      	str	r3, [r7, #20]
        x = y;
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88da      	ldrh	r2, [r3, #6]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8002a66:	893a      	ldrh	r2, [r7, #8]
 8002a68:	8979      	ldrh	r1, [r7, #10]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fef5 	bl	800285c <canvas_DrawAbsolutePixel>
 8002a72:	e006      	b.n	8002a82 <canvas_DrawPixel+0x102>
            return;
 8002a74:	bf00      	nop
 8002a76:	e004      	b.n	8002a82 <canvas_DrawPixel+0x102>
          return;
 8002a78:	bf00      	nop
 8002a7a:	e002      	b.n	8002a82 <canvas_DrawPixel+0x102>
          return;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <canvas_DrawPixel+0x102>
          return;
 8002a80:	bf00      	nop
    }
}
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	817b      	strh	r3, [r7, #10]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	813b      	strh	r3, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	3b20      	subs	r3, #32
 8002aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa8:	88d2      	ldrh	r2, [r2, #6]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab0:	8892      	ldrh	r2, [r2, #4]
 8002ab2:	08d2      	lsrs	r2, r2, #3
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aba:	8892      	ldrh	r2, [r2, #4]
 8002abc:	f002 0207 	and.w	r2, r2, #7
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2201      	movne	r2, #1
 8002ac8:	2200      	moveq	r2, #0
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440a      	add	r2, r1
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e044      	b.n	8002b6e <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	e02e      	b.n	8002b48 <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	425a      	negs	r2, r3
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	f002 0207 	and.w	r2, r2, #7
 8002afc:	bf58      	it	pl
 8002afe:	4253      	negpl	r3, r2
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	fa42 f303 	asr.w	r3, r2, r3
 8002b06:	400b      	ands	r3, r1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	897b      	ldrh	r3, [r7, #10]
 8002b12:	4413      	add	r3, r2
 8002b14:	b299      	uxth	r1, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	893b      	ldrh	r3, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff2c 	bl	8002980 <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	425a      	negs	r2, r3
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	f002 0207 	and.w	r2, r2, #7
 8002b34:	bf58      	it	pl
 8002b36:	4253      	negpl	r3, r2
 8002b38:	2b07      	cmp	r3, #7
 8002b3a:	d102      	bne.n	8002b42 <canvas_DrawCharAt+0xba>
                ptr++;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3301      	adds	r3, #1
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	889b      	ldrh	r3, [r3, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4293      	cmp	r3, r2
 8002b52:	dbca      	blt.n	8002aea <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	889b      	ldrh	r3, [r3, #4]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <canvas_DrawCharAt+0xe0>
            ptr++;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	88db      	ldrh	r3, [r3, #6]
 8002b72:	461a      	mov	r2, r3
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4293      	cmp	r3, r2
 8002b78:	dbb4      	blt.n	8002ae4 <canvas_DrawCharAt+0x5c>
        }
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8002b9c:	897b      	ldrh	r3, [r7, #10]
 8002b9e:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8002ba0:	e018      	b.n	8002bd4 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	7818      	ldrb	r0, [r3, #0]
 8002baa:	893a      	ldrh	r2, [r7, #8]
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff ff66 	bl	8002a88 <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	889b      	ldrh	r3, [r3, #4]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
        counter++;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e2      	bne.n	8002ba2 <canvas_DrawStringAt+0x20>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	f7fe fbc4 	bl	800137c <EPD_begin>
	EPD_image_0(epd, canvas->image);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f7fe ff66 	bl	8001acc <EPD_image_0>
	EPD_end(epd);
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f7fe fe2b 	bl	800185c <EPD_end>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	889a      	ldrh	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	88db      	ldrh	r3, [r3, #6]
 8002c20:	fb12 f303 	smulbb	r3, r2, r3
 8002c24:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	89fa      	ldrh	r2, [r7, #14]
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f00d f87d 	bl	800fd2e <memcpy>
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 8002c48:	68b8      	ldr	r0, [r7, #8]
 8002c4a:	f7fe fb97 	bl	800137c <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f7fe ff57 	bl	8001b0a <EPD_partial_image>
	EPD_end(epd);
 8002c5c:	68b8      	ldr	r0, [r7, #8]
 8002c5e:	f7fe fdfd 	bl	800185c <EPD_end>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 8002c7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <LM75B_Init+0x78>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <LM75B_Init+0x7c>)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <LM75B_Init+0x80>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <LM75B_Init+0x7c>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <LM75B_Init+0x80>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4619      	mov	r1, r3
 8002c98:	f001 fe74 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f001 fb81 	bl	80043a4 <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 8002ca2:	f107 0316 	add.w	r3, r7, #22
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f88a 	bl	8002dc0 <readConfigReg>
 8002cac:	4603      	mov	r3, r0
 8002cae:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <LM75B_Init+0x7c>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <LM75B_Init+0x80>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f001 fe62 	bl	8004984 <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <LM75B_Init+0x5e>
		return LM75B_ERR;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e008      	b.n	8002cdc <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 8002cca:	7dbb      	ldrb	r3, [r7, #22]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <LM75B_Init+0x6e>
		LM75BInitialized = true;
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <LM75B_Init+0x84>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000258 	.word	0x20000258
 8002ce8:	20000d18 	.word	0x20000d18
 8002cec:	20000d14 	.word	0x20000d14
 8002cf0:	2000025c 	.word	0x2000025c

08002cf4 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <LM75B_ReadTemp+0xc0>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f083 0301 	eor.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e04d      	b.n	8002daa <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <LM75B_ReadTemp+0xc4>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <LM75B_ReadTemp+0xc8>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f001 fe33 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_Delay(10); // Small delay to ensure stable power
 8002d1e:	200a      	movs	r0, #10
 8002d20:	f001 fb40 	bl	80043a4 <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 8002d24:	2300      	movs	r3, #0
 8002d26:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 8002d28:	f107 0308 	add.w	r3, r7, #8
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f853 	bl	8002ddc <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <LM75B_ReadTemp+0xc4>)
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <LM75B_ReadTemp+0xc8>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	f001 fe1f 	bl	8004984 <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 8002d46:	7a3b      	ldrb	r3, [r7, #8]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	7a7b      	ldrb	r3, [r7, #9]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 8002d54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d58:	115b      	asrs	r3, r3, #5
 8002d5a:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 8002d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fb8b 	bl	800047c <__aeabi_i2d>
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d6e:	f7fd fbef 	bl	8000550 <__aeabi_dmul>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	4618      	mov	r0, r3
 8002d78:	4621      	mov	r1, r4
 8002d7a:	f7fd fdfb 	bl	8000974 <__aeabi_d2iz>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 8002d86:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da09      	bge.n	8002da2 <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 8002d8e:	7b7b      	ldrb	r3, [r7, #13]
 8002d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	425b      	negs	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e002      	b.n	8002da8 <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7b7a      	ldrb	r2, [r7, #13]
 8002da6:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000025c 	.word	0x2000025c
 8002db8:	20000d18 	.word	0x20000d18
 8002dbc:	20000d14 	.word	0x20000d14

08002dc0 <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f000 f805 	bl	8002ddc <LM75B_i2cReadBytes>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <LM75B_i2cReadBytes+0x4c>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	b299      	uxth	r1, r3
 8002df4:	79bb      	ldrb	r3, [r7, #6]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dfc:	9202      	str	r2, [sp, #8]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2301      	movs	r3, #1
 8002e06:	460a      	mov	r2, r1
 8002e08:	2190      	movs	r1, #144	; 0x90
 8002e0a:	f001 ff31 	bl	8004c70 <HAL_I2C_Mem_Read>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000258 	.word	0x20000258

08002e2c <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <iso15693Initialize+0x1a>
 8002e42:	21ed      	movs	r1, #237	; 0xed
 8002e44:	e000      	b.n	8002e48 <iso15693Initialize+0x1c>
 8002e46:	21ec      	movs	r1, #236	; 0xec
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <iso15693Initialize+0x26>
 8002e4e:	23eb      	movs	r3, #235	; 0xeb
 8002e50:	e000      	b.n	8002e54 <iso15693Initialize+0x28>
 8002e52:	23ec      	movs	r3, #236	; 0xec
 8002e54:	461a      	mov	r2, r3
 8002e56:	2007      	movs	r0, #7
 8002e58:	f007 fece 	bl	800abf8 <rfalSetMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8002e60:	2001      	movs	r0, #1
 8002e62:	f008 faf5 	bl	800b450 <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 8002e66:	4809      	ldr	r0, [pc, #36]	; (8002e8c <iso15693Initialize+0x60>)
 8002e68:	f008 fb3e 	bl	800b4e8 <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 8002e6c:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8002e70:	f008 fb26 	bl	800b4c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8002e74:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8002e78:	f008 fb0c 	bl	800b494 <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 8002e7c:	f008 fb62 	bl	800b544 <rfalFieldOnAndStartGT>

    return err;
 8002e80:	89fb      	ldrh	r3, [r7, #14]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	000108d8 	.word	0x000108d8

08002e90 <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8002ea0:	f008 fbb8 	bl	800b614 <rfalFieldOff>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	e000      	b.n	8002eaa <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8002eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb8:	b091      	sub	sp, #68	; 0x44
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	60ba      	str	r2, [r7, #8]
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8002ecc:	2300      	movs	r3, #0
 8002ece:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8002ed0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8002edc:	e2f8      	b.n	80034d0 <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	48aa      	ldr	r0, [pc, #680]	; (800318c <iso15693Inventory+0x2d8>)
 8002ee4:	f00c ff2e 	bl	800fd44 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 8002ee8:	4ba9      	ldr	r3, [pc, #676]	; (8003190 <iso15693Inventory+0x2dc>)
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8002ef4:	4ba6      	ldr	r3, [pc, #664]	; (8003190 <iso15693Inventory+0x2dc>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <iso15693Inventory+0x2dc>)
 8002f00:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8002f02:	4ba3      	ldr	r3, [pc, #652]	; (8003190 <iso15693Inventory+0x2dc>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 8002f08:	4aa1      	ldr	r2, [pc, #644]	; (8003190 <iso15693Inventory+0x2dc>)
 8002f0a:	7bbb      	ldrb	r3, [r7, #14]
 8002f0c:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	7bba      	ldrb	r2, [r7, #14]
 8002f16:	f002 0207 	and.w	r2, r2, #7
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	bfcc      	ite	gt
 8002f1e:	2201      	movgt	r2, #1
 8002f20:	2200      	movle	r2, #0
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	4413      	add	r3, r2
 8002f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 8002f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f2e:	3303      	adds	r3, #3
 8002f30:	2b48      	cmp	r3, #72	; 0x48
 8002f32:	dd02      	ble.n	8002f3a <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8002f34:	2301      	movs	r3, #1
 8002f36:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8002f38:	e2ca      	b.n	80034d0 <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 8002f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4413      	add	r3, r2
 8002f60:	7819      	ldrb	r1, [r3, #0]
 8002f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f66:	3b01      	subs	r3, #1
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	7eba      	ldrb	r2, [r7, #26]
 8002f6e:	400a      	ands	r2, r1
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 8002f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4885      	ldr	r0, [pc, #532]	; (8003194 <iso15693Inventory+0x2e0>)
 8002f7e:	f00c fed6 	bl	800fd2e <memcpy>

    slotNumPos = maskLength & 7;
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8002fa0:	23ff      	movs	r3, #255	; 0xff
 8002fa2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <iso15693Inventory+0xfe>
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb0:	e000      	b.n	8002fb4 <iso15693Inventory+0x100>
 8002fb2:	230f      	movs	r3, #15
 8002fb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <iso15693Inventory+0x112>
 8002fbe:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	d10e      	bne.n	8002fe4 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 8002fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fca:	3303      	adds	r3, #3
 8002fcc:	b2d9      	uxtb	r1, r3
 8002fce:	f107 0316 	add.w	r3, r7, #22
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	486d      	ldr	r0, [pc, #436]	; (8003190 <iso15693Inventory+0x2dc>)
 8002fda:	f009 fcbd 	bl	800c958 <rfalISO15693TransceiveAnticollisionFrame>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002fe2:	e00b      	b.n	8002ffc <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8002fe4:	2005      	movs	r0, #5
 8002fe6:	f001 f9dd 	bl	80043a4 <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 8002fea:	f107 0316 	add.w	r3, r7, #22
 8002fee:	461a      	mov	r2, r3
 8002ff0:	210c      	movs	r1, #12
 8002ff2:	69f8      	ldr	r0, [r7, #28]
 8002ff4:	f009 fd68 	bl	800cac8 <rfalISO15693TransceiveEOFAnticollision>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8002ffc:	8afb      	ldrh	r3, [r7, #22]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	b29b      	uxth	r3, r3
 800300c:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 800300e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003010:	2b1d      	cmp	r3, #29
 8003012:	f040 80a1 	bne.w	8003158 <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 8003016:	8afb      	ldrh	r3, [r7, #22]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d802      	bhi.n	8003022 <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 800301c:	231d      	movs	r3, #29
 800301e:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003020:	e256      	b.n	80034d0 <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003022:	8afb      	ldrh	r3, [r7, #22]
 8003024:	3b02      	subs	r3, #2
 8003026:	7e3a      	ldrb	r2, [r7, #24]
 8003028:	2a00      	cmp	r2, #0
 800302a:	bf14      	ite	ne
 800302c:	2201      	movne	r2, #1
 800302e:	2200      	moveq	r2, #0
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	441a      	add	r2, r3
 8003034:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003038:	429a      	cmp	r2, r3
 800303a:	da02      	bge.n	8003042 <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 800303c:	2304      	movs	r3, #4
 800303e:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 8003040:	e08a      	b.n	8003158 <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d17a      	bne.n	800313e <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3b02      	subs	r3, #2
 800304e:	b2db      	uxtb	r3, r3
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	b2da      	uxtb	r2, r3
 8003054:	7e3b      	ldrb	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3301      	adds	r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <iso15693Inventory+0x2dc>)
 8003060:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 8003062:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <iso15693Inventory+0x2dc>)
 8003064:	789b      	ldrb	r3, [r3, #2]
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d902      	bls.n	8003070 <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 800306a:	2304      	movs	r3, #4
 800306c:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 800306e:	e073      	b.n	8003158 <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <iso15693Inventory+0x2dc>)
 8003072:	789b      	ldrb	r3, [r3, #2]
 8003074:	3b01      	subs	r3, #1
 8003076:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 800307a:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800307e:	f04f 0201 	mov.w	r2, #1
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f1a1 0620 	sub.w	r6, r1, #32
 800308a:	f1c1 0020 	rsb	r0, r1, #32
 800308e:	fa03 f501 	lsl.w	r5, r3, r1
 8003092:	fa02 f606 	lsl.w	r6, r2, r6
 8003096:	4335      	orrs	r5, r6
 8003098:	fa22 f000 	lsr.w	r0, r2, r0
 800309c:	4305      	orrs	r5, r0
 800309e:	fa02 f401 	lsl.w	r4, r2, r1
 80030a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a6:	ea42 0004 	orr.w	r0, r2, r4
 80030aa:	ea43 0105 	orr.w	r1, r3, r5
 80030ae:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 80030b2:	8afb      	ldrh	r3, [r7, #22]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3302      	adds	r3, #2
 80030c0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80030c4:	4619      	mov	r1, r3
 80030c6:	4833      	ldr	r0, [pc, #204]	; (8003194 <iso15693Inventory+0x2e0>)
 80030c8:	f00c fe31 	bl	800fd2e <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 80030cc:	7e3b      	ldrb	r3, [r7, #24]
 80030ce:	2201      	movs	r2, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 80030da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030de:	3302      	adds	r3, #2
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <iso15693Inventory+0x2dc>)
 80030e2:	5cd1      	ldrb	r1, [r2, r3]
 80030e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030e8:	3302      	adds	r3, #2
 80030ea:	7eba      	ldrb	r2, [r7, #26]
 80030ec:	400a      	ands	r2, r1
 80030ee:	b2d1      	uxtb	r1, r2
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <iso15693Inventory+0x2dc>)
 80030f2:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 80030f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030f8:	4a24      	ldr	r2, [pc, #144]	; (800318c <iso15693Inventory+0x2d8>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d115      	bne.n	800312c <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003100:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003104:	3302      	adds	r3, #2
 8003106:	4a22      	ldr	r2, [pc, #136]	; (8003190 <iso15693Inventory+0x2dc>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	b25a      	sxtb	r2, r3
 800310c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b25a      	sxtb	r2, r3
 8003120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003124:	3302      	adds	r3, #2
 8003126:	b2d1      	uxtb	r1, r2
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <iso15693Inventory+0x2dc>)
 800312a:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 800312c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <iso15693Inventory+0x2d8>)
 8003132:	5cd2      	ldrb	r2, [r2, r3]
 8003134:	3201      	adds	r2, #1
 8003136:	b2d1      	uxtb	r1, r2
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <iso15693Inventory+0x2d8>)
 800313a:	54d1      	strb	r1, [r2, r3]
 800313c:	e00c      	b.n	8003158 <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 800313e:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003142:	f1c3 030f 	rsb	r3, r3, #15
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	b21a      	sxth	r2, r3
 800314e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003152:	4313      	orrs	r3, r2
 8003154:	b21b      	sxth	r3, r3
 8003156:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 8003158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800315a:	2b1d      	cmp	r3, #29
 800315c:	f000 80c8 	beq.w	80032f0 <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 8003160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 8003166:	7efb      	ldrb	r3, [r7, #27]
 8003168:	3301      	adds	r3, #1
 800316a:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 800316c:	7efa      	ldrb	r2, [r7, #27]
 800316e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003172:	429a      	cmp	r2, r3
 8003174:	f080 81a9 	bcs.w	80034ca <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	330c      	adds	r3, #12
 800317c:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 80b5 	bne.w	80032f0 <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 8003186:	2340      	movs	r3, #64	; 0x40
 8003188:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 800318a:	e091      	b.n	80032b0 <iso15693Inventory+0x3fc>
 800318c:	200002ac 	.word	0x200002ac
 8003190:	20000260 	.word	0x20000260
 8003194:	20000263 	.word	0x20000263
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 8003198:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800319a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800319e:	f1c1 0620 	rsb	r6, r1, #32
 80031a2:	f1a1 0020 	sub.w	r0, r1, #32
 80031a6:	fa22 f801 	lsr.w	r8, r2, r1
 80031aa:	fa03 f606 	lsl.w	r6, r3, r6
 80031ae:	ea48 0806 	orr.w	r8, r8, r6
 80031b2:	fa23 f000 	lsr.w	r0, r3, r0
 80031b6:	ea48 0800 	orr.w	r8, r8, r0
 80031ba:	fa23 f901 	lsr.w	r9, r3, r1
 80031be:	f04f 0201 	mov.w	r2, #1
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	ea02 0008 	and.w	r0, r2, r8
 80031ca:	ea03 0109 	and.w	r1, r3, r9
 80031ce:	ea50 0301 	orrs.w	r3, r0, r1
 80031d2:	d06d      	beq.n	80032b0 <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 80031d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031d6:	4ab2      	ldr	r2, [pc, #712]	; (80034a0 <iso15693Inventory+0x5ec>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d939      	bls.n	8003252 <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 80031de:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80031e0:	f04f 0201 	mov.w	r2, #1
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f1a1 0620 	sub.w	r6, r1, #32
 80031ec:	f1c1 0020 	rsb	r0, r1, #32
 80031f0:	fa03 fb01 	lsl.w	fp, r3, r1
 80031f4:	fa02 f606 	lsl.w	r6, r2, r6
 80031f8:	ea4b 0b06 	orr.w	fp, fp, r6
 80031fc:	fa22 f000 	lsr.w	r0, r2, r0
 8003200:	ea4b 0b00 	orr.w	fp, fp, r0
 8003204:	fa02 fa01 	lsl.w	sl, r2, r1
 8003208:	ea6f 020a 	mvn.w	r2, sl
 800320c:	ea6f 030b 	mvn.w	r3, fp
 8003210:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003214:	ea02 0200 	and.w	r2, r2, r0
 8003218:	ea03 0301 	and.w	r3, r3, r1
 800321c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003220:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003222:	4a9f      	ldr	r2, [pc, #636]	; (80034a0 <iso15693Inventory+0x5ec>)
 8003224:	2100      	movs	r1, #0
 8003226:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 8003228:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800322c:	2b00      	cmp	r3, #0
 800322e:	db3f      	blt.n	80032b0 <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003230:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003234:	2201      	movs	r2, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	b21b      	sxth	r3, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	b21a      	sxth	r2, r3
 8003240:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003244:	4013      	ands	r3, r2
 8003246:	b21b      	sxth	r3, r3
 8003248:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 800324a:	23ff      	movs	r3, #255	; 0xff
 800324c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003250:	e02e      	b.n	80032b0 <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 8003252:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003254:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 8003258:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800325c:	3301      	adds	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b90      	ldr	r3, [pc, #576]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003262:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 8003264:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003276:	3302      	adds	r3, #2
 8003278:	4a8a      	ldr	r2, [pc, #552]	; (80034a4 <iso15693Inventory+0x5f0>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	b25a      	sxtb	r2, r3
 800327e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	b25b      	sxtb	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b25a      	sxtb	r2, r3
 8003292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003296:	3302      	adds	r3, #2
 8003298:	b2d1      	uxtb	r1, r2
 800329a:	4a82      	ldr	r2, [pc, #520]	; (80034a4 <iso15693Inventory+0x5f0>)
 800329c:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 800329e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032a2:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <iso15693Inventory+0x5ec>)
 80032a4:	5cd2      	ldrb	r2, [r2, r3]
 80032a6:	3201      	adds	r2, #1
 80032a8:	b2d1      	uxtb	r1, r2
 80032aa:	4a7d      	ldr	r2, [pc, #500]	; (80034a0 <iso15693Inventory+0x5ec>)
 80032ac:	54d1      	strb	r1, [r2, r3]
                                break;
 80032ae:	e005      	b.n	80032bc <iso15693Inventory+0x408>
                    while (i--)
 80032b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	86ba      	strh	r2, [r7, #52]	; 0x34
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af6e 	bne.w	8003198 <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 80032bc:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db15      	blt.n	80032f0 <iso15693Inventory+0x43c>
 80032c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032c8:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <iso15693Inventory+0x5ec>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 80032d0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80032d4:	2201      	movs	r2, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	b21b      	sxth	r3, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	b21a      	sxth	r2, r3
 80032e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80032e4:	4013      	ands	r3, r2
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 80032ea:	23ff      	movs	r3, #255	; 0xff
 80032ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 80032f0:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db06      	blt.n	8003306 <iso15693Inventory+0x452>
            {
                slot--;
 80032f8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 8003306:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800330a:	2b00      	cmp	r3, #0
 800330c:	f6bf ae54 	bge.w	8002fb8 <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 800331a:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <iso15693Inventory+0x5f0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	f043 0320 	orr.w	r3, r3, #32
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003326:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 8003328:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332c:	4313      	orrs	r3, r2
 800332e:	f040 80c2 	bne.w	80034b6 <iso15693Inventory+0x602>
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 80be 	bne.w	80034b6 <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800333e:	e0b6      	b.n	80034ae <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 8003340:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003342:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003344:	fa42 f303 	asr.w	r3, r2, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80ab 	beq.w	80034a8 <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	7bba      	ldrb	r2, [r7, #14]
 800335a:	f002 0207 	and.w	r2, r2, #7
 800335e:	2a00      	cmp	r2, #0
 8003360:	bfcc      	ite	gt
 8003362:	2201      	movgt	r2, #1
 8003364:	2200      	movle	r2, #0
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	4413      	add	r3, r2
 800336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 800336e:	7e7b      	ldrb	r3, [r7, #25]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 8003374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003378:	3301      	adds	r3, #1
 800337a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 800337e:	7e7b      	ldrb	r3, [r7, #25]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d95b      	bls.n	800343c <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 8003384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003388:	3301      	adds	r3, #1
 800338a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 800338e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003392:	3302      	adds	r3, #2
 8003394:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	b25a      	sxtb	r2, r3
 800339a:	7e7b      	ldrb	r3, [r7, #25]
 800339c:	f1c3 0308 	rsb	r3, r3, #8
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	425b      	negs	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	4013      	ands	r3, r2
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033b6:	3302      	adds	r3, #2
 80033b8:	b2d1      	uxtb	r1, r2
 80033ba:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <iso15693Inventory+0x5f0>)
 80033bc:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 80033be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033c2:	3302      	adds	r3, #2
 80033c4:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <iso15693Inventory+0x5f0>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	b25a      	sxtb	r2, r3
 80033ca:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80033cc:	7e7b      	ldrb	r3, [r7, #25]
 80033ce:	f1c3 0308 	rsb	r3, r3, #8
 80033d2:	fa41 f303 	asr.w	r3, r1, r3
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b25a      	sxtb	r2, r3
 80033dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033e0:	3302      	adds	r3, #2
 80033e2:	b2d1      	uxtb	r1, r2
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <iso15693Inventory+0x5f0>)
 80033e6:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 80033e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <iso15693Inventory+0x5f0>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	b25a      	sxtb	r2, r3
 80033f4:	7e7b      	ldrb	r3, [r7, #25]
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	b25b      	sxtb	r3, r3
 8003404:	4013      	ands	r3, r2
 8003406:	b25a      	sxtb	r2, r3
 8003408:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800340c:	3301      	adds	r3, #1
 800340e:	b2d1      	uxtb	r1, r2
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003412:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 8003414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003418:	3301      	adds	r3, #1
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <iso15693Inventory+0x5f0>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	b25a      	sxtb	r2, r3
 8003420:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003422:	7e7b      	ldrb	r3, [r7, #25]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	b25b      	sxtb	r3, r3
 800342a:	4313      	orrs	r3, r2
 800342c:	b25a      	sxtb	r2, r3
 800342e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003432:	3301      	adds	r3, #1
 8003434:	b2d1      	uxtb	r1, r2
 8003436:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003438:	54d1      	strb	r1, [r2, r3]
 800343a:	e028      	b.n	800348e <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 800343c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003440:	3302      	adds	r3, #2
 8003442:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	b25a      	sxtb	r2, r3
 8003448:	7e7b      	ldrb	r3, [r7, #25]
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	b25b      	sxtb	r3, r3
 8003458:	4013      	ands	r3, r2
 800345a:	b25a      	sxtb	r2, r3
 800345c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003460:	3302      	adds	r3, #2
 8003462:	b2d1      	uxtb	r1, r2
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003466:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 8003468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800346c:	3302      	adds	r3, #2
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	b25a      	sxtb	r2, r3
 8003474:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003476:	7e7b      	ldrb	r3, [r7, #25]
 8003478:	fa01 f303 	lsl.w	r3, r1, r3
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b25a      	sxtb	r2, r3
 8003482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003486:	3302      	adds	r3, #2
 8003488:	b2d1      	uxtb	r1, r2
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <iso15693Inventory+0x5f0>)
 800348c:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	3304      	adds	r3, #4
 8003492:	b2da      	uxtb	r2, r3
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <iso15693Inventory+0x5f0>)
 8003496:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 8003498:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800349a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 800349e:	e00a      	b.n	80034b6 <iso15693Inventory+0x602>
 80034a0:	200002ac 	.word	0x200002ac
 80034a4:	20000260 	.word	0x20000260
            for (i = 0; i < 16; i++)
 80034a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034aa:	3301      	adds	r3, #1
 80034ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	f67f af45 	bls.w	8003340 <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 80034b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f47f ad7c 	bne.w	8002fb8 <iso15693Inventory+0x104>
 80034c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f47f ad78 	bne.w	8002fb8 <iso15693Inventory+0x104>

out_max_cards:
 80034c8:	e000      	b.n	80034cc <iso15693Inventory+0x618>
                        goto out_max_cards;
 80034ca:	bf00      	nop
    err = ERR_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	7efa      	ldrb	r2, [r7, #27]
 80034d4:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 80034d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 80034de:	2316      	movs	r3, #22
 80034e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 80034e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	373c      	adds	r7, #60	; 0x3c
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop

080034f0 <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af06      	add	r7, sp, #24
 80034f6:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <iso15693SelectPicc+0x54>)
 80034fa:	7819      	ldrb	r1, [r3, #0]
 80034fc:	2351      	movs	r3, #81	; 0x51
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	2300      	movs	r3, #0
 8003502:	9303      	str	r3, [sp, #12]
 8003504:	2300      	movs	r3, #0
 8003506:	9302      	str	r3, [sp, #8]
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2304      	movs	r3, #4
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <iso15693SelectPicc+0x58>)
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	2025      	movs	r0, #37	; 0x25
 8003518:	f000 f876 	bl	8003608 <iso15693SendRequest>
 800351c:	4603      	mov	r3, r0
 800351e:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <iso15693SelectPicc+0x58>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 800352e:	2306      	movs	r3, #6
 8003530:	81fb      	strh	r3, [r7, #14]
 8003532:	e002      	b.n	800353a <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <iso15693SelectPicc+0x4a>
    }

out:
 8003538:	bf00      	nop
    return err;
 800353a:	89fb      	ldrh	r3, [r7, #14]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200002ec 	.word	0x200002ec
 8003548:	20000260 	.word	0x20000260

0800354c <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af06      	add	r7, sp, #24
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	72fb      	strb	r3, [r7, #11]
 800355a:	4613      	mov	r3, r2
 800355c:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 8003562:	7abb      	ldrb	r3, [r7, #10]
 8003564:	3b01      	subs	r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <iso15693ReadMultipleBlocks+0xb0>)
 800356c:	7819      	ldrb	r1, [r3, #0]
 800356e:	2351      	movs	r3, #81	; 0x51
 8003570:	9304      	str	r3, [sp, #16]
 8003572:	2302      	movs	r3, #2
 8003574:	9303      	str	r3, [sp, #12]
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	9302      	str	r3, [sp, #8]
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	2348      	movs	r3, #72	; 0x48
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <iso15693ReadMultipleBlocks+0xb4>)
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	2023      	movs	r0, #35	; 0x23
 800358c:	f000 f83c 	bl	8003608 <iso15693SendRequest>
 8003590:	4603      	mov	r3, r0
 8003592:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003594:	8afb      	ldrh	r3, [r7, #22]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d128      	bne.n	80035ec <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 800359a:	8abb      	ldrh	r3, [r7, #20]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d927      	bls.n	80035f0 <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <iso15693ReadMultipleBlocks+0xb4>)
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	2200      	movs	r2, #0
 80035b8:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <iso15693ReadMultipleBlocks+0xb4>)
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	82fb      	strh	r3, [r7, #22]
 80035c0:	e017      	b.n	80035f2 <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 80035c2:	8abb      	ldrh	r3, [r7, #20]
 80035c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d203      	bcs.n	80035d2 <iso15693ReadMultipleBlocks+0x86>
 80035ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	e002      	b.n	80035d8 <iso15693ReadMultipleBlocks+0x8c>
 80035d2:	8abb      	ldrh	r3, [r7, #20]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035da:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <iso15693ReadMultipleBlocks+0xb8>)
 80035e4:	6a38      	ldr	r0, [r7, #32]
 80035e6:	f00c fba2 	bl	800fd2e <memcpy>
 80035ea:	e002      	b.n	80035f2 <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 80035f0:	bf00      	nop
    return err;
 80035f2:	8afb      	ldrh	r3, [r7, #22]

}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200002ec 	.word	0x200002ec
 8003600:	20000260 	.word	0x20000260
 8003604:	20000261 	.word	0x20000261

08003608 <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af04      	add	r7, sp, #16
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	460b      	mov	r3, r1
 8003618:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 800361a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800361e:	330a      	adds	r3, #10
 8003620:	2b48      	cmp	r3, #72	; 0x48
 8003622:	dd01      	ble.n	8003628 <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 8003624:	2301      	movs	r3, #1
 8003626:	e03f      	b.n	80036a8 <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800362e:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 8003636:	7bbb      	ldrb	r3, [r7, #14]
 8003638:	f043 0310 	orr.w	r3, r3, #16
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <iso15693SendRequest+0xa8>)
 8003640:	701a      	strb	r2, [r3, #0]
        length = 2;
 8003642:	2302      	movs	r3, #2
 8003644:	75fb      	strb	r3, [r7, #23]
 8003646:	e00e      	b.n	8003666 <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 8003648:	7bbb      	ldrb	r3, [r7, #14]
 800364a:	f043 0320 	orr.w	r3, r3, #32
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <iso15693SendRequest+0xa8>)
 8003652:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3302      	adds	r3, #2
 8003658:	2208      	movs	r2, #8
 800365a:	4619      	mov	r1, r3
 800365c:	4815      	ldr	r0, [pc, #84]	; (80036b4 <iso15693SendRequest+0xac>)
 800365e:	f00c fb66 	bl	800fd2e <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 8003662:	230a      	movs	r3, #10
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <iso15693SendRequest+0xa8>)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <iso15693SendRequest+0xa8>)
 8003670:	4413      	add	r3, r2
 8003672:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003678:	4618      	mov	r0, r3
 800367a:	f00c fb58 	bl	800fd2e <memcpy>
    length += addSendDataLength;
 800367e:	7dfa      	ldrb	r2, [r7, #23]
 8003680:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003684:	4413      	add	r3, r2
 8003686:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	b299      	uxth	r1, r3
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	8c3a      	ldrh	r2, [r7, #32]
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	2300      	movs	r3, #0
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <iso15693SendRequest+0xa8>)
 80036a2:	f008 f995 	bl	800b9d0 <rfalTransceiveBlockingTxRx>
 80036a6:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000260 	.word	0x20000260
 80036b4:	20000262 	.word	0x20000262

080036b8 <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 80036be:	2300      	movs	r3, #0
 80036c0:	80fb      	strh	r3, [r7, #6]

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 80036c2:	f006 fd45 	bl	800a150 <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 80036c6:	f007 fa25 	bl	800ab14 <rfalInitialize>
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <rfidControllerInit+0x22>
		rfidInitialized = true;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <rfidControllerInit+0x2c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
	}
	return err;
 80036da:	88fb      	ldrh	r3, [r7, #6]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	200002ed 	.word	0x200002ed

080036e8 <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 80036f4:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <checkFilterTags+0x18c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <checkFilterTags+0x1e>
 8003702:	2307      	movs	r3, #7
 8003704:	e0b1      	b.n	800386a <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800370c:	2300      	movs	r3, #0
 800370e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003712:	e021      	b.n	8003758 <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 8003714:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3301      	adds	r3, #1
 8003726:	2208      	movs	r2, #8
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f00c fb0a 	bl	800fd44 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 8003730:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	3308      	adds	r3, #8
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	3301      	adds	r3, #1
 8003744:	220a      	movs	r2, #10
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f00c fafb 	bl	800fd44 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800374e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003752:	3301      	adds	r3, #1
 8003754:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003758:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800375c:	2b02      	cmp	r3, #2
 800375e:	d9d9      	bls.n	8003714 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8003764:	2100      	movs	r1, #0
 8003766:	2000      	movs	r0, #0
 8003768:	f7ff fb60 	bl	8002e2c <iso15693Initialize>
 800376c:	4603      	mov	r3, r0
 800376e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003772:	2b00      	cmp	r3, #0
 8003774:	d16e      	bne.n	8003854 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8003776:	4b40      	ldr	r3, [pc, #256]	; (8003878 <checkFilterTags+0x190>)
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2303      	movs	r3, #3
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <checkFilterTags+0x194>)
 8003780:	2200      	movs	r2, #0
 8003782:	2100      	movs	r1, #0
 8003784:	2000      	movs	r0, #0
 8003786:	f7ff fb95 	bl	8002eb4 <iso15693Inventory>
 800378a:	4603      	mov	r3, r0
 800378c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800378e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003790:	2b00      	cmp	r3, #0
 8003792:	d161      	bne.n	8003858 <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800379a:	e050      	b.n	800383e <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 800379c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4a34      	ldr	r2, [pc, #208]	; (800387c <checkFilterTags+0x194>)
 80037aa:	4413      	add	r3, r2
 80037ac:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 80037ae:	6a38      	ldr	r0, [r7, #32]
 80037b0:	f7ff fe9e 	bl	80034f0 <iso15693SelectPicc>
 80037b4:	4603      	mov	r3, r0
 80037b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d14e      	bne.n	800385c <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 80037be:	f107 021f 	add.w	r2, r7, #31
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	9302      	str	r3, [sp, #8]
 80037c8:	2311      	movs	r3, #17
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	2204      	movs	r2, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	6a38      	ldr	r0, [r7, #32]
 80037da:	f7ff feb7 	bl	800354c <iso15693ReadMultipleBlocks>
 80037de:	4603      	mov	r3, r0
 80037e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d13b      	bne.n	8003860 <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 80037e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	1c58      	adds	r0, r3, #1
 80037fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <checkFilterTags+0x194>)
 8003808:	4413      	add	r3, r2
 800380a:	3302      	adds	r3, #2
 800380c:	2208      	movs	r2, #8
 800380e:	4619      	mov	r1, r3
 8003810:	f00c fa8d 	bl	800fd2e <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 8003814:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	3308      	adds	r3, #8
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3301      	adds	r3, #1
 8003828:	f107 010c 	add.w	r1, r7, #12
 800382c:	220a      	movs	r2, #10
 800382e:	4618      	mov	r0, r3
 8003830:	f00c fa7d 	bl	800fd2e <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 8003834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003838:	3301      	adds	r3, #1
 800383a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <checkFilterTags+0x190>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003846:	429a      	cmp	r2, r3
 8003848:	d3a8      	bcc.n	800379c <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <checkFilterTags+0x190>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e006      	b.n	8003862 <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8003854:	bf00      	nop
 8003856:	e004      	b.n	8003862 <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8003860:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 8003862:	2000      	movs	r0, #0
 8003864:	f7ff fb14 	bl	8002e90 <iso15693Deinitialize>

	return err;
 8003868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800386a:	4618      	mov	r0, r3
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200002ed 	.word	0x200002ed
 8003878:	200002ee 	.word	0x200002ee
 800387c:	200002f0 	.word	0x200002f0

08003880 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <spiInit+0x2c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000714 	.word	0x20000714

080038b0 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	2200      	movs	r2, #0
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f85e 	bl	8004984 <HAL_GPIO_WritePin>
}     
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	2201      	movs	r2, #1
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f001 f84e 	bl	8004984 <HAL_GPIO_WritePin>
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <spiTxRx+0x70>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <spiTxRx+0x1a>
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e026      	b.n	8003958 <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d901      	bls.n	8003916 <spiTxRx+0x26>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e020      	b.n	8003958 <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	461a      	mov	r2, r3
 8003920:	68f9      	ldr	r1, [r7, #12]
 8003922:	4810      	ldr	r0, [pc, #64]	; (8003964 <spiTxRx+0x74>)
 8003924:	f00c fa03 	bl	800fd2e <memcpy>
 8003928:	e005      	b.n	8003936 <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	461a      	mov	r2, r3
 800392e:	2100      	movs	r1, #0
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <spiTxRx+0x74>)
 8003932:	f00c fa07 	bl	800fd44 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <spiTxRx+0x70>)
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <spiTxRx+0x54>
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	e000      	b.n	8003946 <spiTxRx+0x56>
 8003944:	4a08      	ldr	r2, [pc, #32]	; (8003968 <spiTxRx+0x78>)
 8003946:	88f9      	ldrh	r1, [r7, #6]
 8003948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	460b      	mov	r3, r1
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <spiTxRx+0x74>)
 8003952:	f004 fbe9 	bl	8008128 <HAL_SPI_TransmitReceive>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000714 	.word	0x20000714
 8003964:	20000314 	.word	0x20000314
 8003968:	20000514 	.word	0x20000514

0800396c <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 8003976:	f000 fd09 	bl	800438c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	4413      	add	r3, r2
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8003990:	f000 fcfc 	bl	800438c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da01      	bge.n	80039aa <timerIsExpired+0x22>
  {
    return true;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <timerIsExpired+0x24>
  }
  
  return false;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b8:	f000 fc82 	bl	80042c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039bc:	f000 f814 	bl	80039e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039c0:	f000 f9a8 	bl	8003d14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80039c4:	f000 f892 	bl	8003aec <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80039c8:	f000 f918 	bl	8003bfc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80039cc:	f000 f936 	bl	8003c3c <MX_SPI1_Init>
  MX_SPI2_Init();
 80039d0:	f000 f96a 	bl	8003ca8 <MX_SPI2_Init>
//  MX_USART1_UART_Init();
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 80039d4:	f00b fc70 	bl	800f2b8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80039d8:	f000 f8b6 	bl	8003b48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 80039dc:	f7fd fb14 	bl	8001008 <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 80039e0:	f7fd fb6a 	bl	80010b8 <processIOs>
 80039e4:	e7fc      	b.n	80039e0 <main+0x2c>
	...

080039e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b09a      	sub	sp, #104	; 0x68
 80039ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039f2:	2230      	movs	r2, #48	; 0x30
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00c f9a4 	bl	800fd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
 8003a1c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <SystemClock_Config+0xfc>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <SystemClock_Config+0xfc>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <SystemClock_Config+0xfc>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <SystemClock_Config+0x100>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a29      	ldr	r2, [pc, #164]	; (8003ae8 <SystemClock_Config+0x100>)
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <SystemClock_Config+0x100>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003a56:	2309      	movs	r3, #9
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a60:	2301      	movs	r3, #1
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a64:	2302      	movs	r3, #2
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003a72:	2348      	movs	r3, #72	; 0x48
 8003a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a76:	2302      	movs	r3, #2
 8003a78:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 ff26 	bl	80068d4 <HAL_RCC_OscConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003a8e:	f000 fa21 	bl	8003ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a92:	230f      	movs	r3, #15
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a96:	2302      	movs	r3, #2
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f003 f980 	bl	8006db4 <HAL_RCC_ClockConfig>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003aba:	f000 fa0b 	bl	8003ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f003 fb4f 	bl	8007170 <HAL_RCCEx_PeriphCLKConfig>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003ad8:	f000 f9fc 	bl	8003ed4 <Error_Handler>
  }
}
 8003adc:	bf00      	nop
 8003ade:	3768      	adds	r7, #104	; 0x68
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000

08003aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <MX_I2C1_Init+0x54>)
 8003af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003af8:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <MX_I2C1_Init+0x58>)
 8003afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b28:	4804      	ldr	r0, [pc, #16]	; (8003b3c <MX_I2C1_Init+0x50>)
 8003b2a:	f000 ff69 	bl	8004a00 <HAL_I2C_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b34:	f000 f9ce 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000d74 	.word	0x20000d74
 8003b40:	40005400 	.word	0x40005400
 8003b44:	00061a80 	.word	0x00061a80

08003b48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b62:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <MX_RTC_Init+0xb0>)
 8003b64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b6e:	227f      	movs	r2, #127	; 0x7f
 8003b70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b8a:	481a      	ldr	r0, [pc, #104]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003b8c:	f003 fbe0 	bl	8007350 <HAL_RTC_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003b96:	f000 f99d 	bl	8003ed4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480f      	ldr	r0, [pc, #60]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003bb6:	f003 fc5c 	bl	8007472 <HAL_RTC_SetTime>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003bc0:	f000 f988 	bl	8003ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <MX_RTC_Init+0xac>)
 8003bdc:	f003 fd06 	bl	80075ec <HAL_RTC_SetDate>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003be6:	f000 f975 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000dc8 	.word	0x20000dc8
 8003bf8:	40002800 	.word	0x40002800

08003bfc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c02:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <MX_SDIO_SD_Init+0x3c>)
 8003c04:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <MX_SDIO_SD_Init+0x38>)
 8003c26:	2202      	movs	r2, #2
 8003c28:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000de8 	.word	0x20000de8
 8003c38:	40012c00 	.word	0x40012c00

08003c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <MX_SPI1_Init+0x68>)
 8003c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c70:	2210      	movs	r2, #16
 8003c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c88:	220a      	movs	r2, #10
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c8c:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <MX_SPI1_Init+0x64>)
 8003c8e:	f004 f8b3 	bl	8007df8 <HAL_SPI_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c98:	f000 f91c 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000e6c 	.word	0x20000e6c
 8003ca4:	40013000 	.word	0x40013000

08003ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <MX_SPI2_Init+0x68>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cdc:	2208      	movs	r2, #8
 8003cde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003cf8:	4804      	ldr	r0, [pc, #16]	; (8003d0c <MX_SPI2_Init+0x64>)
 8003cfa:	f004 f87d 	bl	8007df8 <HAL_SPI_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d04:	f000 f8e6 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000d1c 	.word	0x20000d1c
 8003d10:	40003800 	.word	0x40003800

08003d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a5c      	ldr	r2, [pc, #368]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a55      	ldr	r2, [pc, #340]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a4e      	ldr	r2, [pc, #312]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a47      	ldr	r2, [pc, #284]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <MX_GPIO_Init+0x1ac>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2143      	movs	r1, #67	; 0x43
 8003dba:	4842      	ldr	r0, [pc, #264]	; (8003ec4 <MX_GPIO_Init+0x1b0>)
 8003dbc:	f000 fde2 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f240 111b 	movw	r1, #283	; 0x11b
 8003dc6:	4840      	ldr	r0, [pc, #256]	; (8003ec8 <MX_GPIO_Init+0x1b4>)
 8003dc8:	f000 fddc 	bl	8004984 <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2123      	movs	r1, #35	; 0x23
 8003dd0:	483e      	ldr	r0, [pc, #248]	; (8003ecc <MX_GPIO_Init+0x1b8>)
 8003dd2:	f000 fdd7 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8003dd6:	2343      	movs	r3, #67	; 0x43
 8003dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	4835      	ldr	r0, [pc, #212]	; (8003ec4 <MX_GPIO_Init+0x1b0>)
 8003dee:	f000 fc2f 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8003df2:	f240 131b 	movw	r3, #283	; 0x11b
 8003df6:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	482f      	ldr	r0, [pc, #188]	; (8003ec8 <MX_GPIO_Init+0x1b4>)
 8003e0c:	f000 fc20 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8003e10:	2304      	movs	r3, #4
 8003e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4619      	mov	r1, r3
 8003e22:	4829      	ldr	r0, [pc, #164]	; (8003ec8 <MX_GPIO_Init+0x1b4>)
 8003e24:	f000 fc14 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8003e28:	2310      	movs	r3, #16
 8003e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <MX_GPIO_Init+0x1bc>)
 8003e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4822      	ldr	r0, [pc, #136]	; (8003ec4 <MX_GPIO_Init+0x1b0>)
 8003e3c:	f000 fc08 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8003e40:	2323      	movs	r3, #35	; 0x23
 8003e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e44:	2301      	movs	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4619      	mov	r1, r3
 8003e56:	481d      	ldr	r0, [pc, #116]	; (8003ecc <MX_GPIO_Init+0x1b8>)
 8003e58:	f000 fbfa 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin TEMP_IRQ_Pin 
                           LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin|TEMP_IRQ_Pin 
 8003e5c:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8003e60:	617b      	str	r3, [r7, #20]
                          |LOW_BAT_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <MX_GPIO_Init+0x1bc>)
 8003e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4816      	ldr	r0, [pc, #88]	; (8003ecc <MX_GPIO_Init+0x1b8>)
 8003e72:	f000 fbed 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	480e      	ldr	r0, [pc, #56]	; (8003ec4 <MX_GPIO_Init+0x1b0>)
 8003e8a:	f000 fbe1 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8003e8e:	2310      	movs	r3, #16
 8003e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480a      	ldr	r0, [pc, #40]	; (8003ecc <MX_GPIO_Init+0x1b8>)
 8003ea2:	f000 fbd5 	bl	8004650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	200a      	movs	r0, #10
 8003eac:	f000 fb77 	bl	800459e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003eb0:	200a      	movs	r0, #10
 8003eb2:	f000 fb90 	bl	80045d6 <HAL_NVIC_EnableIRQ>

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	10110000 	.word	0x10110000

08003ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_MspInit>:
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_MspInit+0x4c>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <HAL_MspInit+0x4c>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_MspInit+0x4c>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2300      	movs	r3, #0
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_I2C_MspInit>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_I2C_MspInit+0x84>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12b      	bne.n	8003fae <HAL_I2C_MspInit+0x7a>
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	23c0      	movs	r3, #192	; 0xc0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	2312      	movs	r3, #18
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	2303      	movs	r3, #3
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	2304      	movs	r3, #4
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480c      	ldr	r0, [pc, #48]	; (8003fc0 <HAL_I2C_MspInit+0x8c>)
 8003f8e:	f000 fb5f 	bl	8004650 <HAL_GPIO_Init>
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_I2C_MspInit+0x88>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40005400 	.word	0x40005400
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020400 	.word	0x40020400

08003fc4 <HAL_RTC_MspInit>:
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <HAL_RTC_MspInit+0x24>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d102      	bne.n	8003fdc <HAL_RTC_MspInit+0x18>
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RTC_MspInit+0x28>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40002800 	.word	0x40002800
 8003fec:	42470e3c 	.word	0x42470e3c

08003ff0 <HAL_SPI_MspInit>:
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a45      	ldr	r2, [pc, #276]	; (8004124 <HAL_SPI_MspInit+0x134>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d134      	bne.n	800407c <HAL_SPI_MspInit+0x8c>
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <HAL_SPI_MspInit+0x138>)
 800401c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004020:	6453      	str	r3, [r2, #68]	; 0x44
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6313      	str	r3, [r2, #48]	; 0x30
 800403e:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	23e0      	movs	r3, #224	; 0xe0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	2302      	movs	r3, #2
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	2303      	movs	r3, #3
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
 800405a:	2305      	movs	r3, #5
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405e:	f107 031c 	add.w	r3, r7, #28
 8004062:	4619      	mov	r1, r3
 8004064:	4831      	ldr	r0, [pc, #196]	; (800412c <HAL_SPI_MspInit+0x13c>)
 8004066:	f000 faf3 	bl	8004650 <HAL_GPIO_Init>
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	2023      	movs	r0, #35	; 0x23
 8004070:	f000 fa95 	bl	800459e <HAL_NVIC_SetPriority>
 8004074:	2023      	movs	r0, #35	; 0x23
 8004076:	f000 faae 	bl	80045d6 <HAL_NVIC_EnableIRQ>
 800407a:	e04f      	b.n	800411c <HAL_SPI_MspInit+0x12c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <HAL_SPI_MspInit+0x140>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d14a      	bne.n	800411c <HAL_SPI_MspInit+0x12c>
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_SPI_MspInit+0x138>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	4a26      	ldr	r2, [pc, #152]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004094:	6413      	str	r3, [r2, #64]	; 0x40
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_SPI_MspInit+0x138>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_SPI_MspInit+0x138>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	230c      	movs	r3, #12
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	2302      	movs	r3, #2
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	2303      	movs	r3, #3
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ea:	2305      	movs	r3, #5
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ee:	f107 031c 	add.w	r3, r7, #28
 80040f2:	4619      	mov	r1, r3
 80040f4:	480f      	ldr	r0, [pc, #60]	; (8004134 <HAL_SPI_MspInit+0x144>)
 80040f6:	f000 faab 	bl	8004650 <HAL_GPIO_Init>
 80040fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	2302      	movs	r3, #2
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	2300      	movs	r3, #0
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	2303      	movs	r3, #3
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
 800410c:	2305      	movs	r3, #5
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	4619      	mov	r1, r3
 8004116:	4808      	ldr	r0, [pc, #32]	; (8004138 <HAL_SPI_MspInit+0x148>)
 8004118:	f000 fa9a 	bl	8004650 <HAL_GPIO_Init>
 800411c:	bf00      	nop
 800411e:	3730      	adds	r7, #48	; 0x30
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40013000 	.word	0x40013000
 8004128:	40023800 	.word	0x40023800
 800412c:	40020000 	.word	0x40020000
 8004130:	40003800 	.word	0x40003800
 8004134:	40020800 	.word	0x40020800
 8004138:	40020400 	.word	0x40020400

0800413c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800414e:	e7fe      	b.n	800414e <HardFault_Handler+0x4>

08004150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004154:	e7fe      	b.n	8004154 <MemManage_Handler+0x4>

08004156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415a:	e7fe      	b.n	800415a <BusFault_Handler+0x4>

0800415c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <UsageFault_Handler+0x4>

08004162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004190:	f000 f8e8 	bl	8004364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}

08004198 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800419c:	2010      	movs	r0, #16
 800419e:	f000 fc0b 	bl	80049b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 80041a2:	f009 fb95 	bl	800d8d0 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <SPI1_IRQHandler+0x10>)
 80041b2:	f004 f95b 	bl	800846c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000e6c 	.word	0x20000e6c

080041c0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <SDIO_IRQHandler+0x10>)
 80041c6:	f003 fb2b 	bl	8007820 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000de8 	.word	0x20000de8

080041d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <OTG_FS_IRQHandler+0x10>)
 80041da:	f001 fb41 	bl	8005860 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20001b64 	.word	0x20001b64

080041e8 <_sbrk>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <_sbrk+0x50>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <_sbrk+0x16>
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <_sbrk+0x50>)
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <_sbrk+0x54>)
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <_sbrk+0x50>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <_sbrk+0x50>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	466a      	mov	r2, sp
 800420e:	4293      	cmp	r3, r2
 8004210:	d907      	bls.n	8004222 <_sbrk+0x3a>
 8004212:	f00b fd43 	bl	800fc9c <__errno>
 8004216:	4602      	mov	r2, r0
 8004218:	230c      	movs	r3, #12
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
 8004220:	e006      	b.n	8004230 <_sbrk+0x48>
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <_sbrk+0x50>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	4a03      	ldr	r2, [pc, #12]	; (8004238 <_sbrk+0x50>)
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000718 	.word	0x20000718
 800423c:	20001f70 	.word	0x20001f70

08004240 <SystemInit>:
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <SystemInit+0x28>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <SystemInit+0x28>)
 800424c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <SystemInit+0x28>)
 8004256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <Reset_Handler>:
 800426c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a4 <LoopFillZerobss+0x14>
 8004270:	2100      	movs	r1, #0
 8004272:	e003      	b.n	800427c <LoopCopyDataInit>

08004274 <CopyDataInit>:
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <LoopFillZerobss+0x18>)
 8004276:	585b      	ldr	r3, [r3, r1]
 8004278:	5043      	str	r3, [r0, r1]
 800427a:	3104      	adds	r1, #4

0800427c <LoopCopyDataInit>:
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <LoopFillZerobss+0x1c>)
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <LoopFillZerobss+0x20>)
 8004280:	1842      	adds	r2, r0, r1
 8004282:	429a      	cmp	r2, r3
 8004284:	d3f6      	bcc.n	8004274 <CopyDataInit>
 8004286:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <LoopFillZerobss+0x24>)
 8004288:	e002      	b.n	8004290 <LoopFillZerobss>

0800428a <FillZerobss>:
 800428a:	2300      	movs	r3, #0
 800428c:	f842 3b04 	str.w	r3, [r2], #4

08004290 <LoopFillZerobss>:
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <LoopFillZerobss+0x28>)
 8004292:	429a      	cmp	r2, r3
 8004294:	d3f9      	bcc.n	800428a <FillZerobss>
 8004296:	f7ff ffd3 	bl	8004240 <SystemInit>
 800429a:	f00b fd05 	bl	800fca8 <__libc_init_array>
 800429e:	f7ff fb89 	bl	80039b4 <main>
 80042a2:	4770      	bx	lr
 80042a4:	20020000 	.word	0x20020000
 80042a8:	08013bc8 	.word	0x08013bc8
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000238 	.word	0x20000238
 80042b4:	20000238 	.word	0x20000238
 80042b8:	20001f70 	.word	0x20001f70

080042bc <ADC_IRQHandler>:
 80042bc:	e7fe      	b.n	80042bc <ADC_IRQHandler>
	...

080042c0 <HAL_Init>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <HAL_Init+0x40>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <HAL_Init+0x40>)
 80042ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_Init+0x40>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <HAL_Init+0x40>)
 80042d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_Init+0x40>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a07      	ldr	r2, [pc, #28]	; (8004300 <HAL_Init+0x40>)
 80042e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	2003      	movs	r0, #3
 80042ea:	f000 f94d 	bl	8004588 <HAL_NVIC_SetPriorityGrouping>
 80042ee:	2000      	movs	r0, #0
 80042f0:	f000 f808 	bl	8004304 <HAL_InitTick>
 80042f4:	f7ff fdf6 	bl	8003ee4 <HAL_MspInit>
 80042f8:	2300      	movs	r3, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40023c00 	.word	0x40023c00

08004304 <HAL_InitTick>:
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_InitTick+0x54>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_InitTick+0x58>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800431a:	fbb3 f3f1 	udiv	r3, r3, r1
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f965 	bl	80045f2 <HAL_SYSTICK_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_InitTick+0x2e>
 800432e:	2301      	movs	r3, #1
 8004330:	e00e      	b.n	8004350 <HAL_InitTick+0x4c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b0f      	cmp	r3, #15
 8004336:	d80a      	bhi.n	800434e <HAL_InitTick+0x4a>
 8004338:	2200      	movs	r2, #0
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	f000 f92d 	bl	800459e <HAL_NVIC_SetPriority>
 8004344:	4a06      	ldr	r2, [pc, #24]	; (8004360 <HAL_InitTick+0x5c>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_InitTick+0x4c>
 800434e:	2301      	movs	r3, #1
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2000004c 	.word	0x2000004c
 800435c:	20000054 	.word	0x20000054
 8004360:	20000050 	.word	0x20000050

08004364 <HAL_IncTick>:
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_IncTick+0x20>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_IncTick+0x24>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4413      	add	r3, r2
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <HAL_IncTick+0x24>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000054 	.word	0x20000054
 8004388:	20000ec4 	.word	0x20000ec4

0800438c <HAL_GetTick>:
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_GetTick+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000ec4 	.word	0x20000ec4

080043a4 <HAL_Delay>:
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	f7ff ffee 	bl	800438c <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d005      	beq.n	80043ca <HAL_Delay+0x26>
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_Delay+0x40>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	bf00      	nop
 80043cc:	f7ff ffde 	bl	800438c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d8f7      	bhi.n	80043cc <HAL_Delay+0x28>
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000054 	.word	0x20000054

080043e8 <__NVIC_SetPriorityGrouping>:
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <__NVIC_SetPriorityGrouping+0x44>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004404:	4013      	ands	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4a04      	ldr	r2, [pc, #16]	; (800442c <__NVIC_SetPriorityGrouping+0x44>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <__NVIC_GetPriorityGrouping>:
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <__NVIC_GetPriorityGrouping+0x18>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <__NVIC_EnableIRQ>:
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	2b00      	cmp	r3, #0
 800445c:	db0b      	blt.n	8004476 <__NVIC_EnableIRQ+0x2a>
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	f003 021f 	and.w	r2, r3, #31
 8004464:	4907      	ldr	r1, [pc, #28]	; (8004484 <__NVIC_EnableIRQ+0x38>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2001      	movs	r0, #1
 800446e:	fa00 f202 	lsl.w	r2, r0, r2
 8004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000e100 	.word	0xe000e100

08004488 <__NVIC_SetPriority>:
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	db0a      	blt.n	80044b2 <__NVIC_SetPriority+0x2a>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	490c      	ldr	r1, [pc, #48]	; (80044d4 <__NVIC_SetPriority+0x4c>)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	0112      	lsls	r2, r2, #4
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	440b      	add	r3, r1
 80044ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80044b0:	e00a      	b.n	80044c8 <__NVIC_SetPriority+0x40>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	4908      	ldr	r1, [pc, #32]	; (80044d8 <__NVIC_SetPriority+0x50>)
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	3b04      	subs	r3, #4
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	440b      	add	r3, r1
 80044c6:	761a      	strb	r2, [r3, #24]
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000e100 	.word	0xe000e100
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <NVIC_EncodePriority>:
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f1c3 0307 	rsb	r3, r3, #7
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	bf28      	it	cs
 80044fa:	2304      	movcs	r3, #4
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3304      	adds	r3, #4
 8004502:	2b06      	cmp	r3, #6
 8004504:	d902      	bls.n	800450c <NVIC_EncodePriority+0x30>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3b03      	subs	r3, #3
 800450a:	e000      	b.n	800450e <NVIC_EncodePriority+0x32>
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43da      	mvns	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	401a      	ands	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	409a      	lsls	r2, r3
 8004524:	f04f 31ff 	mov.w	r1, #4294967295
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	43d9      	mvns	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	400b      	ands	r3, r1
 8004534:	4313      	orrs	r3, r2
 8004536:	4618      	mov	r0, r3
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <SysTick_Config>:
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3b01      	subs	r3, #1
 8004550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004554:	d301      	bcc.n	800455a <SysTick_Config+0x16>
 8004556:	2301      	movs	r3, #1
 8004558:	e00f      	b.n	800457a <SysTick_Config+0x36>
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <SysTick_Config+0x40>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3b01      	subs	r3, #1
 8004560:	6053      	str	r3, [r2, #4]
 8004562:	210f      	movs	r1, #15
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	f7ff ff8e 	bl	8004488 <__NVIC_SetPriority>
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <SysTick_Config+0x40>)
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <SysTick_Config+0x40>)
 8004574:	2207      	movs	r2, #7
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	e000e010 	.word	0xe000e010

08004588 <HAL_NVIC_SetPriorityGrouping>:
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff29 	bl	80043e8 <__NVIC_SetPriorityGrouping>
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_NVIC_SetPriority>:
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	4603      	mov	r3, r0
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	f7ff ff3e 	bl	8004430 <__NVIC_GetPriorityGrouping>
 80045b4:	6178      	str	r0, [r7, #20]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff8e 	bl	80044dc <NVIC_EncodePriority>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff5d 	bl	8004488 <__NVIC_SetPriority>
 80045ce:	bf00      	nop
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_EnableIRQ>:
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff31 	bl	800444c <__NVIC_EnableIRQ>
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_SYSTICK_Config>:
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ffa2 	bl	8004544 <SysTick_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_DMA_Abort_IT>:
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_Abort_IT+0x1e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
 8004624:	2301      	movs	r3, #1
 8004626:	e00c      	b.n	8004642 <HAL_DMA_Abort_IT+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2205      	movs	r2, #5
 800462c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_GPIO_Init>:
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e159      	b.n	8004920 <HAL_GPIO_Init+0x2d0>
 800466c:	2201      	movs	r2, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	429a      	cmp	r2, r3
 8004686:	f040 8148 	bne.w	800491a <HAL_GPIO_Init+0x2ca>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d00b      	beq.n	80046aa <HAL_GPIO_Init+0x5a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_Init+0x5a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b11      	cmp	r3, #17
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x5a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b12      	cmp	r3, #18
 80046a8:	d130      	bne.n	800470c <HAL_GPIO_Init+0xbc>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	2201      	movs	r2, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 0201 	and.w	r2, r3, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2203      	movs	r2, #3
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	60da      	str	r2, [r3, #12]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0xfc>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b12      	cmp	r3, #18
 800474a:	d123      	bne.n	8004794 <HAL_GPIO_Init+0x144>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	08da      	lsrs	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3208      	adds	r2, #8
 8004754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	220f      	movs	r2, #15
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	08da      	lsrs	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3208      	adds	r2, #8
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0203 	and.w	r2, r3, #3
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a2 	beq.w	800491a <HAL_GPIO_Init+0x2ca>
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_GPIO_Init+0x2e4>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4a55      	ldr	r2, [pc, #340]	; (8004934 <HAL_GPIO_Init+0x2e4>)
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	6453      	str	r3, [r2, #68]	; 0x44
 80047e6:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_GPIO_Init+0x2e4>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a51      	ldr	r2, [pc, #324]	; (8004938 <HAL_GPIO_Init+0x2e8>)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a48      	ldr	r2, [pc, #288]	; (800493c <HAL_GPIO_Init+0x2ec>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d019      	beq.n	8004852 <HAL_GPIO_Init+0x202>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_GPIO_Init+0x2f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_GPIO_Init+0x1fe>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a46      	ldr	r2, [pc, #280]	; (8004944 <HAL_GPIO_Init+0x2f4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00d      	beq.n	800484a <HAL_GPIO_Init+0x1fa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a45      	ldr	r2, [pc, #276]	; (8004948 <HAL_GPIO_Init+0x2f8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <HAL_GPIO_Init+0x1f6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a44      	ldr	r2, [pc, #272]	; (800494c <HAL_GPIO_Init+0x2fc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_GPIO_Init+0x1f2>
 800483e:	2304      	movs	r3, #4
 8004840:	e008      	b.n	8004854 <HAL_GPIO_Init+0x204>
 8004842:	2307      	movs	r3, #7
 8004844:	e006      	b.n	8004854 <HAL_GPIO_Init+0x204>
 8004846:	2303      	movs	r3, #3
 8004848:	e004      	b.n	8004854 <HAL_GPIO_Init+0x204>
 800484a:	2302      	movs	r3, #2
 800484c:	e002      	b.n	8004854 <HAL_GPIO_Init+0x204>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_GPIO_Init+0x204>
 8004852:	2300      	movs	r3, #0
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	f002 0203 	and.w	r2, r2, #3
 800485a:	0092      	lsls	r2, r2, #2
 800485c:	4093      	lsls	r3, r2
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	4934      	ldr	r1, [pc, #208]	; (8004938 <HAL_GPIO_Init+0x2e8>)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	3302      	adds	r3, #2
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_GPIO_Init+0x300>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x246>
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <HAL_GPIO_Init+0x300>)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_GPIO_Init+0x300>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x270>
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	4a23      	ldr	r2, [pc, #140]	; (8004950 <HAL_GPIO_Init+0x300>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	6053      	str	r3, [r2, #4]
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_GPIO_Init+0x300>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x29a>
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_GPIO_Init+0x300>)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6093      	str	r3, [r2, #8]
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <HAL_GPIO_Init+0x300>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x2c4>
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_GPIO_Init+0x300>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	60d3      	str	r3, [r2, #12]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3301      	adds	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	f67f aea2 	bls.w	800466c <HAL_GPIO_Init+0x1c>
 8004928:	bf00      	nop
 800492a:	3724      	adds	r7, #36	; 0x24
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40023800 	.word	0x40023800
 8004938:	40013800 	.word	0x40013800
 800493c:	40020000 	.word	0x40020000
 8004940:	40020400 	.word	0x40020400
 8004944:	40020800 	.word	0x40020800
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40021000 	.word	0x40021000
 8004950:	40013c00 	.word	0x40013c00

08004954 <HAL_GPIO_ReadPin>:
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	887b      	ldrh	r3, [r7, #2]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_GPIO_ReadPin+0x1e>
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	e001      	b.n	8004976 <HAL_GPIO_ReadPin+0x22>
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_GPIO_WritePin>:
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
 8004994:	787b      	ldrb	r3, [r7, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_WritePin+0x1e>
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	e003      	b.n	80049aa <HAL_GPIO_WritePin+0x26>
 80049a2:	887b      	ldrh	r3, [r7, #2]
 80049a4:	041a      	lsls	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	619a      	str	r2, [r3, #24]
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_GPIO_EXTI_IRQHandler>:
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	80fb      	strh	r3, [r7, #6]
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <HAL_GPIO_EXTI_IRQHandler+0x24>
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	6153      	str	r3, [r2, #20]
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f806 	bl	80049e8 <HAL_GPIO_EXTI_Callback>
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_EXTI_Callback>:
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_I2C_Init>:
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2C_Init+0x12>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e11f      	b.n	8004c52 <HAL_I2C_Init+0x252>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_I2C_Init+0x2c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fa84 	bl	8003f34 <HAL_I2C_MspInit>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f002 fb70 	bl	8007148 <HAL_RCC_GetPCLK1Freq>
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4a7b      	ldr	r2, [pc, #492]	; (8004c5c <HAL_I2C_Init+0x25c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d807      	bhi.n	8004a84 <HAL_I2C_Init+0x84>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a7a      	ldr	r2, [pc, #488]	; (8004c60 <HAL_I2C_Init+0x260>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e006      	b.n	8004a92 <HAL_I2C_Init+0x92>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a77      	ldr	r2, [pc, #476]	; (8004c64 <HAL_I2C_Init+0x264>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf94      	ite	ls
 8004a8c:	2301      	movls	r3, #1
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Init+0x9a>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0db      	b.n	8004c52 <HAL_I2C_Init+0x252>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a72      	ldr	r2, [pc, #456]	; (8004c68 <HAL_I2C_Init+0x268>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0c9b      	lsrs	r3, r3, #18
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a64      	ldr	r2, [pc, #400]	; (8004c5c <HAL_I2C_Init+0x25c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d802      	bhi.n	8004ad4 <HAL_I2C_Init+0xd4>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	e009      	b.n	8004ae8 <HAL_I2C_Init+0xe8>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	4a63      	ldr	r2, [pc, #396]	; (8004c6c <HAL_I2C_Init+0x26c>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4956      	ldr	r1, [pc, #344]	; (8004c5c <HAL_I2C_Init+0x25c>)
 8004b04:	428b      	cmp	r3, r1
 8004b06:	d80d      	bhi.n	8004b24 <HAL_I2C_Init+0x124>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e59      	subs	r1, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	bf38      	it	cc
 8004b20:	2304      	movcc	r3, #4
 8004b22:	e04f      	b.n	8004bc4 <HAL_I2C_Init+0x1c4>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d111      	bne.n	8004b50 <HAL_I2C_Init+0x150>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e012      	b.n	8004b76 <HAL_I2C_Init+0x176>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	0099      	lsls	r1, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Init+0x17e>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e022      	b.n	8004bc4 <HAL_I2C_Init+0x1c4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_I2C_Init+0x1a4>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1e58      	subs	r0, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	440b      	add	r3, r1
 8004b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	e00f      	b.n	8004bc4 <HAL_I2C_Init+0x1c4>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e58      	subs	r0, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	0099      	lsls	r1, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	6809      	ldr	r1, [r1, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61cb      	str	r3, [r1, #28]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6911      	ldr	r1, [r2, #16]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	60da      	str	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c50:	2300      	movs	r3, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	000186a0 	.word	0x000186a0
 8004c60:	001e847f 	.word	0x001e847f
 8004c64:	003d08ff 	.word	0x003d08ff
 8004c68:	431bde83 	.word	0x431bde83
 8004c6c:	10624dd3 	.word	0x10624dd3

08004c70 <HAL_I2C_Mem_Read>:
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
 8004c8a:	f7ff fb7f 	bl	800438c <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	f040 8208 	bne.w	80050ae <HAL_I2C_Mem_Read+0x43e>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2319      	movs	r3, #25
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	497b      	ldr	r1, [pc, #492]	; (8004e94 <HAL_I2C_Mem_Read+0x224>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 faed 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_I2C_Mem_Read+0x48>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e1fb      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Mem_Read+0x56>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e1f4      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d007      	beq.n	8004cec <HAL_I2C_Mem_Read+0x7c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	; 0x22
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2240      	movs	r2, #64	; 0x40
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a5b      	ldr	r2, [pc, #364]	; (8004e98 <HAL_I2C_Mem_Read+0x228>)
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d2e:	88f8      	ldrh	r0, [r7, #6]
 8004d30:	893a      	ldrh	r2, [r7, #8]
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f9bc 	bl	80050bc <I2C_RequestMemoryRead>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Mem_Read+0xde>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1b0      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d113      	bne.n	8004d7e <HAL_I2C_Mem_Read+0x10e>
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e184      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d11b      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x14e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e164      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d11b      	bne.n	8004dfe <HAL_I2C_Mem_Read+0x18e>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	e144      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	e138      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	f200 80f1 	bhi.w	8005002 <HAL_I2C_Mem_Read+0x392>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d123      	bne.n	8004e70 <HAL_I2C_Mem_Read+0x200>
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fb42 	bl	80054b6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Mem_Read+0x1cc>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e139      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e6e:	e10b      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d14e      	bne.n	8004f16 <HAL_I2C_Mem_Read+0x2a6>
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4906      	ldr	r1, [pc, #24]	; (8004e9c <HAL_I2C_Mem_Read+0x22c>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fa00 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_I2C_Mem_Read+0x230>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e10e      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004e92:	bf00      	nop
 8004e94:	00100002 	.word	0x00100002
 8004e98:	ffff0000 	.word	0xffff0000
 8004e9c:	00010004 	.word	0x00010004
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f14:	e0b8      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4966      	ldr	r1, [pc, #408]	; (80050b8 <HAL_I2C_Mem_Read+0x448>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9b1 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Mem_Read+0x2c0>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0bf      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2200      	movs	r2, #0
 8004f7a:	494f      	ldr	r1, [pc, #316]	; (80050b8 <HAL_I2C_Mem_Read+0x448>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f983 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_I2C_Mem_Read+0x31c>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e091      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005000:	e042      	b.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa55 	bl	80054b6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Mem_Read+0x3a6>
 8005012:	2301      	movs	r3, #1
 8005014:	e04c      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	; 0x28
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d118      	bne.n	8005088 <HAL_I2C_Mem_Read+0x418>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f aec2 	bne.w	8004e16 <HAL_I2C_Mem_Read+0x1a6>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_I2C_Mem_Read+0x440>
 80050ae:	2302      	movs	r3, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	3728      	adds	r7, #40	; 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	00010004 	.word	0x00010004

080050bc <I2C_RequestMemoryRead>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	817b      	strh	r3, [r7, #10]
 80050ce:	460b      	mov	r3, r1
 80050d0:	813b      	strh	r3, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8c0 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <I2C_RequestMemoryRead+0x6c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <I2C_RequestMemoryRead+0x68>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
 8005124:	2303      	movs	r3, #3
 8005126:	e0a9      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 8005128:	897b      	ldrh	r3, [r7, #10]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005136:	611a      	str	r2, [r3, #16]
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	4951      	ldr	r1, [pc, #324]	; (8005284 <I2C_RequestMemoryRead+0x1c8>)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f8f9 	bl	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_RequestMemoryRead+0x92>
 800514a:	2301      	movs	r3, #1
 800514c:	e096      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	6a39      	ldr	r1, [r7, #32]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f963 	bl	8005434 <I2C_WaitOnTXEFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <I2C_RequestMemoryRead+0xd4>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2b04      	cmp	r3, #4
 800517a:	d107      	bne.n	800518c <I2C_RequestMemoryRead+0xd0>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	e075      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <I2C_RequestMemoryRead+0xe6>
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
 80051a0:	e021      	b.n	80051e6 <I2C_RequestMemoryRead+0x12a>
 80051a2:	893b      	ldrh	r3, [r7, #8]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	6a39      	ldr	r1, [r7, #32]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f93d 	bl	8005434 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <I2C_RequestMemoryRead+0x120>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d107      	bne.n	80051d8 <I2C_RequestMemoryRead+0x11c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	2301      	movs	r3, #1
 80051da:	e04f      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	611a      	str	r2, [r3, #16]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	6a39      	ldr	r1, [r7, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f922 	bl	8005434 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <I2C_RequestMemoryRead+0x156>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d107      	bne.n	800520e <I2C_RequestMemoryRead+0x152>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	2301      	movs	r3, #1
 8005210:	e034      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2200      	movs	r2, #0
 800522a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f82a 	bl	8005288 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <I2C_RequestMemoryRead+0x198>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <I2C_RequestMemoryRead+0x194>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
 8005250:	2303      	movs	r3, #3
 8005252:	e013      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 8005254:	897b      	ldrh	r3, [r7, #10]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	6a3a      	ldr	r2, [r7, #32]
 8005268:	4906      	ldr	r1, [pc, #24]	; (8005284 <I2C_RequestMemoryRead+0x1c8>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f863 	bl	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_RequestMemoryRead+0x1be>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <I2C_RequestMemoryRead+0x1c0>
 800527a:	2300      	movs	r3, #0
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00010002 	.word	0x00010002

08005288 <I2C_WaitOnFlagUntilTimeout>:
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
 8005298:	e025      	b.n	80052e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d021      	beq.n	80052e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80052a2:	f7ff f873 	bl	800438c <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d116      	bne.n	80052e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052e2:	2301      	movs	r3, #1
 80052e4:	e023      	b.n	800532e <I2C_WaitOnFlagUntilTimeout+0xa6>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10d      	bne.n	800530c <I2C_WaitOnFlagUntilTimeout+0x84>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	43da      	mvns	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	e00c      	b.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	43da      	mvns	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0b6      	beq.n	800529a <I2C_WaitOnFlagUntilTimeout+0x12>
 800532c:	2300      	movs	r3, #0
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	e051      	b.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d123      	bne.n	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800536e:	615a      	str	r2, [r3, #20]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800539a:	2301      	movs	r3, #1
 800539c:	e046      	b.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d021      	beq.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80053a6:	f7fe fff1 	bl	800438c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053e6:	2301      	movs	r3, #1
 80053e8:	e020      	b.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10c      	bne.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf14      	ite	ne
 8005406:	2301      	movne	r3, #1
 8005408:	2300      	moveq	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e00b      	b.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	43da      	mvns	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d18d      	bne.n	8005346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800542a:	2300      	movs	r3, #0
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	e02d      	b.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f88d 	bl	8005562 <I2C_IsAcknowledgeFailed>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800544e:	2301      	movs	r3, #1
 8005450:	e02d      	b.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d021      	beq.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800545a:	f7fe ff97 	bl	800438c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d116      	bne.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800549a:	2301      	movs	r3, #1
 800549c:	e007      	b.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d1ca      	bne.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80054ac:	2300      	movs	r3, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	e042      	b.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d119      	bne.n	8005506 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f06f 0210 	mvn.w	r2, #16
 80054da:	615a      	str	r2, [r3, #20]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005502:	2301      	movs	r3, #1
 8005504:	e029      	b.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8005506:	f7fe ff41 	bl	800438c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d116      	bne.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005546:	2301      	movs	r3, #1
 8005548:	e007      	b.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d1b5      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8005558:	2300      	movs	r3, #0
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_IsAcknowledgeFailed>:
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005578:	d11b      	bne.n	80055b2 <I2C_IsAcknowledgeFailed+0x50>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005582:	615a      	str	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0204 	orr.w	r2, r3, #4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <I2C_IsAcknowledgeFailed+0x52>
 80055b2:	2300      	movs	r3, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_PCD_Init>:
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	b08f      	sub	sp, #60	; 0x3c
 80055c4:	af0a      	add	r7, sp, #40	; 0x28
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_PCD_Init+0x12>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e10f      	b.n	80057f2 <HAL_PCD_Init+0x232>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_PCD_Init+0x32>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f00a f847 	bl	800f680 <HAL_PCD_MspInit>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2203      	movs	r2, #3
 80055f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_PCD_Init+0x4c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f003 fba2 	bl	8008d5a <USB_DisableGlobalInt>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	687e      	ldr	r6, [r7, #4]
 800561e:	466d      	mov	r5, sp
 8005620:	f106 0410 	add.w	r4, r6, #16
 8005624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800562a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800562c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005630:	e885 0003 	stmia.w	r5, {r0, r1}
 8005634:	1d33      	adds	r3, r6, #4
 8005636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005638:	6838      	ldr	r0, [r7, #0]
 800563a:	f003 fa79 	bl	8008b30 <USB_CoreInit>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_PCD_Init+0x90>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800564c:	2301      	movs	r3, #1
 800564e:	e0d0      	b.n	80057f2 <HAL_PCD_Init+0x232>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fb90 	bl	8008d7c <USB_SetCurrentMode>
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	e04a      	b.n	80056f8 <HAL_PCD_Init+0x138>
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	333d      	adds	r3, #61	; 0x3d
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	7bfa      	ldrb	r2, [r7, #15]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	333c      	adds	r3, #60	; 0x3c
 8005686:	7bfa      	ldrb	r2, [r7, #15]
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	b298      	uxth	r0, r3
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3342      	adds	r3, #66	; 0x42
 800569e:	4602      	mov	r2, r0
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	333f      	adds	r3, #63	; 0x3f
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	7bfa      	ldrb	r2, [r7, #15]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3344      	adds	r3, #68	; 0x44
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	7bfa      	ldrb	r2, [r7, #15]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3348      	adds	r3, #72	; 0x48
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	7bfa      	ldrb	r2, [r7, #15]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	3350      	adds	r3, #80	; 0x50
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	3301      	adds	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3af      	bcc.n	8005662 <HAL_PCD_Init+0xa2>
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
 8005706:	e044      	b.n	8005792 <HAL_PCD_Init+0x1d2>
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	3301      	adds	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d3b5      	bcc.n	8005708 <HAL_PCD_Init+0x148>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	687e      	ldr	r6, [r7, #4]
 80057a4:	466d      	mov	r5, sp
 80057a6:	f106 0410 	add.w	r4, r6, #16
 80057aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80057ba:	1d33      	adds	r3, r6, #4
 80057bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057be:	6838      	ldr	r0, [r7, #0]
 80057c0:	f003 fb06 	bl	8008dd0 <USB_DevInit>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_PCD_Init+0x216>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 80057d2:	2301      	movs	r3, #1
 80057d4:	e00d      	b.n	80057f2 <HAL_PCD_Init+0x232>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 fafb 	bl	8009de6 <USB_DevDisconnect>
 80057f0:	2300      	movs	r3, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fa <HAL_PCD_Start>:
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_PCD_Start+0x1c>
 8005812:	2302      	movs	r3, #2
 8005814:	e020      	b.n	8005858 <HAL_PCD_Start+0x5e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	2b01      	cmp	r3, #1
 8005824:	d109      	bne.n	800583a <HAL_PCD_Start+0x40>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d005      	beq.n	800583a <HAL_PCD_Start+0x40>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f004 fab9 	bl	8009db6 <USB_DevConnect>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f003 fa75 	bl	8008d38 <USB_EnableGlobalInt>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8005856:	2300      	movs	r3, #0
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_PCD_IRQHandler>:
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b08d      	sub	sp, #52	; 0x34
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f004 fb60 	bl	8009f3c <USB_GetMode>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 838e 	bne.w	8005fa0 <HAL_PCD_IRQHandler+0x740>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f004 fac4 	bl	8009e16 <USB_ReadInterrupts>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8384 	beq.w	8005f9e <HAL_PCD_IRQHandler+0x73e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f004 fabb 	bl	8009e16 <USB_ReadInterrupts>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d107      	bne.n	80058ba <HAL_PCD_IRQHandler+0x5a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 0202 	and.w	r2, r2, #2
 80058b8:	615a      	str	r2, [r3, #20]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f004 faa9 	bl	8009e16 <USB_ReadInterrupts>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058ce:	d17b      	bne.n	80059c8 <HAL_PCD_IRQHandler+0x168>
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 faaf 	bl	8009e3c <USB_ReadDevAllOutEpInterrupt>
 80058de:	62b8      	str	r0, [r7, #40]	; 0x28
 80058e0:	e06f      	b.n	80059c2 <HAL_PCD_IRQHandler+0x162>
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d064      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x156>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f004 fad4 	bl	8009ea4 <USB_ReadDevOutEPInterrupt>
 80058fc:	61b8      	str	r0, [r7, #24]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_PCD_IRQHandler+0xc2>
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	461a      	mov	r2, r3
 8005916:	2301      	movs	r3, #1
 8005918:	6093      	str	r3, [r2, #8]
 800591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fe0d 	bl	800653c <PCD_EP_OutXfrComplete_int>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_PCD_IRQHandler+0xe6>
 800592c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 ff0c 	bl	800674c <PCD_EP_OutSetupPacket_int>
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	2308      	movs	r3, #8
 8005944:	6093      	str	r3, [r2, #8]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_PCD_IRQHandler+0x102>
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	2310      	movs	r3, #16
 8005960:	6093      	str	r3, [r2, #8]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_PCD_IRQHandler+0x138>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d108      	bne.n	8005986 <HAL_PCD_IRQHandler+0x126>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800597e:	461a      	mov	r2, r3
 8005980:	2101      	movs	r1, #1
 8005982:	f004 fb1f 	bl	8009fc4 <USB_EP0_OutStart>
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	461a      	mov	r2, r3
 8005994:	2320      	movs	r3, #32
 8005996:	6093      	str	r3, [r2, #8]
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x156>
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	461a      	mov	r2, r3
 80059b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b4:	6093      	str	r3, [r2, #8]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3301      	adds	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d18c      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x82>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fa22 	bl	8009e16 <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059dc:	f040 80c4 	bne.w	8005b68 <HAL_PCD_IRQHandler+0x308>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 fa43 	bl	8009e70 <USB_ReadDevAllInEpInterrupt>
 80059ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80059ec:	2300      	movs	r3, #0
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	e0b6      	b.n	8005b60 <HAL_PCD_IRQHandler+0x300>
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80ab 	beq.w	8005b54 <HAL_PCD_IRQHandler+0x2f4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f004 fa69 	bl	8009ee0 <USB_ReadDevInEPInterrupt>
 8005a0e:	61b8      	str	r0, [r7, #24]
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d05b      	beq.n	8005ad2 <HAL_PCD_IRQHandler+0x272>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2201      	movs	r2, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69f9      	ldr	r1, [r7, #28]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d11b      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x230>
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	3348      	adds	r3, #72	; 0x48
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4403      	add	r3, r0
 8005a78:	3344      	adds	r3, #68	; 0x44
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4419      	add	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4403      	add	r3, r0
 8005a8c:	3348      	adds	r3, #72	; 0x48
 8005a8e:	6019      	str	r1, [r3, #0]
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f009 fe8b 	bl	800f7b2 <HAL_PCD_DataInStageCallback>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d116      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x272>
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d113      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x272>
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3350      	adds	r3, #80	; 0x50
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d108      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x272>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005aca:	461a      	mov	r2, r3
 8005acc:	2101      	movs	r1, #1
 8005ace:	f004 fa79 	bl	8009fc4 <USB_EP0_OutStart>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_PCD_IRQHandler+0x28e>
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2308      	movs	r3, #8
 8005aec:	6093      	str	r3, [r2, #8]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_PCD_IRQHandler+0x2aa>
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	2310      	movs	r3, #16
 8005b08:	6093      	str	r3, [r2, #8]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_PCD_IRQHandler+0x2c6>
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	461a      	mov	r2, r3
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	6093      	str	r3, [r2, #8]
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_PCD_IRQHandler+0x2e2>
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2302      	movs	r3, #2
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_PCD_IRQHandler+0x2f4>
 8005b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fc67 	bl	8006422 <PCD_WriteEmptyTxFifo>
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	3301      	adds	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f47f af45 	bne.w	80059f2 <HAL_PCD_IRQHandler+0x192>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f004 f952 	bl	8009e16 <USB_ReadInterrupts>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7c:	d122      	bne.n	8005bc4 <HAL_PCD_IRQHandler+0x364>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d108      	bne.n	8005bae <HAL_PCD_IRQHandler+0x34e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fe88 	bl	80068bc <HAL_PCDEx_LPM_Callback>
 8005bac:	e002      	b.n	8005bb4 <HAL_PCD_IRQHandler+0x354>
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f009 fe6c 	bl	800f88c <HAL_PCD_ResumeCallback>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bc2:	615a      	str	r2, [r3, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f004 f924 	bl	8009e16 <USB_ReadInterrupts>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d112      	bne.n	8005c00 <HAL_PCD_IRQHandler+0x3a0>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d102      	bne.n	8005bf0 <HAL_PCD_IRQHandler+0x390>
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f009 fe28 	bl	800f840 <HAL_PCD_SuspendCallback>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bfe:	615a      	str	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f004 f906 	bl	8009e16 <USB_ReadInterrupts>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c14:	f040 80a7 	bne.w	8005d66 <HAL_PCD_IRQHandler+0x506>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6053      	str	r3, [r2, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2110      	movs	r1, #16
 8005c32:	4618      	mov	r0, r3
 8005c34:	f003 fa3e 	bl	80090b4 <USB_FlushTxFifo>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3c:	e036      	b.n	8005cac <HAL_PCD_IRQHandler+0x44c>
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c50:	6093      	str	r3, [r2, #8]
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c84:	6093      	str	r3, [r2, #8]
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	3301      	adds	r3, #1
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3c3      	bcc.n	8005c3e <HAL_PCD_IRQHandler+0x3de>
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cc8:	61d3      	str	r3, [r2, #28]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x4a0>
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce2:	f043 030b 	orr.w	r3, r3, #11
 8005ce6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf8:	f043 030b 	orr.w	r3, r3, #11
 8005cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005cfe:	e015      	b.n	8005d2c <HAL_PCD_IRQHandler+0x4cc>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d16:	6153      	str	r3, [r2, #20]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d26:	f043 030b 	orr.w	r3, r3, #11
 8005d2a:	6113      	str	r3, [r2, #16]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	b2d9      	uxtb	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d50:	461a      	mov	r2, r3
 8005d52:	f004 f937 	bl	8009fc4 <USB_EP0_OutStart>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d64:	615a      	str	r2, [r3, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f004 f853 	bl	8009e16 <USB_ReadInterrupts>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d124      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x566>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f004 f8e9 	bl	8009f58 <USB_ActivateSetup>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f003 f9f3 	bl	8009176 <USB_GetDevSpeed>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681c      	ldr	r4, [r3, #0]
 8005d9c:	f001 f9c8 	bl	8007130 <HAL_RCC_GetHCLKFreq>
 8005da0:	4601      	mov	r1, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4620      	mov	r0, r4
 8005dac:	f002 ff22 	bl	8008bf4 <USB_SetTurnaroundTime>
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f009 fd26 	bl	800f802 <HAL_PCD_ResetCallback>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f004 f823 	bl	8009e16 <USB_ReadInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d161      	bne.n	8005e9e <HAL_PCD_IRQHandler+0x63e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0210 	bic.w	r2, r2, #16
 8005de8:	619a      	str	r2, [r3, #24]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f003 020f 	and.w	r2, r3, #15
 8005df6:	4613      	mov	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	3304      	adds	r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	0c5b      	lsrs	r3, r3, #17
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d124      	bne.n	8005e60 <HAL_PCD_IRQHandler+0x600>
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d035      	beq.n	8005e8e <HAL_PCD_IRQHandler+0x62e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	6a38      	ldr	r0, [r7, #32]
 8005e36:	f003 fe9b 	bl	8009b70 <USB_ReadPacket>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e46:	441a      	add	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e58:	441a      	add	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	e016      	b.n	8005e8e <HAL_PCD_IRQHandler+0x62e>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	0c5b      	lsrs	r3, r3, #17
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d110      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x62e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e72:	2208      	movs	r2, #8
 8005e74:	4619      	mov	r1, r3
 8005e76:	6a38      	ldr	r0, [r7, #32]
 8005e78:	f003 fe7a 	bl	8009b70 <USB_ReadPacket>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	619a      	str	r2, [r3, #24]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0210 	orr.w	r2, r2, #16
 8005e9c:	619a      	str	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f003 ffb7 	bl	8009e16 <USB_ReadInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x668>
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f009 fc97 	bl	800f7e6 <HAL_PCD_SOFCallback>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f002 0208 	and.w	r2, r2, #8
 8005ec6:	615a      	str	r2, [r3, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f003 ffa2 	bl	8009e16 <USB_ReadInterrupts>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005edc:	d10f      	bne.n	8005efe <HAL_PCD_IRQHandler+0x69e>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f009 fcef 	bl	800f8cc <HAL_PCD_ISOINIncompleteCallback>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005efc:	615a      	str	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f003 ff87 	bl	8009e16 <USB_ReadInterrupts>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f12:	d10f      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x6d4>
 8005f14:	2300      	movs	r3, #0
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f009 fcc2 	bl	800f8a8 <HAL_PCD_ISOOUTIncompleteCallback>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f32:	615a      	str	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f003 ff6c 	bl	8009e16 <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d10a      	bne.n	8005f60 <HAL_PCD_IRQHandler+0x700>
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f009 fcd0 	bl	800f8f0 <HAL_PCD_ConnectCallback>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f5e:	615a      	str	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f003 ff56 	bl	8009e16 <USB_ReadInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d115      	bne.n	8005fa0 <HAL_PCD_IRQHandler+0x740>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_PCD_IRQHandler+0x72c>
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f009 fcc0 	bl	800f90c <HAL_PCD_DisconnectCallback>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	e000      	b.n	8005fa0 <HAL_PCD_IRQHandler+0x740>
 8005f9e:	bf00      	nop
 8005fa0:	3734      	adds	r7, #52	; 0x34
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}

08005fa6 <HAL_PCD_SetAddress>:
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_PCD_SetAddress+0x1a>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e013      	b.n	8005fe8 <HAL_PCD_SetAddress+0x42>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f003 fec6 	bl	8009d6a <USB_SetDevAddress>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_PCD_EP_Open>:
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	70fb      	strb	r3, [r7, #3]
 8006002:	460b      	mov	r3, r1
 8006004:	803b      	strh	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	70bb      	strb	r3, [r7, #2]
 800600a:	2300      	movs	r3, #0
 800600c:	72fb      	strb	r3, [r7, #11]
 800600e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da0f      	bge.n	8006036 <HAL_PCD_EP_Open+0x46>
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	3338      	adds	r3, #56	; 0x38
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	705a      	strb	r2, [r3, #1]
 8006034:	e00f      	b.n	8006056 <HAL_PCD_EP_Open+0x66>
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	3304      	adds	r3, #4
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	705a      	strb	r2, [r3, #1]
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	883a      	ldrh	r2, [r7, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	78ba      	ldrb	r2, [r7, #2]
 800606c:	70da      	strb	r2, [r3, #3]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_PCD_EP_Open+0x90>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	80da      	strh	r2, [r3, #6]
 8006080:	78bb      	ldrb	r3, [r7, #2]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d102      	bne.n	800608c <HAL_PCD_EP_Open+0x9c>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	711a      	strb	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_PCD_EP_Open+0xaa>
 8006096:	2302      	movs	r3, #2
 8006098:	e00e      	b.n	80060b8 <HAL_PCD_EP_Open+0xc8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f003 f889 	bl	80091c0 <USB_ActivateEndpoint>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_PCD_EP_Close>:
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
 80060cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da0f      	bge.n	80060f4 <HAL_PCD_EP_Close+0x34>
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 020f 	and.w	r2, r3, #15
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	3338      	adds	r3, #56	; 0x38
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	705a      	strb	r2, [r3, #1]
 80060f2:	e00f      	b.n	8006114 <HAL_PCD_EP_Close+0x54>
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	705a      	strb	r2, [r3, #1]
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_PCD_EP_Close+0x6e>
 800612a:	2302      	movs	r3, #2
 800612c:	e00e      	b.n	800614c <HAL_PCD_EP_Close+0x8c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	4618      	mov	r0, r3
 800613e:	f003 f8c7 	bl	80092d0 <USB_DeactivateEndpoint>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800614a:	2300      	movs	r3, #0
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_EP_Receive>:
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	460b      	mov	r3, r1
 8006162:	72fb      	strb	r3, [r7, #11]
 8006164:	7afb      	ldrb	r3, [r7, #11]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	3304      	adds	r3, #4
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	615a      	str	r2, [r3, #20]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	619a      	str	r2, [r3, #24]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	705a      	strb	r2, [r3, #1]
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	b2da      	uxtb	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <HAL_PCD_EP_Receive+0x5c>
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	611a      	str	r2, [r3, #16]
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_PCD_EP_Receive+0x7a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6979      	ldr	r1, [r7, #20]
 80061c8:	f003 fb4a 	bl	8009860 <USB_EP0StartXfer>
 80061cc:	e008      	b.n	80061e0 <HAL_PCD_EP_Receive+0x8c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6979      	ldr	r1, [r7, #20]
 80061dc:	f003 f8fc 	bl	80093d8 <USB_EPStartXfer>
 80061e0:	2300      	movs	r3, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_EP_GetRxCount>:
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_PCD_EP_Transmit>:
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	460b      	mov	r3, r1
 8006228:	72fb      	strb	r3, [r7, #11]
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	4613      	mov	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	3338      	adds	r3, #56	; 0x38
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	615a      	str	r2, [r3, #20]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2201      	movs	r2, #1
 8006258:	705a      	strb	r2, [r3, #1]
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	b2da      	uxtb	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d102      	bne.n	8006274 <HAL_PCD_EP_Transmit+0x5a>
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	611a      	str	r2, [r3, #16]
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <HAL_PCD_EP_Transmit+0x78>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	f003 fae8 	bl	8009860 <USB_EP0StartXfer>
 8006290:	e008      	b.n	80062a4 <HAL_PCD_EP_Transmit+0x8a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	f003 f89a 	bl	80093d8 <USB_EPStartXfer>
 80062a4:	2300      	movs	r3, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_PCD_EP_SetStall>:
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d901      	bls.n	80062cc <HAL_PCD_EP_SetStall+0x1e>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e050      	b.n	800636e <HAL_PCD_EP_SetStall+0xc0>
 80062cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da0f      	bge.n	80062f4 <HAL_PCD_EP_SetStall+0x46>
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	f003 020f 	and.w	r2, r3, #15
 80062da:	4613      	mov	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	3338      	adds	r3, #56	; 0x38
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	3304      	adds	r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	705a      	strb	r2, [r3, #1]
 80062f2:	e00d      	b.n	8006310 <HAL_PCD_EP_SetStall+0x62>
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	4613      	mov	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	3304      	adds	r3, #4
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	705a      	strb	r2, [r3, #1]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	709a      	strb	r2, [r3, #2]
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	b2da      	uxtb	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_PCD_EP_SetStall+0x82>
 800632c:	2302      	movs	r3, #2
 800632e:	e01e      	b.n	800636e <HAL_PCD_EP_SetStall+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68f9      	ldr	r1, [r7, #12]
 800633e:	4618      	mov	r0, r3
 8006340:	f003 fc3f 	bl	8009bc2 <USB_EPSetStall>
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_PCD_EP_SetStall+0xb6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	b2d9      	uxtb	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800635e:	461a      	mov	r2, r3
 8006360:	f003 fe30 	bl	8009fc4 <USB_EP0_OutStart>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800636c:	2300      	movs	r3, #0
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_PCD_EP_ClrStall>:
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d901      	bls.n	8006394 <HAL_PCD_EP_ClrStall+0x1e>
 8006390:	2301      	movs	r3, #1
 8006392:	e042      	b.n	800641a <HAL_PCD_EP_ClrStall+0xa4>
 8006394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006398:	2b00      	cmp	r3, #0
 800639a:	da0f      	bge.n	80063bc <HAL_PCD_EP_ClrStall+0x46>
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	3338      	adds	r3, #56	; 0x38
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	3304      	adds	r3, #4
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	705a      	strb	r2, [r3, #1]
 80063ba:	e00f      	b.n	80063dc <HAL_PCD_EP_ClrStall+0x66>
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	4613      	mov	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	3304      	adds	r3, #4
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	705a      	strb	r2, [r3, #1]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	709a      	strb	r2, [r3, #2]
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_PCD_EP_ClrStall+0x86>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e00e      	b.n	800641a <HAL_PCD_EP_ClrStall+0xa4>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	4618      	mov	r0, r3
 800640c:	f003 fc47 	bl	8009c9e <USB_EPClearStall>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8006418:	2300      	movs	r3, #0
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <PCD_WriteEmptyTxFifo>:
 8006422:	b580      	push	{r7, lr}
 8006424:	b08a      	sub	sp, #40	; 0x28
 8006426:	af02      	add	r7, sp, #8
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	3338      	adds	r3, #56	; 0x38
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	3304      	adds	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	429a      	cmp	r2, r3
 8006454:	d901      	bls.n	800645a <PCD_WriteEmptyTxFifo+0x38>
 8006456:	2301      	movs	r3, #1
 8006458:	e06c      	b.n	8006534 <PCD_WriteEmptyTxFifo+0x112>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	429a      	cmp	r2, r3
 800646e:	d902      	bls.n	8006476 <PCD_WriteEmptyTxFifo+0x54>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3303      	adds	r3, #3
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e02b      	b.n	80064d8 <PCD_WriteEmptyTxFifo+0xb6>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	429a      	cmp	r2, r3
 8006494:	d902      	bls.n	800649c <PCD_WriteEmptyTxFifo+0x7a>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3303      	adds	r3, #3
 80064a0:	089b      	lsrs	r3, r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	b298      	uxth	r0, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	6978      	ldr	r0, [r7, #20]
 80064bc:	f003 fb23 	bl	8009b06 <USB_WritePacket>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	441a      	add	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	619a      	str	r2, [r3, #24]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d809      	bhi.n	8006502 <PCD_WriteEmptyTxFifo+0xe0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d203      	bcs.n	8006502 <PCD_WriteEmptyTxFifo+0xe0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1be      	bne.n	8006480 <PCD_WriteEmptyTxFifo+0x5e>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	429a      	cmp	r2, r3
 800650c:	d811      	bhi.n	8006532 <PCD_WriteEmptyTxFifo+0x110>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	2201      	movs	r2, #1
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	43db      	mvns	r3, r3
 8006528:	6939      	ldr	r1, [r7, #16]
 800652a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652e:	4013      	ands	r3, r2
 8006530:	634b      	str	r3, [r1, #52]	; 0x34
 8006532:	2300      	movs	r3, #0
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <PCD_EP_OutXfrComplete_int>:
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	333c      	adds	r3, #60	; 0x3c
 8006554:	3304      	adds	r3, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b01      	cmp	r3, #1
 8006570:	f040 80b3 	bne.w	80066da <PCD_EP_OutXfrComplete_int+0x19e>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d028      	beq.n	80065d0 <PCD_EP_OutXfrComplete_int+0x94>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a70      	ldr	r2, [pc, #448]	; (8006744 <PCD_EP_OutXfrComplete_int+0x208>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d90e      	bls.n	80065a4 <PCD_EP_OutXfrComplete_int+0x68>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <PCD_EP_OutXfrComplete_int+0x68>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	6093      	str	r3, [r2, #8]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f009 f8d7 	bl	800f758 <HAL_PCD_SetupStageCallback>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065b4:	461a      	mov	r2, r3
 80065b6:	2101      	movs	r1, #1
 80065b8:	f003 fd04 	bl	8009fc4 <USB_EP0_OutStart>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	461a      	mov	r2, r3
 80065ca:	2308      	movs	r3, #8
 80065cc:	6093      	str	r3, [r2, #8]
 80065ce:	e0b3      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <PCD_EP_OutXfrComplete_int+0xb2>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	2320      	movs	r3, #32
 80065ea:	6093      	str	r3, [r2, #8]
 80065ec:	e0a4      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 809f 	bne.w	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a51      	ldr	r2, [pc, #324]	; (8006744 <PCD_EP_OutXfrComplete_int+0x208>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d90f      	bls.n	8006622 <PCD_EP_OutXfrComplete_int+0xe6>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <PCD_EP_OutXfrComplete_int+0xe6>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	6093      	str	r3, [r2, #8]
 8006620:	e08a      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	0159      	lsls	r1, r3, #5
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	440b      	add	r3, r1
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	1ad1      	subs	r1, r2, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4403      	add	r3, r0
 8006658:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4403      	add	r3, r0
 8006680:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4419      	add	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4403      	add	r3, r0
 8006696:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f009 f86a 	bl	800f77c <HAL_PCD_DataOutStageCallback>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d144      	bne.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d138      	bne.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066d0:	461a      	mov	r2, r3
 80066d2:	2101      	movs	r1, #1
 80066d4:	f003 fc76 	bl	8009fc4 <USB_EP0_OutStart>
 80066d8:	e02e      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <PCD_EP_OutXfrComplete_int+0x20c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d124      	bne.n	800672c <PCD_EP_OutXfrComplete_int+0x1f0>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <PCD_EP_OutXfrComplete_int+0x1c6>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	6093      	str	r3, [r2, #8]
 8006700:	e01a      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <PCD_EP_OutXfrComplete_int+0x1e2>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	461a      	mov	r2, r3
 800671a:	2320      	movs	r3, #32
 800671c:	6093      	str	r3, [r2, #8]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f009 f829 	bl	800f77c <HAL_PCD_DataOutStageCallback>
 800672a:	e005      	b.n	8006738 <PCD_EP_OutXfrComplete_int+0x1fc>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f009 f822 	bl	800f77c <HAL_PCD_DataOutStageCallback>
 8006738:	2300      	movs	r3, #0
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	4f54300a 	.word	0x4f54300a
 8006748:	4f54310a 	.word	0x4f54310a

0800674c <PCD_EP_OutSetupPacket_int>:
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	333c      	adds	r3, #60	; 0x3c
 8006764:	3304      	adds	r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d113      	bne.n	80067aa <PCD_EP_OutSetupPacket_int+0x5e>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <PCD_EP_OutSetupPacket_int+0xb8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d922      	bls.n	80067d0 <PCD_EP_OutSetupPacket_int+0x84>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01d      	beq.n	80067d0 <PCD_EP_OutSetupPacket_int+0x84>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	461a      	mov	r2, r3
 80067a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a6:	6093      	str	r3, [r2, #8]
 80067a8:	e012      	b.n	80067d0 <PCD_EP_OutSetupPacket_int+0x84>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <PCD_EP_OutSetupPacket_int+0xbc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10e      	bne.n	80067d0 <PCD_EP_OutSetupPacket_int+0x84>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <PCD_EP_OutSetupPacket_int+0x84>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	6093      	str	r3, [r2, #8]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f008 ffc1 	bl	800f758 <HAL_PCD_SetupStageCallback>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <PCD_EP_OutSetupPacket_int+0xb8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d90c      	bls.n	80067f8 <PCD_EP_OutSetupPacket_int+0xac>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <PCD_EP_OutSetupPacket_int+0xac>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067f0:	461a      	mov	r2, r3
 80067f2:	2101      	movs	r1, #1
 80067f4:	f003 fbe6 	bl	8009fc4 <USB_EP0_OutStart>
 80067f8:	2300      	movs	r3, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	4f54300a 	.word	0x4f54300a
 8006808:	4f54310a 	.word	0x4f54310a

0800680c <HAL_PCDEx_SetTxFiFo>:
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
 8006818:	4613      	mov	r3, r2
 800681a:	803b      	strh	r3, [r7, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	60bb      	str	r3, [r7, #8]
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_PCDEx_SetTxFiFo+0x2e>
 800682a:	883b      	ldrh	r3, [r7, #0]
 800682c:	0419      	lsls	r1, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	430a      	orrs	r2, r1
 8006836:	629a      	str	r2, [r3, #40]	; 0x28
 8006838:	e028      	b.n	800688c <HAL_PCDEx_SetTxFiFo+0x80>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
 800684c:	e00d      	b.n	800686a <HAL_PCDEx_SetTxFiFo+0x5e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	3340      	adds	r3, #64	; 0x40
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4413      	add	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	3301      	adds	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	3b01      	subs	r3, #1
 8006870:	429a      	cmp	r2, r3
 8006872:	d3ec      	bcc.n	800684e <HAL_PCDEx_SetTxFiFo+0x42>
 8006874:	883b      	ldrh	r3, [r7, #0]
 8006876:	0418      	lsls	r0, r3, #16
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6819      	ldr	r1, [r3, #0]
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	3b01      	subs	r3, #1
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4302      	orrs	r2, r0
 8006884:	3340      	adds	r3, #64	; 0x40
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	2300      	movs	r3, #0
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_PCDEx_SetRxFiFo>:
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	807b      	strh	r3, [r7, #2]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	887a      	ldrh	r2, [r7, #2]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
 80068ae:	2300      	movs	r3, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_PCDEx_LPM_Callback>:
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_RCC_OscConfig>:
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_RCC_OscConfig+0x12>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e25b      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d075      	beq.n	80069de <HAL_RCC_OscConfig+0x10a>
 80068f2:	4ba3      	ldr	r3, [pc, #652]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d00c      	beq.n	8006918 <HAL_RCC_OscConfig+0x44>
 80068fe:	4ba0      	ldr	r3, [pc, #640]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b08      	cmp	r3, #8
 8006908:	d112      	bne.n	8006930 <HAL_RCC_OscConfig+0x5c>
 800690a:	4b9d      	ldr	r3, [pc, #628]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006916:	d10b      	bne.n	8006930 <HAL_RCC_OscConfig+0x5c>
 8006918:	4b99      	ldr	r3, [pc, #612]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d05b      	beq.n	80069dc <HAL_RCC_OscConfig+0x108>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d157      	bne.n	80069dc <HAL_RCC_OscConfig+0x108>
 800692c:	2301      	movs	r3, #1
 800692e:	e236      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	d106      	bne.n	8006948 <HAL_RCC_OscConfig+0x74>
 800693a:	4b91      	ldr	r3, [pc, #580]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a90      	ldr	r2, [pc, #576]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e01d      	b.n	8006984 <HAL_RCC_OscConfig+0xb0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006950:	d10c      	bne.n	800696c <HAL_RCC_OscConfig+0x98>
 8006952:	4b8b      	ldr	r3, [pc, #556]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a8a      	ldr	r2, [pc, #552]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a87      	ldr	r2, [pc, #540]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e00b      	b.n	8006984 <HAL_RCC_OscConfig+0xb0>
 800696c:	4b84      	ldr	r3, [pc, #528]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a83      	ldr	r2, [pc, #524]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4b81      	ldr	r3, [pc, #516]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a80      	ldr	r2, [pc, #512]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d013      	beq.n	80069b4 <HAL_RCC_OscConfig+0xe0>
 800698c:	f7fd fcfe 	bl	800438c <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0xd2>
 8006994:	f7fd fcfa 	bl	800438c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	; 0x64
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0xd2>
 80069a2:	2303      	movs	r3, #3
 80069a4:	e1fb      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 80069a6:	4b76      	ldr	r3, [pc, #472]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0xc0>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x10a>
 80069b4:	f7fd fcea 	bl	800438c <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0xfa>
 80069bc:	f7fd fce6 	bl	800438c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	; 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0xfa>
 80069ca:	2303      	movs	r3, #3
 80069cc:	e1e7      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 80069ce:	4b6c      	ldr	r3, [pc, #432]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0xe8>
 80069da:	e000      	b.n	80069de <HAL_RCC_OscConfig+0x10a>
 80069dc:	bf00      	nop
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d063      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x1de>
 80069ea:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_RCC_OscConfig+0x13a>
 80069f6:	4b62      	ldr	r3, [pc, #392]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d11c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x168>
 8006a02:	4b5f      	ldr	r3, [pc, #380]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d116      	bne.n	8006a3c <HAL_RCC_OscConfig+0x168>
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_RCC_OscConfig+0x152>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d001      	beq.n	8006a26 <HAL_RCC_OscConfig+0x152>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e1bb      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006a26:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4952      	ldr	r1, [pc, #328]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]
 8006a3a:	e03a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1de>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d020      	beq.n	8006a86 <HAL_RCC_OscConfig+0x1b2>
 8006a44:	4b4f      	ldr	r3, [pc, #316]	; (8006b84 <HAL_RCC_OscConfig+0x2b0>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f7fd fc9f 	bl	800438c <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x190>
 8006a52:	f7fd fc9b 	bl	800438c <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x190>
 8006a60:	2303      	movs	r3, #3
 8006a62:	e19c      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006a64:	4b46      	ldr	r3, [pc, #280]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f0      	beq.n	8006a52 <HAL_RCC_OscConfig+0x17e>
 8006a70:	4b43      	ldr	r3, [pc, #268]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	4940      	ldr	r1, [pc, #256]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
 8006a84:	e015      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1de>
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <HAL_RCC_OscConfig+0x2b0>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f7fd fc7e 	bl	800438c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x1d2>
 8006a94:	f7fd fc7a 	bl	800438c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x1d2>
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e17b      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006aa6:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x1c0>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d030      	beq.n	8006b20 <HAL_RCC_OscConfig+0x24c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <HAL_RCC_OscConfig+0x220>
 8006ac6:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <HAL_RCC_OscConfig+0x2b4>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f7fd fc5e 	bl	800438c <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x212>
 8006ad4:	f7fd fc5a 	bl	800438c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x212>
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e15b      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x200>
 8006af2:	e015      	b.n	8006b20 <HAL_RCC_OscConfig+0x24c>
 8006af4:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <HAL_RCC_OscConfig+0x2b4>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	f7fd fc47 	bl	800438c <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x240>
 8006b02:	f7fd fc43 	bl	800438c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x240>
 8006b10:	2303      	movs	r3, #3
 8006b12:	e144      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f0      	bne.n	8006b02 <HAL_RCC_OscConfig+0x22e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80a0 	beq.w	8006c6e <HAL_RCC_OscConfig+0x39a>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]
 8006b32:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10f      	bne.n	8006b5e <HAL_RCC_OscConfig+0x28a>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75fb      	strb	r3, [r7, #23]
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <HAL_RCC_OscConfig+0x2b8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d121      	bne.n	8006bae <HAL_RCC_OscConfig+0x2da>
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <HAL_RCC_OscConfig+0x2b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a07      	ldr	r2, [pc, #28]	; (8006b8c <HAL_RCC_OscConfig+0x2b8>)
 8006b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	f7fd fc09 	bl	800438c <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]
 8006b7c:	e011      	b.n	8006ba2 <HAL_RCC_OscConfig+0x2ce>
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800
 8006b84:	42470000 	.word	0x42470000
 8006b88:	42470e80 	.word	0x42470e80
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	f7fd fbfc 	bl	800438c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x2ce>
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e0fd      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006ba2:	4b81      	ldr	r3, [pc, #516]	; (8006da8 <HAL_RCC_OscConfig+0x4d4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0x2bc>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x2f0>
 8006bb6:	4b7d      	ldr	r3, [pc, #500]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a7c      	ldr	r2, [pc, #496]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc2:	e01c      	b.n	8006bfe <HAL_RCC_OscConfig+0x32a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_OscConfig+0x312>
 8006bcc:	4b77      	ldr	r3, [pc, #476]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	4a76      	ldr	r2, [pc, #472]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd8:	4b74      	ldr	r3, [pc, #464]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bdc:	4a73      	ldr	r2, [pc, #460]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6713      	str	r3, [r2, #112]	; 0x70
 8006be4:	e00b      	b.n	8006bfe <HAL_RCC_OscConfig+0x32a>
 8006be6:	4b71      	ldr	r3, [pc, #452]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	4a70      	ldr	r2, [pc, #448]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf2:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <HAL_RCC_OscConfig+0x35e>
 8006c06:	f7fd fbc1 	bl	800438c <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x350>
 8006c0e:	f7fd fbbd 	bl	800438c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x350>
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0bc      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ee      	beq.n	8006c0e <HAL_RCC_OscConfig+0x33a>
 8006c30:	e014      	b.n	8006c5c <HAL_RCC_OscConfig+0x388>
 8006c32:	f7fd fbab 	bl	800438c <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]
 8006c38:	e00a      	b.n	8006c50 <HAL_RCC_OscConfig+0x37c>
 8006c3a:	f7fd fba7 	bl	800438c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x37c>
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e0a6      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006c50:	4b56      	ldr	r3, [pc, #344]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ee      	bne.n	8006c3a <HAL_RCC_OscConfig+0x366>
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <HAL_RCC_OscConfig+0x39a>
 8006c62:	4b52      	ldr	r3, [pc, #328]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a51      	ldr	r2, [pc, #324]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8092 	beq.w	8006d9c <HAL_RCC_OscConfig+0x4c8>
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d05c      	beq.n	8006d3e <HAL_RCC_OscConfig+0x46a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d141      	bne.n	8006d10 <HAL_RCC_OscConfig+0x43c>
 8006c8c:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f7fd fb7b 	bl	800438c <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x3d8>
 8006c9a:	f7fd fb77 	bl	800438c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x3d8>
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e078      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006cac:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCC_OscConfig+0x3c6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	019b      	lsls	r3, r3, #6
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	061b      	lsls	r3, r3, #24
 8006cdc:	4933      	ldr	r1, [pc, #204]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	604b      	str	r3, [r1, #4]
 8006ce2:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f7fd fb50 	bl	800438c <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x42e>
 8006cf0:	f7fd fb4c 	bl	800438c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x42e>
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e04d      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006d02:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x41c>
 8006d0e:	e045      	b.n	8006d9c <HAL_RCC_OscConfig+0x4c8>
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f7fd fb39 	bl	800438c <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x45c>
 8006d1e:	f7fd fb35 	bl	800438c <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x45c>
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e036      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006d30:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f0      	bne.n	8006d1e <HAL_RCC_OscConfig+0x44a>
 8006d3c:	e02e      	b.n	8006d9c <HAL_RCC_OscConfig+0x4c8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x476>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e029      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006d4a:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_RCC_OscConfig+0x4d8>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d11c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x4c4>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d115      	bne.n	8006d98 <HAL_RCC_OscConfig+0x4c4>
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d72:	4013      	ands	r3, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCC_OscConfig+0x4c4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d106      	bne.n	8006d98 <HAL_RCC_OscConfig+0x4c4>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_OscConfig+0x4c8>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <HAL_RCC_OscConfig+0x4ca>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40007000 	.word	0x40007000
 8006dac:	40023800 	.word	0x40023800
 8006db0:	42470060 	.word	0x42470060

08006db4 <HAL_RCC_ClockConfig>:
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x14>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0cc      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006dc8:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d90c      	bls.n	8006df0 <HAL_RCC_ClockConfig+0x3c>
 8006dd6:	4b65      	ldr	r3, [pc, #404]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	4b63      	ldr	r3, [pc, #396]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d001      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x3c>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0b8      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d020      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x8a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x60>
 8006e08:	4b59      	ldr	r3, [pc, #356]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4a58      	ldr	r2, [pc, #352]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e12:	6093      	str	r3, [r2, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x78>
 8006e20:	4b53      	ldr	r3, [pc, #332]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a52      	ldr	r2, [pc, #328]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e2a:	6093      	str	r3, [r2, #8]
 8006e2c:	4b50      	ldr	r3, [pc, #320]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	494d      	ldr	r1, [pc, #308]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	608b      	str	r3, [r1, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d044      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x120>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d107      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xae>
 8006e52:	4b47      	ldr	r3, [pc, #284]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d119      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e07f      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d003      	beq.n	8006e72 <HAL_RCC_ClockConfig+0xbe>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xce>
 8006e72:	4b3f      	ldr	r3, [pc, #252]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e06f      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006e82:	4b3b      	ldr	r3, [pc, #236]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e067      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006e92:	4b37      	ldr	r3, [pc, #220]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f023 0203 	bic.w	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	4934      	ldr	r1, [pc, #208]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	608b      	str	r3, [r1, #8]
 8006ea4:	f7fd fa72 	bl	800438c <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x10e>
 8006eac:	f7fd fa6e 	bl	800438c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_ClockConfig+0x10e>
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e04f      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006ec2:	4b2b      	ldr	r3, [pc, #172]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 020c 	and.w	r2, r3, #12
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d1eb      	bne.n	8006eac <HAL_RCC_ClockConfig+0xf8>
 8006ed4:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d20c      	bcs.n	8006efc <HAL_RCC_ClockConfig+0x148>
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d001      	beq.n	8006efc <HAL_RCC_ClockConfig+0x148>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e032      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1ae>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x166>
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4916      	ldr	r1, [pc, #88]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x186>
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	490e      	ldr	r1, [pc, #56]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]
 8006f3a:	f000 f821 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006f4c:	5cd3      	ldrb	r3, [r2, r3]
 8006f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCC_ClockConfig+0x1c8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fd f9d2 	bl	8004304 <HAL_InitTick>
 8006f60:	2300      	movs	r3, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40023c00 	.word	0x40023c00
 8006f70:	40023800 	.word	0x40023800
 8006f74:	080138e4 	.word	0x080138e4
 8006f78:	2000004c 	.word	0x2000004c
 8006f7c:	20000050 	.word	0x20000050

08006f80 <HAL_RCC_GetSysClockFreq>:
 8006f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	4b63      	ldr	r3, [pc, #396]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d007      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x32>
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x38>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 80b4 	bne.w	8007114 <HAL_RCC_GetSysClockFreq+0x194>
 8006fac:	4b5e      	ldr	r3, [pc, #376]	; (8007128 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	e0b3      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x19a>
 8006fb2:	4b5e      	ldr	r3, [pc, #376]	; (800712c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	e0b0      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x19a>
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	4b58      	ldr	r3, [pc, #352]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04a      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0xe4>
 8006fce:	4b55      	ldr	r3, [pc, #340]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	f04f 0400 	mov.w	r4, #0
 8006fd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	ea03 0501 	and.w	r5, r3, r1
 8006fe4:	ea04 0602 	and.w	r6, r4, r2
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4632      	mov	r2, r6
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	f04f 0400 	mov.w	r4, #0
 8006ff4:	0154      	lsls	r4, r2, #5
 8006ff6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ffa:	014b      	lsls	r3, r1, #5
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4622      	mov	r2, r4
 8007000:	1b49      	subs	r1, r1, r5
 8007002:	eb62 0206 	sbc.w	r2, r2, r6
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	f04f 0400 	mov.w	r4, #0
 800700e:	0194      	lsls	r4, r2, #6
 8007010:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007014:	018b      	lsls	r3, r1, #6
 8007016:	1a5b      	subs	r3, r3, r1
 8007018:	eb64 0402 	sbc.w	r4, r4, r2
 800701c:	f04f 0100 	mov.w	r1, #0
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	00e2      	lsls	r2, r4, #3
 8007026:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800702a:	00d9      	lsls	r1, r3, #3
 800702c:	460b      	mov	r3, r1
 800702e:	4614      	mov	r4, r2
 8007030:	195b      	adds	r3, r3, r5
 8007032:	eb44 0406 	adc.w	r4, r4, r6
 8007036:	f04f 0100 	mov.w	r1, #0
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	0262      	lsls	r2, r4, #9
 8007040:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007044:	0259      	lsls	r1, r3, #9
 8007046:	460b      	mov	r3, r1
 8007048:	4614      	mov	r4, r2
 800704a:	4618      	mov	r0, r3
 800704c:	4621      	mov	r1, r4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f04f 0400 	mov.w	r4, #0
 8007054:	461a      	mov	r2, r3
 8007056:	4623      	mov	r3, r4
 8007058:	f7f9 fcb4 	bl	80009c4 <__aeabi_uldivmod>
 800705c:	4603      	mov	r3, r0
 800705e:	460c      	mov	r4, r1
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e049      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x178>
 8007064:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	099b      	lsrs	r3, r3, #6
 800706a:	f04f 0400 	mov.w	r4, #0
 800706e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	ea03 0501 	and.w	r5, r3, r1
 800707a:	ea04 0602 	and.w	r6, r4, r2
 800707e:	4629      	mov	r1, r5
 8007080:	4632      	mov	r2, r6
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	f04f 0400 	mov.w	r4, #0
 800708a:	0154      	lsls	r4, r2, #5
 800708c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007090:	014b      	lsls	r3, r1, #5
 8007092:	4619      	mov	r1, r3
 8007094:	4622      	mov	r2, r4
 8007096:	1b49      	subs	r1, r1, r5
 8007098:	eb62 0206 	sbc.w	r2, r2, r6
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	f04f 0400 	mov.w	r4, #0
 80070a4:	0194      	lsls	r4, r2, #6
 80070a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80070aa:	018b      	lsls	r3, r1, #6
 80070ac:	1a5b      	subs	r3, r3, r1
 80070ae:	eb64 0402 	sbc.w	r4, r4, r2
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	00e2      	lsls	r2, r4, #3
 80070bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070c0:	00d9      	lsls	r1, r3, #3
 80070c2:	460b      	mov	r3, r1
 80070c4:	4614      	mov	r4, r2
 80070c6:	195b      	adds	r3, r3, r5
 80070c8:	eb44 0406 	adc.w	r4, r4, r6
 80070cc:	f04f 0100 	mov.w	r1, #0
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	02a2      	lsls	r2, r4, #10
 80070d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80070da:	0299      	lsls	r1, r3, #10
 80070dc:	460b      	mov	r3, r1
 80070de:	4614      	mov	r4, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	4621      	mov	r1, r4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f04f 0400 	mov.w	r4, #0
 80070ea:	461a      	mov	r2, r3
 80070ec:	4623      	mov	r3, r4
 80070ee:	f7f9 fc69 	bl	80009c4 <__aeabi_uldivmod>
 80070f2:	4603      	mov	r3, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	0c1b      	lsrs	r3, r3, #16
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	3301      	adds	r3, #1
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	e002      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x19a>
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	bf00      	nop
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007124:	40023800 	.word	0x40023800
 8007128:	00f42400 	.word	0x00f42400
 800712c:	007a1200 	.word	0x007a1200

08007130 <HAL_RCC_GetHCLKFreq>:
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <HAL_RCC_GetHCLKFreq+0x14>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000004c 	.word	0x2000004c

08007148 <HAL_RCC_GetPCLK1Freq>:
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
 800714c:	f7ff fff0 	bl	8007130 <HAL_RCC_GetHCLKFreq>
 8007150:	4601      	mov	r1, r0
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	0a9b      	lsrs	r3, r3, #10
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	4a03      	ldr	r2, [pc, #12]	; (800716c <HAL_RCC_GetPCLK1Freq+0x24>)
 800715e:	5cd3      	ldrb	r3, [r2, r3]
 8007160:	fa21 f303 	lsr.w	r3, r1, r3
 8007164:	4618      	mov	r0, r3
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40023800 	.word	0x40023800
 800716c:	080138f4 	.word	0x080138f4

08007170 <HAL_RCCEx_PeriphCLKConfig>:
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d038      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007198:	4b68      	ldr	r3, [pc, #416]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	f7fd f8f5 	bl	800438c <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]
 80071a4:	e008      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80071a6:	f7fd f8f1 	bl	800438c <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80071b4:	2303      	movs	r3, #3
 80071b6:	e0bd      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80071b8:	4b61      	ldr	r3, [pc, #388]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f0      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	071b      	lsls	r3, r3, #28
 80071d6:	495a      	ldr	r1, [pc, #360]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80071de:	4b57      	ldr	r3, [pc, #348]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	f7fd f8d2 	bl	800438c <HAL_GetTick>
 80071e8:	6178      	str	r0, [r7, #20]
 80071ea:	e008      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80071ec:	f7fd f8ce 	bl	800438c <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80071fa:	2303      	movs	r3, #3
 80071fc:	e09a      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80071fe:	4b50      	ldr	r3, [pc, #320]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8083 	beq.w	800731e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	4b48      	ldr	r3, [pc, #288]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	4a47      	ldr	r2, [pc, #284]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007226:	6413      	str	r3, [r2, #64]	; 0x40
 8007228:	4b45      	ldr	r3, [pc, #276]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4b43      	ldr	r3, [pc, #268]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a42      	ldr	r2, [pc, #264]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800723a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	f7fd f8a4 	bl	800438c <HAL_GetTick>
 8007244:	6178      	str	r0, [r7, #20]
 8007246:	e008      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8007248:	f7fd f8a0 	bl	800438c <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8007256:	2303      	movs	r3, #3
 8007258:	e06c      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800725a:	4b3a      	ldr	r3, [pc, #232]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8007266:	4b36      	ldr	r3, [pc, #216]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d02f      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d028      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007284:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	4b2e      	ldr	r3, [pc, #184]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	4a29      	ldr	r2, [pc, #164]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6713      	str	r3, [r2, #112]	; 0x70
 80072a0:	4b27      	ldr	r3, [pc, #156]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d114      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80072ac:	f7fd f86e 	bl	800438c <HAL_GetTick>
 80072b0:	6178      	str	r0, [r7, #20]
 80072b2:	e00a      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072b4:	f7fd f86a 	bl	800438c <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072c6:	2303      	movs	r3, #3
 80072c8:	e034      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80072ca:	4b1d      	ldr	r3, [pc, #116]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0ee      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d10d      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80072e4:	4b16      	ldr	r3, [pc, #88]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f8:	4911      	ldr	r1, [pc, #68]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
 80072fe:	e005      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800730a:	6093      	str	r3, [r2, #8]
 800730c:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	4909      	ldr	r1, [pc, #36]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731a:	4313      	orrs	r3, r2
 800731c:	670b      	str	r3, [r1, #112]	; 0x70
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7d1a      	ldrb	r2, [r3, #20]
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	2300      	movs	r3, #0
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	42470068 	.word	0x42470068
 8007340:	40023800 	.word	0x40023800
 8007344:	40007000 	.word	0x40007000
 8007348:	42470e40 	.word	0x42470e40
 800734c:	424711e0 	.word	0x424711e0

08007350 <HAL_RTC_Init>:
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_RTC_Init+0x12>
 800735e:	2301      	movs	r3, #1
 8007360:	e083      	b.n	800746a <HAL_RTC_Init+0x11a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7f5b      	ldrb	r3, [r3, #29]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <HAL_RTC_Init+0x28>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	771a      	strb	r2, [r3, #28]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fc fe26 	bl	8003fc4 <HAL_RTC_MspInit>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	775a      	strb	r2, [r3, #29]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	22ca      	movs	r2, #202	; 0xca
 8007384:	625a      	str	r2, [r3, #36]	; 0x24
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2253      	movs	r2, #83	; 0x53
 800738c:	625a      	str	r2, [r3, #36]	; 0x24
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9fb 	bl	800778a <RTC_EnterInitMode>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <HAL_RTC_Init+0x5c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	22ff      	movs	r2, #255	; 0xff
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2204      	movs	r2, #4
 80073a6:	775a      	strb	r2, [r3, #29]
 80073a8:	2301      	movs	r3, #1
 80073aa:	e05e      	b.n	800746a <HAL_RTC_Init+0x11a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6899      	ldr	r1, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68d2      	ldr	r2, [r2, #12]
 80073e6:	611a      	str	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6919      	ldr	r1, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	041a      	lsls	r2, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	611a      	str	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800740a:	60da      	str	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10e      	bne.n	8007438 <HAL_RTC_Init+0xe8>
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f98d 	bl	800773a <HAL_RTC_WaitForSynchro>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_RTC_Init+0xe8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	625a      	str	r2, [r3, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2204      	movs	r2, #4
 8007432:	775a      	strb	r2, [r3, #29]
 8007434:	2301      	movs	r3, #1
 8007436:	e018      	b.n	800746a <HAL_RTC_Init+0x11a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	22ff      	movs	r2, #255	; 0xff
 8007460:	625a      	str	r2, [r3, #36]	; 0x24
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	775a      	strb	r2, [r3, #29]
 8007468:	2300      	movs	r3, #0
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_RTC_SetTime>:
 8007472:	b590      	push	{r4, r7, lr}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	7f1b      	ldrb	r3, [r3, #28]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_RTC_SetTime+0x1c>
 800748a:	2302      	movs	r3, #2
 800748c:	e0aa      	b.n	80075e4 <HAL_RTC_SetTime+0x172>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	771a      	strb	r2, [r3, #28]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2202      	movs	r2, #2
 8007498:	775a      	strb	r2, [r3, #29]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d126      	bne.n	80074ee <HAL_RTC_SetTime+0x7c>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <HAL_RTC_SetTime+0x42>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2200      	movs	r2, #0
 80074b2:	70da      	strb	r2, [r3, #3]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f992 	bl	80077e2 <RTC_ByteToBcd2>
 80074be:	4603      	mov	r3, r0
 80074c0:	041c      	lsls	r4, r3, #16
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f98b 	bl	80077e2 <RTC_ByteToBcd2>
 80074cc:	4603      	mov	r3, r0
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	431c      	orrs	r4, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f983 	bl	80077e2 <RTC_ByteToBcd2>
 80074dc:	4603      	mov	r3, r0
 80074de:	ea44 0203 	orr.w	r2, r4, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	78db      	ldrb	r3, [r3, #3]
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e018      	b.n	8007520 <HAL_RTC_SetTime+0xae>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <HAL_RTC_SetTime+0x90>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	70da      	strb	r2, [r3, #3]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	041a      	lsls	r2, r3, #16
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	4313      	orrs	r3, r2
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	7892      	ldrb	r2, [r2, #2]
 8007514:	431a      	orrs	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	22ca      	movs	r2, #202	; 0xca
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2253      	movs	r2, #83	; 0x53
 800752e:	625a      	str	r2, [r3, #36]	; 0x24
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f92a 	bl	800778a <RTC_EnterInitMode>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_RTC_SetTime+0xe2>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2204      	movs	r2, #4
 8007548:	775a      	strb	r2, [r3, #29]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
 8007550:	2301      	movs	r3, #1
 8007552:	e047      	b.n	80075e4 <HAL_RTC_SetTime+0x172>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800755e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6899      	ldr	r1, [r3, #8]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	431a      	orrs	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800759a:	60da      	str	r2, [r3, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d111      	bne.n	80075ce <HAL_RTC_SetTime+0x15c>
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f8c5 	bl	800773a <HAL_RTC_WaitForSynchro>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_RTC_SetTime+0x15c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	22ff      	movs	r2, #255	; 0xff
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2204      	movs	r2, #4
 80075c2:	775a      	strb	r2, [r3, #29]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	771a      	strb	r2, [r3, #28]
 80075ca:	2301      	movs	r3, #1
 80075cc:	e00a      	b.n	80075e4 <HAL_RTC_SetTime+0x172>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	22ff      	movs	r2, #255	; 0xff
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	775a      	strb	r2, [r3, #29]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	771a      	strb	r2, [r3, #28]
 80075e2:	2300      	movs	r3, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd90      	pop	{r4, r7, pc}

080075ec <HAL_RTC_SetDate>:
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7f1b      	ldrb	r3, [r3, #28]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_RTC_SetDate+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e094      	b.n	8007732 <HAL_RTC_SetDate+0x146>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	771a      	strb	r2, [r3, #28]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2202      	movs	r2, #2
 8007612:	775a      	strb	r2, [r3, #29]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10e      	bne.n	8007638 <HAL_RTC_SetDate+0x4c>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <HAL_RTC_SetDate+0x4c>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	f023 0310 	bic.w	r3, r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	330a      	adds	r3, #10
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	705a      	strb	r2, [r3, #1]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11c      	bne.n	8007678 <HAL_RTC_SetDate+0x8c>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	78db      	ldrb	r3, [r3, #3]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f8cd 	bl	80077e2 <RTC_ByteToBcd2>
 8007648:	4603      	mov	r3, r0
 800764a:	041c      	lsls	r4, r3, #16
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f8c6 	bl	80077e2 <RTC_ByteToBcd2>
 8007656:	4603      	mov	r3, r0
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	431c      	orrs	r4, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	789b      	ldrb	r3, [r3, #2]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f8be 	bl	80077e2 <RTC_ByteToBcd2>
 8007666:	4603      	mov	r3, r0
 8007668:	ea44 0203 	orr.w	r2, r4, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	035b      	lsls	r3, r3, #13
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e00e      	b.n	8007696 <HAL_RTC_SetDate+0xaa>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	78db      	ldrb	r3, [r3, #3]
 800767c:	041a      	lsls	r2, r3, #16
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	4313      	orrs	r3, r2
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	7892      	ldrb	r2, [r2, #2]
 800768a:	431a      	orrs	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	035b      	lsls	r3, r3, #13
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	22ca      	movs	r2, #202	; 0xca
 800769c:	625a      	str	r2, [r3, #36]	; 0x24
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2253      	movs	r2, #83	; 0x53
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f86f 	bl	800778a <RTC_EnterInitMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_RTC_SetDate+0xde>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	22ff      	movs	r2, #255	; 0xff
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2204      	movs	r2, #4
 80076be:	775a      	strb	r2, [r3, #29]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	771a      	strb	r2, [r3, #28]
 80076c6:	2301      	movs	r3, #1
 80076c8:	e033      	b.n	8007732 <HAL_RTC_SetDate+0x146>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076d8:	6053      	str	r3, [r2, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d111      	bne.n	800771c <HAL_RTC_SetDate+0x130>
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f81e 	bl	800773a <HAL_RTC_WaitForSynchro>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <HAL_RTC_SetDate+0x130>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	625a      	str	r2, [r3, #36]	; 0x24
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2204      	movs	r2, #4
 8007710:	775a      	strb	r2, [r3, #29]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
 8007718:	2301      	movs	r3, #1
 800771a:	e00a      	b.n	8007732 <HAL_RTC_SetDate+0x146>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	22ff      	movs	r2, #255	; 0xff
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	775a      	strb	r2, [r3, #29]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
 8007730:	2300      	movs	r3, #0
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bd90      	pop	{r4, r7, pc}

0800773a <HAL_RTC_WaitForSynchro>:
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007754:	60da      	str	r2, [r3, #12]
 8007756:	f7fc fe19 	bl	800438c <HAL_GetTick>
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	e009      	b.n	8007772 <HAL_RTC_WaitForSynchro+0x38>
 800775e:	f7fc fe15 	bl	800438c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800776c:	d901      	bls.n	8007772 <HAL_RTC_WaitForSynchro+0x38>
 800776e:	2303      	movs	r3, #3
 8007770:	e007      	b.n	8007782 <HAL_RTC_WaitForSynchro+0x48>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0ee      	beq.n	800775e <HAL_RTC_WaitForSynchro+0x24>
 8007780:	2300      	movs	r3, #0
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <RTC_EnterInitMode>:
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d119      	bne.n	80077d8 <RTC_EnterInitMode+0x4e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	f7fc fded 	bl	800438c <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	e009      	b.n	80077ca <RTC_EnterInitMode+0x40>
 80077b6:	f7fc fde9 	bl	800438c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c4:	d901      	bls.n	80077ca <RTC_EnterInitMode+0x40>
 80077c6:	2303      	movs	r3, #3
 80077c8:	e007      	b.n	80077da <RTC_EnterInitMode+0x50>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0ee      	beq.n	80077b6 <RTC_EnterInitMode+0x2c>
 80077d8:	2300      	movs	r3, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <RTC_ByteToBcd2>:
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4603      	mov	r3, r0
 80077ea:	71fb      	strb	r3, [r7, #7]
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e005      	b.n	80077fe <RTC_ByteToBcd2+0x1c>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	3b0a      	subs	r3, #10
 80077fc:	71fb      	strb	r3, [r7, #7]
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	2b09      	cmp	r3, #9
 8007802:	d8f6      	bhi.n	80077f2 <RTC_ByteToBcd2+0x10>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	b2da      	uxtb	r2, r3
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	4313      	orrs	r3, r2
 8007810:	b2db      	uxtb	r3, r3
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_SD_IRQHandler>:
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <HAL_SD_IRQHandler+0x2e>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_SD_IRQHandler+0x2e>
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa30 	bl	8007cac <SD_Read_IT>
 800784c:	e165      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 808f 	beq.w	800797c <HAL_SD_IRQHandler+0x15c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007876:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800787a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d039      	beq.n	800790a <HAL_SD_IRQHandler+0xea>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_SD_IRQHandler+0x8a>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d011      	beq.n	80078ce <HAL_SD_IRQHandler+0xae>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 f80e 	bl	80088d0 <SDMMC_CmdStopTransfer>
 80078b4:	60b8      	str	r0, [r7, #8]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_SD_IRQHandler+0xae>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f92f 	bl	8007b2c <HAL_SD_ErrorCallback>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <HAL_SD_IRQHandler+0xda>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_SD_IRQHandler+0xe2>
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f002 fc08 	bl	800a110 <HAL_SD_RxCpltCallback>
 8007900:	e10b      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 fbfa 	bl	800a0fc <HAL_SD_TxCpltCallback>
 8007908:	e107      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8102 	beq.w	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_SD_IRQHandler+0x124>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 ffd3 	bl	80088d0 <SDMMC_CmdStopTransfer>
 800792a:	60b8      	str	r0, [r7, #8]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_SD_IRQHandler+0x124>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8f4 	bl	8007b2c <HAL_SD_ErrorCallback>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 80e5 	bne.w	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80df 	bne.w	8007b1a <HAL_SD_IRQHandler+0x2fa>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0208 	bic.w	r2, r2, #8
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f002 fbc1 	bl	800a0fc <HAL_SD_TxCpltCallback>
 800797a:	e0ce      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <HAL_SD_IRQHandler+0x17c>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_SD_IRQHandler+0x17c>
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9da 	bl	8007d4e <SD_Write_IT>
 800799a:	e0be      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a2:	f240 233a 	movw	r3, #570	; 0x23a
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80b6 	beq.w	8007b1a <HAL_SD_IRQHandler+0x2fa>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_SD_IRQHandler+0x1a8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	f043 0202 	orr.w	r2, r3, #2
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_SD_IRQHandler+0x1c2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	f043 0208 	orr.w	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_SD_IRQHandler+0x1dc>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_SD_IRQHandler+0x1f6>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	f043 0210 	orr.w	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_SD_IRQHandler+0x210>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	f043 0208 	orr.w	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f240 723a 	movw	r2, #1850	; 0x73a
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007a48:	f023 0302 	bic.w	r3, r3, #2
 8007a4c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 ff3c 	bl	80088d0 <SDMMC_CmdStopTransfer>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_SD_IRQHandler+0x264>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f855 	bl	8007b2c <HAL_SD_ErrorCallback>
 8007a82:	e04a      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d045      	beq.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <HAL_SD_IRQHandler+0x282>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d011      	beq.n	8007ac6 <HAL_SD_IRQHandler+0x2a6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa6:	4a1f      	ldr	r2, [pc, #124]	; (8007b24 <HAL_SD_IRQHandler+0x304>)
 8007aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fc fdab 	bl	800460a <HAL_DMA_Abort_IT>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d02f      	beq.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f85e 	bl	8007b80 <SD_DMATxAbort>
 8007ac4:	e029      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <HAL_SD_IRQHandler+0x2ba>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d011      	beq.n	8007afe <HAL_SD_IRQHandler+0x2de>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <HAL_SD_IRQHandler+0x308>)
 8007ae0:	651a      	str	r2, [r3, #80]	; 0x50
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fc fd8f 	bl	800460a <HAL_DMA_Abort_IT>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d013      	beq.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f879 	bl	8007bee <SD_DMARxAbort>
 8007afc:	e00d      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f002 fae8 	bl	800a0e8 <HAL_SD_AbortCallback>
 8007b18:	e7ff      	b.n	8007b1a <HAL_SD_IRQHandler+0x2fa>
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007bef 	.word	0x08007bef

08007b2c <HAL_SD_ErrorCallback>:
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_SD_GetCardState>:
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f882 	bl	8007c5c <SD_SendStatus>
 8007b58:	6178      	str	r0, [r7, #20]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <HAL_SD_GetCardState+0x2c>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SD_DMATxAbort>:
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff ffd1 	bl	8007b40 <HAL_SD_GetCardState>
 8007b9e:	60b8      	str	r0, [r7, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d002      	beq.n	8007bba <SD_DMATxAbort+0x3a>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d10a      	bne.n	8007bd0 <SD_DMATxAbort+0x50>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fe86 	bl	80088d0 <SDMMC_CmdStopTransfer>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <SD_DMATxAbort+0x60>
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f002 fa85 	bl	800a0e8 <HAL_SD_AbortCallback>
 8007bde:	e002      	b.n	8007be6 <SD_DMATxAbort+0x66>
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff ffa3 	bl	8007b2c <HAL_SD_ErrorCallback>
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <SD_DMARxAbort>:
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ff9a 	bl	8007b40 <HAL_SD_GetCardState>
 8007c0c:	60b8      	str	r0, [r7, #8]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d002      	beq.n	8007c28 <SD_DMARxAbort+0x3a>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d10a      	bne.n	8007c3e <SD_DMARxAbort+0x50>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fe4f 	bl	80088d0 <SDMMC_CmdStopTransfer>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <SD_DMARxAbort+0x60>
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f002 fa4e 	bl	800a0e8 <HAL_SD_AbortCallback>
 8007c4c:	e002      	b.n	8007c54 <SD_DMARxAbort+0x66>
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff ff6c 	bl	8007b2c <HAL_SD_ErrorCallback>
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <SD_SendStatus>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <SD_SendStatus+0x16>
 8007c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c70:	e018      	b.n	8007ca4 <SD_SendStatus+0x48>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 fe48 	bl	8008914 <SDMMC_CmdSendStatus>
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <SD_SendStatus+0x34>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e009      	b.n	8007ca4 <SD_SendStatus+0x48>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fe07 	bl	80088aa <SDIO_GetResponse>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <SD_Read_IT>:
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d03f      	beq.n	8007d46 <SD_Read_IT+0x9a>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e033      	b.n	8007d34 <SD_Read_IT+0x88>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fd95 	bl	8008800 <SDIO_ReadFIFO>
 8007cd6:	60b8      	str	r0, [r7, #8]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	701a      	strb	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3301      	adds	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b07      	cmp	r3, #7
 8007d38:	d9c8      	bls.n	8007ccc <SD_Read_IT+0x20>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <SD_Write_IT>:
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d043      	beq.n	8007df0 <SD_Write_IT+0xa2>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e037      	b.n	8007dde <SD_Write_IT+0x90>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	60bb      	str	r3, [r7, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	021a      	lsls	r2, r3, #8
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	041a      	lsls	r2, r3, #16
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	061a      	lsls	r2, r3, #24
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f107 0208 	add.w	r2, r7, #8
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd21 	bl	800881a <SDIO_WriteFIFO>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b07      	cmp	r3, #7
 8007de2:	d9c4      	bls.n	8007d6e <SD_Write_IT+0x20>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	621a      	str	r2, [r3, #32]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
 8007df0:	bf00      	nop
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_SPI_Init>:
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_SPI_Init+0x12>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e056      	b.n	8007eb8 <HAL_SPI_Init+0xc0>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <HAL_SPI_Init+0x32>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fc f8e3 	bl	8003ff0 <HAL_SPI_MspInit>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	ea42 0103 	orr.w	r1, r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f003 0104 	and.w	r1, r3, #4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69da      	ldr	r2, [r3, #28]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea6:	61da      	str	r2, [r3, #28]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	655a      	str	r2, [r3, #84]	; 0x54
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_SPI_Transmit>:
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80fb      	strh	r3, [r7, #6]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_SPI_Transmit+0x22>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e11e      	b.n	8008120 <HAL_SPI_Transmit+0x260>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007eea:	f7fc fa4f 	bl	800438c <HAL_GetTick>
 8007eee:	61b8      	str	r0, [r7, #24]
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	82fb      	strh	r3, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d002      	beq.n	8007f06 <HAL_SPI_Transmit+0x46>
 8007f00:	2302      	movs	r3, #2
 8007f02:	77fb      	strb	r3, [r7, #31]
 8007f04:	e103      	b.n	800810e <HAL_SPI_Transmit+0x24e>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_SPI_Transmit+0x52>
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d102      	bne.n	8007f18 <HAL_SPI_Transmit+0x58>
 8007f12:	2301      	movs	r3, #1
 8007f14:	77fb      	strb	r3, [r7, #31]
 8007f16:	e0fa      	b.n	800810e <HAL_SPI_Transmit+0x24e>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	88fa      	ldrh	r2, [r7, #6]
 8007f30:	869a      	strh	r2, [r3, #52]	; 0x34
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	879a      	strh	r2, [r3, #60]	; 0x3c
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	645a      	str	r2, [r3, #68]	; 0x44
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5e:	d107      	bne.n	8007f70 <HAL_SPI_Transmit+0xb0>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d007      	beq.n	8007f8e <HAL_SPI_Transmit+0xce>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f96:	d14b      	bne.n	8008030 <HAL_SPI_Transmit+0x170>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <HAL_SPI_Transmit+0xe6>
 8007fa0:	8afb      	ldrh	r3, [r7, #22]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d13e      	bne.n	8008024 <HAL_SPI_Transmit+0x164>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60da      	str	r2, [r3, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	1c9a      	adds	r2, r3, #2
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007fca:	e02b      	b.n	8008024 <HAL_SPI_Transmit+0x164>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d112      	bne.n	8008000 <HAL_SPI_Transmit+0x140>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	1c9a      	adds	r2, r3, #2
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ffe:	e011      	b.n	8008024 <HAL_SPI_Transmit+0x164>
 8008000:	f7fc f9c4 	bl	800438c <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d803      	bhi.n	8008018 <HAL_SPI_Transmit+0x158>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008016:	d102      	bne.n	800801e <HAL_SPI_Transmit+0x15e>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <HAL_SPI_Transmit+0x164>
 800801e:	2303      	movs	r3, #3
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e074      	b.n	800810e <HAL_SPI_Transmit+0x24e>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1ce      	bne.n	8007fcc <HAL_SPI_Transmit+0x10c>
 800802e:	e04c      	b.n	80080ca <HAL_SPI_Transmit+0x20a>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_SPI_Transmit+0x17e>
 8008038:	8afb      	ldrh	r3, [r7, #22]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d140      	bne.n	80080c0 <HAL_SPI_Transmit+0x200>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	330c      	adds	r3, #12
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	86da      	strh	r2, [r3, #54]	; 0x36
 8008064:	e02c      	b.n	80080c0 <HAL_SPI_Transmit+0x200>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b02      	cmp	r3, #2
 8008072:	d113      	bne.n	800809c <HAL_SPI_Transmit+0x1dc>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	631a      	str	r2, [r3, #48]	; 0x30
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	86da      	strh	r2, [r3, #54]	; 0x36
 800809a:	e011      	b.n	80080c0 <HAL_SPI_Transmit+0x200>
 800809c:	f7fc f976 	bl	800438c <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d803      	bhi.n	80080b4 <HAL_SPI_Transmit+0x1f4>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d102      	bne.n	80080ba <HAL_SPI_Transmit+0x1fa>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <HAL_SPI_Transmit+0x200>
 80080ba:	2303      	movs	r3, #3
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e026      	b.n	800810e <HAL_SPI_Transmit+0x24e>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1cd      	bne.n	8008066 <HAL_SPI_Transmit+0x1a6>
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fb54 	bl	800877c <SPI_EndRxTxTransaction>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <HAL_SPI_Transmit+0x220>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	655a      	str	r2, [r3, #84]	; 0x54
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <HAL_SPI_Transmit+0x23e>
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_SPI_Transmit+0x24c>
 8008106:	2301      	movs	r3, #1
 8008108:	77fb      	strb	r3, [r7, #31]
 800810a:	e000      	b.n	800810e <HAL_SPI_Transmit+0x24e>
 800810c:	bf00      	nop
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800811e:	7ffb      	ldrb	r3, [r7, #31]
 8008120:	4618      	mov	r0, r3
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_SPI_TransmitReceive>:
 8008128:	b580      	push	{r7, lr}
 800812a:	b08c      	sub	sp, #48	; 0x30
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	807b      	strh	r3, [r7, #2]
 8008136:	2301      	movs	r3, #1
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813a:	2300      	movs	r3, #0
 800813c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_SPI_TransmitReceive+0x26>
 800814a:	2302      	movs	r3, #2
 800814c:	e18a      	b.n	8008464 <HAL_SPI_TransmitReceive+0x33c>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008156:	f7fc f919 	bl	800438c <HAL_GetTick>
 800815a:	6278      	str	r0, [r7, #36]	; 0x24
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	837b      	strh	r3, [r7, #26]
 8008170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008174:	2b01      	cmp	r3, #1
 8008176:	d00f      	beq.n	8008198 <HAL_SPI_TransmitReceive+0x70>
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800817e:	d107      	bne.n	8008190 <HAL_SPI_TransmitReceive+0x68>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <HAL_SPI_TransmitReceive+0x68>
 8008188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800818c:	2b04      	cmp	r3, #4
 800818e:	d003      	beq.n	8008198 <HAL_SPI_TransmitReceive+0x70>
 8008190:	2302      	movs	r3, #2
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e15b      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x82>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x82>
 80081a4:	887b      	ldrh	r3, [r7, #2]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d103      	bne.n	80081b2 <HAL_SPI_TransmitReceive+0x8a>
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b0:	e14e      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d003      	beq.n	80081c6 <HAL_SPI_TransmitReceive+0x9e>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2205      	movs	r2, #5
 80081c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	655a      	str	r2, [r3, #84]	; 0x54
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	639a      	str	r2, [r3, #56]	; 0x38
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	887a      	ldrh	r2, [r7, #2]
 80081d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	887a      	ldrh	r2, [r7, #2]
 80081dc:	879a      	strh	r2, [r3, #60]	; 0x3c
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	887a      	ldrh	r2, [r7, #2]
 80081e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	887a      	ldrh	r2, [r7, #2]
 80081ee:	869a      	strh	r2, [r3, #52]	; 0x34
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	645a      	str	r2, [r3, #68]	; 0x44
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008206:	2b40      	cmp	r3, #64	; 0x40
 8008208:	d007      	beq.n	800821a <HAL_SPI_TransmitReceive+0xf2>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008222:	d178      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x1ee>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x10a>
 800822c:	8b7b      	ldrh	r3, [r7, #26]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d166      	bne.n	8008300 <HAL_SPI_TransmitReceive+0x1d8>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	881a      	ldrh	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	1c9a      	adds	r2, r3, #2
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	86da      	strh	r2, [r3, #54]	; 0x36
 8008256:	e053      	b.n	8008300 <HAL_SPI_TransmitReceive+0x1d8>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b02      	cmp	r3, #2
 8008264:	d11b      	bne.n	800829e <HAL_SPI_TransmitReceive+0x176>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800826a:	b29b      	uxth	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d016      	beq.n	800829e <HAL_SPI_TransmitReceive+0x176>
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d113      	bne.n	800829e <HAL_SPI_TransmitReceive+0x176>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	1c9a      	adds	r2, r3, #2
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	86da      	strh	r2, [r3, #54]	; 0x36
 800829a:	2300      	movs	r3, #0
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d119      	bne.n	80082e0 <HAL_SPI_TransmitReceive+0x1b8>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d014      	beq.n	80082e0 <HAL_SPI_TransmitReceive+0x1b8>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	b292      	uxth	r2, r2
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082dc:	2301      	movs	r3, #1
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e0:	f7fc f854 	bl	800438c <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d807      	bhi.n	8008300 <HAL_SPI_TransmitReceive+0x1d8>
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d003      	beq.n	8008300 <HAL_SPI_TransmitReceive+0x1d8>
 80082f8:	2303      	movs	r3, #3
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fe:	e0a7      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1a6      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x130>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800830e:	b29b      	uxth	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1a1      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x130>
 8008314:	e07c      	b.n	8008410 <HAL_SPI_TransmitReceive+0x2e8>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <HAL_SPI_TransmitReceive+0x1fc>
 800831e:	8b7b      	ldrh	r3, [r7, #26]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d16b      	bne.n	80083fc <HAL_SPI_TransmitReceive+0x2d4>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	330c      	adds	r3, #12
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	631a      	str	r2, [r3, #48]	; 0x30
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008340:	b29b      	uxth	r3, r3
 8008342:	3b01      	subs	r3, #1
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	86da      	strh	r2, [r3, #54]	; 0x36
 800834a:	e057      	b.n	80083fc <HAL_SPI_TransmitReceive+0x2d4>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b02      	cmp	r3, #2
 8008358:	d11c      	bne.n	8008394 <HAL_SPI_TransmitReceive+0x26c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <HAL_SPI_TransmitReceive+0x26c>
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2b01      	cmp	r3, #1
 8008368:	d114      	bne.n	8008394 <HAL_SPI_TransmitReceive+0x26c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	330c      	adds	r3, #12
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	701a      	strb	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008390:	2300      	movs	r3, #0
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d119      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x2ae>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d014      	beq.n	80083d6 <HAL_SPI_TransmitReceive+0x2ae>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083d2:	2301      	movs	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d6:	f7fb ffd9 	bl	800438c <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d803      	bhi.n	80083ee <HAL_SPI_TransmitReceive+0x2c6>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d102      	bne.n	80083f4 <HAL_SPI_TransmitReceive+0x2cc>
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <HAL_SPI_TransmitReceive+0x2d4>
 80083f4:	2303      	movs	r3, #3
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e029      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1a2      	bne.n	800834c <HAL_SPI_TransmitReceive+0x224>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d19d      	bne.n	800834c <HAL_SPI_TransmitReceive+0x224>
 8008410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f9b1 	bl	800877c <SPI_EndRxTxTransaction>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d006      	beq.n	800842e <HAL_SPI_TransmitReceive+0x306>
 8008420:	2301      	movs	r3, #1
 8008422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	655a      	str	r2, [r3, #84]	; 0x54
 800842c:	e010      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <HAL_SPI_TransmitReceive+0x326>
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	e000      	b.n	8008450 <HAL_SPI_TransmitReceive+0x328>
 800844e:	bf00      	nop
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008464:	4618      	mov	r0, r3
 8008466:	3730      	adds	r7, #48	; 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_SPI_IRQHandler>:
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10f      	bne.n	80084b0 <HAL_SPI_IRQHandler+0x44>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <HAL_SPI_IRQHandler+0x44>
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	099b      	lsrs	r3, r3, #6
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <HAL_SPI_IRQHandler+0x44>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
 80084ae:	e0d8      	b.n	8008662 <HAL_SPI_IRQHandler+0x1f6>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <HAL_SPI_IRQHandler+0x66>
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	09db      	lsrs	r3, r3, #7
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <HAL_SPI_IRQHandler+0x66>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	e0c7      	b.n	8008662 <HAL_SPI_IRQHandler+0x1f6>
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10c      	bne.n	80084f8 <HAL_SPI_IRQHandler+0x8c>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	099b      	lsrs	r3, r3, #6
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <HAL_SPI_IRQHandler+0x8c>
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80b5 	beq.w	8008662 <HAL_SPI_IRQHandler+0x1f6>
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80ae 	beq.w	8008662 <HAL_SPI_IRQHandler+0x1f6>
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	099b      	lsrs	r3, r3, #6
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d023      	beq.n	800855a <HAL_SPI_IRQHandler+0xee>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d011      	beq.n	8008542 <HAL_SPI_IRQHandler+0xd6>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008522:	f043 0204 	orr.w	r2, r3, #4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	655a      	str	r2, [r3, #84]	; 0x54
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	e00b      	b.n	800855a <HAL_SPI_IRQHandler+0xee>
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	e083      	b.n	8008662 <HAL_SPI_IRQHandler+0x1f6>
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <HAL_SPI_IRQHandler+0x124>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856a:	f043 0201 	orr.w	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	655a      	str	r2, [r3, #84]	; 0x54
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <HAL_SPI_IRQHandler+0x14a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a0:	f043 0208 	orr.w	r2, r3, #8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
 80085a8:	2300      	movs	r3, #0
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d050      	beq.n	8008660 <HAL_SPI_IRQHandler+0x1f4>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <HAL_SPI_IRQHandler+0x17e>
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d034      	beq.n	8008654 <HAL_SPI_IRQHandler+0x1e8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0203 	bic.w	r2, r2, #3
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d011      	beq.n	8008626 <HAL_SPI_IRQHandler+0x1ba>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	4a18      	ldr	r2, [pc, #96]	; (8008668 <HAL_SPI_IRQHandler+0x1fc>)
 8008608:	651a      	str	r2, [r3, #80]	; 0x50
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860e:	4618      	mov	r0, r3
 8008610:	f7fb fffb 	bl	800460a <HAL_DMA_Abort_IT>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_SPI_IRQHandler+0x1ba>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	655a      	str	r2, [r3, #84]	; 0x54
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862a:	2b00      	cmp	r3, #0
 800862c:	d016      	beq.n	800865c <HAL_SPI_IRQHandler+0x1f0>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008632:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <HAL_SPI_IRQHandler+0x1fc>)
 8008634:	651a      	str	r2, [r3, #80]	; 0x50
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863a:	4618      	mov	r0, r3
 800863c:	f7fb ffe5 	bl	800460a <HAL_DMA_Abort_IT>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <HAL_SPI_IRQHandler+0x1f0>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	655a      	str	r2, [r3, #84]	; 0x54
 8008652:	e003      	b.n	800865c <HAL_SPI_IRQHandler+0x1f0>
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f809 	bl	800866c <HAL_SPI_ErrorCallback>
 800865a:	e000      	b.n	800865e <HAL_SPI_IRQHandler+0x1f2>
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	bf00      	nop
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	08008681 	.word	0x08008681

0800866c <HAL_SPI_ErrorCallback>:
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <SPI_DMAAbortOnError>:
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	86da      	strh	r2, [r3, #54]	; 0x36
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7ff ffe6 	bl	800866c <HAL_SPI_ErrorCallback>
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <SPI_WaitFlagStateUntilTimeout>:
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	71fb      	strb	r3, [r7, #7]
 80086b8:	e04c      	b.n	8008754 <SPI_WaitFlagStateUntilTimeout+0xac>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d048      	beq.n	8008754 <SPI_WaitFlagStateUntilTimeout+0xac>
 80086c2:	f7fb fe63 	bl	800438c <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d902      	bls.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d13d      	bne.n	8008754 <SPI_WaitFlagStateUntilTimeout+0xac>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f0:	d111      	bne.n	8008716 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fa:	d004      	beq.n	8008706 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008704:	d107      	bne.n	8008716 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871e:	d10f      	bne.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008750:	2303      	movs	r3, #3
 8008752:	e00f      	b.n	8008774 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	4013      	ands	r3, r2
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	bf0c      	ite	eq
 8008764:	2301      	moveq	r3, #1
 8008766:	2300      	movne	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	429a      	cmp	r2, r3
 8008770:	d1a3      	bne.n	80086ba <SPI_WaitFlagStateUntilTimeout+0x12>
 8008772:	2300      	movs	r3, #0
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SPI_EndRxTxTransaction>:
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af02      	add	r7, sp, #8
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <SPI_EndRxTxTransaction+0x7c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <SPI_EndRxTxTransaction+0x80>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	0d5b      	lsrs	r3, r3, #21
 8008794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	617b      	str	r3, [r7, #20]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a6:	d112      	bne.n	80087ce <SPI_EndRxTxTransaction+0x52>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	2180      	movs	r1, #128	; 0x80
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff ff78 	bl	80086a8 <SPI_WaitFlagStateUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <SPI_EndRxTxTransaction+0x70>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
 80087ca:	2303      	movs	r3, #3
 80087cc:	e00f      	b.n	80087ee <SPI_EndRxTxTransaction+0x72>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <SPI_EndRxTxTransaction+0x6e>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b80      	cmp	r3, #128	; 0x80
 80087e6:	d0f2      	beq.n	80087ce <SPI_EndRxTxTransaction+0x52>
 80087e8:	e000      	b.n	80087ec <SPI_EndRxTxTransaction+0x70>
 80087ea:	bf00      	nop
 80087ec:	2300      	movs	r3, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	2000004c 	.word	0x2000004c
 80087fc:	165e9f81 	.word	0x165e9f81

08008800 <SDIO_ReadFIFO>:
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <SDIO_WriteFIFO>:
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800882e:	2300      	movs	r3, #0
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <SDIO_SendCommand>:
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	431a      	orrs	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	431a      	orrs	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008876:	f023 030f 	bic.w	r3, r3, #15
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60da      	str	r2, [r3, #12]
 8008882:	2300      	movs	r3, #0
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <SDIO_GetCommandResponse>:
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <SDIO_GetResponse>:
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3314      	adds	r3, #20
 80088b8:	461a      	mov	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	4413      	add	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <SDMMC_CmdStopTransfer>:
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	2300      	movs	r3, #0
 80088da:	60bb      	str	r3, [r7, #8]
 80088dc:	230c      	movs	r3, #12
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	f107 0308 	add.w	r3, r7, #8
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ffa1 	bl	800883c <SDIO_SendCommand>
 80088fa:	4a05      	ldr	r2, [pc, #20]	; (8008910 <SDMMC_CmdStopTransfer+0x40>)
 80088fc:	210c      	movs	r1, #12
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f82a 	bl	8008958 <SDMMC_GetCmdResp1>
 8008904:	61f8      	str	r0, [r7, #28]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	05f5e100 	.word	0x05f5e100

08008914 <SDMMC_CmdSendStatus>:
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	230d      	movs	r3, #13
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	2300      	movs	r3, #0
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	f107 0308 	add.w	r3, r7, #8
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff ff7e 	bl	800883c <SDIO_SendCommand>
 8008940:	f241 3288 	movw	r2, #5000	; 0x1388
 8008944:	210d      	movs	r1, #13
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f806 	bl	8008958 <SDMMC_GetCmdResp1>
 800894c:	61f8      	str	r0, [r7, #28]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <SDMMC_GetCmdResp1>:
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
 8008966:	4b6f      	ldr	r3, [pc, #444]	; (8008b24 <SDMMC_GetCmdResp1+0x1cc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a6f      	ldr	r2, [pc, #444]	; (8008b28 <SDMMC_GetCmdResp1+0x1d0>)
 800896c:	fba2 2303 	umull	r2, r3, r2, r3
 8008970:	0a5b      	lsrs	r3, r3, #9
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	fb02 f403 	mul.w	r4, r2, r3
 8008978:	4623      	mov	r3, r4
 800897a:	1e5c      	subs	r4, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <SDMMC_GetCmdResp1+0x2e>
 8008980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008984:	e0c9      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <SDMMC_GetCmdResp1+0x20>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1eb      	bne.n	8008978 <SDMMC_GetCmdResp1+0x20>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <SDMMC_GetCmdResp1+0x5e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2204      	movs	r2, #4
 80089b0:	639a      	str	r2, [r3, #56]	; 0x38
 80089b2:	2304      	movs	r3, #4
 80089b4:	e0b1      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <SDMMC_GetCmdResp1+0x74>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0a6      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	22c5      	movs	r2, #197	; 0xc5
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff ff5c 	bl	8008890 <SDIO_GetCommandResponse>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	4293      	cmp	r3, r2
 80089e0:	d001      	beq.n	80089e6 <SDMMC_GetCmdResp1+0x8e>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e099      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff ff5e 	bl	80088aa <SDIO_GetResponse>
 80089ee:	6138      	str	r0, [r7, #16]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4b4e      	ldr	r3, [pc, #312]	; (8008b2c <SDMMC_GetCmdResp1+0x1d4>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <SDMMC_GetCmdResp1+0xa6>
 80089fa:	2300      	movs	r3, #0
 80089fc:	e08d      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	da02      	bge.n	8008a0a <SDMMC_GetCmdResp1+0xb2>
 8008a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a08:	e087      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <SDMMC_GetCmdResp1+0xc0>
 8008a14:	2340      	movs	r3, #64	; 0x40
 8008a16:	e080      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SDMMC_GetCmdResp1+0xce>
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	e079      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <SDMMC_GetCmdResp1+0xde>
 8008a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a34:	e071      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <SDMMC_GetCmdResp1+0xee>
 8008a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a44:	e069      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <SDMMC_GetCmdResp1+0xfe>
 8008a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a54:	e061      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0x10e>
 8008a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a64:	e059      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <SDMMC_GetCmdResp1+0x11e>
 8008a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a74:	e051      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x12e>
 8008a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a84:	e049      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp1+0x13e>
 8008a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a94:	e041      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SDMMC_GetCmdResp1+0x14e>
 8008aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aa4:	e039      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <SDMMC_GetCmdResp1+0x15e>
 8008ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ab4:	e031      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <SDMMC_GetCmdResp1+0x16e>
 8008ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ac4:	e029      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <SDMMC_GetCmdResp1+0x17e>
 8008ad0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ad4:	e021      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <SDMMC_GetCmdResp1+0x18e>
 8008ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ae4:	e019      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <SDMMC_GetCmdResp1+0x19e>
 8008af0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008af4:	e011      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <SDMMC_GetCmdResp1+0x1ae>
 8008b00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b04:	e009      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <SDMMC_GetCmdResp1+0x1be>
 8008b10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b14:	e001      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c2>
 8008b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd90      	pop	{r4, r7, pc}
 8008b22:	bf00      	nop
 8008b24:	2000004c 	.word	0x2000004c
 8008b28:	10624dd3 	.word	0x10624dd3
 8008b2c:	fdffe008 	.word	0xfdffe008

08008b30 <USB_CoreInit>:
 8008b30:	b084      	sub	sp, #16
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	f107 001c 	add.w	r0, r7, #28
 8008b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d122      	bne.n	8008b8e <USB_CoreInit+0x5e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	60d3      	str	r3, [r2, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d105      	bne.n	8008b82 <USB_CoreInit+0x52>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60da      	str	r2, [r3, #12]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fa7c 	bl	800a080 <USB_CoreReset>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e01a      	b.n	8008bc4 <USB_CoreInit+0x94>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fa70 	bl	800a080 <USB_CoreReset>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
 8008ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <USB_CoreInit+0x88>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb6:	e005      	b.n	8008bc4 <USB_CoreInit+0x94>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d10b      	bne.n	8008be2 <USB_CoreInit+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f043 0206 	orr.w	r2, r3, #6
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	609a      	str	r2, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f043 0220 	orr.w	r2, r3, #32
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bee:	b004      	add	sp, #16
 8008bf0:	4770      	bx	lr
	...

08008bf4 <USB_SetTurnaroundTime>:
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	71fb      	strb	r3, [r7, #7]
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d165      	bne.n	8008cd4 <USB_SetTurnaroundTime+0xe0>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4a41      	ldr	r2, [pc, #260]	; (8008d10 <USB_SetTurnaroundTime+0x11c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d906      	bls.n	8008c1e <USB_SetTurnaroundTime+0x2a>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a40      	ldr	r2, [pc, #256]	; (8008d14 <USB_SetTurnaroundTime+0x120>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d802      	bhi.n	8008c1e <USB_SetTurnaroundTime+0x2a>
 8008c18:	230f      	movs	r3, #15
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e062      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4a3c      	ldr	r2, [pc, #240]	; (8008d14 <USB_SetTurnaroundTime+0x120>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d906      	bls.n	8008c34 <USB_SetTurnaroundTime+0x40>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4a3b      	ldr	r2, [pc, #236]	; (8008d18 <USB_SetTurnaroundTime+0x124>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d802      	bhi.n	8008c34 <USB_SetTurnaroundTime+0x40>
 8008c2e:	230e      	movs	r3, #14
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	e057      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <USB_SetTurnaroundTime+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d906      	bls.n	8008c4a <USB_SetTurnaroundTime+0x56>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4a37      	ldr	r2, [pc, #220]	; (8008d1c <USB_SetTurnaroundTime+0x128>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d802      	bhi.n	8008c4a <USB_SetTurnaroundTime+0x56>
 8008c44:	230d      	movs	r3, #13
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e04c      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4a33      	ldr	r2, [pc, #204]	; (8008d1c <USB_SetTurnaroundTime+0x128>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d906      	bls.n	8008c60 <USB_SetTurnaroundTime+0x6c>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4a32      	ldr	r2, [pc, #200]	; (8008d20 <USB_SetTurnaroundTime+0x12c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d802      	bhi.n	8008c60 <USB_SetTurnaroundTime+0x6c>
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	e041      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4a2f      	ldr	r2, [pc, #188]	; (8008d20 <USB_SetTurnaroundTime+0x12c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d906      	bls.n	8008c76 <USB_SetTurnaroundTime+0x82>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4a2e      	ldr	r2, [pc, #184]	; (8008d24 <USB_SetTurnaroundTime+0x130>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d802      	bhi.n	8008c76 <USB_SetTurnaroundTime+0x82>
 8008c70:	230b      	movs	r3, #11
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e036      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4a2a      	ldr	r2, [pc, #168]	; (8008d24 <USB_SetTurnaroundTime+0x130>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d906      	bls.n	8008c8c <USB_SetTurnaroundTime+0x98>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	4a29      	ldr	r2, [pc, #164]	; (8008d28 <USB_SetTurnaroundTime+0x134>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d802      	bhi.n	8008c8c <USB_SetTurnaroundTime+0x98>
 8008c86:	230a      	movs	r3, #10
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e02b      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4a26      	ldr	r2, [pc, #152]	; (8008d28 <USB_SetTurnaroundTime+0x134>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d906      	bls.n	8008ca2 <USB_SetTurnaroundTime+0xae>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a25      	ldr	r2, [pc, #148]	; (8008d2c <USB_SetTurnaroundTime+0x138>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d802      	bhi.n	8008ca2 <USB_SetTurnaroundTime+0xae>
 8008c9c:	2309      	movs	r3, #9
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e020      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4a21      	ldr	r2, [pc, #132]	; (8008d2c <USB_SetTurnaroundTime+0x138>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d906      	bls.n	8008cb8 <USB_SetTurnaroundTime+0xc4>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a20      	ldr	r2, [pc, #128]	; (8008d30 <USB_SetTurnaroundTime+0x13c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d802      	bhi.n	8008cb8 <USB_SetTurnaroundTime+0xc4>
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e015      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <USB_SetTurnaroundTime+0x13c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d906      	bls.n	8008cce <USB_SetTurnaroundTime+0xda>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a1c      	ldr	r2, [pc, #112]	; (8008d34 <USB_SetTurnaroundTime+0x140>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d802      	bhi.n	8008cce <USB_SetTurnaroundTime+0xda>
 8008cc8:	2307      	movs	r3, #7
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e00a      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008cce:	2306      	movs	r3, #6
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e007      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <USB_SetTurnaroundTime+0xec>
 8008cda:	2309      	movs	r3, #9
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e001      	b.n	8008ce4 <USB_SetTurnaroundTime+0xf0>
 8008ce0:	2309      	movs	r3, #9
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	60da      	str	r2, [r3, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	029b      	lsls	r3, r3, #10
 8008cf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
 8008d02:	2300      	movs	r3, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	00d8acbf 	.word	0x00d8acbf
 8008d14:	00e4e1bf 	.word	0x00e4e1bf
 8008d18:	00f423ff 	.word	0x00f423ff
 8008d1c:	0106737f 	.word	0x0106737f
 8008d20:	011a499f 	.word	0x011a499f
 8008d24:	01312cff 	.word	0x01312cff
 8008d28:	014ca43f 	.word	0x014ca43f
 8008d2c:	016e35ff 	.word	0x016e35ff
 8008d30:	01a6ab1f 	.word	0x01a6ab1f
 8008d34:	01e847ff 	.word	0x01e847ff

08008d38 <USB_EnableGlobalInt>:
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f043 0201 	orr.w	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_DisableGlobalInt>:
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f023 0201 	bic.w	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_SetCurrentMode>:
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60da      	str	r2, [r3, #12]
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d106      	bne.n	8008da8 <USB_SetCurrentMode+0x2c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e00b      	b.n	8008dc0 <USB_SetCurrentMode+0x44>
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <USB_SetCurrentMode+0x40>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	e001      	b.n	8008dc0 <USB_SetCurrentMode+0x44>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e003      	b.n	8008dc8 <USB_SetCurrentMode+0x4c>
 8008dc0:	2032      	movs	r0, #50	; 0x32
 8008dc2:	f7fb faef 	bl	80043a4 <HAL_Delay>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USB_DevInit>:
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	2300      	movs	r3, #0
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	e009      	b.n	8008e04 <USB_DevInit+0x34>
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	3340      	adds	r3, #64	; 0x40
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3301      	adds	r3, #1
 8008e02:	613b      	str	r3, [r7, #16]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b0e      	cmp	r3, #14
 8008e08:	d9f2      	bls.n	8008df0 <USB_DevInit+0x20>
 8008e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d112      	bne.n	8008e36 <USB_DevInit+0x66>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
 8008e34:	e00b      	b.n	8008e4e <USB_DevInit+0x7e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e60:	4619      	mov	r1, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e68:	461a      	mov	r2, r3
 8008e6a:	680b      	ldr	r3, [r1, #0]
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d10c      	bne.n	8008e8e <USB_DevInit+0xbe>
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USB_DevInit+0xb4>
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f961 	bl	8009144 <USB_SetDevSpeed>
 8008e82:	e008      	b.n	8008e96 <USB_DevInit+0xc6>
 8008e84:	2101      	movs	r1, #1
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f95c 	bl	8009144 <USB_SetDevSpeed>
 8008e8c:	e003      	b.n	8008e96 <USB_DevInit+0xc6>
 8008e8e:	2103      	movs	r1, #3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f957 	bl	8009144 <USB_SetDevSpeed>
 8008e96:	2110      	movs	r1, #16
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f90b 	bl	80090b4 <USB_FlushTxFifo>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <USB_DevInit+0xd8>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f929 	bl	8009100 <USB_FlushRxFifo>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <USB_DevInit+0xe8>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	75fb      	strb	r3, [r7, #23]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6113      	str	r3, [r2, #16]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eca:	461a      	mov	r2, r3
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6153      	str	r3, [r2, #20]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61d3      	str	r3, [r2, #28]
 8008edc:	2300      	movs	r3, #0
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	e043      	b.n	8008f6a <USB_DevInit+0x19a>
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef8:	d118      	bne.n	8008f2c <USB_DevInit+0x15c>
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <USB_DevInit+0x146>
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	e013      	b.n	8008f3e <USB_DevInit+0x16e>
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	461a      	mov	r2, r3
 8008f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e008      	b.n	8008f3e <USB_DevInit+0x16e>
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f38:	461a      	mov	r2, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6113      	str	r3, [r2, #16]
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f62:	6093      	str	r3, [r2, #8]
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3301      	adds	r3, #1
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d3b7      	bcc.n	8008ee2 <USB_DevInit+0x112>
 8008f72:	2300      	movs	r3, #0
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	e043      	b.n	8009000 <USB_DevInit+0x230>
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8e:	d118      	bne.n	8008fc2 <USB_DevInit+0x1f2>
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <USB_DevInit+0x1dc>
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e013      	b.n	8008fd4 <USB_DevInit+0x204>
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	e008      	b.n	8008fd4 <USB_DevInit+0x204>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6113      	str	r3, [r2, #16]
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ff8:	6093      	str	r3, [r2, #8]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	429a      	cmp	r2, r3
 8009006:	d3b7      	bcc.n	8008f78 <USB_DevInit+0x1a8>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800901a:	6113      	str	r3, [r2, #16]
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2b01      	cmp	r3, #1
 8009020:	d111      	bne.n	8009046 <USB_DevInit+0x276>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	461a      	mov	r2, r3
 800902a:	4b20      	ldr	r3, [pc, #128]	; (80090ac <USB_DevInit+0x2dc>)
 800902c:	6313      	str	r3, [r2, #48]	; 0x30
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800903c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009040:	f043 0303 	orr.w	r3, r3, #3
 8009044:	6313      	str	r3, [r2, #48]	; 0x30
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	619a      	str	r2, [r3, #24]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009052:	615a      	str	r2, [r3, #20]
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2b00      	cmp	r3, #0
 8009058:	d105      	bne.n	8009066 <USB_DevInit+0x296>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f043 0210 	orr.w	r2, r3, #16
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	619a      	str	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <USB_DevInit+0x2e0>)
 800906c:	4313      	orrs	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6193      	str	r3, [r2, #24]
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <USB_DevInit+0x2b4>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f043 0208 	orr.w	r2, r3, #8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	619a      	str	r2, [r3, #24]
 8009084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009086:	2b01      	cmp	r3, #1
 8009088:	d107      	bne.n	800909a <USB_DevInit+0x2ca>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009092:	f043 0304 	orr.w	r3, r3, #4
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6193      	str	r3, [r2, #24]
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a6:	b004      	add	sp, #16
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	00800100 	.word	0x00800100
 80090b0:	803c3800 	.word	0x803c3800

080090b4 <USB_FlushTxFifo>:
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	019b      	lsls	r3, r3, #6
 80090c6:	f043 0220 	orr.w	r2, r3, #32
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	611a      	str	r2, [r3, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <USB_FlushTxFifo+0x48>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d901      	bls.n	80090e0 <USB_FlushTxFifo+0x2c>
 80090dc:	2303      	movs	r3, #3
 80090de:	e006      	b.n	80090ee <USB_FlushTxFifo+0x3a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d0f0      	beq.n	80090ce <USB_FlushTxFifo+0x1a>
 80090ec:	2300      	movs	r3, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	00030d40 	.word	0x00030d40

08009100 <USB_FlushRxFifo>:
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2210      	movs	r2, #16
 8009110:	611a      	str	r2, [r3, #16]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a09      	ldr	r2, [pc, #36]	; (8009140 <USB_FlushRxFifo+0x40>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d901      	bls.n	8009124 <USB_FlushRxFifo+0x24>
 8009120:	2303      	movs	r3, #3
 8009122:	e006      	b.n	8009132 <USB_FlushRxFifo+0x32>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b10      	cmp	r3, #16
 800912e:	d0f0      	beq.n	8009112 <USB_FlushRxFifo+0x12>
 8009130:	2300      	movs	r3, #0
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	00030d40 	.word	0x00030d40

08009144 <USB_SetDevSpeed>:
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009164:	4313      	orrs	r3, r2
 8009166:	600b      	str	r3, [r1, #0]
 8009168:	2300      	movs	r3, #0
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USB_GetDevSpeed>:
 8009176:	b480      	push	{r7}
 8009178:	b087      	sub	sp, #28
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0306 	and.w	r3, r3, #6
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <USB_GetDevSpeed+0x26>
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]
 800919a:	e00a      	b.n	80091b2 <USB_GetDevSpeed+0x3c>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d002      	beq.n	80091a8 <USB_GetDevSpeed+0x32>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b06      	cmp	r3, #6
 80091a6:	d102      	bne.n	80091ae <USB_GetDevSpeed+0x38>
 80091a8:	2302      	movs	r3, #2
 80091aa:	75fb      	strb	r3, [r7, #23]
 80091ac:	e001      	b.n	80091b2 <USB_GetDevSpeed+0x3c>
 80091ae:	230f      	movs	r3, #15
 80091b0:	75fb      	strb	r3, [r7, #23]
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_ActivateEndpoint>:
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	60bb      	str	r3, [r7, #8]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d13a      	bne.n	8009252 <USB_ActivateEndpoint+0x92>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 030f 	and.w	r3, r3, #15
 80091ec:	2101      	movs	r1, #1
 80091ee:	fa01 f303 	lsl.w	r3, r1, r3
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	68f9      	ldr	r1, [r7, #12]
 80091f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61cb      	str	r3, [r1, #28]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d155      	bne.n	80092c0 <USB_ActivateEndpoint+0x100>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	78db      	ldrb	r3, [r3, #3]
 800922e:	049b      	lsls	r3, r3, #18
 8009230:	4319      	orrs	r1, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	059b      	lsls	r3, r3, #22
 8009236:	430b      	orrs	r3, r1
 8009238:	4313      	orrs	r3, r2
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	e036      	b.n	80092c0 <USB_ActivateEndpoint+0x100>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009258:	69da      	ldr	r2, [r3, #28]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	2101      	movs	r1, #1
 8009264:	fa01 f303 	lsl.w	r3, r1, r3
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009270:	4313      	orrs	r3, r2
 8009272:	61cb      	str	r3, [r1, #28]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11a      	bne.n	80092c0 <USB_ActivateEndpoint+0x100>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	78db      	ldrb	r3, [r3, #3]
 80092a4:	049b      	lsls	r3, r3, #18
 80092a6:	430b      	orrs	r3, r1
 80092a8:	4313      	orrs	r3, r2
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <USB_DeactivateEndpoint>:
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	60bb      	str	r3, [r7, #8]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d135      	bne.n	8009358 <USB_DeactivateEndpoint+0x88>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009302:	b29b      	uxth	r3, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800930c:	4013      	ands	r3, r2
 800930e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	2101      	movs	r1, #1
 8009322:	fa01 f303 	lsl.w	r3, r1, r3
 8009326:	b29b      	uxth	r3, r3
 8009328:	43db      	mvns	r3, r3
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009330:	4013      	ands	r3, r2
 8009332:	61cb      	str	r3, [r1, #28]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0159      	lsls	r1, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	440b      	add	r3, r1
 800934a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934e:	4619      	mov	r1, r3
 8009350:	4b1f      	ldr	r3, [pc, #124]	; (80093d0 <USB_DeactivateEndpoint+0x100>)
 8009352:	4013      	ands	r3, r2
 8009354:	600b      	str	r3, [r1, #0]
 8009356:	e034      	b.n	80093c2 <USB_DeactivateEndpoint+0xf2>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	2101      	movs	r1, #1
 800936a:	fa01 f303 	lsl.w	r3, r1, r3
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	43db      	mvns	r3, r3
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009378:	4013      	ands	r3, r2
 800937a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	2101      	movs	r1, #1
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	43db      	mvns	r3, r3
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800939c:	4013      	ands	r3, r2
 800939e:	61cb      	str	r3, [r1, #28]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	0159      	lsls	r1, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	440b      	add	r3, r1
 80093b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ba:	4619      	mov	r1, r3
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <USB_DeactivateEndpoint+0x104>)
 80093be:	4013      	ands	r3, r2
 80093c0:	600b      	str	r3, [r1, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	ec337800 	.word	0xec337800
 80093d4:	eff37800 	.word	0xeff37800

080093d8 <USB_EPStartXfer>:
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	; 0x28
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	71fb      	strb	r3, [r7, #7]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	61bb      	str	r3, [r7, #24]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f040 815c 	bne.w	80096b2 <USB_EPStartXfer+0x2da>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d132      	bne.n	8009468 <USB_EPStartXfer+0x90>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009420:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009424:	6113      	str	r3, [r2, #16]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009444:	6113      	str	r3, [r2, #16]
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009460:	0cdb      	lsrs	r3, r3, #19
 8009462:	04db      	lsls	r3, r3, #19
 8009464:	6113      	str	r3, [r2, #16]
 8009466:	e074      	b.n	8009552 <USB_EPStartXfer+0x17a>
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	0151      	lsls	r1, r2, #5
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	440a      	add	r2, r1
 800947e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009482:	0cdb      	lsrs	r3, r3, #19
 8009484:	04db      	lsls	r3, r3, #19
 8009486:	6113      	str	r3, [r2, #16]
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094aa:	6113      	str	r3, [r2, #16]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6959      	ldr	r1, [r3, #20]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	440b      	add	r3, r1
 80094c4:	1e59      	subs	r1, r3, #1
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ce:	04d9      	lsls	r1, r3, #19
 80094d0:	4b9d      	ldr	r3, [pc, #628]	; (8009748 <USB_EPStartXfer+0x370>)
 80094d2:	400b      	ands	r3, r1
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	0148      	lsls	r0, r1, #5
 80094d8:	69f9      	ldr	r1, [r7, #28]
 80094da:	4401      	add	r1, r0
 80094dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094e0:	4313      	orrs	r3, r2
 80094e2:	610b      	str	r3, [r1, #16]
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	0148      	lsls	r0, r1, #5
 80094fe:	69f9      	ldr	r1, [r7, #28]
 8009500:	4401      	add	r1, r0
 8009502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009506:	4313      	orrs	r3, r2
 8009508:	610b      	str	r3, [r1, #16]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	78db      	ldrb	r3, [r3, #3]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d11f      	bne.n	8009552 <USB_EPStartXfer+0x17a>
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	440a      	add	r2, r1
 8009528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009530:	6113      	str	r3, [r2, #16]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	440a      	add	r2, r1
 8009548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009550:	6113      	str	r3, [r2, #16]
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d14b      	bne.n	80095f0 <USB_EPStartXfer+0x218>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d009      	beq.n	8009574 <USB_EPStartXfer+0x19c>
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956c:	461a      	mov	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	6153      	str	r3, [r2, #20]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	78db      	ldrb	r3, [r3, #3]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d128      	bne.n	80095ce <USB_EPStartXfer+0x1f6>
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009588:	2b00      	cmp	r3, #0
 800958a:	d110      	bne.n	80095ae <USB_EPStartXfer+0x1d6>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	0151      	lsls	r1, r2, #5
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	440a      	add	r2, r1
 80095a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e00f      	b.n	80095ce <USB_EPStartXfer+0x1f6>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	e12f      	b.n	8009850 <USB_EPStartXfer+0x478>
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	78db      	ldrb	r3, [r3, #3]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d015      	beq.n	8009644 <USB_EPStartXfer+0x26c>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8117 	beq.w	8009850 <USB_EPStartXfer+0x478>
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	2101      	movs	r1, #1
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
 8009638:	69f9      	ldr	r1, [r7, #28]
 800963a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800963e:	4313      	orrs	r3, r2
 8009640:	634b      	str	r3, [r1, #52]	; 0x34
 8009642:	e105      	b.n	8009850 <USB_EPStartXfer+0x478>
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009650:	2b00      	cmp	r3, #0
 8009652:	d110      	bne.n	8009676 <USB_EPStartXfer+0x29e>
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	0151      	lsls	r1, r2, #5
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	440a      	add	r2, r1
 800966a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	e00f      	b.n	8009696 <USB_EPStartXfer+0x2be>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	69ba      	ldr	r2, [r7, #24]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	440a      	add	r2, r1
 800968c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	68d9      	ldr	r1, [r3, #12]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	b298      	uxth	r0, r3
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4603      	mov	r3, r0
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fa2b 	bl	8009b06 <USB_WritePacket>
 80096b0:	e0ce      	b.n	8009850 <USB_EPStartXfer+0x478>
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096cc:	0cdb      	lsrs	r3, r3, #19
 80096ce:	04db      	lsls	r3, r3, #19
 80096d0:	6113      	str	r3, [r2, #16]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096f4:	6113      	str	r3, [r2, #16]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d126      	bne.n	800974c <USB_EPStartXfer+0x374>
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009714:	69b9      	ldr	r1, [r7, #24]
 8009716:	0148      	lsls	r0, r1, #5
 8009718:	69f9      	ldr	r1, [r7, #28]
 800971a:	4401      	add	r1, r0
 800971c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009720:	4313      	orrs	r3, r2
 8009722:	610b      	str	r3, [r1, #16]
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009742:	6113      	str	r3, [r2, #16]
 8009744:	e036      	b.n	80097b4 <USB_EPStartXfer+0x3dc>
 8009746:	bf00      	nop
 8009748:	1ff80000 	.word	0x1ff80000
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	695a      	ldr	r2, [r3, #20]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	4413      	add	r3, r2
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	82fb      	strh	r3, [r7, #22]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	8afb      	ldrh	r3, [r7, #22]
 8009772:	04d9      	lsls	r1, r3, #19
 8009774:	4b39      	ldr	r3, [pc, #228]	; (800985c <USB_EPStartXfer+0x484>)
 8009776:	400b      	ands	r3, r1
 8009778:	69b9      	ldr	r1, [r7, #24]
 800977a:	0148      	lsls	r0, r1, #5
 800977c:	69f9      	ldr	r1, [r7, #28]
 800977e:	4401      	add	r1, r0
 8009780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009784:	4313      	orrs	r3, r2
 8009786:	610b      	str	r3, [r1, #16]
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009794:	691a      	ldr	r2, [r3, #16]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	8af9      	ldrh	r1, [r7, #22]
 800979c:	fb01 f303 	mul.w	r3, r1, r3
 80097a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a4:	69b9      	ldr	r1, [r7, #24]
 80097a6:	0148      	lsls	r0, r1, #5
 80097a8:	69f9      	ldr	r1, [r7, #28]
 80097aa:	4401      	add	r1, r0
 80097ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d10d      	bne.n	80097d6 <USB_EPStartXfer+0x3fe>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <USB_EPStartXfer+0x3fe>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	68d9      	ldr	r1, [r3, #12]
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	460a      	mov	r2, r1
 80097d4:	615a      	str	r2, [r3, #20]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	78db      	ldrb	r3, [r3, #3]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d128      	bne.n	8009830 <USB_EPStartXfer+0x458>
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d110      	bne.n	8009810 <USB_EPStartXfer+0x438>
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e00f      	b.n	8009830 <USB_EPStartXfer+0x458>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	0151      	lsls	r1, r2, #5
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	440a      	add	r2, r1
 8009846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800984a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	2300      	movs	r3, #0
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	1ff80000 	.word	0x1ff80000

08009860 <USB_EP0StartXfer>:
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	71fb      	strb	r3, [r7, #7]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	785b      	ldrb	r3, [r3, #1]
 800987c:	2b01      	cmp	r3, #1
 800987e:	f040 80cd 	bne.w	8009a1c <USB_EP0StartXfer+0x1bc>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d132      	bne.n	80098f0 <USB_EP0StartXfer+0x90>
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098ac:	6113      	str	r3, [r2, #16]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098cc:	6113      	str	r3, [r2, #16]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	0151      	lsls	r1, r2, #5
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	440a      	add	r2, r1
 80098e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e8:	0cdb      	lsrs	r3, r3, #19
 80098ea:	04db      	lsls	r3, r3, #19
 80098ec:	6113      	str	r3, [r2, #16]
 80098ee:	e04e      	b.n	800998e <USB_EP0StartXfer+0x12e>
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990a:	0cdb      	lsrs	r3, r3, #19
 800990c:	04db      	lsls	r3, r3, #19
 800990e:	6113      	str	r3, [r2, #16]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800992e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009932:	6113      	str	r3, [r2, #16]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	695a      	ldr	r2, [r3, #20]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	d903      	bls.n	8009948 <USB_EP0StartXfer+0xe8>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	615a      	str	r2, [r3, #20]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009966:	6113      	str	r3, [r2, #16]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	691a      	ldr	r2, [r3, #16]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800997e:	6939      	ldr	r1, [r7, #16]
 8009980:	0148      	lsls	r0, r1, #5
 8009982:	6979      	ldr	r1, [r7, #20]
 8009984:	4401      	add	r1, r0
 8009986:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800998a:	4313      	orrs	r3, r2
 800998c:	610b      	str	r3, [r1, #16]
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d11e      	bne.n	80099d2 <USB_EP0StartXfer+0x172>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d009      	beq.n	80099b0 <USB_EP0StartXfer+0x150>
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	461a      	mov	r2, r3
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	6153      	str	r3, [r2, #20]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	0151      	lsls	r1, r2, #5
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	440a      	add	r2, r1
 80099c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	e092      	b.n	8009af8 <USB_EP0StartXfer+0x298>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d07e      	beq.n	8009af8 <USB_EP0StartXfer+0x298>
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a10:	6979      	ldr	r1, [r7, #20]
 8009a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a16:	4313      	orrs	r3, r2
 8009a18:	634b      	str	r3, [r1, #52]	; 0x34
 8009a1a:	e06d      	b.n	8009af8 <USB_EP0StartXfer+0x298>
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a36:	0cdb      	lsrs	r3, r3, #19
 8009a38:	04db      	lsls	r3, r3, #19
 8009a3a:	6113      	str	r3, [r2, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a5e:	6113      	str	r3, [r2, #16]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <USB_EP0StartXfer+0x210>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	615a      	str	r2, [r3, #20]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	0151      	lsls	r1, r2, #5
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	440a      	add	r2, r1
 8009a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a8e:	6113      	str	r3, [r2, #16]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aa6:	6939      	ldr	r1, [r7, #16]
 8009aa8:	0148      	lsls	r0, r1, #5
 8009aaa:	6979      	ldr	r1, [r7, #20]
 8009aac:	4401      	add	r1, r0
 8009aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	610b      	str	r3, [r1, #16]
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d10d      	bne.n	8009ad8 <USB_EP0StartXfer+0x278>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <USB_EP0StartXfer+0x278>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	68d9      	ldr	r1, [r3, #12]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	615a      	str	r2, [r3, #20]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	0151      	lsls	r1, r2, #5
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	440a      	add	r2, r1
 8009aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	2300      	movs	r3, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USB_WritePacket>:
 8009b06:	b480      	push	{r7}
 8009b08:	b089      	sub	sp, #36	; 0x24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	460b      	mov	r3, r1
 8009b16:	71fb      	strb	r3, [r7, #7]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80bb      	strh	r3, [r7, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11a      	bne.n	8009b62 <USB_WritePacket+0x5c>
 8009b2c:	88bb      	ldrh	r3, [r7, #4]
 8009b2e:	3303      	adds	r3, #3
 8009b30:	089b      	lsrs	r3, r3, #2
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	2300      	movs	r3, #0
 8009b36:	61bb      	str	r3, [r7, #24]
 8009b38:	e00f      	b.n	8009b5a <USB_WritePacket+0x54>
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	031a      	lsls	r2, r3, #12
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b46:	461a      	mov	r2, r3
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	3304      	adds	r3, #4
 8009b52:	61fb      	str	r3, [r7, #28]
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	3301      	adds	r3, #1
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d3eb      	bcc.n	8009b3a <USB_WritePacket+0x34>
 8009b62:	2300      	movs	r3, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	3724      	adds	r7, #36	; 0x24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USB_ReadPacket>:
 8009b70:	b480      	push	{r7}
 8009b72:	b089      	sub	sp, #36	; 0x24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	3303      	adds	r3, #3
 8009b8a:	089b      	lsrs	r3, r3, #2
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e00b      	b.n	8009bac <USB_ReadPacket+0x3c>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	61fb      	str	r3, [r7, #28]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d3ef      	bcc.n	8009b94 <USB_ReadPacket+0x24>
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3724      	adds	r7, #36	; 0x24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USB_EPSetStall>:
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	60bb      	str	r3, [r7, #8]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d12c      	bne.n	8009c38 <USB_EPSetStall+0x76>
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db12      	blt.n	8009c16 <USB_EPSetStall+0x54>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00f      	beq.n	8009c16 <USB_EPSetStall+0x54>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	0151      	lsls	r1, r2, #5
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	e02b      	b.n	8009c90 <USB_EPSetStall+0xce>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	db12      	blt.n	8009c70 <USB_EPSetStall+0xae>
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00f      	beq.n	8009c70 <USB_EPSetStall+0xae>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	0151      	lsls	r1, r2, #5
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	440a      	add	r2, r1
 8009c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	2300      	movs	r3, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USB_EPClearStall>:
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d128      	bne.n	8009d0c <USB_EPClearStall+0x6e>
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	78db      	ldrb	r3, [r3, #3]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d003      	beq.n	8009cea <USB_EPClearStall+0x4c>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	78db      	ldrb	r3, [r3, #3]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d138      	bne.n	8009d5c <USB_EPClearStall+0xbe>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	0151      	lsls	r1, r2, #5
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	440a      	add	r2, r1
 8009d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e027      	b.n	8009d5c <USB_EPClearStall+0xbe>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	0151      	lsls	r1, r2, #5
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	440a      	add	r2, r1
 8009d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	78db      	ldrb	r3, [r3, #3]
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d003      	beq.n	8009d3c <USB_EPClearStall+0x9e>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	78db      	ldrb	r3, [r3, #3]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d10f      	bne.n	8009d5c <USB_EPClearStall+0xbe>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USB_SetDevAddress>:
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da4:	4313      	orrs	r3, r2
 8009da6:	600b      	str	r3, [r1, #0]
 8009da8:	2300      	movs	r3, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USB_DevConnect>:
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dd0:	f023 0302 	bic.w	r3, r3, #2
 8009dd4:	6053      	str	r3, [r2, #4]
 8009dd6:	2003      	movs	r0, #3
 8009dd8:	f7fa fae4 	bl	80043a4 <HAL_Delay>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USB_DevDisconnect>:
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e00:	f043 0302 	orr.w	r3, r3, #2
 8009e04:	6053      	str	r3, [r2, #4]
 8009e06:	2003      	movs	r0, #3
 8009e08:	f7fa facc 	bl	80043a4 <HAL_Delay>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USB_ReadInterrupts>:
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USB_ReadDevAllOutEpInterrupt>:
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	60bb      	str	r3, [r7, #8]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	0c1b      	lsrs	r3, r3, #16
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USB_ReadDevAllInEpInterrupt>:
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	60bb      	str	r3, [r7, #8]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4013      	ands	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USB_ReadDevOutEPInterrupt>:
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	60bb      	str	r3, [r7, #8]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <USB_ReadDevInEPInterrupt>:
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	617b      	str	r3, [r7, #20]
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	613b      	str	r3, [r7, #16]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	01db      	lsls	r3, r3, #7
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	4618      	mov	r0, r3
 8009f32:	371c      	adds	r7, #28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USB_GetMode>:
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USB_ActivateSetup>:
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f72:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f003 0306 	and.w	r3, r3, #6
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d109      	bne.n	8009fa0 <USB_ActivateSetup+0x48>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9a:	f043 0303 	orr.w	r3, r3, #3
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb2:	6053      	str	r3, [r2, #4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <USB_EP0_OutStart>:
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	72fb      	strb	r3, [r7, #11]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	333c      	adds	r3, #60	; 0x3c
 8009fda:	3304      	adds	r3, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4a26      	ldr	r2, [pc, #152]	; (800a07c <USB_EP0_OutStart+0xb8>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d90a      	bls.n	8009ffe <USB_EP0_OutStart+0x3a>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ff8:	d101      	bne.n	8009ffe <USB_EP0_OutStart+0x3a>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e037      	b.n	800a06e <USB_EP0_OutStart+0xaa>
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	461a      	mov	r2, r3
 800a006:	2300      	movs	r3, #0
 800a008:	6113      	str	r3, [r2, #16]
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a01c:	6113      	str	r3, [r2, #16]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a02c:	f043 0318 	orr.w	r3, r3, #24
 800a030:	6113      	str	r3, [r2, #16]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a040:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a044:	6113      	str	r3, [r2, #16]
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d10f      	bne.n	800a06c <USB_EP0_OutStart+0xa8>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6153      	str	r3, [r2, #20]
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a066:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	2300      	movs	r3, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	4f54300a 	.word	0x4f54300a

0800a080 <USB_CoreReset>:
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3301      	adds	r3, #1
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <USB_CoreReset+0x64>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d901      	bls.n	800a09e <USB_CoreReset+0x1e>
 800a09a:	2303      	movs	r3, #3
 800a09c:	e01b      	b.n	800a0d6 <USB_CoreReset+0x56>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	daf2      	bge.n	800a08c <USB_CoreReset+0xc>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f043 0201 	orr.w	r2, r3, #1
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	611a      	str	r2, [r3, #16]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <USB_CoreReset+0x64>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d901      	bls.n	800a0c8 <USB_CoreReset+0x48>
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e006      	b.n	800a0d6 <USB_CoreReset+0x56>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d0f0      	beq.n	800a0b6 <USB_CoreReset+0x36>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	00030d40 	.word	0x00030d40

0800a0e8 <HAL_SD_AbortCallback>:
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	f000 f818 	bl	800a124 <BSP_SD_AbortCallback>
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_SD_TxCpltCallback>:
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	f000 f815 	bl	800a132 <BSP_SD_WriteCpltCallback>
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_SD_RxCpltCallback>:
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	f000 f812 	bl	800a140 <BSP_SD_ReadCpltCallback>
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <BSP_SD_AbortCallback>:
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
 800a128:	bf00      	nop
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <BSP_SD_WriteCpltCallback>:
 800a132:	b480      	push	{r7}
 800a134:	af00      	add	r7, sp, #0
 800a136:	bf00      	nop
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <BSP_SD_ReadCpltCallback>:
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <rfalAnalogConfigInitialize+0x24>)
 800a156:	4a08      	ldr	r2, [pc, #32]	; (800a178 <rfalAnalogConfigInitialize+0x28>)
 800a158:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <rfalAnalogConfigInitialize+0x24>)
 800a15c:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a160:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <rfalAnalogConfigInitialize+0x24>)
 800a164:	2201      	movs	r2, #1
 800a166:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800a168:	bf00      	nop
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	2000071c 	.word	0x2000071c
 800a178:	080138fc 	.word	0x080138fc

0800a17c <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800a18e:	4b4b      	ldr	r3, [pc, #300]	; (800a2bc <rfalSetAnalogConfig+0x140>)
 800a190:	799b      	ldrb	r3, [r3, #6]
 800a192:	f083 0301 	eor.w	r3, r3, #1
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800a19c:	2305      	movs	r3, #5
 800a19e:	e089      	b.n	800a2b4 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800a1a0:	f107 020e 	add.w	r2, r7, #14
 800a1a4:	88fb      	ldrh	r3, [r7, #6]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 f889 	bl	800a2c0 <rfalAnalogConfigSearch>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800a1b2:	7d3b      	ldrb	r3, [r7, #20]
 800a1b4:	2bff      	cmp	r3, #255	; 0xff
 800a1b6:	d07b      	beq.n	800a2b0 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800a1b8:	4b40      	ldr	r3, [pc, #256]	; (800a2bc <rfalSetAnalogConfig+0x140>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	89fb      	ldrh	r3, [r7, #14]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800a1c4:	7d3b      	ldrb	r3, [r7, #20]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800a1d4:	4b39      	ldr	r3, [pc, #228]	; (800a2bc <rfalSetAnalogConfig+0x140>)
 800a1d6:	889b      	ldrh	r3, [r3, #4]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	89fa      	ldrh	r2, [r7, #14]
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d201      	bcs.n	800a1e4 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e067      	b.n	800a2b4 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	757b      	strb	r3, [r7, #21]
 800a1e8:	e05d      	b.n	800a2a6 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800a1ea:	7d7b      	ldrb	r3, [r7, #21]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	7d7a      	ldrb	r2, [r7, #21]
 800a1f8:	0092      	lsls	r2, r2, #2
 800a1fa:	6939      	ldr	r1, [r7, #16]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	7852      	ldrb	r2, [r2, #1]
 800a200:	4313      	orrs	r3, r2
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d026      	beq.n	800a258 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800a20a:	7d7b      	ldrb	r3, [r7, #21]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4413      	add	r3, r2
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	b21a      	sxth	r2, r3
 800a218:	7d7b      	ldrb	r3, [r7, #21]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	6939      	ldr	r1, [r7, #16]
 800a21e:	440b      	add	r3, r1
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	b21b      	sxth	r3, r3
 800a224:	4313      	orrs	r3, r2
 800a226:	b21b      	sxth	r3, r3
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22e:	b298      	uxth	r0, r3
 800a230:	7d7b      	ldrb	r3, [r7, #21]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4413      	add	r3, r2
 800a238:	7899      	ldrb	r1, [r3, #2]
 800a23a:	7d7b      	ldrb	r3, [r7, #21]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	78db      	ldrb	r3, [r3, #3]
 800a244:	461a      	mov	r2, r3
 800a246:	f002 fc81 	bl	800cb4c <rfalChipChangeTestRegBits>
 800a24a:	4603      	mov	r3, r0
 800a24c:	82fb      	strh	r3, [r7, #22]
 800a24e:	8afb      	ldrh	r3, [r7, #22]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d025      	beq.n	800a2a0 <rfalSetAnalogConfig+0x124>
 800a254:	8afb      	ldrh	r3, [r7, #22]
 800a256:	e02d      	b.n	800a2b4 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800a258:	7d7b      	ldrb	r3, [r7, #21]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	b21a      	sxth	r2, r3
 800a266:	7d7b      	ldrb	r3, [r7, #21]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	6939      	ldr	r1, [r7, #16]
 800a26c:	440b      	add	r3, r1
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	b21b      	sxth	r3, r3
 800a272:	4313      	orrs	r3, r2
 800a274:	b21b      	sxth	r3, r3
 800a276:	b298      	uxth	r0, r3
 800a278:	7d7b      	ldrb	r3, [r7, #21]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	4413      	add	r3, r2
 800a280:	7899      	ldrb	r1, [r3, #2]
 800a282:	7d7b      	ldrb	r3, [r7, #21]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4413      	add	r3, r2
 800a28a:	78db      	ldrb	r3, [r3, #3]
 800a28c:	461a      	mov	r2, r3
 800a28e:	f002 fc3b 	bl	800cb08 <rfalChipChangeRegBits>
 800a292:	4603      	mov	r3, r0
 800a294:	82fb      	strh	r3, [r7, #22]
 800a296:	8afb      	ldrh	r3, [r7, #22]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <rfalSetAnalogConfig+0x124>
 800a29c:	8afb      	ldrh	r3, [r7, #22]
 800a29e:	e009      	b.n	800a2b4 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800a2a0:	7d7b      	ldrb	r3, [r7, #21]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	757b      	strb	r3, [r7, #21]
 800a2a6:	7d7a      	ldrb	r2, [r7, #21]
 800a2a8:	7d3b      	ldrb	r3, [r7, #20]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d39d      	bcc.n	800a1ea <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800a2ae:	e777      	b.n	800a1a0 <rfalSetAnalogConfig+0x24>
            break;
 800a2b0:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800a2b2:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	2000071c 	.word	0x2000071c

0800a2c0 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800a2cc:	4b31      	ldr	r3, [pc, #196]	; (800a394 <rfalAnalogConfigSearch+0xd4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a2d8:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <rfalAnalogConfigSearch+0x34>
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ec:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	e001      	b.n	800a2f8 <rfalAnalogConfigSearch+0x38>
 800a2f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	f003 030f 	and.w	r3, r3, #15
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <rfalAnalogConfigSearch+0x48>
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	e000      	b.n	800a30a <rfalAnalogConfigSearch+0x4a>
 800a308:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800a30a:	4313      	orrs	r3, r2
 800a30c:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b04      	cmp	r3, #4
 800a318:	d102      	bne.n	800a320 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800a31a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a31e:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800a326:	e029      	b.n	800a37c <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800a328:	8abb      	ldrh	r3, [r7, #20]
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4413      	add	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b21a      	sxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3301      	adds	r3, #1
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b21b      	sxth	r3, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	b21b      	sxth	r3, r3
 800a344:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800a346:	897a      	ldrh	r2, [r7, #10]
 800a348:	8afb      	ldrh	r3, [r7, #22]
 800a34a:	4013      	ands	r3, r2
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	88fa      	ldrh	r2, [r7, #6]
 800a350:	429a      	cmp	r2, r3
 800a352:	d108      	bne.n	800a366 <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800a354:	8abb      	ldrh	r3, [r7, #20]
 800a356:	3303      	adds	r3, #3
 800a358:	b29a      	uxth	r2, r3
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3302      	adds	r3, #2
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	e010      	b.n	800a388 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3302      	adds	r3, #2
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800a372:	8abb      	ldrh	r3, [r7, #20]
 800a374:	4413      	add	r3, r2
 800a376:	b29b      	uxth	r3, r3
 800a378:	3303      	adds	r3, #3
 800a37a:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <rfalAnalogConfigSearch+0xd4>)
 800a37e:	889b      	ldrh	r3, [r3, #4]
 800a380:	8aba      	ldrh	r2, [r7, #20]
 800a382:	429a      	cmp	r2, r3
 800a384:	d3d0      	bcc.n	800a328 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800a386:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	2000071c 	.word	0x2000071c

0800a398 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	80fb      	strh	r3, [r7, #6]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	81bb      	strh	r3, [r7, #12]
 800a3b0:	e00d      	b.n	800a3ce <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800a3b2:	89bb      	ldrh	r3, [r7, #12]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	89fb      	ldrh	r3, [r7, #14]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f80e 	bl	800a3e0 <rfalCrcUpdateCcitt>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800a3c8:	89bb      	ldrh	r3, [r7, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	81bb      	strh	r3, [r7, #12]
 800a3ce:	89ba      	ldrh	r2, [r7, #12]
 800a3d0:	88bb      	ldrh	r3, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d3ed      	bcc.n	800a3b2 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800a3d6:	89fb      	ldrh	r3, [r7, #14]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460a      	mov	r2, r1
 800a3ea:	80fb      	strh	r3, [r7, #6]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800a3f0:	88fb      	ldrh	r3, [r7, #6]
 800a3f2:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800a3f4:	797b      	ldrb	r3, [r7, #5]
 800a3f6:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800a3f8:	89fb      	ldrh	r3, [r7, #14]
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	7b7b      	ldrb	r3, [r7, #13]
 800a3fe:	4053      	eors	r3, r2
 800a400:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800a402:	7b7b      	ldrb	r3, [r7, #13]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	b25a      	sxtb	r2, r3
 800a408:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a40c:	4053      	eors	r3, r2
 800a40e:	b25b      	sxtb	r3, r3
 800a410:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800a412:	89fb      	ldrh	r3, [r7, #14]
 800a414:	0a1b      	lsrs	r3, r3, #8
 800a416:	b29b      	uxth	r3, r3
 800a418:	b21a      	sxth	r2, r3
 800a41a:	7b7b      	ldrb	r3, [r7, #13]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b21b      	sxth	r3, r3
 800a420:	4053      	eors	r3, r2
 800a422:	b21a      	sxth	r2, r3
 800a424:	7b7b      	ldrb	r3, [r7, #13]
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	b21b      	sxth	r3, r3
 800a42a:	4053      	eors	r3, r2
 800a42c:	b21a      	sxth	r2, r3
 800a42e:	7b7b      	ldrb	r3, [r7, #13]
 800a430:	091b      	lsrs	r3, r3, #4
 800a432:	b2db      	uxtb	r3, r3
 800a434:	b21b      	sxth	r3, r3
 800a436:	4053      	eors	r3, r2
 800a438:	b21b      	sxth	r3, r3
 800a43a:	81fb      	strh	r3, [r7, #14]

    return crc;
 800a43c:	89fb      	ldrh	r3, [r7, #14]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
	...

0800a44c <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800a456:	2208      	movs	r2, #8
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	480d      	ldr	r0, [pc, #52]	; (800a490 <iso15693PhyConfigure+0x44>)
 800a45c:	f005 fc67 	bl	800fd2e <memcpy>
    
    if ( config->speedMode <= 3U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b03      	cmp	r3, #3
 800a466:	d808      	bhi.n	800a47a <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f1c3 0303 	rsb	r3, r3, #3
 800a472:	b2da      	uxtb	r2, r3
 800a474:	4b07      	ldr	r3, [pc, #28]	; (800a494 <iso15693PhyConfigure+0x48>)
 800a476:	70da      	strb	r2, [r3, #3]
 800a478:	e002      	b.n	800a480 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <iso15693PhyConfigure+0x48>)
 800a47c:	2203      	movs	r2, #3
 800a47e:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	4a04      	ldr	r2, [pc, #16]	; (800a494 <iso15693PhyConfigure+0x48>)
 800a484:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20000724 	.word	0x20000724
 800a494:	20000058 	.word	0x20000058

0800a498 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b08b      	sub	sp, #44	; 0x2c
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	807b      	strh	r3, [r7, #2]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	707b      	strb	r3, [r7, #1]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800a4ba:	787b      	ldrb	r3, [r7, #1]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <iso15693VCDCode+0x2c>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e000      	b.n	800a4c6 <iso15693VCDCode+0x2e>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800a4ce:	4b94      	ldr	r3, [pc, #592]	; (800a720 <iso15693VCDCode+0x288>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d117      	bne.n	800a506 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800a4d6:	2321      	movs	r3, #33	; 0x21
 800a4d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800a4e2:	4b90      	ldr	r3, [pc, #576]	; (800a724 <iso15693VCDCode+0x28c>)
 800a4e4:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800a4e6:	887a      	ldrh	r2, [r7, #2]
 800a4e8:	7d7b      	ldrb	r3, [r7, #21]
 800a4ea:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	3302      	adds	r3, #2
 800a4f4:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800a4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f8:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800a4fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d823      	bhi.n	800a54a <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800a502:	2301      	movs	r3, #1
 800a504:	e13a      	b.n	800a77c <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800a506:	2381      	movs	r3, #129	; 0x81
 800a508:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800a50c:	2304      	movs	r3, #4
 800a50e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800a512:	4b85      	ldr	r3, [pc, #532]	; (800a728 <iso15693VCDCode+0x290>)
 800a514:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800a516:	887a      	ldrh	r2, [r7, #2]
 800a518:	7d7b      	ldrb	r3, [r7, #21]
 800a51a:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	019b      	lsls	r3, r3, #6
 800a520:	b29b      	uxth	r3, r3
 800a522:	3302      	adds	r3, #2
 800a524:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800a52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800a532:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a536:	2b3f      	cmp	r3, #63	; 0x3f
 800a538:	d807      	bhi.n	800a54a <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e11e      	b.n	800a77c <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800a53e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d801      	bhi.n	800a54a <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800a546:	2301      	movs	r3, #1
 800a548:	e118      	b.n	800a77c <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800a54a:	887b      	ldrh	r3, [r7, #2]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800a550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a552:	2201      	movs	r2, #1
 800a554:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800a556:	887b      	ldrh	r3, [r7, #2]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01b      	beq.n	800a594 <iso15693VCDCode+0xfc>
 800a55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d117      	bne.n	800a594 <iso15693VCDCode+0xfc>
 800a564:	783b      	ldrb	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d014      	beq.n	800a594 <iso15693VCDCode+0xfc>
 800a56a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a56e:	f083 0301 	eor.w	r3, r3, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00d      	beq.n	800a594 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	b2da      	uxtb	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	f023 0301 	bic.w	r3, r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800a594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a596:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800a598:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a59c:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800a59e:	887b      	ldrh	r3, [r7, #2]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03b      	beq.n	800a61c <iso15693VCDCode+0x184>
 800a5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d137      	bne.n	800a61c <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a5b2:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800a5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5be:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800a5c0:	8afb      	ldrh	r3, [r7, #22]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800a5cc:	e026      	b.n	800a61c <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800a5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	7818      	ldrb	r0, [r3, #0]
 800a5da:	f107 030e 	add.w	r3, r7, #14
 800a5de:	8afa      	ldrh	r2, [r7, #22]
 800a5e0:	69fc      	ldr	r4, [r7, #28]
 800a5e2:	69b9      	ldr	r1, [r7, #24]
 800a5e4:	47a0      	blx	r4
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800a5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ec:	881a      	ldrh	r2, [r3, #0]
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f6:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800a5f8:	89fb      	ldrh	r3, [r7, #14]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	4413      	add	r3, r2
 800a600:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800a602:	89fb      	ldrh	r3, [r7, #14]
 800a604:	8afa      	ldrh	r2, [r7, #22]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800a60a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d105      	bne.n	800a61c <iso15693VCDCode+0x184>
            (*offset)++;
 800a610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	3301      	adds	r3, #1
 800a616:	b29a      	uxth	r2, r3
 800a618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61a:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800a61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	887a      	ldrh	r2, [r7, #2]
 800a622:	429a      	cmp	r2, r3
 800a624:	d902      	bls.n	800a62c <iso15693VCDCode+0x194>
 800a626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0d0      	beq.n	800a5ce <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800a62c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d063      	beq.n	800a6fa <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800a632:	230d      	movs	r3, #13
 800a634:	e0a2      	b.n	800a77c <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800a636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d12b      	bne.n	800a694 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800a63c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <iso15693VCDCode+0x1b2>
 800a644:	f24e 0012 	movw	r0, #57362	; 0xe012
 800a648:	e001      	b.n	800a64e <iso15693VCDCode+0x1b6>
 800a64a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a64e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <iso15693VCDCode+0x1c4>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3301      	adds	r3, #1
 800a65a:	e000      	b.n	800a65e <iso15693VCDCode+0x1c6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a662:	2a00      	cmp	r2, #0
 800a664:	d003      	beq.n	800a66e <iso15693VCDCode+0x1d6>
 800a666:	887a      	ldrh	r2, [r7, #2]
 800a668:	3a01      	subs	r2, #1
 800a66a:	b292      	uxth	r2, r2
 800a66c:	e000      	b.n	800a670 <iso15693VCDCode+0x1d8>
 800a66e:	887a      	ldrh	r2, [r7, #2]
 800a670:	4619      	mov	r1, r3
 800a672:	f7ff fe91 	bl	800a398 <rfalCrcCalculateCcitt>
 800a676:	4603      	mov	r3, r0
 800a678:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800a67a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a67e:	f083 0301 	eor.w	r3, r3, #1
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <iso15693VCDCode+0x1f8>
 800a688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a68a:	43db      	mvns	r3, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	e000      	b.n	800a692 <iso15693VCDCode+0x1fa>
 800a690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a692:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800a694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a696:	b2db      	uxtb	r3, r3
 800a698:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800a69a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800a6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	887b      	ldrh	r3, [r7, #2]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800a6b8:	f107 030c 	add.w	r3, r7, #12
 800a6bc:	8afa      	ldrh	r2, [r7, #22]
 800a6be:	69fc      	ldr	r4, [r7, #28]
 800a6c0:	69b9      	ldr	r1, [r7, #24]
 800a6c2:	47a0      	blx	r4
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ca:	881a      	ldrh	r2, [r3, #0]
 800a6cc:	89bb      	ldrh	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d4:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800a6d6:	89bb      	ldrh	r3, [r7, #12]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	4413      	add	r3, r2
 800a6de:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800a6e0:	89bb      	ldrh	r3, [r7, #12]
 800a6e2:	8afa      	ldrh	r2, [r7, #22]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800a6e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d105      	bne.n	800a6fa <iso15693VCDCode+0x262>
            (*offset)++;
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f8:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800a6fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d109      	bne.n	800a714 <iso15693VCDCode+0x27c>
 800a700:	787b      	ldrb	r3, [r7, #1]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <iso15693VCDCode+0x27c>
 800a706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	887b      	ldrh	r3, [r7, #2]
 800a70e:	3302      	adds	r3, #2
 800a710:	429a      	cmp	r2, r3
 800a712:	d390      	bcc.n	800a636 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800a714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800a71a:	230d      	movs	r3, #13
 800a71c:	e02e      	b.n	800a77c <iso15693VCDCode+0x2e4>
 800a71e:	bf00      	nop
 800a720:	20000724 	.word	0x20000724
 800a724:	0800a9c1 	.word	0x0800a9c1
 800a728:	0800aa69 	.word	0x0800aa69
    }

    if ((!sendCrc && (*offset == length))
 800a72c:	787b      	ldrb	r3, [r7, #1]
 800a72e:	f083 0301 	eor.w	r3, r3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <iso15693VCDCode+0x2aa>
 800a738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	887a      	ldrh	r2, [r7, #2]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d009      	beq.n	800a756 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800a742:	787b      	ldrb	r3, [r7, #1]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d018      	beq.n	800a77a <iso15693VCDCode+0x2e2>
 800a748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	3302      	adds	r3, #2
 800a752:	429a      	cmp	r2, r3
 800a754:	d111      	bne.n	800a77a <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a75c:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	b29a      	uxth	r2, r3
 800a766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a768:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800a76a:	8afb      	ldrh	r3, [r7, #22]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	3301      	adds	r3, #1
 800a774:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800a776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a778:	e000      	b.n	800a77c <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800a77a:	230d      	movs	r3, #13
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	372c      	adds	r7, #44	; 0x2c
 800a780:	46bd      	mov	sp, r7
 800a782:	bd90      	pop	{r4, r7, pc}

0800a784 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	461a      	mov	r2, r3
 800a790:	460b      	mov	r3, r1
 800a792:	817b      	strh	r3, [r7, #10]
 800a794:	4613      	mov	r3, r2
 800a796:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800a798:	2300      	movs	r3, #0
 800a79a:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	2200      	movs	r2, #0
 800a7a0:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 031f 	and.w	r3, r3, #31
 800a7b0:	2b17      	cmp	r3, #23
 800a7b2:	d001      	beq.n	800a7b8 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800a7b4:	2309      	movs	r3, #9
 800a7b6:	e0ff      	b.n	800a9b8 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800a7b8:	893b      	ldrh	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e0fa      	b.n	800a9b8 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800a7c2:	2305      	movs	r3, #5
 800a7c4:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800a7ca:	893b      	ldrh	r3, [r7, #8]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f005 fab7 	bl	800fd44 <memset>

    if (inBufLen == 0U)
 800a7d6:	897b      	ldrh	r3, [r7, #10]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f040 808e 	bne.w	800a8fa <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800a7de:	2315      	movs	r3, #21
 800a7e0:	e0ea      	b.n	800a9b8 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800a7e6:	8bbb      	ldrh	r3, [r7, #28]
 800a7e8:	08db      	lsrs	r3, r3, #3
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	8bbb      	ldrh	r3, [r7, #28]
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	fa42 f303 	asr.w	r3, r2, r3
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800a808:	8bbb      	ldrh	r3, [r7, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	08db      	lsrs	r3, r3, #3
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4413      	add	r3, r2
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	8bbb      	ldrh	r3, [r7, #28]
 800a818:	3301      	adds	r3, #1
 800a81a:	f003 0307 	and.w	r3, r3, #7
 800a81e:	fa42 f303 	asr.w	r3, r2, r3
 800a822:	b2db      	uxtb	r3, r3
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	7e3b      	ldrb	r3, [r7, #24]
 800a830:	4313      	orrs	r3, r2
 800a832:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800a834:	7e3b      	ldrb	r3, [r7, #24]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d102      	bne.n	800a840 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800a83a:	8b7b      	ldrh	r3, [r7, #26]
 800a83c:	3301      	adds	r3, #1
 800a83e:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800a840:	7e3b      	ldrb	r3, [r7, #24]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d119      	bne.n	800a87a <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800a846:	8b7b      	ldrh	r3, [r7, #26]
 800a848:	08db      	lsrs	r3, r3, #3
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	7819      	ldrb	r1, [r3, #0]
 800a854:	8b7b      	ldrh	r3, [r7, #26]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	2201      	movs	r2, #1
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	b2da      	uxtb	r2, r3
 800a862:	8b7b      	ldrh	r3, [r7, #26]
 800a864:	08db      	lsrs	r3, r3, #3
 800a866:	b29b      	uxth	r3, r3
 800a868:	4618      	mov	r0, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4403      	add	r3, r0
 800a86e:	430a      	orrs	r2, r1
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	701a      	strb	r2, [r3, #0]
            bp++;
 800a874:	8b7b      	ldrh	r3, [r7, #26]
 800a876:	3301      	adds	r3, #1
 800a878:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800a87a:	8b7b      	ldrh	r3, [r7, #26]
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d115      	bne.n	800a8b2 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800a886:	8bbb      	ldrh	r3, [r7, #28]
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	461a      	mov	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a898:	2ba0      	cmp	r3, #160	; 0xa0
 800a89a:	d10a      	bne.n	800a8b2 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800a89c:	8bbb      	ldrh	r3, [r7, #28]
 800a89e:	08db      	lsrs	r3, r3, #3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d101      	bne.n	800a8b2 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800a8b2:	7e3b      	ldrb	r3, [r7, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <iso15693VICCDecode+0x13a>
 800a8b8:	7e3b      	ldrb	r3, [r7, #24]
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d10f      	bne.n	800a8de <iso15693VICCDecode+0x15a>
 800a8be:	7e7b      	ldrb	r3, [r7, #25]
 800a8c0:	f083 0301 	eor.w	r3, r3, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d009      	beq.n	800a8de <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800a8ca:	8b7a      	ldrh	r2, [r7, #26]
 800a8cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d302      	bcc.n	800a8d8 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800a8d2:	231d      	movs	r3, #29
 800a8d4:	83fb      	strh	r3, [r7, #30]
 800a8d6:	e002      	b.n	800a8de <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800a8d8:	8b7b      	ldrh	r3, [r7, #26]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800a8de:	8b7a      	ldrh	r2, [r7, #26]
 800a8e0:	893b      	ldrh	r3, [r7, #8]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d20f      	bcs.n	800a908 <iso15693VICCDecode+0x184>
 800a8e8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ea:	2b1d      	cmp	r3, #29
 800a8ec:	d00c      	beq.n	800a908 <iso15693VICCDecode+0x184>
 800a8ee:	7e7b      	ldrb	r3, [r7, #25]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d109      	bne.n	800a908 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800a8f4:	8bbb      	ldrh	r3, [r7, #28]
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	83bb      	strh	r3, [r7, #28]
 800a8fa:	8bba      	ldrh	r2, [r7, #28]
 800a8fc:	897b      	ldrh	r3, [r7, #10]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	3b02      	subs	r3, #2
 800a902:	429a      	cmp	r2, r3
 800a904:	f4ff af6d 	bcc.w	800a7e2 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800a908:	8b7b      	ldrh	r3, [r7, #26]
 800a90a:	08db      	lsrs	r3, r3, #3
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	8b7a      	ldrh	r2, [r7, #26]
 800a916:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800a918:	8bfb      	ldrh	r3, [r7, #30]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <iso15693VICCDecode+0x19e>
    {
        return err;
 800a91e:	8bfb      	ldrh	r3, [r7, #30]
 800a920:	e04a      	b.n	800a9b8 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800a922:	8b7b      	ldrh	r3, [r7, #26]
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800a92e:	2315      	movs	r3, #21
 800a930:	e042      	b.n	800a9b8 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d93b      	bls.n	800a9b2 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800a93a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <iso15693VICCDecode+0x1c4>
 800a942:	f24e 0012 	movw	r0, #57362	; 0xe012
 800a946:	e001      	b.n	800a94c <iso15693VICCDecode+0x1c8>
 800a948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	3b02      	subs	r3, #2
 800a952:	b29b      	uxth	r3, r3
 800a954:	461a      	mov	r2, r3
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	f7ff fd1e 	bl	800a398 <rfalCrcCalculateCcitt>
 800a95c:	4603      	mov	r3, r0
 800a95e:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800a960:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a964:	f083 0301 	eor.w	r3, r3, #1
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <iso15693VICCDecode+0x1f2>
 800a96e:	8afb      	ldrh	r3, [r7, #22]
 800a970:	43db      	mvns	r3, r3
 800a972:	b29b      	uxth	r3, r3
 800a974:	e000      	b.n	800a978 <iso15693VICCDecode+0x1f4>
 800a976:	8afb      	ldrh	r3, [r7, #22]
 800a978:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800a97a:	8afb      	ldrh	r3, [r7, #22]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a980:	8812      	ldrh	r2, [r2, #0]
 800a982:	3a02      	subs	r2, #2
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	440a      	add	r2, r1
 800a988:	7812      	ldrb	r2, [r2, #0]
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d10e      	bne.n	800a9ac <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800a98e:	8afb      	ldrh	r3, [r7, #22]
 800a990:	0a1b      	lsrs	r3, r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	b2db      	uxtb	r3, r3
 800a996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a998:	8812      	ldrh	r2, [r2, #0]
 800a99a:	3a01      	subs	r2, #1
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	440a      	add	r2, r1
 800a9a0:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d102      	bne.n	800a9ac <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	83fb      	strh	r3, [r7, #30]
 800a9aa:	e004      	b.n	800a9b6 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800a9ac:	2315      	movs	r3, #21
 800a9ae:	83fb      	strh	r3, [r7, #30]
 800a9b0:	e001      	b.n	800a9b6 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800a9b2:	2315      	movs	r3, #21
 800a9b4:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800a9b6:	8bfb      	ldrh	r3, [r7, #30]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	; 0x24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607b      	str	r3, [r7, #4]
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800a9e0:	89bb      	ldrh	r3, [r7, #12]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d801      	bhi.n	800a9ea <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e038      	b.n	800aa5c <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	83bb      	strh	r3, [r7, #28]
 800a9f2:	e02f      	b.n	800aa54 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800a9f4:	7ffb      	ldrb	r3, [r7, #31]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d81a      	bhi.n	800aa34 <iso15693PhyVCDCode1Of4+0x74>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <iso15693PhyVCDCode1Of4+0x44>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa15 	.word	0x0800aa15
 800aa08:	0800aa1d 	.word	0x0800aa1d
 800aa0c:	0800aa25 	.word	0x0800aa25
 800aa10:	0800aa2d 	.word	0x0800aa2d
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2202      	movs	r2, #2
 800aa18:	701a      	strb	r2, [r3, #0]
                break;
 800aa1a:	e00c      	b.n	800aa36 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2208      	movs	r2, #8
 800aa20:	701a      	strb	r2, [r3, #0]
                break;
 800aa22:	e008      	b.n	800aa36 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2220      	movs	r2, #32
 800aa28:	701a      	strb	r2, [r3, #0]
                break;
 800aa2a:	e004      	b.n	800aa36 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2280      	movs	r2, #128	; 0x80
 800aa30:	701a      	strb	r2, [r3, #0]
                break;
 800aa32:	e000      	b.n	800aa36 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800aa34:	bf00      	nop
        }
        outbuf++;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800aa48:	7ffb      	ldrb	r3, [r7, #31]
 800aa4a:	089b      	lsrs	r3, r3, #2
 800aa4c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800aa4e:	8bbb      	ldrh	r3, [r7, #28]
 800aa50:	3301      	adds	r3, #1
 800aa52:	83bb      	strh	r3, [r7, #28]
 800aa54:	8bbb      	ldrh	r3, [r7, #28]
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d9cc      	bls.n	800a9f4 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800aa5a:	8afb      	ldrh	r3, [r7, #22]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3724      	adds	r7, #36	; 0x24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b089      	sub	sp, #36	; 0x24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607b      	str	r3, [r7, #4]
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
 800aa76:	4613      	mov	r3, r2
 800aa78:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800aa88:	89bb      	ldrh	r3, [r7, #12]
 800aa8a:	2b3f      	cmp	r3, #63	; 0x3f
 800aa8c:	d801      	bhi.n	800aa92 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e039      	b.n	800ab06 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	83bb      	strh	r3, [r7, #28]
 800aa9a:	e030      	b.n	800aafe <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800aa9c:	7ffb      	ldrb	r3, [r7, #31]
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d81a      	bhi.n	800aad8 <iso15693PhyVCDCode1Of256+0x70>
 800aaa2:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <iso15693PhyVCDCode1Of256+0x40>)
 800aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800aac1 	.word	0x0800aac1
 800aab0:	0800aac9 	.word	0x0800aac9
 800aab4:	0800aad1 	.word	0x0800aad1
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
                break;
 800aabe:	e00f      	b.n	800aae0 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2208      	movs	r2, #8
 800aac4:	701a      	strb	r2, [r3, #0]
                break;
 800aac6:	e00b      	b.n	800aae0 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	2220      	movs	r2, #32
 800aacc:	701a      	strb	r2, [r3, #0]
                break;
 800aace:	e007      	b.n	800aae0 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	2280      	movs	r2, #128	; 0x80
 800aad4:	701a      	strb	r2, [r3, #0]
                break;
 800aad6:	e003      	b.n	800aae0 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	2200      	movs	r2, #0
 800aadc:	701a      	strb	r2, [r3, #0]
                break;               
 800aade:	bf00      	nop
        }
        outbuf++;
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	3301      	adds	r3, #1
 800aae4:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800aaf2:	7ffb      	ldrb	r3, [r7, #31]
 800aaf4:	3b04      	subs	r3, #4
 800aaf6:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800aaf8:	8bbb      	ldrh	r3, [r7, #28]
 800aafa:	3301      	adds	r3, #1
 800aafc:	83bb      	strh	r3, [r7, #28]
 800aafe:	8bbb      	ldrh	r3, [r7, #28]
 800ab00:	2b3f      	cmp	r3, #63	; 0x3f
 800ab02:	d9cb      	bls.n	800aa9c <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800ab04:	8afb      	ldrh	r3, [r7, #22]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3724      	adds	r7, #36	; 0x24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop

0800ab14 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800ab1a:	f002 f85b 	bl	800cbd4 <st25r3916Initialize>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	80fb      	strh	r3, [r7, #6]
 800ab22:	88fb      	ldrh	r3, [r7, #6]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <rfalInitialize+0x18>
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	e043      	b.n	800abb4 <rfalInitialize+0xa0>
    
    st25r3916ClearInterrupts();
 800ab2c:	f003 f822 	bl	800db74 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800ab30:	2140      	movs	r1, #64	; 0x40
 800ab32:	2001      	movs	r0, #1
 800ab34:	f002 fd37 	bl	800d5a6 <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f7ff fb1f 	bl	800a17c <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800ab3e:	2203      	movs	r2, #3
 800ab40:	2103      	movs	r1, #3
 800ab42:	2002      	movs	r0, #2
 800ab44:	f002 fdb8 	bl	800d6b8 <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800ab48:	f001 fea8 	bl	800c89c <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <rfalInitialize+0xa8>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800ab52:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <rfalInitialize+0xa8>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800ab58:	4b18      	ldr	r3, [pc, #96]	; (800abbc <rfalInitialize+0xa8>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800ab5e:	4b17      	ldr	r3, [pc, #92]	; (800abbc <rfalInitialize+0xa8>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800ab64:	4b15      	ldr	r3, [pc, #84]	; (800abbc <rfalInitialize+0xa8>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800ab6a:	4b14      	ldr	r3, [pc, #80]	; (800abbc <rfalInitialize+0xa8>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800ab70:	4b12      	ldr	r3, [pc, #72]	; (800abbc <rfalInitialize+0xa8>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <rfalInitialize+0xa8>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <rfalInitialize+0xa8>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800ab82:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <rfalInitialize+0xa8>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <rfalInitialize+0xa8>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <rfalInitialize+0xa8>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <rfalInitialize+0xa8>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800ab9a:	4b08      	ldr	r3, [pc, #32]	; (800abbc <rfalInitialize+0xa8>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <rfalInitialize+0xa8>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800aba6:	4b05      	ldr	r3, [pc, #20]	; (800abbc <rfalInitialize+0xa8>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800abae:	f000 f807 	bl	800abc0 <rfalCalibrate>
    
    return ERR_NONE;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000072c 	.word	0x2000072c

0800abc0 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800abc6:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <rfalCalibrate+0x34>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800abce:	2321      	movs	r3, #33	; 0x21
 800abd0:	e00c      	b.n	800abec <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800abd2:	2200      	movs	r2, #0
 800abd4:	2180      	movs	r1, #128	; 0x80
 800abd6:	202c      	movs	r0, #44	; 0x2c
 800abd8:	f002 fdf2 	bl	800d7c0 <st25r3916CheckReg>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800abe2:	1dbb      	adds	r3, r7, #6
 800abe4:	4618      	mov	r0, r3
 800abe6:	f002 f899 	bl	800cd1c <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	2000072c 	.word	0x2000072c

0800abf8 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	71fb      	strb	r3, [r7, #7]
 800ac02:	460b      	mov	r3, r1
 800ac04:	71bb      	strb	r3, [r7, #6]
 800ac06:	4613      	mov	r3, r2
 800ac08:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800ac0a:	4b99      	ldr	r3, [pc, #612]	; (800ae70 <rfalSetMode+0x278>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800ac12:	2321      	movs	r3, #33	; 0x21
 800ac14:	e127      	b.n	800ae66 <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800ac16:	79bb      	ldrb	r3, [r7, #6]
 800ac18:	2bff      	cmp	r3, #255	; 0xff
 800ac1a:	d002      	beq.n	800ac22 <rfalSetMode+0x2a>
 800ac1c:	797b      	ldrb	r3, [r7, #5]
 800ac1e:	2bff      	cmp	r3, #255	; 0xff
 800ac20:	d101      	bne.n	800ac26 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800ac22:	2307      	movs	r3, #7
 800ac24:	e11f      	b.n	800ae66 <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	2b0c      	cmp	r3, #12
 800ac2c:	f200 8107 	bhi.w	800ae3e <rfalSetMode+0x246>
 800ac30:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <rfalSetMode+0x40>)
 800ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800ac6d 	.word	0x0800ac6d
 800ac3c:	0800ac8f 	.word	0x0800ac8f
 800ac40:	0800acb1 	.word	0x0800acb1
 800ac44:	0800ace7 	.word	0x0800ace7
 800ac48:	0800ad1d 	.word	0x0800ad1d
 800ac4c:	0800ad53 	.word	0x0800ad53
 800ac50:	0800ad75 	.word	0x0800ad75
 800ac54:	0800ad75 	.word	0x0800ad75
 800ac58:	0800ad8f 	.word	0x0800ad8f
 800ac5c:	0800adf7 	.word	0x0800adf7
 800ac60:	0800ae3b 	.word	0x0800ae3b
 800ac64:	0800ae19 	.word	0x0800ae19
 800ac68:	0800adc3 	.word	0x0800adc3
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ac6c:	2104      	movs	r1, #4
 800ac6e:	2002      	movs	r0, #2
 800ac70:	f002 fcbe 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800ac74:	2108      	movs	r1, #8
 800ac76:	2003      	movs	r0, #3
 800ac78:	f002 fbd0 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ac7c:	f240 1001 	movw	r0, #257	; 0x101
 800ac80:	f7ff fa7c 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ac84:	f44f 7081 	mov.w	r0, #258	; 0x102
 800ac88:	f7ff fa78 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ac8c:	e0d9      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ac8e:	2104      	movs	r1, #4
 800ac90:	2002      	movs	r0, #2
 800ac92:	f002 fcad 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800ac96:	2120      	movs	r1, #32
 800ac98:	2003      	movs	r0, #3
 800ac9a:	f002 fbbf 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ac9e:	f240 1001 	movw	r0, #257	; 0x101
 800aca2:	f7ff fa6b 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800aca6:	f44f 7081 	mov.w	r0, #258	; 0x102
 800acaa:	f7ff fa67 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800acae:	e0c8      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800acb0:	2104      	movs	r1, #4
 800acb2:	2002      	movs	r0, #2
 800acb4:	f002 fc9c 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800acb8:	2110      	movs	r1, #16
 800acba:	2003      	movs	r0, #3
 800acbc:	f002 fbae 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800acc0:	2200      	movs	r2, #0
 800acc2:	21fc      	movs	r1, #252	; 0xfc
 800acc4:	2006      	movs	r0, #6
 800acc6:	f002 fcf7 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800acca:	2200      	movs	r2, #0
 800accc:	21f0      	movs	r1, #240	; 0xf0
 800acce:	2007      	movs	r0, #7
 800acd0:	f002 fcf2 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800acd4:	f240 2001 	movw	r0, #513	; 0x201
 800acd8:	f7ff fa50 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800acdc:	f240 2002 	movw	r0, #514	; 0x202
 800ace0:	f7ff fa4c 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ace4:	e0ad      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ace6:	2104      	movs	r1, #4
 800ace8:	2002      	movs	r0, #2
 800acea:	f002 fc81 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800acee:	2110      	movs	r1, #16
 800acf0:	2003      	movs	r0, #3
 800acf2:	f002 fb93 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800acf6:	2200      	movs	r2, #0
 800acf8:	21fc      	movs	r1, #252	; 0xfc
 800acfa:	2006      	movs	r0, #6
 800acfc:	f002 fcdc 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800ad00:	2220      	movs	r2, #32
 800ad02:	21f0      	movs	r1, #240	; 0xf0
 800ad04:	2007      	movs	r0, #7
 800ad06:	f002 fcd7 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad0a:	f240 2001 	movw	r0, #513	; 0x201
 800ad0e:	f7ff fa35 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad12:	f240 2002 	movw	r0, #514	; 0x202
 800ad16:	f7ff fa31 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ad1a:	e092      	b.n	800ae42 <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ad1c:	2104      	movs	r1, #4
 800ad1e:	2002      	movs	r0, #2
 800ad20:	f002 fc66 	bl	800d5f0 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800ad24:	2110      	movs	r1, #16
 800ad26:	2003      	movs	r0, #3
 800ad28:	f002 fb78 	bl	800d41c <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	21fc      	movs	r1, #252	; 0xfc
 800ad30:	2006      	movs	r0, #6
 800ad32:	f002 fcc1 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800ad36:	2230      	movs	r2, #48	; 0x30
 800ad38:	21f0      	movs	r1, #240	; 0xf0
 800ad3a:	2007      	movs	r0, #7
 800ad3c:	f002 fcbc 	bl	800d6b8 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad40:	f240 2001 	movw	r0, #513	; 0x201
 800ad44:	f7ff fa1a 	bl	800a17c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad48:	f240 2002 	movw	r0, #514	; 0x202
 800ad4c:	f7ff fa16 	bl	800a17c <rfalSetAnalogConfig>
                break;
 800ad50:	e077      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ad52:	2104      	movs	r1, #4
 800ad54:	2002      	movs	r0, #2
 800ad56:	f002 fc4b 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800ad5a:	2118      	movs	r1, #24
 800ad5c:	2003      	movs	r0, #3
 800ad5e:	f002 fb5d 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad62:	f240 4001 	movw	r0, #1025	; 0x401
 800ad66:	f7ff fa09 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad6a:	f240 4002 	movw	r0, #1026	; 0x402
 800ad6e:	f7ff fa05 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ad72:	e066      	b.n	800ae42 <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ad74:	2104      	movs	r1, #4
 800ad76:	2002      	movs	r0, #2
 800ad78:	f002 fc3a 	bl	800d5f0 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad7c:	f241 0001 	movw	r0, #4097	; 0x1001
 800ad80:	f7ff f9fc 	bl	800a17c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad84:	f241 0002 	movw	r0, #4098	; 0x1002
 800ad88:	f7ff f9f8 	bl	800a17c <rfalSetAnalogConfig>
                break;
 800ad8c:	e059      	b.n	800ae42 <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800ad8e:	2102      	movs	r1, #2
 800ad90:	2003      	movs	r0, #3
 800ad92:	f002 fb43 	bl	800d41c <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800ad96:	2200      	movs	r2, #0
 800ad98:	2104      	movs	r1, #4
 800ad9a:	2012      	movs	r0, #18
 800ad9c:	f002 fc8c 	bl	800d6b8 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800ada0:	2160      	movs	r1, #96	; 0x60
 800ada2:	2040      	movs	r0, #64	; 0x40
 800ada4:	f002 f931 	bl	800d00a <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	2015      	movs	r0, #21
 800adac:	f002 fb36 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800adb0:	f640 0001 	movw	r0, #2049	; 0x801
 800adb4:	f7ff f9e2 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800adb8:	f640 0002 	movw	r0, #2050	; 0x802
 800adbc:	f7ff f9de 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800adc0:	e03f      	b.n	800ae42 <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800adc2:	21ba      	movs	r1, #186	; 0xba
 800adc4:	2003      	movs	r0, #3
 800adc6:	f002 fb29 	bl	800d41c <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800adca:	2200      	movs	r2, #0
 800adcc:	2104      	movs	r1, #4
 800adce:	2012      	movs	r0, #18
 800add0:	f002 fc72 	bl	800d6b8 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800add4:	2160      	movs	r1, #96	; 0x60
 800add6:	2040      	movs	r0, #64	; 0x40
 800add8:	f002 f917 	bl	800d00a <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800addc:	2180      	movs	r1, #128	; 0x80
 800adde:	2015      	movs	r0, #21
 800ade0:	f002 fb1c 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ade4:	f648 0001 	movw	r0, #34817	; 0x8801
 800ade8:	f7ff f9c8 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800adec:	f648 0002 	movw	r0, #34818	; 0x8802
 800adf0:	f7ff f9c4 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800adf4:	e025      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800adf6:	2104      	movs	r1, #4
 800adf8:	2002      	movs	r0, #2
 800adfa:	f002 fbf9 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800adfe:	2188      	movs	r1, #136	; 0x88
 800ae00:	2003      	movs	r0, #3
 800ae02:	f002 fb0b 	bl	800d41c <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae06:	f248 1001 	movw	r0, #33025	; 0x8101
 800ae0a:	f7ff f9b7 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae0e:	f248 1002 	movw	r0, #33026	; 0x8102
 800ae12:	f7ff f9b3 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ae16:	e014      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ae18:	2104      	movs	r1, #4
 800ae1a:	2002      	movs	r0, #2
 800ae1c:	f002 fbe8 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800ae20:	21a0      	movs	r1, #160	; 0xa0
 800ae22:	2003      	movs	r0, #3
 800ae24:	f002 fafa 	bl	800d41c <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae28:	f248 4001 	movw	r0, #33793	; 0x8401
 800ae2c:	f7ff f9a6 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae30:	f248 4002 	movw	r0, #33794	; 0x8402
 800ae34:	f7ff f9a2 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800ae38:	e003      	b.n	800ae42 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800ae3a:	2318      	movs	r3, #24
 800ae3c:	e013      	b.n	800ae66 <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	e011      	b.n	800ae66 <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800ae42:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <rfalSetMode+0x278>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	bf38      	it	cc
 800ae4a:	2302      	movcc	r3, #2
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	4b08      	ldr	r3, [pc, #32]	; (800ae70 <rfalSetMode+0x278>)
 800ae50:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800ae52:	4a07      	ldr	r2, [pc, #28]	; (800ae70 <rfalSetMode+0x278>)
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800ae58:	797a      	ldrb	r2, [r7, #5]
 800ae5a:	79bb      	ldrb	r3, [r7, #6]
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f808 	bl	800ae74 <rfalSetBitRate>
 800ae64:	4603      	mov	r3, r0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000072c 	.word	0x2000072c

0800ae74 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	460a      	mov	r2, r1
 800ae7e:	71fb      	strb	r3, [r7, #7]
 800ae80:	4613      	mov	r3, r2
 800ae82:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800ae84:	4ba0      	ldr	r3, [pc, #640]	; (800b108 <rfalSetBitRate+0x294>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800ae8c:	2321      	movs	r3, #33	; 0x21
 800ae8e:	e2d2      	b.n	800b436 <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	2bff      	cmp	r3, #255	; 0xff
 800ae94:	d102      	bne.n	800ae9c <rfalSetBitRate+0x28>
 800ae96:	4b9c      	ldr	r3, [pc, #624]	; (800b108 <rfalSetBitRate+0x294>)
 800ae98:	789b      	ldrb	r3, [r3, #2]
 800ae9a:	e000      	b.n	800ae9e <rfalSetBitRate+0x2a>
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	4a9a      	ldr	r2, [pc, #616]	; (800b108 <rfalSetBitRate+0x294>)
 800aea0:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800aea2:	79bb      	ldrb	r3, [r7, #6]
 800aea4:	2bff      	cmp	r3, #255	; 0xff
 800aea6:	d102      	bne.n	800aeae <rfalSetBitRate+0x3a>
 800aea8:	4b97      	ldr	r3, [pc, #604]	; (800b108 <rfalSetBitRate+0x294>)
 800aeaa:	78db      	ldrb	r3, [r3, #3]
 800aeac:	e000      	b.n	800aeb0 <rfalSetBitRate+0x3c>
 800aeae:	79bb      	ldrb	r3, [r7, #6]
 800aeb0:	4a95      	ldr	r2, [pc, #596]	; (800b108 <rfalSetBitRate+0x294>)
 800aeb2:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800aeb4:	4b94      	ldr	r3, [pc, #592]	; (800b108 <rfalSetBitRate+0x294>)
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	2b07      	cmp	r3, #7
 800aeba:	d012      	beq.n	800aee2 <rfalSetBitRate+0x6e>
 800aebc:	4b92      	ldr	r3, [pc, #584]	; (800b108 <rfalSetBitRate+0x294>)
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d00e      	beq.n	800aee2 <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800aec4:	4b90      	ldr	r3, [pc, #576]	; (800b108 <rfalSetBitRate+0x294>)
 800aec6:	789a      	ldrb	r2, [r3, #2]
 800aec8:	4b8f      	ldr	r3, [pc, #572]	; (800b108 <rfalSetBitRate+0x294>)
 800aeca:	78db      	ldrb	r3, [r3, #3]
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f001 ff6f 	bl	800cdb2 <st25r3916SetBitrate>
 800aed4:	4603      	mov	r3, r0
 800aed6:	83fb      	strh	r3, [r7, #30]
 800aed8:	8bfb      	ldrh	r3, [r7, #30]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <rfalSetBitRate+0x6e>
 800aede:	8bfb      	ldrh	r3, [r7, #30]
 800aee0:	e2a9      	b.n	800b436 <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800aee2:	4b89      	ldr	r3, [pc, #548]	; (800b108 <rfalSetBitRate+0x294>)
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b0d      	cmp	r3, #13
 800aee8:	f200 82a2 	bhi.w	800b430 <rfalSetBitRate+0x5bc>
 800aeec:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <rfalSetBitRate+0x80>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800b42d 	.word	0x0800b42d
 800aef8:	0800af2d 	.word	0x0800af2d
 800aefc:	0800af2d 	.word	0x0800af2d
 800af00:	0800afb5 	.word	0x0800afb5
 800af04:	0800afb5 	.word	0x0800afb5
 800af08:	0800afb5 	.word	0x0800afb5
 800af0c:	0800b045 	.word	0x0800b045
 800af10:	0800b0d5 	.word	0x0800b0d5
 800af14:	0800b0d5 	.word	0x0800b0d5
 800af18:	0800b209 	.word	0x0800b209
 800af1c:	0800b319 	.word	0x0800b319
 800af20:	0800b42d 	.word	0x0800b42d
 800af24:	0800b3ad 	.word	0x0800b3ad
 800af28:	0800b299 	.word	0x0800b299
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800af2c:	2008      	movs	r0, #8
 800af2e:	f7ff f925 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800af32:	4b75      	ldr	r3, [pc, #468]	; (800b108 <rfalSetBitRate+0x294>)
 800af34:	789b      	ldrb	r3, [r3, #2]
 800af36:	2bea      	cmp	r3, #234	; 0xea
 800af38:	d90c      	bls.n	800af54 <rfalSetBitRate+0xe0>
 800af3a:	4b73      	ldr	r3, [pc, #460]	; (800b108 <rfalSetBitRate+0x294>)
 800af3c:	789b      	ldrb	r3, [r3, #2]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	b29b      	uxth	r3, r3
 800af44:	b2db      	uxtb	r3, r3
 800af46:	b29b      	uxth	r3, r3
 800af48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	e00d      	b.n	800af70 <rfalSetBitRate+0xfc>
 800af54:	4b6c      	ldr	r3, [pc, #432]	; (800b108 <rfalSetBitRate+0x294>)
 800af56:	789b      	ldrb	r3, [r3, #2]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3301      	adds	r3, #1
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	011b      	lsls	r3, r3, #4
 800af60:	b29b      	uxth	r3, r3
 800af62:	b2db      	uxtb	r3, r3
 800af64:	b29b      	uxth	r3, r3
 800af66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af6a:	f043 0301 	orr.w	r3, r3, #1
 800af6e:	b29b      	uxth	r3, r3
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f903 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800af76:	4b64      	ldr	r3, [pc, #400]	; (800b108 <rfalSetBitRate+0x294>)
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	2bea      	cmp	r3, #234	; 0xea
 800af7c:	d90a      	bls.n	800af94 <rfalSetBitRate+0x120>
 800af7e:	4b62      	ldr	r3, [pc, #392]	; (800b108 <rfalSetBitRate+0x294>)
 800af80:	78db      	ldrb	r3, [r3, #3]
 800af82:	b29b      	uxth	r3, r3
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	b29b      	uxth	r3, r3
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800af90:	b29b      	uxth	r3, r3
 800af92:	e00b      	b.n	800afac <rfalSetBitRate+0x138>
 800af94:	4b5c      	ldr	r3, [pc, #368]	; (800b108 <rfalSetBitRate+0x294>)
 800af96:	78db      	ldrb	r3, [r3, #3]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	3301      	adds	r3, #1
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800afaa:	b29b      	uxth	r3, r3
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f8e5 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800afb2:	e23f      	b.n	800b434 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800afb4:	2008      	movs	r0, #8
 800afb6:	f7ff f8e1 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800afba:	4b53      	ldr	r3, [pc, #332]	; (800b108 <rfalSetBitRate+0x294>)
 800afbc:	789b      	ldrb	r3, [r3, #2]
 800afbe:	2bea      	cmp	r3, #234	; 0xea
 800afc0:	d90c      	bls.n	800afdc <rfalSetBitRate+0x168>
 800afc2:	4b51      	ldr	r3, [pc, #324]	; (800b108 <rfalSetBitRate+0x294>)
 800afc4:	789b      	ldrb	r3, [r3, #2]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	b29b      	uxth	r3, r3
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	b29b      	uxth	r3, r3
 800afd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afd4:	f043 0301 	orr.w	r3, r3, #1
 800afd8:	b29b      	uxth	r3, r3
 800afda:	e00d      	b.n	800aff8 <rfalSetBitRate+0x184>
 800afdc:	4b4a      	ldr	r3, [pc, #296]	; (800b108 <rfalSetBitRate+0x294>)
 800afde:	789b      	ldrb	r3, [r3, #2]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3301      	adds	r3, #1
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	b29b      	uxth	r3, r3
 800afea:	b2db      	uxtb	r3, r3
 800afec:	b29b      	uxth	r3, r3
 800afee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aff2:	f043 0301 	orr.w	r3, r3, #1
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff f8bf 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800affe:	4b42      	ldr	r3, [pc, #264]	; (800b108 <rfalSetBitRate+0x294>)
 800b000:	78db      	ldrb	r3, [r3, #3]
 800b002:	2bea      	cmp	r3, #234	; 0xea
 800b004:	d90c      	bls.n	800b020 <rfalSetBitRate+0x1ac>
 800b006:	4b40      	ldr	r3, [pc, #256]	; (800b108 <rfalSetBitRate+0x294>)
 800b008:	78db      	ldrb	r3, [r3, #3]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	011b      	lsls	r3, r3, #4
 800b00e:	b29b      	uxth	r3, r3
 800b010:	b2db      	uxtb	r3, r3
 800b012:	b29b      	uxth	r3, r3
 800b014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b018:	f043 0302 	orr.w	r3, r3, #2
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	e00d      	b.n	800b03c <rfalSetBitRate+0x1c8>
 800b020:	4b39      	ldr	r3, [pc, #228]	; (800b108 <rfalSetBitRate+0x294>)
 800b022:	78db      	ldrb	r3, [r3, #3]
 800b024:	b29b      	uxth	r3, r3
 800b026:	3301      	adds	r3, #1
 800b028:	b29b      	uxth	r3, r3
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	b29b      	uxth	r3, r3
 800b032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b036:	f043 0302 	orr.w	r3, r3, #2
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f89d 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b042:	e1f7      	b.n	800b434 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b044:	2008      	movs	r0, #8
 800b046:	f7ff f899 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <rfalSetBitRate+0x294>)
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	2bea      	cmp	r3, #234	; 0xea
 800b050:	d90c      	bls.n	800b06c <rfalSetBitRate+0x1f8>
 800b052:	4b2d      	ldr	r3, [pc, #180]	; (800b108 <rfalSetBitRate+0x294>)
 800b054:	789b      	ldrb	r3, [r3, #2]
 800b056:	b29b      	uxth	r3, r3
 800b058:	011b      	lsls	r3, r3, #4
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	b29b      	uxth	r3, r3
 800b060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b064:	f043 0301 	orr.w	r3, r3, #1
 800b068:	b29b      	uxth	r3, r3
 800b06a:	e00d      	b.n	800b088 <rfalSetBitRate+0x214>
 800b06c:	4b26      	ldr	r3, [pc, #152]	; (800b108 <rfalSetBitRate+0x294>)
 800b06e:	789b      	ldrb	r3, [r3, #2]
 800b070:	b29b      	uxth	r3, r3
 800b072:	3301      	adds	r3, #1
 800b074:	b29b      	uxth	r3, r3
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	b29b      	uxth	r3, r3
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	b29b      	uxth	r3, r3
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff f877 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b08e:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <rfalSetBitRate+0x294>)
 800b090:	78db      	ldrb	r3, [r3, #3]
 800b092:	2bea      	cmp	r3, #234	; 0xea
 800b094:	d90c      	bls.n	800b0b0 <rfalSetBitRate+0x23c>
 800b096:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <rfalSetBitRate+0x294>)
 800b098:	78db      	ldrb	r3, [r3, #3]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0a8:	f043 0302 	orr.w	r3, r3, #2
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	e00d      	b.n	800b0cc <rfalSetBitRate+0x258>
 800b0b0:	4b15      	ldr	r3, [pc, #84]	; (800b108 <rfalSetBitRate+0x294>)
 800b0b2:	78db      	ldrb	r3, [r3, #3]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	011b      	lsls	r3, r3, #4
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0c6:	f043 0302 	orr.w	r3, r3, #2
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff f855 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b0d2:	e1af      	b.n	800b434 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <rfalSetBitRate+0x294>)
 800b0d6:	78db      	ldrb	r3, [r3, #3]
 800b0d8:	2bec      	cmp	r3, #236	; 0xec
 800b0da:	d00b      	beq.n	800b0f4 <rfalSetBitRate+0x280>
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <rfalSetBitRate+0x294>)
 800b0de:	78db      	ldrb	r3, [r3, #3]
 800b0e0:	2beb      	cmp	r3, #235	; 0xeb
 800b0e2:	d007      	beq.n	800b0f4 <rfalSetBitRate+0x280>
 800b0e4:	4b08      	ldr	r3, [pc, #32]	; (800b108 <rfalSetBitRate+0x294>)
 800b0e6:	78db      	ldrb	r3, [r3, #3]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <rfalSetBitRate+0x280>
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <rfalSetBitRate+0x294>)
 800b0ee:	78db      	ldrb	r3, [r3, #3]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d107      	bne.n	800b104 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <rfalSetBitRate+0x294>)
 800b0f6:	789b      	ldrb	r3, [r3, #2]
 800b0f8:	2bed      	cmp	r3, #237	; 0xed
 800b0fa:	d007      	beq.n	800b10c <rfalSetBitRate+0x298>
 800b0fc:	4b02      	ldr	r3, [pc, #8]	; (800b108 <rfalSetBitRate+0x294>)
 800b0fe:	789b      	ldrb	r3, [r3, #2]
 800b100:	2bec      	cmp	r3, #236	; 0xec
 800b102:	d003      	beq.n	800b10c <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800b104:	2307      	movs	r3, #7
 800b106:	e196      	b.n	800b436 <rfalSetBitRate+0x5c2>
 800b108:	2000072c 	.word	0x2000072c
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800b10c:	4b9a      	ldr	r3, [pc, #616]	; (800b378 <rfalSetBitRate+0x504>)
 800b10e:	789b      	ldrb	r3, [r3, #2]
 800b110:	2bed      	cmp	r3, #237	; 0xed
 800b112:	bf0c      	ite	eq
 800b114:	2301      	moveq	r3, #1
 800b116:	2300      	movne	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800b11c:	4b96      	ldr	r3, [pc, #600]	; (800b378 <rfalSetBitRate+0x504>)
 800b11e:	78db      	ldrb	r3, [r3, #3]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d00a      	beq.n	800b13a <rfalSetBitRate+0x2c6>
 800b124:	2beb      	cmp	r3, #235	; 0xeb
 800b126:	d002      	beq.n	800b12e <rfalSetBitRate+0x2ba>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <rfalSetBitRate+0x2c0>
 800b12c:	e008      	b.n	800b140 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800b12e:	2301      	movs	r3, #1
 800b130:	613b      	str	r3, [r7, #16]
                            break;
 800b132:	e008      	b.n	800b146 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800b134:	2302      	movs	r3, #2
 800b136:	613b      	str	r3, [r7, #16]
                            break;
 800b138:	e005      	b.n	800b146 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800b13a:	2303      	movs	r3, #3
 800b13c:	613b      	str	r3, [r7, #16]
                            break;
 800b13e:	e002      	b.n	800b146 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	613b      	str	r3, [r7, #16]
                            break;
 800b144:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800b146:	f107 0218 	add.w	r2, r7, #24
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	4611      	mov	r1, r2
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff f97b 	bl	800a44c <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	785b      	ldrb	r3, [r3, #1]
 800b15a:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	789b      	ldrb	r3, [r3, #2]
 800b160:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	78db      	ldrb	r3, [r3, #3]
 800b166:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800b16e:	f107 0314 	add.w	r3, r7, #20
 800b172:	4618      	mov	r0, r3
 800b174:	f001 ff87 	bl	800d086 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b178:	2008      	movs	r0, #8
 800b17a:	f7fe ffff 	bl	800a17c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b17e:	4b7e      	ldr	r3, [pc, #504]	; (800b378 <rfalSetBitRate+0x504>)
 800b180:	789b      	ldrb	r3, [r3, #2]
 800b182:	2bea      	cmp	r3, #234	; 0xea
 800b184:	d90c      	bls.n	800b1a0 <rfalSetBitRate+0x32c>
 800b186:	4b7c      	ldr	r3, [pc, #496]	; (800b378 <rfalSetBitRate+0x504>)
 800b188:	789b      	ldrb	r3, [r3, #2]
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	b29b      	uxth	r3, r3
 800b190:	b2db      	uxtb	r3, r3
 800b192:	b29b      	uxth	r3, r3
 800b194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b198:	f043 0301 	orr.w	r3, r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	e00d      	b.n	800b1bc <rfalSetBitRate+0x348>
 800b1a0:	4b75      	ldr	r3, [pc, #468]	; (800b378 <rfalSetBitRate+0x504>)
 800b1a2:	789b      	ldrb	r3, [r3, #2]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fe ffdd 	bl	800a17c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b1c2:	4b6d      	ldr	r3, [pc, #436]	; (800b378 <rfalSetBitRate+0x504>)
 800b1c4:	78db      	ldrb	r3, [r3, #3]
 800b1c6:	2bea      	cmp	r3, #234	; 0xea
 800b1c8:	d90c      	bls.n	800b1e4 <rfalSetBitRate+0x370>
 800b1ca:	4b6b      	ldr	r3, [pc, #428]	; (800b378 <rfalSetBitRate+0x504>)
 800b1cc:	78db      	ldrb	r3, [r3, #3]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	011b      	lsls	r3, r3, #4
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	e00d      	b.n	800b200 <rfalSetBitRate+0x38c>
 800b1e4:	4b64      	ldr	r3, [pc, #400]	; (800b378 <rfalSetBitRate+0x504>)
 800b1e6:	78db      	ldrb	r3, [r3, #3]
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1fa:	f043 0302 	orr.w	r3, r3, #2
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe ffbb 	bl	800a17c <rfalSetAnalogConfig>
                break;
 800b206:	e115      	b.n	800b434 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b208:	2008      	movs	r0, #8
 800b20a:	f7fe ffb7 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b20e:	4b5a      	ldr	r3, [pc, #360]	; (800b378 <rfalSetBitRate+0x504>)
 800b210:	789b      	ldrb	r3, [r3, #2]
 800b212:	2bea      	cmp	r3, #234	; 0xea
 800b214:	d90c      	bls.n	800b230 <rfalSetBitRate+0x3bc>
 800b216:	4b58      	ldr	r3, [pc, #352]	; (800b378 <rfalSetBitRate+0x504>)
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	011b      	lsls	r3, r3, #4
 800b21e:	b29b      	uxth	r3, r3
 800b220:	b2db      	uxtb	r3, r3
 800b222:	b29b      	uxth	r3, r3
 800b224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b228:	f043 0301 	orr.w	r3, r3, #1
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	e00d      	b.n	800b24c <rfalSetBitRate+0x3d8>
 800b230:	4b51      	ldr	r3, [pc, #324]	; (800b378 <rfalSetBitRate+0x504>)
 800b232:	789b      	ldrb	r3, [r3, #2]
 800b234:	b29b      	uxth	r3, r3
 800b236:	3301      	adds	r3, #1
 800b238:	b29b      	uxth	r3, r3
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	b29b      	uxth	r3, r3
 800b242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe ff95 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b252:	4b49      	ldr	r3, [pc, #292]	; (800b378 <rfalSetBitRate+0x504>)
 800b254:	78db      	ldrb	r3, [r3, #3]
 800b256:	2bea      	cmp	r3, #234	; 0xea
 800b258:	d90c      	bls.n	800b274 <rfalSetBitRate+0x400>
 800b25a:	4b47      	ldr	r3, [pc, #284]	; (800b378 <rfalSetBitRate+0x504>)
 800b25c:	78db      	ldrb	r3, [r3, #3]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	011b      	lsls	r3, r3, #4
 800b262:	b29b      	uxth	r3, r3
 800b264:	b2db      	uxtb	r3, r3
 800b266:	b29b      	uxth	r3, r3
 800b268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b26c:	f043 0302 	orr.w	r3, r3, #2
 800b270:	b29b      	uxth	r3, r3
 800b272:	e00d      	b.n	800b290 <rfalSetBitRate+0x41c>
 800b274:	4b40      	ldr	r3, [pc, #256]	; (800b378 <rfalSetBitRate+0x504>)
 800b276:	78db      	ldrb	r3, [r3, #3]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3301      	adds	r3, #1
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	011b      	lsls	r3, r3, #4
 800b280:	b29b      	uxth	r3, r3
 800b282:	b2db      	uxtb	r3, r3
 800b284:	b29b      	uxth	r3, r3
 800b286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b28a:	f043 0302 	orr.w	r3, r3, #2
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe ff73 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b296:	e0cd      	b.n	800b434 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800b298:	2009      	movs	r0, #9
 800b29a:	f7fe ff6f 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b29e:	4b36      	ldr	r3, [pc, #216]	; (800b378 <rfalSetBitRate+0x504>)
 800b2a0:	789b      	ldrb	r3, [r3, #2]
 800b2a2:	2bea      	cmp	r3, #234	; 0xea
 800b2a4:	d90a      	bls.n	800b2bc <rfalSetBitRate+0x448>
 800b2a6:	4b34      	ldr	r3, [pc, #208]	; (800b378 <rfalSetBitRate+0x504>)
 800b2a8:	789b      	ldrb	r3, [r3, #2]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	011b      	lsls	r3, r3, #4
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	4b31      	ldr	r3, [pc, #196]	; (800b37c <rfalSetBitRate+0x508>)
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	e00b      	b.n	800b2d4 <rfalSetBitRate+0x460>
 800b2bc:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <rfalSetBitRate+0x504>)
 800b2be:	789b      	ldrb	r3, [r3, #2]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	011b      	lsls	r3, r3, #4
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	4b2b      	ldr	r3, [pc, #172]	; (800b37c <rfalSetBitRate+0x508>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe ff51 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b2da:	4b27      	ldr	r3, [pc, #156]	; (800b378 <rfalSetBitRate+0x504>)
 800b2dc:	78db      	ldrb	r3, [r3, #3]
 800b2de:	2bea      	cmp	r3, #234	; 0xea
 800b2e0:	d90a      	bls.n	800b2f8 <rfalSetBitRate+0x484>
 800b2e2:	4b25      	ldr	r3, [pc, #148]	; (800b378 <rfalSetBitRate+0x504>)
 800b2e4:	78db      	ldrb	r3, [r3, #3]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	4b23      	ldr	r3, [pc, #140]	; (800b380 <rfalSetBitRate+0x50c>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	e00b      	b.n	800b310 <rfalSetBitRate+0x49c>
 800b2f8:	4b1f      	ldr	r3, [pc, #124]	; (800b378 <rfalSetBitRate+0x504>)
 800b2fa:	78db      	ldrb	r3, [r3, #3]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3301      	adds	r3, #1
 800b300:	b29b      	uxth	r3, r3
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	b29b      	uxth	r3, r3
 800b306:	b2db      	uxtb	r3, r3
 800b308:	b29a      	uxth	r2, r3
 800b30a:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <rfalSetBitRate+0x50c>)
 800b30c:	4313      	orrs	r3, r2
 800b30e:	b29b      	uxth	r3, r3
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe ff33 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b316:	e08d      	b.n	800b434 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800b318:	2009      	movs	r0, #9
 800b31a:	f7fe ff2f 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b31e:	4b16      	ldr	r3, [pc, #88]	; (800b378 <rfalSetBitRate+0x504>)
 800b320:	789b      	ldrb	r3, [r3, #2]
 800b322:	2bea      	cmp	r3, #234	; 0xea
 800b324:	d90a      	bls.n	800b33c <rfalSetBitRate+0x4c8>
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <rfalSetBitRate+0x504>)
 800b328:	789b      	ldrb	r3, [r3, #2]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b2db      	uxtb	r3, r3
 800b332:	b29a      	uxth	r2, r3
 800b334:	4b13      	ldr	r3, [pc, #76]	; (800b384 <rfalSetBitRate+0x510>)
 800b336:	4313      	orrs	r3, r2
 800b338:	b29b      	uxth	r3, r3
 800b33a:	e00b      	b.n	800b354 <rfalSetBitRate+0x4e0>
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <rfalSetBitRate+0x504>)
 800b33e:	789b      	ldrb	r3, [r3, #2]
 800b340:	b29b      	uxth	r3, r3
 800b342:	3301      	adds	r3, #1
 800b344:	b29b      	uxth	r3, r3
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	b29b      	uxth	r3, r3
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <rfalSetBitRate+0x510>)
 800b350:	4313      	orrs	r3, r2
 800b352:	b29b      	uxth	r3, r3
 800b354:	4618      	mov	r0, r3
 800b356:	f7fe ff11 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b35a:	4b07      	ldr	r3, [pc, #28]	; (800b378 <rfalSetBitRate+0x504>)
 800b35c:	78db      	ldrb	r3, [r3, #3]
 800b35e:	2bea      	cmp	r3, #234	; 0xea
 800b360:	d914      	bls.n	800b38c <rfalSetBitRate+0x518>
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <rfalSetBitRate+0x504>)
 800b364:	78db      	ldrb	r3, [r3, #3]
 800b366:	b29b      	uxth	r3, r3
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	b29a      	uxth	r2, r3
 800b370:	4b05      	ldr	r3, [pc, #20]	; (800b388 <rfalSetBitRate+0x514>)
 800b372:	4313      	orrs	r3, r2
 800b374:	b29b      	uxth	r3, r3
 800b376:	e015      	b.n	800b3a4 <rfalSetBitRate+0x530>
 800b378:	2000072c 	.word	0x2000072c
 800b37c:	ffff8801 	.word	0xffff8801
 800b380:	ffff8802 	.word	0xffff8802
 800b384:	ffff8101 	.word	0xffff8101
 800b388:	ffff8102 	.word	0xffff8102
 800b38c:	4b2c      	ldr	r3, [pc, #176]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b38e:	78db      	ldrb	r3, [r3, #3]
 800b390:	b29b      	uxth	r3, r3
 800b392:	3301      	adds	r3, #1
 800b394:	b29b      	uxth	r3, r3
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	b29b      	uxth	r3, r3
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	4b29      	ldr	r3, [pc, #164]	; (800b444 <rfalSetBitRate+0x5d0>)
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fee9 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b3aa:	e043      	b.n	800b434 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800b3ac:	2009      	movs	r0, #9
 800b3ae:	f7fe fee5 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b3b2:	4b23      	ldr	r3, [pc, #140]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b3b4:	789b      	ldrb	r3, [r3, #2]
 800b3b6:	2bea      	cmp	r3, #234	; 0xea
 800b3b8:	d90a      	bls.n	800b3d0 <rfalSetBitRate+0x55c>
 800b3ba:	4b21      	ldr	r3, [pc, #132]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b3bc:	789b      	ldrb	r3, [r3, #2]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	011b      	lsls	r3, r3, #4
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	4b1f      	ldr	r3, [pc, #124]	; (800b448 <rfalSetBitRate+0x5d4>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	e00b      	b.n	800b3e8 <rfalSetBitRate+0x574>
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b3d2:	789b      	ldrb	r3, [r3, #2]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	4b19      	ldr	r3, [pc, #100]	; (800b448 <rfalSetBitRate+0x5d4>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe fec7 	bl	800a17c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b3ee:	4b14      	ldr	r3, [pc, #80]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b3f0:	78db      	ldrb	r3, [r3, #3]
 800b3f2:	2bea      	cmp	r3, #234	; 0xea
 800b3f4:	d90a      	bls.n	800b40c <rfalSetBitRate+0x598>
 800b3f6:	4b12      	ldr	r3, [pc, #72]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b3f8:	78db      	ldrb	r3, [r3, #3]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	b2db      	uxtb	r3, r3
 800b402:	b29a      	uxth	r2, r3
 800b404:	4b11      	ldr	r3, [pc, #68]	; (800b44c <rfalSetBitRate+0x5d8>)
 800b406:	4313      	orrs	r3, r2
 800b408:	b29b      	uxth	r3, r3
 800b40a:	e00b      	b.n	800b424 <rfalSetBitRate+0x5b0>
 800b40c:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <rfalSetBitRate+0x5cc>)
 800b40e:	78db      	ldrb	r3, [r3, #3]
 800b410:	b29b      	uxth	r3, r3
 800b412:	3301      	adds	r3, #1
 800b414:	b29b      	uxth	r3, r3
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	b29b      	uxth	r3, r3
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	4b0b      	ldr	r3, [pc, #44]	; (800b44c <rfalSetBitRate+0x5d8>)
 800b420:	4313      	orrs	r3, r2
 800b422:	b29b      	uxth	r3, r3
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fea9 	bl	800a17c <rfalSetAnalogConfig>
            break;
 800b42a:	e003      	b.n	800b434 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800b42c:	2321      	movs	r3, #33	; 0x21
 800b42e:	e002      	b.n	800b436 <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800b430:	230f      	movs	r3, #15
 800b432:	e000      	b.n	800b436 <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000072c 	.word	0x2000072c
 800b444:	ffff8102 	.word	0xffff8102
 800b448:	ffff8401 	.word	0xffff8401
 800b44c:	ffff8402 	.word	0xffff8402

0800b450 <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	db0f      	blt.n	800b480 <rfalSetErrorHandling+0x30>
 800b460:	2b01      	cmp	r3, #1
 800b462:	dd02      	ble.n	800b46a <rfalSetErrorHandling+0x1a>
 800b464:	2b02      	cmp	r3, #2
 800b466:	d005      	beq.n	800b474 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800b468:	e00a      	b.n	800b480 <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800b46a:	2180      	movs	r1, #128	; 0x80
 800b46c:	2045      	movs	r0, #69	; 0x45
 800b46e:	f002 f8bf 	bl	800d5f0 <st25r3916ClrRegisterBits>
            break;
 800b472:	e006      	b.n	800b482 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800b474:	2284      	movs	r2, #132	; 0x84
 800b476:	21bf      	movs	r1, #191	; 0xbf
 800b478:	2045      	movs	r0, #69	; 0x45
 800b47a:	f002 f934 	bl	800d6e6 <st25r3916ModifyRegister>
            break;
 800b47e:	e000      	b.n	800b482 <rfalSetErrorHandling+0x32>
            break;
 800b480:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800b482:	4a03      	ldr	r2, [pc, #12]	; (800b490 <rfalSetErrorHandling+0x40>)
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	71d3      	strb	r3, [r2, #7]
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	2000072c 	.word	0x2000072c

0800b494 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a06      	ldr	r2, [pc, #24]	; (800b4b8 <rfalSetFDTPoll+0x24>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bf28      	it	cs
 800b4a4:	4613      	movcs	r3, r2
 800b4a6:	4a05      	ldr	r2, [pc, #20]	; (800b4bc <rfalSetFDTPoll+0x28>)
 800b4a8:	6113      	str	r3, [r2, #16]
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	0007fff8 	.word	0x0007fff8
 800b4bc:	2000072c 	.word	0x2000072c

0800b4c0 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800b4ce:	bf28      	it	cs
 800b4d0:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800b4d4:	4a03      	ldr	r2, [pc, #12]	; (800b4e4 <rfalSetFDTListen+0x24>)
 800b4d6:	60d3      	str	r3, [r2, #12]
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	2000072c 	.word	0x2000072c

0800b4e8 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a06      	ldr	r2, [pc, #24]	; (800b50c <rfalSetGT+0x24>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	bf28      	it	cs
 800b4f8:	4613      	movcs	r3, r2
 800b4fa:	4a05      	ldr	r2, [pc, #20]	; (800b510 <rfalSetGT+0x28>)
 800b4fc:	6093      	str	r3, [r2, #8]
}
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	040a8bc0 	.word	0x040a8bc0
 800b510:	2000072c 	.word	0x2000072c

0800b514 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <rfalIsGTExpired+0x2c>)
 800b51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00c      	beq.n	800b53a <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <rfalIsGTExpired+0x2c>)
 800b522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b524:	4618      	mov	r0, r3
 800b526:	f7f8 fa2f 	bl	8003988 <timerIsExpired>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f083 0301 	eor.w	r3, r3, #1
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <rfalIsGTExpired+0x26>
        {
            return false;
 800b536:	2300      	movs	r3, #0
 800b538:	e000      	b.n	800b53c <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800b53a:	2301      	movs	r3, #1
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	2000072c 	.word	0x2000072c

0800b544 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800b54a:	2280      	movs	r2, #128	; 0x80
 800b54c:	2180      	movs	r1, #128	; 0x80
 800b54e:	2002      	movs	r0, #2
 800b550:	f002 f936 	bl	800d7c0 <st25r3916CheckReg>
 800b554:	4603      	mov	r3, r0
 800b556:	f083 0301 	eor.w	r3, r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d103      	bne.n	800b568 <rfalFieldOnAndStartGT+0x24>
 800b560:	4b2a      	ldr	r3, [pc, #168]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800b568:	2321      	movs	r3, #33	; 0x21
 800b56a:	e04a      	b.n	800b602 <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800b56c:	2300      	movs	r3, #0
 800b56e:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800b570:	2002      	movs	r0, #2
 800b572:	f7fe fe03 	bl	800a17c <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800b576:	2208      	movs	r2, #8
 800b578:	2108      	movs	r1, #8
 800b57a:	2002      	movs	r0, #2
 800b57c:	f002 f920 	bl	800d7c0 <st25r3916CheckReg>
 800b580:	4603      	mov	r3, r0
 800b582:	f083 0301 	eor.w	r3, r3, #1
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <rfalFieldOnAndStartGT+0x56>
 800b58c:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b58e:	791b      	ldrb	r3, [r3, #4]
 800b590:	f083 0301 	eor.w	r3, r3, #1
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d01c      	beq.n	800b5d4 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800b59a:	2100      	movs	r1, #0
 800b59c:	2055      	movs	r0, #85	; 0x55
 800b59e:	f001 ff3d 	bl	800d41c <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	22ff      	movs	r2, #255	; 0xff
 800b5a6:	21ff      	movs	r1, #255	; 0xff
 800b5a8:	20c8      	movs	r0, #200	; 0xc8
 800b5aa:	f001 fc43 	bl	800ce34 <st25r3916PerformCollisionAvoidance>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800b5b2:	2208      	movs	r2, #8
 800b5b4:	2108      	movs	r1, #8
 800b5b6:	2002      	movs	r0, #2
 800b5b8:	f002 f902 	bl	800d7c0 <st25r3916CheckReg>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4b12      	ldr	r3, [pc, #72]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b5c2:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800b5c4:	4b11      	ldr	r3, [pc, #68]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b5c6:	791b      	ldrb	r3, [r3, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800b5cc:	2148      	movs	r1, #72	; 0x48
 800b5ce:	2002      	movs	r0, #2
 800b5d0:	f002 f845 	bl	800d65e <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d011      	beq.n	800b600 <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800b5dc:	4b0b      	ldr	r3, [pc, #44]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	bf38      	it	cc
 800b5e8:	4613      	movcc	r3, r2
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <rfalFieldOnAndStartGT+0xcc>)
 800b5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f0:	0b1b      	lsrs	r3, r3, #12
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f8 f9b9 	bl	800396c <timerCalculateTimer>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <rfalFieldOnAndStartGT+0xc8>)
 800b5fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800b600:	88fb      	ldrh	r3, [r7, #6]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	2000072c 	.word	0x2000072c
 800b610:	4d542005 	.word	0x4d542005

0800b614 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800b618:	4b09      	ldr	r3, [pc, #36]	; (800b640 <rfalFieldOff+0x2c>)
 800b61a:	7d1b      	ldrb	r3, [r3, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800b620:	f000 fa94 	bl	800bb4c <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800b624:	2148      	movs	r1, #72	; 0x48
 800b626:	2002      	movs	r0, #2
 800b628:	f001 ffe2 	bl	800d5f0 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800b62c:	2003      	movs	r0, #3
 800b62e:	f7fe fda5 	bl	800a17c <rfalSetAnalogConfig>
    gRFAL.field = false;
 800b632:	4b03      	ldr	r3, [pc, #12]	; (800b640 <rfalFieldOff+0x2c>)
 800b634:	2200      	movs	r2, #0
 800b636:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	2000072c 	.word	0x2000072c

0800b644 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800b644:	b5b0      	push	{r4, r5, r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800b652:	2307      	movs	r3, #7
 800b654:	e127      	b.n	800b8a6 <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800b656:	4b96      	ldr	r3, [pc, #600]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	f240 8122 	bls.w	800b8a4 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800b660:	2208      	movs	r2, #8
 800b662:	2108      	movs	r1, #8
 800b664:	2002      	movs	r0, #2
 800b666:	f002 f8ab 	bl	800d7c0 <st25r3916CheckReg>
 800b66a:	4603      	mov	r3, r0
 800b66c:	f083 0301 	eor.w	r3, r3, #1
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d011      	beq.n	800b69a <rfalStartTransceive+0x56>
 800b676:	4b8e      	ldr	r3, [pc, #568]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b678:	785b      	ldrb	r3, [r3, #1]
 800b67a:	2b0a      	cmp	r3, #10
 800b67c:	d00d      	beq.n	800b69a <rfalStartTransceive+0x56>
 800b67e:	4b8c      	ldr	r3, [pc, #560]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	2b0b      	cmp	r3, #11
 800b684:	d009      	beq.n	800b69a <rfalStartTransceive+0x56>
 800b686:	4b8a      	ldr	r3, [pc, #552]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	2b0c      	cmp	r3, #12
 800b68c:	d005      	beq.n	800b69a <rfalStartTransceive+0x56>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800b696:	2321      	movs	r3, #33	; 0x21
 800b698:	e105      	b.n	800b8a6 <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800b69a:	4b85      	ldr	r3, [pc, #532]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	f103 0418 	add.w	r4, r3, #24
 800b6a2:	4615      	mov	r5, r2
 800b6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b6ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800b6b0:	4b7f      	ldr	r3, [pc, #508]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d04b      	beq.n	800b750 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800b6bc:	4b7c      	ldr	r3, [pc, #496]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d102      	bne.n	800b6ca <rfalStartTransceive+0x86>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	33d4      	adds	r3, #212	; 0xd4
 800b6c8:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800b6ca:	4b79      	ldr	r3, [pc, #484]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d102      	bne.n	800b6d8 <rfalStartTransceive+0x94>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	33d4      	adds	r3, #212	; 0xd4
 800b6d6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800b6d8:	4b75      	ldr	r3, [pc, #468]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b6da:	785b      	ldrb	r3, [r3, #1]
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d103      	bne.n	800b6e8 <rfalStartTransceive+0xa4>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b6e6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800b6e8:	4b71      	ldr	r3, [pc, #452]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	2b07      	cmp	r3, #7
 800b6ee:	d102      	bne.n	800b6f6 <rfalStartTransceive+0xb2>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3340      	adds	r3, #64	; 0x40
 800b6f4:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800b6f6:	2108      	movs	r1, #8
 800b6f8:	2012      	movs	r0, #18
 800b6fa:	f001 ff79 	bl	800d5f0 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800b6fe:	2200      	movs	r2, #0
 800b700:	2104      	movs	r1, #4
 800b702:	200a      	movs	r0, #10
 800b704:	f002 f85c 	bl	800d7c0 <st25r3916CheckReg>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00f      	beq.n	800b72e <rfalStartTransceive+0xea>
 800b70e:	4b68      	ldr	r3, [pc, #416]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d10b      	bne.n	800b72e <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3380      	adds	r3, #128	; 0x80
 800b71a:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800b71c:	2108      	movs	r1, #8
 800b71e:	204c      	movs	r0, #76	; 0x4c
 800b720:	f001 ff9d 	bl	800d65e <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800b724:	2214      	movs	r2, #20
 800b726:	211f      	movs	r1, #31
 800b728:	2046      	movs	r0, #70	; 0x46
 800b72a:	f001 ffc5 	bl	800d6b8 <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800b72e:	4b60      	ldr	r3, [pc, #384]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	429a      	cmp	r2, r3
 800b736:	d806      	bhi.n	800b746 <rfalStartTransceive+0x102>
 800b738:	4b5d      	ldr	r3, [pc, #372]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	099b      	lsrs	r3, r3, #6
 800b742:	b2db      	uxtb	r3, r3
 800b744:	e000      	b.n	800b748 <rfalStartTransceive+0x104>
 800b746:	2304      	movs	r3, #4
 800b748:	4619      	mov	r1, r3
 800b74a:	200f      	movs	r0, #15
 800b74c:	f001 fe66 	bl	800d41c <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800b750:	4b57      	ldr	r3, [pc, #348]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d046      	beq.n	800b7e8 <rfalStartTransceive+0x1a4>
 800b75a:	4b55      	ldr	r3, [pc, #340]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d042      	beq.n	800b7e8 <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800b762:	4b53      	ldr	r3, [pc, #332]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	4b52      	ldr	r3, [pc, #328]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d301      	bcc.n	800b772 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800b76e:	2307      	movs	r3, #7
 800b770:	e099      	b.n	800b8a6 <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800b772:	2340      	movs	r3, #64	; 0x40
 800b774:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800b776:	4b4e      	ldr	r3, [pc, #312]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b778:	785b      	ldrb	r3, [r3, #1]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d103      	bne.n	800b786 <rfalStartTransceive+0x142>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800b784:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800b786:	4b4a      	ldr	r3, [pc, #296]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b788:	785b      	ldrb	r3, [r3, #1]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d103      	bne.n	800b796 <rfalStartTransceive+0x152>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800b794:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800b796:	4b46      	ldr	r3, [pc, #280]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d103      	bne.n	800b7a6 <rfalStartTransceive+0x162>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a4:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800b7a6:	4b42      	ldr	r3, [pc, #264]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7a8:	785b      	ldrb	r3, [r3, #1]
 800b7aa:	2b06      	cmp	r3, #6
 800b7ac:	d10b      	bne.n	800b7c6 <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800b7ae:	4b40      	ldr	r3, [pc, #256]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7b0:	789b      	ldrb	r3, [r3, #2]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d102      	bne.n	800b7bc <rfalStartTransceive+0x178>
 800b7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ba:	e001      	b.n	800b7c0 <rfalStartTransceive+0x17c>
 800b7bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800b7c6:	4b3a      	ldr	r3, [pc, #232]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	4a39      	ldr	r2, [pc, #228]	; (800b8b4 <rfalStartTransceive+0x270>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	bf28      	it	cs
 800b7d4:	4613      	movcs	r3, r2
 800b7d6:	4a36      	ldr	r2, [pc, #216]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7d8:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800b7da:	4b35      	ldr	r3, [pc, #212]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	099b      	lsrs	r3, r3, #6
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f001 fbbd 	bl	800cf60 <st25r3916SetNoResponseTime>
 800b7e6:	e002      	b.n	800b7ee <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	f001 fbb9 	bl	800cf60 <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800b7ee:	4b30      	ldr	r3, [pc, #192]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800b7f4:	4b2e      	ldr	r3, [pc, #184]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7f6:	220b      	movs	r2, #11
 800b7f8:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800b7fa:	4b2d      	ldr	r3, [pc, #180]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800b800:	4b2b      	ldr	r3, [pc, #172]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b802:	785b      	ldrb	r3, [r3, #1]
 800b804:	2b07      	cmp	r3, #7
 800b806:	d003      	beq.n	800b810 <rfalStartTransceive+0x1cc>
 800b808:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b80a:	785b      	ldrb	r3, [r3, #1]
 800b80c:	2b08      	cmp	r3, #8
 800b80e:	d128      	bne.n	800b862 <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800b810:	4a27      	ldr	r2, [pc, #156]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b814:	f502 7417 	add.w	r4, r2, #604	; 0x25c
 800b818:	f103 0518 	add.w	r5, r3, #24
 800b81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b824:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800b828:	4b21      	ldr	r3, [pc, #132]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b82a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <rfalStartTransceive+0x1f2>
 800b832:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <rfalStartTransceive+0x274>)
 800b834:	e000      	b.n	800b838 <rfalStartTransceive+0x1f4>
 800b836:	2300      	movs	r3, #0
 800b838:	4a1d      	ldr	r2, [pc, #116]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b83a:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800b83c:	4b1c      	ldr	r3, [pc, #112]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b83e:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800b842:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800b844:	4b1a      	ldr	r3, [pc, #104]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b846:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b84a:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800b84e:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800b852:	4a17      	ldr	r2, [pc, #92]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b854:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800b856:	4b16      	ldr	r3, [pc, #88]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800b85e:	2300      	movs	r3, #0
 800b860:	e021      	b.n	800b8a6 <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800b862:	4b13      	ldr	r3, [pc, #76]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <rfalStartTransceive+0x22e>
 800b86a:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b86c:	8b9b      	ldrh	r3, [r3, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d116      	bne.n	800b8a0 <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800b872:	f000 f983 	bl	800bb7c <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800b876:	4b0e      	ldr	r3, [pc, #56]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d003      	beq.n	800b886 <rfalStartTransceive+0x242>
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b880:	785b      	ldrb	r3, [r3, #1]
 800b882:	2b0d      	cmp	r3, #13
 800b884:	d103      	bne.n	800b88e <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800b886:	2108      	movs	r1, #8
 800b888:	2002      	movs	r0, #2
 800b88a:	f001 feb1 	bl	800d5f0 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800b88e:	20d1      	movs	r0, #209	; 0xd1
 800b890:	f001 fe4d 	bl	800d52e <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800b894:	20e3      	movs	r0, #227	; 0xe3
 800b896:	f001 fe4a 	bl	800d52e <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800b89a:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <rfalStartTransceive+0x26c>)
 800b89c:	2251      	movs	r2, #81	; 0x51
 800b89e:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e000      	b.n	800b8a6 <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800b8a4:	2321      	movs	r3, #33	; 0x21
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2000072c 	.word	0x2000072c
 800b8b4:	0ffff000 	.word	0x0ffff000
 800b8b8:	2000077c 	.word	0x2000077c

0800b8bc <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <rfalIsTransceiveInTx+0x2c>)
 800b8c2:	7d1b      	ldrb	r3, [r3, #20]
 800b8c4:	2b0a      	cmp	r3, #10
 800b8c6:	d905      	bls.n	800b8d4 <rfalIsTransceiveInTx+0x18>
 800b8c8:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <rfalIsTransceiveInTx+0x2c>)
 800b8ca:	7d1b      	ldrb	r3, [r3, #20]
 800b8cc:	2b50      	cmp	r3, #80	; 0x50
 800b8ce:	d801      	bhi.n	800b8d4 <rfalIsTransceiveInTx+0x18>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e000      	b.n	800b8d6 <rfalIsTransceiveInTx+0x1a>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	b2db      	uxtb	r3, r3
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	2000072c 	.word	0x2000072c

0800b8ec <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <rfalIsTransceiveInRx+0x1c>)
 800b8f2:	7d1b      	ldrb	r3, [r3, #20]
 800b8f4:	2b50      	cmp	r3, #80	; 0x50
 800b8f6:	bf8c      	ite	hi
 800b8f8:	2301      	movhi	r3, #1
 800b8fa:	2300      	movls	r3, #0
 800b8fc:	b2db      	uxtb	r3, r3
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	2000072c 	.word	0x2000072c

0800b90c <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08c      	sub	sp, #48	; 0x30
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	461a      	mov	r2, r3
 800b918:	460b      	mov	r3, r1
 800b91a:	817b      	strh	r3, [r7, #10]
 800b91c:	4613      	mov	r3, r2
 800b91e:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	897b      	ldrh	r3, [r7, #10]
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	b29b      	uxth	r3, r3
 800b92a:	82bb      	strh	r3, [r7, #20]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	61bb      	str	r3, [r7, #24]
 800b930:	893b      	ldrh	r3, [r7, #8]
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	b29b      	uxth	r3, r3
 800b936:	83bb      	strh	r3, [r7, #28]
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	623b      	str	r3, [r7, #32]
 800b93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
 800b940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800b944:	f107 0310 	add.w	r3, r7, #16
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fe7b 	bl	800b644 <rfalStartTransceive>
 800b94e:	4603      	mov	r3, r0
 800b950:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <rfalTransceiveBlockingTx+0x50>
 800b958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b95a:	e002      	b.n	800b962 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800b95c:	f000 f805 	bl	800b96a <rfalTransceiveRunBlockingTx>
 800b960:	4603      	mov	r3, r0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3730      	adds	r7, #48	; 0x30
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800b970:	f000 f8a6 	bl	800bac0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800b974:	f000 f892 	bl	800ba9c <rfalGetTransceiveStatus>
 800b978:	4603      	mov	r3, r0
 800b97a:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800b97c:	f7ff ff9e 	bl	800b8bc <rfalIsTransceiveInTx>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <rfalTransceiveRunBlockingTx+0x22>
 800b986:	88fb      	ldrh	r3, [r7, #6]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d0f1      	beq.n	800b970 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800b98c:	f7ff ffae 	bl	800b8ec <rfalIsTransceiveInRx>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800b996:	2300      	movs	r3, #0
 800b998:	e000      	b.n	800b99c <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800b99a:	88fb      	ldrh	r3, [r7, #6]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800b9aa:	f000 f889 	bl	800bac0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800b9ae:	f000 f875 	bl	800ba9c <rfalGetTransceiveStatus>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800b9b6:	f7ff ff99 	bl	800b8ec <rfalIsTransceiveInRx>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <rfalTransceiveBlockingRx+0x22>
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d0f1      	beq.n	800b9aa <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af04      	add	r7, sp, #16
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	460b      	mov	r3, r1
 800b9de:	817b      	strh	r3, [r7, #10]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800b9e4:	893a      	ldrh	r2, [r7, #8]
 800b9e6:	8979      	ldrh	r1, [r7, #10]
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff ff87 	bl	800b90c <rfalTransceiveBlockingTx>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	82fb      	strh	r3, [r7, #22]
 800ba02:	8afb      	ldrh	r3, [r7, #22]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <rfalTransceiveBlockingTxRx+0x3c>
 800ba08:	8afb      	ldrh	r3, [r7, #22]
 800ba0a:	e00e      	b.n	800ba2a <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800ba0c:	f7ff ffca 	bl	800b9a4 <rfalTransceiveBlockingRx>
 800ba10:	4603      	mov	r3, r0
 800ba12:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d006      	beq.n	800ba28 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	3307      	adds	r3, #7
 800ba20:	08db      	lsrs	r3, r3, #3
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	6a3b      	ldr	r3, [r7, #32]
 800ba26:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800ba28:	8afb      	ldrh	r3, [r7, #22]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800ba38:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <rfalRunTransceiveWorker+0x64>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d127      	bne.n	800ba90 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800ba40:	4b15      	ldr	r3, [pc, #84]	; (800ba98 <rfalRunTransceiveWorker+0x64>)
 800ba42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00d      	beq.n	800ba64 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800ba48:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <rfalRunTransceiveWorker+0x64>)
 800ba4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f7 ff9b 	bl	8003988 <timerIsExpired>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800ba58:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <rfalRunTransceiveWorker+0x64>)
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ba5e:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <rfalRunTransceiveWorker+0x64>)
 800ba60:	225a      	movs	r2, #90	; 0x5a
 800ba62:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800ba64:	f7ff ff2a 	bl	800b8bc <rfalIsTransceiveInTx>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d005      	beq.n	800ba7a <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800ba6e:	f000 f957 	bl	800bd20 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800ba72:	f000 f813 	bl	800ba9c <rfalGetTransceiveStatus>
 800ba76:	4603      	mov	r3, r0
 800ba78:	e00b      	b.n	800ba92 <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800ba7a:	f7ff ff37 	bl	800b8ec <rfalIsTransceiveInRx>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800ba84:	f000 fb92 	bl	800c1ac <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800ba88:	f000 f808 	bl	800ba9c <rfalGetTransceiveStatus>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	e000      	b.n	800ba92 <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800ba90:	2321      	movs	r3, #33	; 0x21
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	2000072c 	.word	0x2000072c

0800ba9c <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <rfalGetTransceiveStatus+0x20>)
 800baa2:	7d1b      	ldrb	r3, [r3, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <rfalGetTransceiveStatus+0x12>
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <rfalGetTransceiveStatus+0x20>)
 800baaa:	8adb      	ldrh	r3, [r3, #22]
 800baac:	e000      	b.n	800bab0 <rfalGetTransceiveStatus+0x14>
 800baae:	2302      	movs	r3, #2
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	2000072c 	.word	0x2000072c

0800bac0 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800bac4:	4b04      	ldr	r3, [pc, #16]	; (800bad8 <rfalWorker+0x18>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d000      	beq.n	800bace <rfalWorker+0xe>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800bacc:	e002      	b.n	800bad4 <rfalWorker+0x14>
            rfalRunTransceiveWorker();
 800bace:	f7ff ffb1 	bl	800ba34 <rfalRunTransceiveWorker>
            break;
 800bad2:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800bad4:	bf00      	nop
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	2000072c 	.word	0x2000072c

0800badc <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800bae2:	f000 fee9 	bl	800c8b8 <rfalFIFOStatusGetNumBytes>
 800bae6:	4603      	mov	r3, r0
 800bae8:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800baea:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <rfalErrorHandling+0x6c>)
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d125      	bne.n	800bb3e <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800baf2:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <rfalErrorHandling+0x6c>)
 800baf4:	8adb      	ldrh	r3, [r3, #22]
 800baf6:	2b1b      	cmp	r3, #27
 800baf8:	d003      	beq.n	800bb02 <rfalErrorHandling+0x26>
 800bafa:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bafc:	8adb      	ldrh	r3, [r3, #22]
 800bafe:	2b15      	cmp	r3, #21
 800bb00:	d11d      	bne.n	800bb3e <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800bb02:	f000 fef5 	bl	800c8f0 <rfalFIFOStatusIsIncompleteByte>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d018      	beq.n	800bb3e <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	88fa      	ldrh	r2, [r7, #6]
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fcee 	bl	800d4f6 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800bb22:	f000 ff09 	bl	800c938 <rfalFIFOGetNumIncompleteBits>
 800bb26:	4603      	mov	r3, r0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	b292      	uxth	r2, r2
 800bb30:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bb34:	2228      	movs	r2, #40	; 0x28
 800bb36:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800bb38:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <rfalErrorHandling+0x6c>)
 800bb3a:	225a      	movs	r2, #90	; 0x5a
 800bb3c:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	2000072c 	.word	0x2000072c

0800bb4c <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800bb50:	21e0      	movs	r1, #224	; 0xe0
 800bb52:	2005      	movs	r0, #5
 800bb54:	f001 fd4c 	bl	800d5f0 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800bb58:	2108      	movs	r1, #8
 800bb5a:	200c      	movs	r0, #12
 800bb5c:	f001 fd7f 	bl	800d65e <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800bb60:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <rfalCleanupTransceive+0x2c>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800bb66:	4b04      	ldr	r3, [pc, #16]	; (800bb78 <rfalCleanupTransceive+0x2c>)
 800bb68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800bb6e:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <rfalCleanupTransceive+0x2c>)
 800bb70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb72:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800bb74:	bf00      	nop
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	2000072c 	.word	0x2000072c

0800bb7c <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800bb82:	4b64      	ldr	r3, [pc, #400]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bb84:	785b      	ldrb	r3, [r3, #1]
 800bb86:	2b0a      	cmp	r3, #10
 800bb88:	d00e      	beq.n	800bba8 <rfalPrepareTransceive+0x2c>
 800bb8a:	4b62      	ldr	r3, [pc, #392]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2b0b      	cmp	r3, #11
 800bb90:	d00a      	beq.n	800bba8 <rfalPrepareTransceive+0x2c>
 800bb92:	4b60      	ldr	r3, [pc, #384]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b0c      	cmp	r3, #12
 800bb98:	d006      	beq.n	800bba8 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800bb9a:	20c2      	movs	r0, #194	; 0xc2
 800bb9c:	f001 fcc7 	bl	800d52e <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800bba0:	20d5      	movs	r0, #213	; 0xd5
 800bba2:	f001 fcc4 	bl	800d52e <st25r3916ExecuteCommand>
 800bba6:	e002      	b.n	800bbae <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800bba8:	20db      	movs	r0, #219	; 0xdb
 800bbaa:	f001 fcc0 	bl	800d52e <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800bbae:	4b59      	ldr	r3, [pc, #356]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	2b09      	cmp	r3, #9
 800bbb4:	d01c      	beq.n	800bbf0 <rfalPrepareTransceive+0x74>
 800bbb6:	4b57      	ldr	r3, [pc, #348]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	2b0d      	cmp	r3, #13
 800bbbc:	d018      	beq.n	800bbf0 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800bbbe:	4b55      	ldr	r3, [pc, #340]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d014      	beq.n	800bbf0 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800bbc6:	4b53      	ldr	r3, [pc, #332]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f240 423b 	movw	r2, #1083	; 0x43b
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d804      	bhi.n	800bbdc <rfalPrepareTransceive+0x60>
 800bbd2:	4b50      	ldr	r3, [pc, #320]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	08db      	lsrs	r3, r3, #3
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	e005      	b.n	800bbe8 <rfalPrepareTransceive+0x6c>
 800bbdc:	4b4d      	ldr	r3, [pc, #308]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800bbe4:	08db      	lsrs	r3, r3, #3
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	2120      	movs	r1, #32
 800bbea:	4618      	mov	r0, r3
 800bbec:	f001 fa0d 	bl	800d00a <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800bbf0:	4b48      	ldr	r3, [pc, #288]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800bbf8:	4b46      	ldr	r3, [pc, #280]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbfc:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800bbfe:	4b46      	ldr	r3, [pc, #280]	; (800bd18 <rfalPrepareTransceive+0x19c>)
 800bc00:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800bc02:	2300      	movs	r3, #0
 800bc04:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800bc06:	4b43      	ldr	r3, [pc, #268]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	f003 0304 	and.w	r3, r3, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800bc12:	78fb      	ldrb	r3, [r7, #3]
 800bc14:	f043 0320 	orr.w	r3, r3, #32
 800bc18:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1e:	f003 0310 	and.w	r3, r3, #16
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800bc26:	78fb      	ldrb	r3, [r7, #3]
 800bc28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc2c:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800bc2e:	4b39      	ldr	r3, [pc, #228]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	f003 0320 	and.w	r3, r3, #32
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800bc3a:	78fb      	ldrb	r3, [r7, #3]
 800bc3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc40:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800bc42:	78fb      	ldrb	r3, [r7, #3]
 800bc44:	461a      	mov	r2, r3
 800bc46:	21e0      	movs	r1, #224	; 0xe0
 800bc48:	2005      	movs	r0, #5
 800bc4a:	f001 fd35 	bl	800d6b8 <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800bc4e:	4b31      	ldr	r3, [pc, #196]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d004      	beq.n	800bc64 <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800bc5a:	2108      	movs	r1, #8
 800bc5c:	200c      	movs	r0, #12
 800bc5e:	f001 fcc7 	bl	800d5f0 <st25r3916ClrRegisterBits>
 800bc62:	e003      	b.n	800bc6c <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800bc64:	2108      	movs	r1, #8
 800bc66:	200c      	movs	r0, #12
 800bc68:	f001 fcf9 	bl	800d65e <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800bc6c:	4b29      	ldr	r3, [pc, #164]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc6e:	79db      	ldrb	r3, [r3, #7]
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d108      	bne.n	800bc86 <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800bc74:	2102      	movs	r1, #2
 800bc76:	2012      	movs	r0, #18
 800bc78:	f001 fcf1 	bl	800d65e <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f043 0302 	orr.w	r3, r3, #2
 800bc82:	607b      	str	r3, [r7, #4]
 800bc84:	e003      	b.n	800bc8e <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800bc86:	2102      	movs	r1, #2
 800bc88:	2012      	movs	r0, #18
 800bc8a:	f001 fcb1 	bl	800d5f0 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800bc8e:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc90:	785b      	ldrb	r3, [r3, #1]
 800bc92:	2b0a      	cmp	r3, #10
 800bc94:	d007      	beq.n	800bca6 <rfalPrepareTransceive+0x12a>
 800bc96:	4b1f      	ldr	r3, [pc, #124]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bc98:	785b      	ldrb	r3, [r3, #1]
 800bc9a:	2b0b      	cmp	r3, #11
 800bc9c:	d003      	beq.n	800bca6 <rfalPrepareTransceive+0x12a>
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	2b0c      	cmp	r3, #12
 800bca4:	d103      	bne.n	800bcae <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800bcac:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800bcae:	4b19      	ldr	r3, [pc, #100]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bcb0:	785b      	ldrb	r3, [r3, #1]
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	d003      	beq.n	800bcbe <rfalPrepareTransceive+0x142>
 800bcb6:	4b17      	ldr	r3, [pc, #92]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	2b0d      	cmp	r3, #13
 800bcbc:	d105      	bne.n	800bcca <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcc4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800bcc8:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800bcca:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d013      	beq.n	800bcfc <rfalPrepareTransceive+0x180>
 800bcd4:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00f      	beq.n	800bcfc <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce0:	4a0e      	ldr	r2, [pc, #56]	; (800bd1c <rfalPrepareTransceive+0x1a0>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	0b1b      	lsrs	r3, r3, #12
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f7 fe3b 	bl	800396c <timerCalculateTimer>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <rfalPrepareTransceive+0x198>)
 800bcfa:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f001 fee9 	bl	800dad4 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 ff1e 	bl	800db44 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800bd08:	f000 fdc8 	bl	800c89c <rfalFIFOStatusClear>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000072c 	.word	0x2000072c
 800bd18:	00f04078 	.word	0x00f04078
 800bd1c:	4d542005 	.word	0x4d542005

0800bd20 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800bd20:	b5b0      	push	{r4, r5, r7, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800bd2e:	4ba1      	ldr	r3, [pc, #644]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd30:	7d1a      	ldrb	r2, [r3, #20]
 800bd32:	4ba0      	ldr	r3, [pc, #640]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd34:	7d5b      	ldrb	r3, [r3, #21]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d003      	beq.n	800bd42 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800bd3a:	4b9e      	ldr	r3, [pc, #632]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd3c:	7d1a      	ldrb	r2, [r3, #20]
 800bd3e:	4b9d      	ldr	r3, [pc, #628]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd40:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800bd42:	4b9c      	ldr	r3, [pc, #624]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd44:	7d1b      	ldrb	r3, [r3, #20]
 800bd46:	3b0b      	subs	r3, #11
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	f200 8212 	bhi.w	800c172 <rfalTransceiveTx+0x452>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <rfalTransceiveTx+0x34>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd79 	.word	0x0800bd79
 800bd58:	0800bd7f 	.word	0x0800bd7f
 800bd5c:	0800bd9d 	.word	0x0800bd9d
 800bd60:	0800bdc5 	.word	0x0800bdc5
 800bd64:	0800bf45 	.word	0x0800bf45
 800bd68:	0800bf81 	.word	0x0800bf81
 800bd6c:	0800c0c3 	.word	0x0800c0c3
 800bd70:	0800c0fd 	.word	0x0800c0fd
 800bd74:	0800c149 	.word	0x0800c149
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800bd78:	4b8e      	ldr	r3, [pc, #568]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd7a:	220c      	movs	r2, #12
 800bd7c:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800bd7e:	f7ff fbc9 	bl	800b514 <rfalIsGTExpired>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f083 0301 	eor.w	r3, r3, #1
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f040 81f8 	bne.w	800c180 <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800bd90:	4b88      	ldr	r3, [pc, #544]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800bd96:	4b87      	ldr	r3, [pc, #540]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd98:	220d      	movs	r2, #13
 800bd9a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800bd9c:	4b85      	ldr	r3, [pc, #532]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bd9e:	785b      	ldrb	r3, [r3, #1]
 800bda0:	2b09      	cmp	r3, #9
 800bda2:	d00c      	beq.n	800bdbe <rfalTransceiveTx+0x9e>
 800bda4:	4b83      	ldr	r3, [pc, #524]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b0d      	cmp	r3, #13
 800bdaa:	d008      	beq.n	800bdbe <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800bdac:	2204      	movs	r2, #4
 800bdae:	2104      	movs	r1, #4
 800bdb0:	2024      	movs	r0, #36	; 0x24
 800bdb2:	f001 fd05 	bl	800d7c0 <st25r3916CheckReg>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f040 81e3 	bne.w	800c184 <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800bdbe:	4b7d      	ldr	r3, [pc, #500]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdc0:	220e      	movs	r2, #14
 800bdc2:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800bdc4:	f7ff feda 	bl	800bb7c <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800bdc8:	4b7a      	ldr	r3, [pc, #488]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdca:	f44f 729c 	mov.w	r2, #312	; 0x138
 800bdce:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800bdd0:	4b78      	ldr	r3, [pc, #480]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdd2:	785b      	ldrb	r3, [r3, #1]
 800bdd4:	2b07      	cmp	r3, #7
 800bdd6:	d003      	beq.n	800bde0 <rfalTransceiveTx+0xc0>
 800bdd8:	4b76      	ldr	r3, [pc, #472]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d152      	bne.n	800be86 <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800bde0:	4b74      	ldr	r3, [pc, #464]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800bde8:	4b72      	ldr	r3, [pc, #456]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdea:	6998      	ldr	r0, [r3, #24]
 800bdec:	4b71      	ldr	r3, [pc, #452]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdee:	8b9b      	ldrh	r3, [r3, #28]
 800bdf0:	3307      	adds	r3, #7
 800bdf2:	08db      	lsrs	r3, r3, #3
 800bdf4:	b299      	uxth	r1, r3
 800bdf6:	4b6f      	ldr	r3, [pc, #444]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bdf8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	bf0c      	ite	eq
 800be04:	2301      	moveq	r3, #1
 800be06:	2300      	movne	r3, #0
 800be08:	b2dc      	uxtb	r4, r3
 800be0a:	4b6a      	ldr	r3, [pc, #424]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	bf0c      	ite	eq
 800be18:	2301      	moveq	r3, #1
 800be1a:	2300      	movne	r3, #0
 800be1c:	b2dd      	uxtb	r5, r3
 800be1e:	4b65      	ldr	r3, [pc, #404]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b08      	cmp	r3, #8
 800be24:	bf0c      	ite	eq
 800be26:	2301      	moveq	r3, #1
 800be28:	2300      	movne	r3, #0
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	4a62      	ldr	r2, [pc, #392]	; (800bfb8 <rfalTransceiveTx+0x298>)
 800be2e:	9205      	str	r2, [sp, #20]
 800be30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be34:	9204      	str	r2, [sp, #16]
 800be36:	4a61      	ldr	r2, [pc, #388]	; (800bfbc <rfalTransceiveTx+0x29c>)
 800be38:	9203      	str	r2, [sp, #12]
 800be3a:	4a61      	ldr	r2, [pc, #388]	; (800bfc0 <rfalTransceiveTx+0x2a0>)
 800be3c:	9202      	str	r2, [sp, #8]
 800be3e:	4a61      	ldr	r2, [pc, #388]	; (800bfc4 <rfalTransceiveTx+0x2a4>)
 800be40:	9201      	str	r2, [sp, #4]
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	462b      	mov	r3, r5
 800be46:	4622      	mov	r2, r4
 800be48:	f7fe fb26 	bl	800a498 <iso15693VCDCode>
 800be4c:	4603      	mov	r3, r0
 800be4e:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800be50:	89fb      	ldrh	r3, [r7, #14]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <rfalTransceiveTx+0x14a>
 800be56:	89fb      	ldrh	r3, [r7, #14]
 800be58:	2b0d      	cmp	r3, #13
 800be5a:	d006      	beq.n	800be6a <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800be5c:	4a55      	ldr	r2, [pc, #340]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be5e:	89fb      	ldrh	r3, [r7, #14]
 800be60:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800be62:	4b54      	ldr	r3, [pc, #336]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be64:	2213      	movs	r2, #19
 800be66:	751a      	strb	r2, [r3, #20]
                    break;
 800be68:	e193      	b.n	800c192 <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800be6a:	4b52      	ldr	r3, [pc, #328]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	b29b      	uxth	r3, r3
 800be72:	4618      	mov	r0, r3
 800be74:	f001 f85c 	bl	800cf30 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800be78:	4b4e      	ldr	r3, [pc, #312]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be7a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800be7c:	4619      	mov	r1, r3
 800be7e:	484f      	ldr	r0, [pc, #316]	; (800bfbc <rfalTransceiveTx+0x29c>)
 800be80:	f001 fb16 	bl	800d4b0 <st25r3916WriteFifo>
 800be84:	e01d      	b.n	800bec2 <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800be86:	4b4b      	ldr	r3, [pc, #300]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be88:	8b9b      	ldrh	r3, [r3, #28]
 800be8a:	3307      	adds	r3, #7
 800be8c:	08db      	lsrs	r3, r3, #3
 800be8e:	b29a      	uxth	r2, r3
 800be90:	4b48      	ldr	r3, [pc, #288]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be92:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800be94:	4b47      	ldr	r3, [pc, #284]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800be96:	8b9b      	ldrh	r3, [r3, #28]
 800be98:	4618      	mov	r0, r3
 800be9a:	f001 f849 	bl	800cf30 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800be9e:	4b45      	ldr	r3, [pc, #276]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bea6:	bf28      	it	cs
 800bea8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800beac:	b29a      	uxth	r2, r3
 800beae:	4b41      	ldr	r3, [pc, #260]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800beb0:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800beb2:	4b40      	ldr	r3, [pc, #256]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	4b3f      	ldr	r3, [pc, #252]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800beb8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800beba:	4619      	mov	r1, r3
 800bebc:	4610      	mov	r0, r2
 800bebe:	f001 faf7 	bl	800d4b0 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800bec2:	4b3c      	ldr	r3, [pc, #240]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bec4:	795b      	ldrb	r3, [r3, #5]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <rfalTransceiveTx+0x1bc>
 800beca:	4b3a      	ldr	r3, [pc, #232]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800becc:	795b      	ldrb	r3, [r3, #5]
 800bece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	4619      	mov	r1, r3
 800bed6:	2001      	movs	r0, #1
 800bed8:	f001 fb65 	bl	800d5a6 <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800bedc:	4b35      	ldr	r3, [pc, #212]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	2b0a      	cmp	r3, #10
 800bee2:	d007      	beq.n	800bef4 <rfalTransceiveTx+0x1d4>
 800bee4:	4b33      	ldr	r3, [pc, #204]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bee6:	785b      	ldrb	r3, [r3, #1]
 800bee8:	2b0b      	cmp	r3, #11
 800beea:	d003      	beq.n	800bef4 <rfalTransceiveTx+0x1d4>
 800beec:	4b31      	ldr	r3, [pc, #196]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800beee:	785b      	ldrb	r3, [r3, #1]
 800bef0:	2b0c      	cmp	r3, #12
 800bef2:	d10e      	bne.n	800bf12 <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800bef4:	f000 fdfe 	bl	800caf4 <rfalIsExtFieldOn>
 800bef8:	4603      	mov	r3, r0
 800befa:	f083 0301 	eor.w	r3, r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800bf04:	4b2b      	ldr	r3, [pc, #172]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf06:	2225      	movs	r2, #37	; 0x25
 800bf08:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800bf0a:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf0c:	2213      	movs	r2, #19
 800bf0e:	751a      	strb	r2, [r3, #20]
                    break;
 800bf10:	e13f      	b.n	800c192 <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800bf12:	4b28      	ldr	r3, [pc, #160]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800bf1e:	20c5      	movs	r0, #197	; 0xc5
 800bf20:	f001 fb05 	bl	800d52e <st25r3916ExecuteCommand>
 800bf24:	e002      	b.n	800bf2c <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800bf26:	20c4      	movs	r0, #196	; 0xc4
 800bf28:	f001 fb01 	bl	800d52e <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800bf2c:	4b21      	ldr	r3, [pc, #132]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf2e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800bf30:	4b20      	ldr	r3, [pc, #128]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d201      	bcs.n	800bf3c <rfalTransceiveTx+0x21c>
 800bf38:	220f      	movs	r2, #15
 800bf3a:	e000      	b.n	800bf3e <rfalTransceiveTx+0x21e>
 800bf3c:	2211      	movs	r2, #17
 800bf3e:	4b1d      	ldr	r3, [pc, #116]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf40:	751a      	strb	r2, [r3, #20]
            break;
 800bf42:	e126      	b.n	800c192 <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800bf44:	2048      	movs	r0, #72	; 0x48
 800bf46:	f001 fdc5 	bl	800dad4 <st25r3916GetInterrupt>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 8119 	beq.w	800c188 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d008      	beq.n	800bf72 <rfalTransceiveTx+0x252>
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d103      	bne.n	800bf72 <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf6c:	2210      	movs	r2, #16
 800bf6e:	751a      	strb	r2, [r3, #20]
 800bf70:	e006      	b.n	800bf80 <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800bf72:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf74:	2203      	movs	r2, #3
 800bf76:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800bf78:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf7a:	2213      	movs	r2, #19
 800bf7c:	751a      	strb	r2, [r3, #20]
                break;
 800bf7e:	e108      	b.n	800c192 <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b07      	cmp	r3, #7
 800bf86:	d003      	beq.n	800bf90 <rfalTransceiveTx+0x270>
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d16d      	bne.n	800c06c <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800bf90:	4b08      	ldr	r3, [pc, #32]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf94:	461a      	mov	r2, r3
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf98:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	4a05      	ldr	r2, [pc, #20]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bf9e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	da11      	bge.n	800bfc8 <rfalTransceiveTx+0x2a8>
 800bfa4:	4b03      	ldr	r3, [pc, #12]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bfa6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <rfalTransceiveTx+0x294>)
 800bfaa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	e00c      	b.n	800bfcc <rfalTransceiveTx+0x2ac>
 800bfb2:	bf00      	nop
 800bfb4:	2000072c 	.word	0x2000072c
 800bfb8:	20000764 	.word	0x20000764
 800bfbc:	2000077c 	.word	0x2000077c
 800bfc0:	20000984 	.word	0x20000984
 800bfc4:	20000762 	.word	0x20000762
 800bfc8:	4b74      	ldr	r3, [pc, #464]	; (800c19c <rfalTransceiveTx+0x47c>)
 800bfca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bfcc:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800bfce:	89bb      	ldrh	r3, [r7, #12]
 800bfd0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800bfd4:	bf28      	it	cs
 800bfd6:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800bfda:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800bfe0:	4b6e      	ldr	r3, [pc, #440]	; (800c19c <rfalTransceiveTx+0x47c>)
 800bfe2:	6998      	ldr	r0, [r3, #24]
 800bfe4:	4b6d      	ldr	r3, [pc, #436]	; (800c19c <rfalTransceiveTx+0x47c>)
 800bfe6:	8b9b      	ldrh	r3, [r3, #28]
 800bfe8:	3307      	adds	r3, #7
 800bfea:	08db      	lsrs	r3, r3, #3
 800bfec:	b299      	uxth	r1, r3
 800bfee:	4b6b      	ldr	r3, [pc, #428]	; (800c19c <rfalTransceiveTx+0x47c>)
 800bff0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bf0c      	ite	eq
 800bffc:	2301      	moveq	r3, #1
 800bffe:	2300      	movne	r3, #0
 800c000:	b2dc      	uxtb	r4, r3
 800c002:	4b66      	ldr	r3, [pc, #408]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c004:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bf0c      	ite	eq
 800c010:	2301      	moveq	r3, #1
 800c012:	2300      	movne	r3, #0
 800c014:	b2dd      	uxtb	r5, r3
 800c016:	4b61      	ldr	r3, [pc, #388]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	bf0c      	ite	eq
 800c01e:	2301      	moveq	r3, #1
 800c020:	2300      	movne	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	1dba      	adds	r2, r7, #6
 800c026:	9205      	str	r2, [sp, #20]
 800c028:	89ba      	ldrh	r2, [r7, #12]
 800c02a:	9204      	str	r2, [sp, #16]
 800c02c:	4a5c      	ldr	r2, [pc, #368]	; (800c1a0 <rfalTransceiveTx+0x480>)
 800c02e:	9203      	str	r2, [sp, #12]
 800c030:	4a5c      	ldr	r2, [pc, #368]	; (800c1a4 <rfalTransceiveTx+0x484>)
 800c032:	9202      	str	r2, [sp, #8]
 800c034:	4a5c      	ldr	r2, [pc, #368]	; (800c1a8 <rfalTransceiveTx+0x488>)
 800c036:	9201      	str	r2, [sp, #4]
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	462b      	mov	r3, r5
 800c03c:	4622      	mov	r2, r4
 800c03e:	f7fe fa2b 	bl	800a498 <iso15693VCDCode>
 800c042:	4603      	mov	r3, r0
 800c044:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800c046:	89fb      	ldrh	r3, [r7, #14]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <rfalTransceiveTx+0x340>
 800c04c:	89fb      	ldrh	r3, [r7, #14]
 800c04e:	2b0d      	cmp	r3, #13
 800c050:	d006      	beq.n	800c060 <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800c052:	4a52      	ldr	r2, [pc, #328]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c054:	89fb      	ldrh	r3, [r7, #14]
 800c056:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800c058:	4b50      	ldr	r3, [pc, #320]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c05a:	2213      	movs	r2, #19
 800c05c:	751a      	strb	r2, [r3, #20]
                    break;
 800c05e:	e098      	b.n	800c192 <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800c060:	88fb      	ldrh	r3, [r7, #6]
 800c062:	4619      	mov	r1, r3
 800c064:	484e      	ldr	r0, [pc, #312]	; (800c1a0 <rfalTransceiveTx+0x480>)
 800c066:	f001 fa23 	bl	800d4b0 <st25r3916WriteFifo>
            {
 800c06a:	e017      	b.n	800c09c <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800c06c:	4b4b      	ldr	r3, [pc, #300]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c06e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c070:	461a      	mov	r2, r3
 800c072:	4b4a      	ldr	r3, [pc, #296]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c076:	4619      	mov	r1, r3
 800c078:	4b48      	ldr	r3, [pc, #288]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c07a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c07c:	1acb      	subs	r3, r1, r3
 800c07e:	4293      	cmp	r3, r2
 800c080:	bfa8      	it	ge
 800c082:	4613      	movge	r3, r2
 800c084:	b29b      	uxth	r3, r3
 800c086:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800c088:	4b44      	ldr	r3, [pc, #272]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	4a43      	ldr	r2, [pc, #268]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c08e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c090:	4413      	add	r3, r2
 800c092:	88fa      	ldrh	r2, [r7, #6]
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fa0a 	bl	800d4b0 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800c09c:	4b3f      	ldr	r3, [pc, #252]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c09e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	4b3d      	ldr	r3, [pc, #244]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0a8:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800c0aa:	4b3c      	ldr	r3, [pc, #240]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0ac:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800c0ae:	4b3b      	ldr	r3, [pc, #236]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d201      	bcs.n	800c0ba <rfalTransceiveTx+0x39a>
 800c0b6:	220f      	movs	r2, #15
 800c0b8:	e000      	b.n	800c0bc <rfalTransceiveTx+0x39c>
 800c0ba:	2211      	movs	r2, #17
 800c0bc:	4b37      	ldr	r3, [pc, #220]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0be:	751a      	strb	r2, [r3, #20]
            break;
 800c0c0:	e067      	b.n	800c192 <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800c0c2:	2048      	movs	r0, #72	; 0x48
 800c0c4:	f001 fd06 	bl	800dad4 <st25r3916GetInterrupt>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d05c      	beq.n	800c18c <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f003 0308 	and.w	r3, r3, #8
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800c0dc:	4b2f      	ldr	r3, [pc, #188]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0de:	2212      	movs	r2, #18
 800c0e0:	751a      	strb	r2, [r3, #20]
 800c0e2:	e00b      	b.n	800c0fc <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d150      	bne.n	800c190 <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800c0ee:	4b2b      	ldr	r3, [pc, #172]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800c0f4:	4b29      	ldr	r3, [pc, #164]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0f6:	2213      	movs	r2, #19
 800c0f8:	751a      	strb	r2, [r3, #20]
               break;
 800c0fa:	e04a      	b.n	800c192 <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800c0fc:	4b27      	ldr	r3, [pc, #156]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c0fe:	6a1b      	ldr	r3, [r3, #32]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d110      	bne.n	800c126 <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800c104:	4b25      	ldr	r3, [pc, #148]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c106:	799b      	ldrb	r3, [r3, #6]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <rfalTransceiveTx+0x3f4>
 800c10c:	2140      	movs	r1, #64	; 0x40
 800c10e:	2001      	movs	r0, #1
 800c110:	f001 fa49 	bl	800d5a6 <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800c114:	f7ff fd1a 	bl	800bb4c <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800c118:	4b20      	ldr	r3, [pc, #128]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800c11e:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c120:	2200      	movs	r2, #0
 800c122:	751a      	strb	r2, [r3, #20]
                break;
 800c124:	e035      	b.n	800c192 <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800c126:	4b1d      	ldr	r3, [pc, #116]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c128:	799b      	ldrb	r3, [r3, #6]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <rfalTransceiveTx+0x420>
 800c12e:	4b1b      	ldr	r3, [pc, #108]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c130:	799b      	ldrb	r3, [r3, #6]
 800c132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c136:	b2db      	uxtb	r3, r3
 800c138:	4619      	mov	r1, r3
 800c13a:	2001      	movs	r0, #1
 800c13c:	f001 fa33 	bl	800d5a6 <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800c140:	4b16      	ldr	r3, [pc, #88]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c142:	2251      	movs	r2, #81	; 0x51
 800c144:	751a      	strb	r2, [r3, #20]
            break;
 800c146:	e024      	b.n	800c192 <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800c148:	4b14      	ldr	r3, [pc, #80]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c14a:	8adb      	ldrh	r3, [r3, #22]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d102      	bne.n	800c156 <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800c150:	4b12      	ldr	r3, [pc, #72]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c152:	2208      	movs	r2, #8
 800c154:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c158:	799b      	ldrb	r3, [r3, #6]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <rfalTransceiveTx+0x446>
 800c15e:	2140      	movs	r1, #64	; 0x40
 800c160:	2001      	movs	r0, #1
 800c162:	f001 fa20 	bl	800d5a6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c166:	f7ff fcf1 	bl	800bb4c <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800c16a:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	751a      	strb	r2, [r3, #20]
            break;
 800c170:	e00f      	b.n	800c192 <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800c172:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c174:	2208      	movs	r2, #8
 800c176:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800c178:	4b08      	ldr	r3, [pc, #32]	; (800c19c <rfalTransceiveTx+0x47c>)
 800c17a:	2213      	movs	r2, #19
 800c17c:	751a      	strb	r2, [r3, #20]
            break;
 800c17e:	e008      	b.n	800c192 <rfalTransceiveTx+0x472>
                break;
 800c180:	bf00      	nop
 800c182:	e006      	b.n	800c192 <rfalTransceiveTx+0x472>
                   break;
 800c184:	bf00      	nop
 800c186:	e004      	b.n	800c192 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800c188:	bf00      	nop
 800c18a:	e002      	b.n	800c192 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800c18c:	bf00      	nop
 800c18e:	e000      	b.n	800c192 <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800c190:	bf00      	nop
    }
}
 800c192:	bf00      	nop
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bdb0      	pop	{r4, r5, r7, pc}
 800c19a:	bf00      	nop
 800c19c:	2000072c 	.word	0x2000072c
 800c1a0:	2000077c 	.word	0x2000077c
 800c1a4:	20000984 	.word	0x20000984
 800c1a8:	20000762 	.word	0x20000762

0800c1ac <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800c1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ae:	b089      	sub	sp, #36	; 0x24
 800c1b0:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800c1b6:	4baf      	ldr	r3, [pc, #700]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c1b8:	7d1a      	ldrb	r2, [r3, #20]
 800c1ba:	4bae      	ldr	r3, [pc, #696]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c1bc:	7d5b      	ldrb	r3, [r3, #21]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d003      	beq.n	800c1ca <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800c1c2:	4bac      	ldr	r3, [pc, #688]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c1c4:	7d1a      	ldrb	r2, [r3, #20]
 800c1c6:	4bab      	ldr	r3, [pc, #684]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c1c8:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800c1ca:	4baa      	ldr	r3, [pc, #680]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c1cc:	7d1b      	ldrb	r3, [r3, #20]
 800c1ce:	3b51      	subs	r3, #81	; 0x51
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	f200 8339 	bhi.w	800c848 <rfalTransceiveRx+0x69c>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <rfalTransceiveRx+0x30>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c205 	.word	0x0800c205
 800c1e0:	0800c7b5 	.word	0x0800c7b5
 800c1e4:	0800c23d 	.word	0x0800c23d
 800c1e8:	0800c2e1 	.word	0x0800c2e1
 800c1ec:	0800c6f9 	.word	0x0800c6f9
 800c1f0:	0800c3bf 	.word	0x0800c3bf
 800c1f4:	0800c4f3 	.word	0x0800c4f3
 800c1f8:	0800c7ff 	.word	0x0800c7ff
 800c1fc:	0800c6d1 	.word	0x0800c6d1
 800c200:	0800c78b 	.word	0x0800c78b
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800c204:	4b9b      	ldr	r3, [pc, #620]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c206:	2200      	movs	r2, #0
 800c208:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800c20a:	4b9a      	ldr	r3, [pc, #616]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800c210:	4b98      	ldr	r3, [pc, #608]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800c218:	4b96      	ldr	r3, [pc, #600]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21c:	2200      	movs	r2, #0
 800c21e:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800c220:	4b94      	ldr	r3, [pc, #592]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c222:	785b      	ldrb	r3, [r3, #1]
 800c224:	2b09      	cmp	r3, #9
 800c226:	d003      	beq.n	800c230 <rfalTransceiveRx+0x84>
 800c228:	4b92      	ldr	r3, [pc, #584]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	2b0d      	cmp	r3, #13
 800c22e:	d101      	bne.n	800c234 <rfalTransceiveRx+0x88>
 800c230:	2252      	movs	r2, #82	; 0x52
 800c232:	e000      	b.n	800c236 <rfalTransceiveRx+0x8a>
 800c234:	2253      	movs	r2, #83	; 0x53
 800c236:	4b8f      	ldr	r3, [pc, #572]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c238:	751a      	strb	r2, [r3, #20]
            break;
 800c23a:	e315      	b.n	800c868 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800c23c:	f644 0020 	movw	r0, #18464	; 0x4820
 800c240:	f001 fc48 	bl	800dad4 <st25r3916GetInterrupt>
 800c244:	4603      	mov	r3, r0
 800c246:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 8303 	beq.w	800c856 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00b      	beq.n	800c272 <rfalTransceiveRx+0xc6>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f003 0320 	and.w	r3, r3, #32
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800c264:	4b83      	ldr	r3, [pc, #524]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c266:	2204      	movs	r2, #4
 800c268:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c26a:	4b82      	ldr	r3, [pc, #520]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c26c:	225a      	movs	r2, #90	; 0x5a
 800c26e:	751a      	strb	r2, [r3, #20]
                break;
 800c270:	e2fa      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d015      	beq.n	800c2a8 <rfalTransceiveRx+0xfc>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b00      	cmp	r3, #0
 800c284:	d110      	bne.n	800c2a8 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800c286:	4b7b      	ldr	r3, [pc, #492]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	d003      	beq.n	800c296 <rfalTransceiveRx+0xea>
 800c28e:	4b79      	ldr	r3, [pc, #484]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	2b0d      	cmp	r3, #13
 800c294:	d101      	bne.n	800c29a <rfalTransceiveRx+0xee>
 800c296:	2204      	movs	r2, #4
 800c298:	e000      	b.n	800c29c <rfalTransceiveRx+0xf0>
 800c29a:	2225      	movs	r2, #37	; 0x25
 800c29c:	4b75      	ldr	r3, [pc, #468]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c29e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2a0:	4b74      	ldr	r3, [pc, #464]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2a2:	225a      	movs	r2, #90	; 0x5a
 800c2a4:	751a      	strb	r2, [r3, #20]
                break;
 800c2a6:	e2df      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800c2b2:	2032      	movs	r0, #50	; 0x32
 800c2b4:	f7f7 fb5a 	bl	800396c <timerCalculateTimer>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	4b6e      	ldr	r3, [pc, #440]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2bc:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800c2be:	4b6d      	ldr	r3, [pc, #436]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2c0:	2254      	movs	r2, #84	; 0x54
 800c2c2:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2ca:	f023 0320 	bic.w	r3, r3, #32
 800c2ce:	607b      	str	r3, [r7, #4]
 800c2d0:	e006      	b.n	800c2e0 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800c2d2:	4b68      	ldr	r3, [pc, #416]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2d4:	2203      	movs	r2, #3
 800c2d6:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2d8:	4b66      	ldr	r3, [pc, #408]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2da:	225a      	movs	r2, #90	; 0x5a
 800c2dc:	751a      	strb	r2, [r3, #20]
                break;
 800c2de:	e2c3      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800c2e0:	4b64      	ldr	r3, [pc, #400]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f7 fb4f 	bl	8003988 <timerIsExpired>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d005      	beq.n	800c2fc <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800c2f0:	4b60      	ldr	r3, [pc, #384]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2f2:	2209      	movs	r2, #9
 800c2f4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2f6:	4b5f      	ldr	r3, [pc, #380]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c2f8:	225a      	movs	r2, #90	; 0x5a
 800c2fa:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800c2fc:	485e      	ldr	r0, [pc, #376]	; (800c478 <rfalTransceiveRx+0x2cc>)
 800c2fe:	f001 fbe9 	bl	800dad4 <st25r3916GetInterrupt>
 800c302:	4602      	mov	r2, r0
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4313      	orrs	r3, r2
 800c308:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 82a4 	beq.w	800c85a <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d02f      	beq.n	800c37c <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800c31c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c320:	f001 fbd8 	bl	800dad4 <st25r3916GetInterrupt>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800c32a:	4b52      	ldr	r3, [pc, #328]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c32c:	2204      	movs	r2, #4
 800c32e:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c330:	4b50      	ldr	r3, [pc, #320]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c332:	225a      	movs	r2, #90	; 0x5a
 800c334:	751a      	strb	r2, [r3, #20]
                    break;
 800c336:	e297      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800c338:	2200      	movs	r2, #0
 800c33a:	2102      	movs	r1, #2
 800c33c:	2024      	movs	r0, #36	; 0x24
 800c33e:	f001 fa3f 	bl	800d7c0 <st25r3916CheckReg>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d006      	beq.n	800c356 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800c348:	4b4a      	ldr	r3, [pc, #296]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c34a:	2204      	movs	r2, #4
 800c34c:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c34e:	4b49      	ldr	r3, [pc, #292]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c350:	225a      	movs	r2, #90	; 0x5a
 800c352:	751a      	strb	r2, [r3, #20]
                    break;
 800c354:	e288      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800c356:	2020      	movs	r0, #32
 800c358:	f001 fbbc 	bl	800dad4 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800c35c:	2204      	movs	r2, #4
 800c35e:	2104      	movs	r1, #4
 800c360:	2031      	movs	r0, #49	; 0x31
 800c362:	f001 fa2d 	bl	800d7c0 <st25r3916CheckReg>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800c36c:	4b41      	ldr	r3, [pc, #260]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c36e:	2254      	movs	r2, #84	; 0x54
 800c370:	751a      	strb	r2, [r3, #20]
                    break;
 800c372:	e279      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800c374:	4b3f      	ldr	r3, [pc, #252]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c376:	2253      	movs	r2, #83	; 0x53
 800c378:	751a      	strb	r2, [r3, #20]
                break;
 800c37a:	e275      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d008      	beq.n	800c398 <rfalTransceiveRx+0x1ec>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f003 0310 	and.w	r3, r3, #16
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d103      	bne.n	800c398 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800c390:	4b38      	ldr	r3, [pc, #224]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c392:	2255      	movs	r2, #85	; 0x55
 800c394:	751a      	strb	r2, [r3, #20]
                break;
 800c396:	e267      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800c3a2:	4b34      	ldr	r3, [pc, #208]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3a4:	2253      	movs	r2, #83	; 0x53
 800c3a6:	751a      	strb	r2, [r3, #20]
                break;
 800c3a8:	e25e      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800c3aa:	4834      	ldr	r0, [pc, #208]	; (800c47c <rfalTransceiveRx+0x2d0>)
 800c3ac:	f001 fb92 	bl	800dad4 <st25r3916GetInterrupt>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800c3b8:	4b2e      	ldr	r3, [pc, #184]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3ba:	2256      	movs	r2, #86	; 0x56
 800c3bc:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d008      	beq.n	800c3da <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800c3c8:	4b2a      	ldr	r3, [pc, #168]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3ca:	2209      	movs	r2, #9
 800c3cc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c3ce:	4b29      	ldr	r3, [pc, #164]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3d0:	2257      	movs	r2, #87	; 0x57
 800c3d2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c3d4:	f7ff fb82 	bl	800badc <rfalErrorHandling>
                break;
 800c3d8:	e246      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800c3da:	4b26      	ldr	r3, [pc, #152]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	2b09      	cmp	r3, #9
 800c3e0:	d01d      	beq.n	800c41e <rfalTransceiveRx+0x272>
 800c3e2:	4b24      	ldr	r3, [pc, #144]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3e4:	785b      	ldrb	r3, [r3, #1]
 800c3e6:	2b0d      	cmp	r3, #13
 800c3e8:	d019      	beq.n	800c41e <rfalTransceiveRx+0x272>
 800c3ea:	4b22      	ldr	r3, [pc, #136]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b0a      	cmp	r3, #10
 800c3f0:	d015      	beq.n	800c41e <rfalTransceiveRx+0x272>
 800c3f2:	4b20      	ldr	r3, [pc, #128]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	2b0b      	cmp	r3, #11
 800c3f8:	d011      	beq.n	800c41e <rfalTransceiveRx+0x272>
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	2b0c      	cmp	r3, #12
 800c400:	d00d      	beq.n	800c41e <rfalTransceiveRx+0x272>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d008      	beq.n	800c41e <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800c40c:	4b19      	ldr	r3, [pc, #100]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c40e:	2209      	movs	r2, #9
 800c410:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c412:	4b18      	ldr	r3, [pc, #96]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c414:	2257      	movs	r2, #87	; 0x57
 800c416:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c418:	f7ff fb60 	bl	800badc <rfalErrorHandling>
                break;
 800c41c:	e224      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d008      	beq.n	800c43a <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800c428:	4b12      	ldr	r3, [pc, #72]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c42a:	221b      	movs	r2, #27
 800c42c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c430:	2257      	movs	r2, #87	; 0x57
 800c432:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c434:	f7ff fb52 	bl	800badc <rfalErrorHandling>
                break;
 800c438:	e216      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d008      	beq.n	800c456 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c446:	2215      	movs	r2, #21
 800c448:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c44a:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c44c:	2257      	movs	r2, #87	; 0x57
 800c44e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c450:	f7ff fb44 	bl	800badc <rfalErrorHandling>
                break;
 800c454:	e208      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00f      	beq.n	800c480 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c462:	221d      	movs	r2, #29
 800c464:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c466:	4b03      	ldr	r3, [pc, #12]	; (800c474 <rfalTransceiveRx+0x2c8>)
 800c468:	2257      	movs	r2, #87	; 0x57
 800c46a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c46c:	f7ff fb36 	bl	800badc <rfalErrorHandling>
                break;
 800c470:	e1fa      	b.n	800c868 <rfalTransceiveRx+0x6bc>
 800c472:	bf00      	nop
 800c474:	2000072c 	.word	0x2000072c
 800c478:	08000852 	.word	0x08000852
 800c47c:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800c480:	4b9c      	ldr	r3, [pc, #624]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c482:	785b      	ldrb	r3, [r3, #1]
 800c484:	2b0a      	cmp	r3, #10
 800c486:	d007      	beq.n	800c498 <rfalTransceiveRx+0x2ec>
 800c488:	4b9a      	ldr	r3, [pc, #616]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	2b0b      	cmp	r3, #11
 800c48e:	d003      	beq.n	800c498 <rfalTransceiveRx+0x2ec>
 800c490:	4b98      	ldr	r3, [pc, #608]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	2b0c      	cmp	r3, #12
 800c496:	d10b      	bne.n	800c4b0 <rfalTransceiveRx+0x304>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800c4a2:	4b94      	ldr	r3, [pc, #592]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4a4:	2225      	movs	r2, #37	; 0x25
 800c4a6:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c4a8:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4aa:	225a      	movs	r2, #90	; 0x5a
 800c4ac:	751a      	strb	r2, [r3, #20]
                 break;
 800c4ae:	e1db      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f003 0310 	and.w	r3, r3, #16
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d014      	beq.n	800c4e4 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800c4ba:	f000 fa19 	bl	800c8f0 <rfalFIFOStatusIsIncompleteByte>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800c4c4:	4b8b      	ldr	r3, [pc, #556]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4c6:	2228      	movs	r2, #40	; 0x28
 800c4c8:	82da      	strh	r2, [r3, #22]
 800c4ca:	e007      	b.n	800c4dc <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800c4cc:	f000 fa22 	bl	800c914 <rfalFIFOStatusIsMissingPar>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800c4d6:	4b87      	ldr	r3, [pc, #540]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4d8:	2209      	movs	r2, #9
 800c4da:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800c4dc:	4b85      	ldr	r3, [pc, #532]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4de:	2257      	movs	r2, #87	; 0x57
 800c4e0:	751a      	strb	r2, [r3, #20]
 800c4e2:	e006      	b.n	800c4f2 <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800c4e4:	4b83      	ldr	r3, [pc, #524]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c4ea:	4b82      	ldr	r3, [pc, #520]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4ec:	225a      	movs	r2, #90	; 0x5a
 800c4ee:	751a      	strb	r2, [r3, #20]
                break;
 800c4f0:	e1ba      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800c4f2:	f000 f9e1 	bl	800c8b8 <rfalFIFOStatusGetNumBytes>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800c4fa:	4b7e      	ldr	r3, [pc, #504]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	f003 0302 	and.w	r3, r3, #2
 800c502:	2b00      	cmp	r3, #0
 800c504:	d117      	bne.n	800c536 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800c506:	4b7b      	ldr	r3, [pc, #492]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c508:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c50a:	89fb      	ldrh	r3, [r7, #14]
 800c50c:	4413      	add	r3, r2
 800c50e:	b29b      	uxth	r3, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	d010      	beq.n	800c536 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800c514:	89fb      	ldrh	r3, [r7, #14]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d903      	bls.n	800c522 <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800c51a:	89fb      	ldrh	r3, [r7, #14]
 800c51c:	3b02      	subs	r3, #2
 800c51e:	81fb      	strh	r3, [r7, #14]
 800c520:	e009      	b.n	800c536 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800c522:	4b74      	ldr	r3, [pc, #464]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c526:	2b02      	cmp	r3, #2
 800c528:	d905      	bls.n	800c536 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800c52a:	4b72      	ldr	r3, [pc, #456]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c52c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c52e:	3b02      	subs	r3, #2
 800c530:	b29a      	uxth	r2, r3
 800c532:	4b70      	ldr	r3, [pc, #448]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c534:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800c536:	4b6f      	ldr	r3, [pc, #444]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c538:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c53a:	89fb      	ldrh	r3, [r7, #14]
 800c53c:	4413      	add	r3, r2
 800c53e:	b29a      	uxth	r2, r3
 800c540:	4b6c      	ldr	r3, [pc, #432]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c542:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800c544:	4b6b      	ldr	r3, [pc, #428]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c546:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c548:	4b6a      	ldr	r3, [pc, #424]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c54a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c54c:	3307      	adds	r3, #7
 800c54e:	08db      	lsrs	r3, r3, #3
 800c550:	b29b      	uxth	r3, r3
 800c552:	429a      	cmp	r2, r3
 800c554:	d90f      	bls.n	800c576 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800c556:	4b67      	ldr	r3, [pc, #412]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c558:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c55a:	3307      	adds	r3, #7
 800c55c:	08db      	lsrs	r3, r3, #3
 800c55e:	b29a      	uxth	r2, r3
 800c560:	4b64      	ldr	r3, [pc, #400]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c562:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800c568:	4b62      	ldr	r3, [pc, #392]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c56a:	8adb      	ldrh	r3, [r3, #22]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d102      	bne.n	800c576 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800c570:	4b60      	ldr	r3, [pc, #384]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c572:	2201      	movs	r2, #1
 800c574:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800c576:	4b5f      	ldr	r3, [pc, #380]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	4a5e      	ldr	r2, [pc, #376]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c57c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c57e:	4413      	add	r3, r2
 800c580:	89fa      	ldrh	r2, [r7, #14]
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f000 ffb6 	bl	800d4f6 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800c58a:	4b5a      	ldr	r3, [pc, #360]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d019      	beq.n	800c5c6 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800c592:	4b58      	ldr	r3, [pc, #352]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c594:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c596:	4b57      	ldr	r3, [pc, #348]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	00d2      	lsls	r2, r2, #3
 800c59c:	b292      	uxth	r2, r2
 800c59e:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800c5a0:	f000 f9a6 	bl	800c8f0 <rfalFIFOStatusIsIncompleteByte>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00d      	beq.n	800c5c6 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800c5aa:	f000 f9c5 	bl	800c938 <rfalFIFOGetNumIncompleteBits>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f1c3 0208 	rsb	r2, r3, #8
 800c5b4:	4b4f      	ldr	r3, [pc, #316]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	8819      	ldrh	r1, [r3, #0]
 800c5ba:	b292      	uxth	r2, r2
 800c5bc:	4b4d      	ldr	r3, [pc, #308]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c0:	1a8a      	subs	r2, r1, r2
 800c5c2:	b292      	uxth	r2, r2
 800c5c4:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800c5c6:	4b4b      	ldr	r3, [pc, #300]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5c8:	785b      	ldrb	r3, [r3, #1]
 800c5ca:	2b07      	cmp	r3, #7
 800c5cc:	d003      	beq.n	800c5d6 <rfalTransceiveRx+0x42a>
 800c5ce:	4b49      	ldr	r3, [pc, #292]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5d0:	785b      	ldrb	r3, [r3, #1]
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d165      	bne.n	800c6a2 <rfalTransceiveRx+0x4f6>
 800c5d6:	4b47      	ldr	r3, [pc, #284]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5d8:	8adb      	ldrh	r3, [r3, #22]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d161      	bne.n	800c6a2 <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800c5de:	2300      	movs	r3, #0
 800c5e0:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c5e2:	4b44      	ldr	r3, [pc, #272]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5e4:	6a18      	ldr	r0, [r3, #32]
 800c5e6:	4b43      	ldr	r3, [pc, #268]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5e8:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800c5ea:	4b42      	ldr	r3, [pc, #264]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5ec:	f8d3 5264 	ldr.w	r5, [r3, #612]	; 0x264
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800c5f0:	4b40      	ldr	r3, [pc, #256]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5f2:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800c5f6:	3307      	adds	r3, #7
 800c5f8:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c5fa:	b29e      	uxth	r6, r3
 800c5fc:	4b3d      	ldr	r3, [pc, #244]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c5fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c602:	4a3c      	ldr	r2, [pc, #240]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c604:	f8b2 2278 	ldrh.w	r2, [r2, #632]	; 0x278
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800c608:	493a      	ldr	r1, [pc, #232]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c60a:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c60c:	2908      	cmp	r1, #8
 800c60e:	bf0c      	ite	eq
 800c610:	2101      	moveq	r1, #1
 800c612:	2100      	movne	r1, #0
 800c614:	b2c9      	uxtb	r1, r1
 800c616:	9103      	str	r1, [sp, #12]
 800c618:	9202      	str	r2, [sp, #8]
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	1cbb      	adds	r3, r7, #2
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	4633      	mov	r3, r6
 800c622:	462a      	mov	r2, r5
 800c624:	4621      	mov	r1, r4
 800c626:	f7fe f8ad 	bl	800a784 <iso15693VICCDecode>
 800c62a:	4603      	mov	r3, r0
 800c62c:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800c62e:	897b      	ldrh	r3, [r7, #10]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <rfalTransceiveRx+0x48e>
 800c634:	897b      	ldrh	r3, [r7, #10]
 800c636:	2b15      	cmp	r3, #21
 800c638:	d11f      	bne.n	800c67a <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800c63a:	4b2e      	ldr	r3, [pc, #184]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c63c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c640:	f003 0302 	and.w	r3, r3, #2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d118      	bne.n	800c67a <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800c648:	4b2a      	ldr	r3, [pc, #168]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c64a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	f003 0307 	and.w	r3, r3, #7
 800c654:	b29b      	uxth	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10f      	bne.n	800c67a <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800c65a:	4b26      	ldr	r3, [pc, #152]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c65c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	2b0f      	cmp	r3, #15
 800c664:	d909      	bls.n	800c67a <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800c666:	4b23      	ldr	r3, [pc, #140]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c668:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	4b21      	ldr	r3, [pc, #132]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c670:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c674:	3a10      	subs	r2, #16
 800c676:	b292      	uxth	r2, r2
 800c678:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800c67a:	4a1e      	ldr	r2, [pc, #120]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c67c:	4b1d      	ldr	r3, [pc, #116]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c67e:	f102 0418 	add.w	r4, r2, #24
 800c682:	f503 7517 	add.w	r5, r3, #604	; 0x25c
 800c686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c68a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c68e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800c692:	897b      	ldrh	r3, [r7, #10]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <rfalTransceiveRx+0x4f0>
 800c698:	897b      	ldrh	r3, [r7, #10]
 800c69a:	e000      	b.n	800c69e <rfalTransceiveRx+0x4f2>
 800c69c:	2302      	movs	r3, #2
 800c69e:	4a15      	ldr	r2, [pc, #84]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6a0:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800c6a2:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6a4:	8adb      	ldrh	r3, [r3, #22]
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d003      	beq.n	800c6b2 <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800c6aa:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6ac:	225a      	movs	r2, #90	; 0x5a
 800c6ae:	751a      	strb	r2, [r3, #20]
                break;
 800c6b0:	e0da      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800c6b2:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6b4:	785b      	ldrb	r3, [r3, #1]
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d003      	beq.n	800c6c2 <rfalTransceiveRx+0x516>
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6bc:	785b      	ldrb	r3, [r3, #1]
 800c6be:	2b0d      	cmp	r3, #13
 800c6c0:	d103      	bne.n	800c6ca <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800c6c2:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6c4:	2258      	movs	r2, #88	; 0x58
 800c6c6:	751a      	strb	r2, [r3, #20]
                break;
 800c6c8:	e0ce      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6cc:	2259      	movs	r2, #89	; 0x59
 800c6ce:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c6d0:	4b08      	ldr	r3, [pc, #32]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6d2:	799b      	ldrb	r3, [r3, #6]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <rfalTransceiveRx+0x534>
 800c6d8:	2140      	movs	r1, #64	; 0x40
 800c6da:	2001      	movs	r0, #1
 800c6dc:	f000 ff63 	bl	800d5a6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c6e0:	f7ff fa34 	bl	800bb4c <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800c6e4:	4b03      	ldr	r3, [pc, #12]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800c6ea:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <rfalTransceiveRx+0x548>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	751a      	strb	r2, [r3, #20]
            break;
 800c6f0:	e0ba      	b.n	800c868 <rfalTransceiveRx+0x6bc>
 800c6f2:	bf00      	nop
 800c6f4:	2000072c 	.word	0x2000072c
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800c6f8:	2032      	movs	r0, #50	; 0x32
 800c6fa:	f7f7 f937 	bl	800396c <timerCalculateTimer>
 800c6fe:	4602      	mov	r2, r0
 800c700:	4b5b      	ldr	r3, [pc, #364]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c702:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800c704:	f000 f8d8 	bl	800c8b8 <rfalFIFOStatusGetNumBytes>
 800c708:	4603      	mov	r3, r0
 800c70a:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800c70c:	4b58      	ldr	r3, [pc, #352]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c70e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c710:	89fb      	ldrh	r3, [r7, #14]
 800c712:	4413      	add	r3, r2
 800c714:	b29a      	uxth	r2, r3
 800c716:	4b56      	ldr	r3, [pc, #344]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c718:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800c71a:	4b55      	ldr	r3, [pc, #340]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c71c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800c71e:	4b54      	ldr	r3, [pc, #336]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c720:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c722:	3307      	adds	r3, #7
 800c724:	08db      	lsrs	r3, r3, #3
 800c726:	b29b      	uxth	r3, r3
 800c728:	429a      	cmp	r2, r3
 800c72a:	d909      	bls.n	800c740 <rfalTransceiveRx+0x594>
 800c72c:	4b50      	ldr	r3, [pc, #320]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c72e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c730:	3307      	adds	r3, #7
 800c732:	08db      	lsrs	r3, r3, #3
 800c734:	b29a      	uxth	r2, r3
 800c736:	4b4e      	ldr	r3, [pc, #312]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c738:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	e000      	b.n	800c742 <rfalTransceiveRx+0x596>
 800c740:	89fb      	ldrh	r3, [r7, #14]
 800c742:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800c744:	4b4a      	ldr	r3, [pc, #296]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c746:	6a1b      	ldr	r3, [r3, #32]
 800c748:	4a49      	ldr	r2, [pc, #292]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c74a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c74c:	4413      	add	r3, r2
 800c74e:	89ba      	ldrh	r2, [r7, #12]
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fecf 	bl	800d4f6 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800c758:	4b45      	ldr	r3, [pc, #276]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c75a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800c75c:	89bb      	ldrh	r3, [r7, #12]
 800c75e:	4413      	add	r3, r2
 800c760:	b29a      	uxth	r2, r3
 800c762:	4b43      	ldr	r3, [pc, #268]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c764:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800c766:	89ba      	ldrh	r2, [r7, #12]
 800c768:	89fb      	ldrh	r3, [r7, #14]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d207      	bcs.n	800c77e <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800c76e:	89fa      	ldrh	r2, [r7, #14]
 800c770:	89bb      	ldrh	r3, [r7, #12]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	b29b      	uxth	r3, r3
 800c776:	4619      	mov	r1, r3
 800c778:	2000      	movs	r0, #0
 800c77a:	f000 febc 	bl	800d4f6 <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800c77e:	f000 f88d 	bl	800c89c <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800c782:	4b3b      	ldr	r3, [pc, #236]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c784:	2254      	movs	r2, #84	; 0x54
 800c786:	751a      	strb	r2, [r3, #20]
            break;
 800c788:	e06e      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c78a:	4b39      	ldr	r3, [pc, #228]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c78c:	799b      	ldrb	r3, [r3, #6]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <rfalTransceiveRx+0x5ee>
 800c792:	2140      	movs	r1, #64	; 0x40
 800c794:	2001      	movs	r0, #1
 800c796:	f000 ff06 	bl	800d5a6 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c79a:	f7ff f9d7 	bl	800bb4c <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800c79e:	4b34      	ldr	r3, [pc, #208]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7a0:	8adb      	ldrh	r3, [r3, #22]
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d102      	bne.n	800c7ac <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800c7a6:	4b32      	ldr	r3, [pc, #200]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800c7ac:	4b30      	ldr	r3, [pc, #192]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	751a      	strb	r2, [r3, #20]
            break;
 800c7b2:	e059      	b.n	800c868 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800c7b4:	482f      	ldr	r0, [pc, #188]	; (800c874 <rfalTransceiveRx+0x6c8>)
 800c7b6:	f001 f98d 	bl	800dad4 <st25r3916GetInterrupt>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d04c      	beq.n	800c85e <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800c7ce:	4b28      	ldr	r3, [pc, #160]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7d0:	2253      	movs	r2, #83	; 0x53
 800c7d2:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800c7de:	4b24      	ldr	r3, [pc, #144]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c7e4:	4b22      	ldr	r3, [pc, #136]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7e6:	225a      	movs	r2, #90	; 0x5a
 800c7e8:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	da38      	bge.n	800c862 <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800c7f0:	4b1f      	ldr	r3, [pc, #124]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7f2:	2225      	movs	r2, #37	; 0x25
 800c7f4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c7f6:	4b1e      	ldr	r3, [pc, #120]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c7f8:	225a      	movs	r2, #90	; 0x5a
 800c7fa:	751a      	strb	r2, [r3, #20]
            }
            break;
 800c7fc:	e031      	b.n	800c862 <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800c7fe:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800c802:	f001 f967 	bl	800dad4 <st25r3916GetInterrupt>
 800c806:	4603      	mov	r3, r0
 800c808:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d02a      	beq.n	800c866 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800c81a:	4b15      	ldr	r3, [pc, #84]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c81c:	2259      	movs	r2, #89	; 0x59
 800c81e:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800c820:	e022      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d006      	beq.n	800c83a <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c82e:	221d      	movs	r2, #29
 800c830:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c832:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c834:	225a      	movs	r2, #90	; 0x5a
 800c836:	751a      	strb	r2, [r3, #20]
            break;
 800c838:	e016      	b.n	800c868 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800c83a:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c83c:	2203      	movs	r2, #3
 800c83e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c840:	4b0b      	ldr	r3, [pc, #44]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c842:	225a      	movs	r2, #90	; 0x5a
 800c844:	751a      	strb	r2, [r3, #20]
            break;
 800c846:	e00f      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800c848:	4b09      	ldr	r3, [pc, #36]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c84a:	2208      	movs	r2, #8
 800c84c:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c84e:	4b08      	ldr	r3, [pc, #32]	; (800c870 <rfalTransceiveRx+0x6c4>)
 800c850:	225a      	movs	r2, #90	; 0x5a
 800c852:	751a      	strb	r2, [r3, #20]
            break;           
 800c854:	e008      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800c856:	bf00      	nop
 800c858:	e006      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800c85a:	bf00      	nop
 800c85c:	e004      	b.n	800c868 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800c85e:	bf00      	nop
 800c860:	e002      	b.n	800c868 <rfalTransceiveRx+0x6bc>
            break;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800c866:	bf00      	nop
    }    
}
 800c868:	bf00      	nop
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c870:	2000072c 	.word	0x2000072c
 800c874:	80005000 	.word	0x80005000

0800c878 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800c87c:	4b05      	ldr	r3, [pc, #20]	; (800c894 <rfalFIFOStatusUpdate+0x1c>)
 800c87e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800c882:	2bff      	cmp	r3, #255	; 0xff
 800c884:	d104      	bne.n	800c890 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800c886:	2202      	movs	r2, #2
 800c888:	4903      	ldr	r1, [pc, #12]	; (800c898 <rfalFIFOStatusUpdate+0x20>)
 800c88a:	201e      	movs	r0, #30
 800c88c:	f000 fd99 	bl	800d3c2 <st25r3916ReadMultipleRegisters>
    }
}
 800c890:	bf00      	nop
 800c892:	bd80      	pop	{r7, pc}
 800c894:	2000072c 	.word	0x2000072c
 800c898:	20000766 	.word	0x20000766

0800c89c <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800c89c:	b480      	push	{r7}
 800c89e:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800c8a0:	4b04      	ldr	r3, [pc, #16]	; (800c8b4 <rfalFIFOStatusClear+0x18>)
 800c8a2:	22ff      	movs	r2, #255	; 0xff
 800c8a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800c8a8:	bf00      	nop
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	2000072c 	.word	0x2000072c

0800c8b8 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800c8be:	f7ff ffdb 	bl	800c878 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800c8c2:	4b0a      	ldr	r3, [pc, #40]	; (800c8ec <rfalFIFOStatusGetNumBytes+0x34>)
 800c8c4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800c8c8:	099b      	lsrs	r3, r3, #6
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800c8d2:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <rfalFIFOStatusGetNumBytes+0x34>)
 800c8d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	80fb      	strh	r3, [r7, #6]
    return result;
 800c8e0:	88fb      	ldrh	r3, [r7, #6]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	2000072c 	.word	0x2000072c

0800c8f0 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c8f4:	f7ff ffc0 	bl	800c878 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800c8f8:	4b05      	ldr	r3, [pc, #20]	; (800c910 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800c8fa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800c8fe:	f003 030e 	and.w	r3, r3, #14
 800c902:	2b00      	cmp	r3, #0
 800c904:	bf14      	ite	ne
 800c906:	2301      	movne	r3, #1
 800c908:	2300      	moveq	r3, #0
 800c90a:	b2db      	uxtb	r3, r3
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2000072c 	.word	0x2000072c

0800c914 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c918:	f7ff ffae 	bl	800c878 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800c91c:	4b05      	ldr	r3, [pc, #20]	; (800c934 <rfalFIFOStatusIsMissingPar+0x20>)
 800c91e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	bf14      	ite	ne
 800c92a:	2301      	movne	r3, #1
 800c92c:	2300      	moveq	r3, #0
 800c92e:	b2db      	uxtb	r3, r3
}
 800c930:	4618      	mov	r0, r3
 800c932:	bd80      	pop	{r7, pc}
 800c934:	2000072c 	.word	0x2000072c

0800c938 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c93c:	f7ff ff9c 	bl	800c878 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800c940:	4b04      	ldr	r3, [pc, #16]	; (800c954 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800c942:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800c946:	085b      	lsrs	r3, r3, #1
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	f003 0307 	and.w	r3, r3, #7
 800c94e:	b2db      	uxtb	r3, r3
}
 800c950:	4618      	mov	r0, r3
 800c952:	bd80      	pop	{r7, pc}
 800c954:	2000072c 	.word	0x2000072c

0800c958 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08c      	sub	sp, #48	; 0x30
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	607a      	str	r2, [r7, #4]
 800c962:	461a      	mov	r2, r3
 800c964:	460b      	mov	r3, r1
 800c966:	72fb      	strb	r3, [r7, #11]
 800c968:	4613      	mov	r3, r2
 800c96a:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800c96c:	4b55      	ldr	r3, [pc, #340]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d903      	bls.n	800c97c <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800c974:	4b53      	ldr	r3, [pc, #332]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800c976:	785b      	ldrb	r3, [r3, #1]
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d001      	beq.n	800c980 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800c97c:	2321      	movs	r3, #33	; 0x21
 800c97e:	e09d      	b.n	800cabc <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800c980:	f241 0003 	movw	r0, #4099	; 0x1003
 800c984:	f7fd fbfa 	bl	800a17c <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800c988:	4b4e      	ldr	r3, [pc, #312]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800c98a:	2210      	movs	r2, #16
 800c98c:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d101      	bne.n	800c99a <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800c996:	220b      	movs	r2, #11
 800c998:	e000      	b.n	800c99c <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800c99a:	220a      	movs	r2, #10
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800c9a2:	2340      	movs	r3, #64	; 0x40
 800c9a4:	e000      	b.n	800c9a8 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800c9b0:	7afb      	ldrb	r3, [r7, #11]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800c9be:	7abb      	ldrb	r3, [r7, #10]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800c9cc:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800c9d2:	f107 0310 	add.w	r3, r7, #16
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fe34 	bl	800b644 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800c9dc:	f7fe ffc5 	bl	800b96a <rfalTransceiveRunBlockingTx>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800c9e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800c9ea:	f7fe ffdb 	bl	800b9a4 <rfalTransceiveBlockingRx>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800c9f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9f4:	2b1d      	cmp	r3, #29
 800c9f6:	d005      	beq.n	800ca04 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800c9f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9fa:	2b15      	cmp	r3, #21
 800c9fc:	d002      	beq.n	800ca04 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800c9fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca00:	2b09      	cmp	r3, #9
 800ca02:	d112      	bne.n	800ca2a <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	3307      	adds	r3, #7
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	2b0b      	cmp	r3, #11
 800ca10:	d80b      	bhi.n	800ca2a <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	3307      	adds	r3, #7
 800ca18:	08db      	lsrs	r3, r3, #3
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f1c3 030c 	rsb	r3, r3, #12
 800ca20:	089b      	lsrs	r3, r3, #2
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f7 fcbd 	bl	80043a4 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800ca2a:	4b26      	ldr	r3, [pc, #152]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca2c:	789b      	ldrb	r3, [r3, #2]
 800ca2e:	2bea      	cmp	r3, #234	; 0xea
 800ca30:	d90c      	bls.n	800ca4c <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800ca32:	4b24      	ldr	r3, [pc, #144]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca34:	789b      	ldrb	r3, [r3, #2]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca44:	f043 0301 	orr.w	r3, r3, #1
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	e00d      	b.n	800ca68 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800ca4c:	4b1d      	ldr	r3, [pc, #116]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca4e:	789b      	ldrb	r3, [r3, #2]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	3301      	adds	r3, #1
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca62:	f043 0301 	orr.w	r3, r3, #1
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fd fb87 	bl	800a17c <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800ca6e:	4b15      	ldr	r3, [pc, #84]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca70:	78db      	ldrb	r3, [r3, #3]
 800ca72:	2bea      	cmp	r3, #234	; 0xea
 800ca74:	d90c      	bls.n	800ca90 <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800ca76:	4b13      	ldr	r3, [pc, #76]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca78:	78db      	ldrb	r3, [r3, #3]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	011b      	lsls	r3, r3, #4
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca88:	f043 0302 	orr.w	r3, r3, #2
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	e00d      	b.n	800caac <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ca92:	78db      	ldrb	r3, [r3, #3]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	3301      	adds	r3, #1
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	011b      	lsls	r3, r3, #4
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800caa6:	f043 0302 	orr.w	r3, r3, #2
 800caaa:	b29b      	uxth	r3, r3
 800caac:	4618      	mov	r0, r3
 800caae:	f7fd fb65 	bl	800a17c <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800cab2:	4b04      	ldr	r3, [pc, #16]	; (800cac4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    return ret;
 800caba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3730      	adds	r7, #48	; 0x30
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	2000072c 	.word	0x2000072c

0800cac8 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af02      	add	r7, sp, #8
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	460b      	mov	r3, r1
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800cad6:	7afa      	ldrb	r2, [r7, #11]
 800cad8:	f107 0017 	add.w	r0, r7, #23
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	4613      	mov	r3, r2
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	2100      	movs	r1, #0
 800cae6:	f7ff ff37 	bl	800c958 <rfalISO15693TransceiveAnticollisionFrame>
 800caea:	4603      	mov	r3, r0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800caf8:	2240      	movs	r2, #64	; 0x40
 800cafa:	2140      	movs	r1, #64	; 0x40
 800cafc:	2031      	movs	r0, #49	; 0x31
 800cafe:	f000 fe5f 	bl	800d7c0 <st25r3916CheckReg>
 800cb02:	4603      	mov	r3, r0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	80fb      	strh	r3, [r7, #6]
 800cb12:	460b      	mov	r3, r1
 800cb14:	717b      	strb	r3, [r7, #5]
 800cb16:	4613      	mov	r3, r2
 800cb18:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fe6e 	bl	800d800 <st25r3916IsRegValid>
 800cb24:	4603      	mov	r3, r0
 800cb26:	f083 0301 	eor.w	r3, r3, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800cb30:	2307      	movs	r3, #7
 800cb32:	e007      	b.n	800cb44 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800cb34:	88fb      	ldrh	r3, [r7, #6]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	793a      	ldrb	r2, [r7, #4]
 800cb3a:	7979      	ldrb	r1, [r7, #5]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fdbb 	bl	800d6b8 <st25r3916ChangeRegisterBits>
 800cb42:	4603      	mov	r3, r0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	80fb      	strh	r3, [r7, #6]
 800cb56:	460b      	mov	r3, r1
 800cb58:	717b      	strb	r3, [r7, #5]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	793a      	ldrb	r2, [r7, #4]
 800cb64:	7979      	ldrb	r1, [r7, #5]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f000 fdf2 	bl	800d750 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	603b      	str	r3, [r7, #0]
 800cb7e:	4603      	mov	r3, r0
 800cb80:	71fb      	strb	r3, [r7, #7]
 800cb82:	460b      	mov	r3, r1
 800cb84:	71bb      	strb	r3, [r7, #6]
 800cb86:	4613      	mov	r3, r2
 800cb88:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800cb8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cb8e:	f000 ffa1 	bl	800dad4 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800cb92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cb96:	f000 ffd5 	bl	800db44 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 fcc6 	bl	800d52e <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800cba2:	797b      	ldrb	r3, [r7, #5]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	4619      	mov	r1, r3
 800cba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cbac:	f000 ff42 	bl	800da34 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800cbb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cbb4:	f000 ffd2 	bl	800db5c <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d004      	beq.n	800cbc8 <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800cbbe:	79bb      	ldrb	r3, [r7, #6]
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 fbec 	bl	800d3a0 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800cbc8:	2300      	movs	r3, #0

}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800cbda:	20c1      	movs	r0, #193	; 0xc1
 800cbdc:	f000 fca7 	bl	800d52e <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800cbe0:	2104      	movs	r1, #4
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	f000 fc1a 	bl	800d41c <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f000 fa2b 	bl	800d044 <st25r3916CheckChipID>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f083 0301 	eor.w	r3, r3, #1
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800cbfa:	2324      	movs	r3, #36	; 0x24
 800cbfc:	e02d      	b.n	800cc5a <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800cbfe:	f000 fe51 	bl	800d8a4 <st25r3916InitInterrupts>
    st25r3916ledInit();
 800cc02:	f000 ffe9 	bl	800dbd8 <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800cc06:	4b17      	ldr	r3, [pc, #92]	; (800cc64 <st25r3916Initialize+0x90>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800cc0c:	2118      	movs	r1, #24
 800cc0e:	2001      	movs	r0, #1
 800cc10:	f000 fd25 	bl	800d65e <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800cc14:	2210      	movs	r2, #16
 800cc16:	2110      	movs	r1, #16
 800cc18:	2004      	movs	r0, #4
 800cc1a:	f000 fd99 	bl	800d750 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 800cc1e:	f000 f823 	bl	800cc68 <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800cc22:	2000      	movs	r0, #0
 800cc24:	f000 f854 	bl	800ccd0 <st25r3916MeasureVoltage>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800cc2c:	88fb      	ldrh	r3, [r7, #6]
 800cc2e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800cc32:	d201      	bcs.n	800cc38 <st25r3916Initialize+0x64>
 800cc34:	2380      	movs	r3, #128	; 0x80
 800cc36:	e000      	b.n	800cc3a <st25r3916Initialize+0x66>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	2180      	movs	r1, #128	; 0x80
 800cc3e:	2001      	movs	r0, #1
 800cc40:	f000 fd3a 	bl	800d6b8 <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 800cc44:	2148      	movs	r1, #72	; 0x48
 800cc46:	2002      	movs	r0, #2
 800cc48:	f000 fcd2 	bl	800d5f0 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	f000 ff84 	bl	800db5c <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 800cc54:	f000 ff8e 	bl	800db74 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	200009a8 	.word	0x200009a8

0800cc68 <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800cc6c:	2280      	movs	r2, #128	; 0x80
 800cc6e:	2180      	movs	r1, #128	; 0x80
 800cc70:	2002      	movs	r0, #2
 800cc72:	f000 fda5 	bl	800d7c0 <st25r3916CheckReg>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f083 0301 	eor.w	r3, r3, #1
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00c      	beq.n	800cc9c <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 800cc82:	2080      	movs	r0, #128	; 0x80
 800cc84:	f000 ff26 	bl	800dad4 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800cc88:	2080      	movs	r0, #128	; 0x80
 800cc8a:	f000 ff5b 	bl	800db44 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800cc8e:	2180      	movs	r1, #128	; 0x80
 800cc90:	2002      	movs	r0, #2
 800cc92:	f000 fce4 	bl	800d65e <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800cc96:	2080      	movs	r0, #128	; 0x80
 800cc98:	f000 ff60 	bl	800db5c <st25r3916DisableInterrupts>
    }
}
 800cc9c:	bf00      	nop
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	461a      	mov	r2, r3
 800ccae:	2107      	movs	r1, #7
 800ccb0:	202c      	movs	r0, #44	; 0x2c
 800ccb2:	f000 fd01 	bl	800d6b8 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 800ccb6:	f107 030f 	add.w	r3, r7, #15
 800ccba:	2264      	movs	r2, #100	; 0x64
 800ccbc:	2125      	movs	r1, #37	; 0x25
 800ccbe:	20df      	movs	r0, #223	; 0xdf
 800ccc0:	f7ff ff59 	bl	800cb76 <st25r3916ExecuteCommandAndGetResult>

    return result;
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 800ccda:	79fb      	ldrb	r3, [r7, #7]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7ff ffdf 	bl	800cca0 <st25r3916MeasurePowerSupply>
 800cce2:	4603      	mov	r3, r0
 800cce4:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	0052      	lsls	r2, r2, #1
 800ccee:	441a      	add	r2, r3
 800ccf0:	00d2      	lsls	r2, r2, #3
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	3305      	adds	r3, #5
 800ccfc:	4a06      	ldr	r2, [pc, #24]	; (800cd18 <st25r3916MeasureVoltage+0x48>)
 800ccfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cd02:	08db      	lsrs	r3, r3, #3
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	89bb      	ldrh	r3, [r7, #12]
 800cd08:	4413      	add	r3, r2
 800cd0a:	81bb      	strh	r3, [r7, #12]

    return mV;
 800cd0c:	89bb      	ldrh	r3, [r7, #12]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	cccccccd 	.word	0xcccccccd

0800cd1c <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800cd24:	2180      	movs	r1, #128	; 0x80
 800cd26:	202c      	movs	r0, #44	; 0x2c
 800cd28:	f000 fc99 	bl	800d65e <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800cd2c:	2180      	movs	r1, #128	; 0x80
 800cd2e:	202c      	movs	r0, #44	; 0x2c
 800cd30:	f000 fc5e 	bl	800d5f0 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 800cd34:	f107 030f 	add.w	r3, r7, #15
 800cd38:	2206      	movs	r2, #6
 800cd3a:	216c      	movs	r1, #108	; 0x6c
 800cd3c:	20d6      	movs	r0, #214	; 0xd6
 800cd3e:	f7ff ff1a 	bl	800cb76 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	091b      	lsrs	r3, r3, #4
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d02b      	beq.n	800cda8 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 800cd50:	2280      	movs	r2, #128	; 0x80
 800cd52:	2180      	movs	r1, #128	; 0x80
 800cd54:	2001      	movs	r0, #1
 800cd56:	f000 fd33 	bl	800d7c0 <st25r3916CheckReg>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00d      	beq.n	800cd7c <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	d903      	bls.n	800cd6e <st25r3916AdjustRegulators+0x52>
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	3b05      	subs	r3, #5
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	e000      	b.n	800cd70 <st25r3916AdjustRegulators+0x54>
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800cd78:	801a      	strh	r2, [r3, #0]
 800cd7a:	e003      	b.n	800cd84 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800cd82:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	881a      	ldrh	r2, [r3, #0]
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	0089      	lsls	r1, r1, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	4619      	mov	r1, r3
 800cd94:	0088      	lsls	r0, r1, #2
 800cd96:	4619      	mov	r1, r3
 800cd98:	4603      	mov	r3, r0
 800cd9a:	440b      	add	r3, r1
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	4413      	add	r3, r2
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <st25r3916SetBitrate>:
}


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	4603      	mov	r3, r0
 800cdba:	460a      	mov	r2, r1
 800cdbc:	71fb      	strb	r3, [r7, #7]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 800cdc2:	f107 030f 	add.w	r3, r7, #15
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	2004      	movs	r0, #4
 800cdca:	f000 fae9 	bl	800d3a0 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 800cdce:	79bb      	ldrb	r3, [r7, #6]
 800cdd0:	2bff      	cmp	r3, #255	; 0xff
 800cdd2:	d00e      	beq.n	800cdf2 <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 800cdd4:	79bb      	ldrb	r3, [r7, #6]
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d901      	bls.n	800cdde <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 800cdda:	2307      	movs	r3, #7
 800cddc:	e025      	b.n	800ce2a <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	f023 030f 	bic.w	r3, r3, #15
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800cde8:	7bfa      	ldrb	r2, [r7, #15]
 800cdea:	79bb      	ldrb	r3, [r7, #6]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	2bff      	cmp	r3, #255	; 0xff
 800cdf6:	d012      	beq.n	800ce1e <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b07      	cmp	r3, #7
 800cdfc:	d901      	bls.n	800ce02 <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 800cdfe:	2307      	movs	r3, #7
 800ce00:	e013      	b.n	800ce2a <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	f003 030f 	and.w	r3, r3, #15
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	b25a      	sxtb	r2, r3
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
 800ce14:	b25b      	sxtb	r3, r3
 800ce16:	4313      	orrs	r3, r2
 800ce18:	b25b      	sxtb	r3, r3
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	4619      	mov	r1, r3
 800ce22:	2004      	movs	r0, #4
 800ce24:	f000 fafa 	bl	800d41c <st25r3916WriteRegister>
 800ce28:	4603      	mov	r3, r0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	461a      	mov	r2, r3
 800ce42:	4623      	mov	r3, r4
 800ce44:	71fb      	strb	r3, [r7, #7]
 800ce46:	4603      	mov	r3, r0
 800ce48:	71bb      	strb	r3, [r7, #6]
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	717b      	strb	r3, [r7, #5]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	2bc8      	cmp	r3, #200	; 0xc8
 800ce56:	d004      	beq.n	800ce62 <st25r3916PerformCollisionAvoidance+0x2e>
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	2bc9      	cmp	r3, #201	; 0xc9
 800ce5c:	d001      	beq.n	800ce62 <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 800ce5e:	2307      	movs	r3, #7
 800ce60:	e05d      	b.n	800cf1e <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 800ce62:	230c      	movs	r3, #12
 800ce64:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800ce66:	79bb      	ldrb	r3, [r7, #6]
 800ce68:	2bff      	cmp	r3, #255	; 0xff
 800ce6a:	d102      	bne.n	800ce72 <st25r3916PerformCollisionAvoidance+0x3e>
 800ce6c:	797b      	ldrb	r3, [r7, #5]
 800ce6e:	2bff      	cmp	r3, #255	; 0xff
 800ce70:	d01e      	beq.n	800ceb0 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800ce76:	79bb      	ldrb	r3, [r7, #6]
 800ce78:	2bff      	cmp	r3, #255	; 0xff
 800ce7a:	d003      	beq.n	800ce84 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800ce82:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800ce84:	797b      	ldrb	r3, [r7, #5]
 800ce86:	2bff      	cmp	r3, #255	; 0xff
 800ce88:	d003      	beq.n	800ce92 <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	f043 030f 	orr.w	r3, r3, #15
 800ce90:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 800ce92:	79bb      	ldrb	r3, [r7, #6]
 800ce94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	797b      	ldrb	r3, [r7, #5]
 800ce9c:	f003 030f 	and.w	r3, r3, #15
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	4313      	orrs	r3, r2
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	202a      	movs	r0, #42	; 0x2a
 800ceac:	f000 fc04 	bl	800d6b8 <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 800ceb0:	793b      	ldrb	r3, [r7, #4]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	2103      	movs	r1, #3
 800ceb6:	200a      	movs	r0, #10
 800ceb8:	f000 fbfe 	bl	800d6b8 <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800cebc:	481a      	ldr	r0, [pc, #104]	; (800cf28 <st25r3916PerformCollisionAvoidance+0xf4>)
 800cebe:	f000 fe09 	bl	800dad4 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800cec2:	4819      	ldr	r0, [pc, #100]	; (800cf28 <st25r3916PerformCollisionAvoidance+0xf4>)
 800cec4:	f000 fe3e 	bl	800db44 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fb2f 	bl	800d52e <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 800ced0:	210a      	movs	r1, #10
 800ced2:	4816      	ldr	r0, [pc, #88]	; (800cf2c <st25r3916PerformCollisionAvoidance+0xf8>)
 800ced4:	f000 fdae 	bl	800da34 <st25r3916WaitForInterruptsTimed>
 800ced8:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 800cee4:	231d      	movs	r3, #29
 800cee6:	81bb      	strh	r3, [r7, #12]
 800cee8:	e011      	b.n	800cf0e <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00c      	beq.n	800cf0e <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 800cef4:	210a      	movs	r1, #10
 800cef6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cefa:	f000 fd9b 	bl	800da34 <st25r3916WaitForInterruptsTimed>
 800cefe:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 800cf0e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800cf12:	f000 fddf 	bl	800dad4 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800cf16:	4804      	ldr	r0, [pc, #16]	; (800cf28 <st25r3916PerformCollisionAvoidance+0xf4>)
 800cf18:	f000 fe20 	bl	800db5c <st25r3916DisableInterrupts>
    
    return err;
 800cf1c:	89bb      	ldrh	r3, [r7, #12]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd90      	pop	{r4, r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20000600 	.word	0x20000600
 800cf2c:	20000400 	.word	0x20000400

0800cf30 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 800cf3a:	88fb      	ldrh	r3, [r7, #6]
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	4619      	mov	r1, r3
 800cf40:	2023      	movs	r0, #35	; 0x23
 800cf42:	f000 fa6b 	bl	800d41c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 800cf46:	88fb      	ldrh	r3, [r7, #6]
 800cf48:	0a1b      	lsrs	r3, r3, #8
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	4619      	mov	r1, r3
 800cf50:	2022      	movs	r0, #34	; 0x22
 800cf52:	f000 fa63 	bl	800d41c <st25r3916WriteRegister>
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
	...

0800cf60 <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 800cf70:	4a19      	ldr	r2, [pc, #100]	; (800cfd8 <st25r3916SetNoResponseTime+0x78>)
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 800cf76:	2300      	movs	r3, #0
 800cf78:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf80:	d312      	bcc.n	800cfa8 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800cf82:	2301      	movs	r3, #1
 800cf84:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	333f      	adds	r3, #63	; 0x3f
 800cf8a:	099b      	lsrs	r3, r3, #6
 800cf8c:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf94:	d304      	bcc.n	800cfa0 <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 800cf96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf9a:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 800cf9c:	2307      	movs	r3, #7
 800cf9e:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	019b      	lsls	r3, r3, #6
 800cfa4:	4a0c      	ldr	r2, [pc, #48]	; (800cfd8 <st25r3916SetNoResponseTime+0x78>)
 800cfa6:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 800cfa8:	7b7b      	ldrb	r3, [r7, #13]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	2101      	movs	r1, #1
 800cfae:	2012      	movs	r0, #18
 800cfb0:	f000 fb82 	bl	800d6b8 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	0a1b      	lsrs	r3, r3, #8
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	4619      	mov	r1, r3
 800cfbc:	2010      	movs	r0, #16
 800cfbe:	f000 fa2d 	bl	800d41c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	2011      	movs	r0, #17
 800cfca:	f000 fa27 	bl	800d41c <st25r3916WriteRegister>

    return err;
 800cfce:	89fb      	ldrh	r3, [r7, #14]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	200009a8 	.word	0x200009a8

0800cfdc <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 800cfe6:	88fb      	ldrh	r3, [r7, #6]
 800cfe8:	0a1b      	lsrs	r3, r3, #8
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	4619      	mov	r1, r3
 800cff0:	2013      	movs	r0, #19
 800cff2:	f000 fa13 	bl	800d41c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 800cff6:	88fb      	ldrh	r3, [r7, #6]
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	4619      	mov	r1, r3
 800cffc:	2014      	movs	r0, #20
 800cffe:	f000 fa0d 	bl	800d41c <st25r3916WriteRegister>
}
 800d002:	bf00      	nop
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
 800d010:	4603      	mov	r3, r0
 800d012:	460a      	mov	r2, r1
 800d014:	80fb      	strh	r3, [r7, #6]
 800d016:	4613      	mov	r3, r2
 800d018:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 800d01a:	88fb      	ldrh	r3, [r7, #6]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7ff ffdd 	bl	800cfdc <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 800d022:	797b      	ldrb	r3, [r7, #5]
 800d024:	461a      	mov	r2, r3
 800d026:	21e0      	movs	r1, #224	; 0xe0
 800d028:	2012      	movs	r0, #18
 800d02a:	f000 fb45 	bl	800d6b8 <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 800d02e:	797b      	ldrb	r3, [r7, #5]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d102      	bne.n	800d03a <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 800d034:	20e0      	movs	r0, #224	; 0xe0
 800d036:	f000 fa7a 	bl	800d52e <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 800d050:	f107 030f 	add.w	r3, r7, #15
 800d054:	4619      	mov	r1, r3
 800d056:	203f      	movs	r0, #63	; 0x3f
 800d058:	f000 f9a2 	bl	800d3a0 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800d062:	2b28      	cmp	r3, #40	; 0x28
 800d064:	d001      	beq.n	800d06a <st25r3916CheckChipID+0x26>
    {
        return false;
 800d066:	2300      	movs	r3, #0
 800d068:	e009      	b.n	800d07e <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d005      	beq.n	800d07c <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	b2da      	uxtb	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 800d07c:	2301      	movs	r3, #1
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d016      	beq.n	800d0c8 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 800d09a:	2378      	movs	r3, #120	; 0x78
 800d09c:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d903      	bls.n	800d0ae <st25r3916StreamConfigure+0x28>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	785b      	ldrb	r3, [r3, #1]
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d901      	bls.n	800d0b2 <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 800d0ae:	2307      	movs	r3, #7
 800d0b0:	e053      	b.n	800d15a <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	785b      	ldrb	r3, [r3, #1]
 800d0b6:	f1c3 0304 	rsb	r3, r3, #4
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	015b      	lsls	r3, r3, #5
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	73fb      	strb	r3, [r7, #15]
 800d0c6:	e01b      	b.n	800d100 <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 800d0c8:	2370      	movs	r3, #112	; 0x70
 800d0ca:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d903      	bls.n	800d0dc <st25r3916StreamConfigure+0x56>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	785b      	ldrb	r3, [r3, #1]
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	d901      	bls.n	800d0e0 <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 800d0dc:	2307      	movs	r3, #7
 800d0de:	e03c      	b.n	800d15a <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	785b      	ldrb	r3, [r3, #1]
 800d0e4:	f1c3 0306 	rsb	r3, r3, #6
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	015b      	lsls	r3, r3, #5
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	78db      	ldrb	r3, [r3, #3]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 800d0fc:	2307      	movs	r3, #7
 800d0fe:	e02c      	b.n	800d15a <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	789b      	ldrb	r3, [r3, #2]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <st25r3916StreamConfigure+0x8a>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	789b      	ldrb	r3, [r3, #2]
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	d901      	bls.n	800d114 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 800d110:	2307      	movs	r3, #7
 800d112:	e022      	b.n	800d15a <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	789b      	ldrb	r3, [r3, #2]
 800d118:	f1c3 0307 	rsb	r3, r3, #7
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	4313      	orrs	r3, r2
 800d122:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	78db      	ldrb	r3, [r3, #3]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d901      	bls.n	800d130 <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 800d12c:	2307      	movs	r3, #7
 800d12e:	e014      	b.n	800d15a <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	78db      	ldrb	r3, [r3, #3]
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	b25a      	sxtb	r2, r3
 800d138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	4619      	mov	r1, r3
 800d146:	2009      	movs	r0, #9
 800d148:	f000 f968 	bl	800d41c <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
 800d14e:	461a      	mov	r2, r3
 800d150:	2178      	movs	r1, #120	; 0x78
 800d152:	2003      	movs	r0, #3
 800d154:	f000 fab0 	bl	800d6b8 <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
	...

0800d164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d16e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d172:	2b00      	cmp	r3, #0
 800d174:	db0b      	blt.n	800d18e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	f003 021f 	and.w	r2, r3, #31
 800d17c:	4907      	ldr	r1, [pc, #28]	; (800d19c <__NVIC_EnableIRQ+0x38>)
 800d17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d182:	095b      	lsrs	r3, r3, #5
 800d184:	2001      	movs	r0, #1
 800d186:	fa00 f202 	lsl.w	r2, r0, r2
 800d18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	e000e100 	.word	0xe000e100

0800d1a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	db10      	blt.n	800d1d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	f003 021f 	and.w	r2, r3, #31
 800d1b8:	4909      	ldr	r1, [pc, #36]	; (800d1e0 <__NVIC_DisableIRQ+0x40>)
 800d1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1be:	095b      	lsrs	r3, r3, #5
 800d1c0:	2001      	movs	r0, #1
 800d1c2:	fa00 f202 	lsl.w	r2, r0, r2
 800d1c6:	3320      	adds	r3, #32
 800d1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d1cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d1d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	e000e100 	.word	0xe000e100

0800d1e4 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <st25r3916comStart+0x34>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	4b09      	ldr	r3, [pc, #36]	; (800d218 <st25r3916comStart+0x34>)
 800d1f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	200a      	movs	r0, #10
 800d1fa:	f7ff ffd1 	bl	800d1a0 <__NVIC_DisableIRQ>
 800d1fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d202:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 800d206:	2110      	movs	r1, #16
 800d208:	4804      	ldr	r0, [pc, #16]	; (800d21c <st25r3916comStart+0x38>)
 800d20a:	f7f6 fb51 	bl	80038b0 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 800d20e:	4b04      	ldr	r3, [pc, #16]	; (800d220 <st25r3916comStart+0x3c>)
 800d210:	2200      	movs	r2, #0
 800d212:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 800d214:	bf00      	nop
 800d216:	bd80      	pop	{r7, pc}
 800d218:	20000d0c 	.word	0x20000d0c
 800d21c:	40020000 	.word	0x40020000
 800d220:	20000bae 	.word	0x20000bae

0800d224 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 800d228:	2110      	movs	r1, #16
 800d22a:	4809      	ldr	r0, [pc, #36]	; (800d250 <st25r3916comStop+0x2c>)
 800d22c:	f7f6 fb50 	bl	80038d0 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 800d230:	4b08      	ldr	r3, [pc, #32]	; (800d254 <st25r3916comStop+0x30>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	b2da      	uxtb	r2, r3
 800d238:	4b06      	ldr	r3, [pc, #24]	; (800d254 <st25r3916comStop+0x30>)
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	4b05      	ldr	r3, [pc, #20]	; (800d254 <st25r3916comStop+0x30>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d102      	bne.n	800d24a <st25r3916comStop+0x26>
 800d244:	200a      	movs	r0, #10
 800d246:	f7ff ff8d 	bl	800d164 <__NVIC_EnableIRQ>
}
 800d24a:	bf00      	nop
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	40020000 	.word	0x40020000
 800d254:	20000d0c 	.word	0x20000d0c

0800d258 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	4608      	mov	r0, r1
 800d262:	4611      	mov	r1, r2
 800d264:	461a      	mov	r2, r3
 800d266:	4603      	mov	r3, r0
 800d268:	807b      	strh	r3, [r7, #2]
 800d26a:	460b      	mov	r3, r1
 800d26c:	707b      	strb	r3, [r7, #1]
 800d26e:	4613      	mov	r3, r2
 800d270:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 800d272:	887b      	ldrh	r3, [r7, #2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d02e      	beq.n	800d2d6 <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 800d278:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <st25r3916comTx+0x88>)
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	461a      	mov	r2, r3
 800d27e:	4b19      	ldr	r3, [pc, #100]	; (800d2e4 <st25r3916comTx+0x8c>)
 800d280:	18d0      	adds	r0, r2, r3
 800d282:	4b17      	ldr	r3, [pc, #92]	; (800d2e0 <st25r3916comTx+0x88>)
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d28a:	3301      	adds	r3, #1
 800d28c:	887a      	ldrh	r2, [r7, #2]
 800d28e:	4293      	cmp	r3, r2
 800d290:	bf28      	it	cs
 800d292:	4613      	movcs	r3, r2
 800d294:	461a      	mov	r2, r3
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	f002 fd49 	bl	800fd2e <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 800d29c:	4b10      	ldr	r3, [pc, #64]	; (800d2e0 <st25r3916comTx+0x88>)
 800d29e:	881b      	ldrh	r3, [r3, #0]
 800d2a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	887a      	ldrh	r2, [r7, #2]
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	bf28      	it	cs
 800d2ac:	4613      	movcs	r3, r2
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <st25r3916comTx+0x88>)
 800d2b2:	881b      	ldrh	r3, [r3, #0]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	4b09      	ldr	r3, [pc, #36]	; (800d2e0 <st25r3916comTx+0x88>)
 800d2ba:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 800d2bc:	787b      	ldrb	r3, [r7, #1]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d009      	beq.n	800d2d6 <st25r3916comTx+0x7e>
 800d2c2:	783b      	ldrb	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 800d2c8:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <st25r3916comTx+0x88>)
 800d2ca:	881b      	ldrh	r3, [r3, #0]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4804      	ldr	r0, [pc, #16]	; (800d2e4 <st25r3916comTx+0x8c>)
 800d2d2:	f7f6 fb0d 	bl	80038f0 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800d2d6:	bf00      	nop
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	20000bae 	.word	0x20000bae
 800d2e4:	200009ac 	.word	0x200009ac

0800d2e8 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 800d2f4:	887b      	ldrh	r3, [r7, #2]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d034      	beq.n	800d364 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 800d2fa:	4b1c      	ldr	r3, [pc, #112]	; (800d36c <st25r3916comRx+0x84>)
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <st25r3916comRx+0x88>)
 800d302:	18d0      	adds	r0, r2, r3
 800d304:	4b19      	ldr	r3, [pc, #100]	; (800d36c <st25r3916comRx+0x84>)
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d30c:	3301      	adds	r3, #1
 800d30e:	887a      	ldrh	r2, [r7, #2]
 800d310:	4293      	cmp	r3, r2
 800d312:	bf28      	it	cs
 800d314:	4613      	movcs	r3, r2
 800d316:	461a      	mov	r2, r3
 800d318:	2100      	movs	r1, #0
 800d31a:	f002 fd13 	bl	800fd44 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <st25r3916comRx+0x84>)
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	461a      	mov	r2, r3
 800d324:	887b      	ldrh	r3, [r7, #2]
 800d326:	4413      	add	r3, r2
 800d328:	461a      	mov	r2, r3
 800d32a:	f240 2301 	movw	r3, #513	; 0x201
 800d32e:	4293      	cmp	r3, r2
 800d330:	bf28      	it	cs
 800d332:	4613      	movcs	r3, r2
 800d334:	b29b      	uxth	r3, r3
 800d336:	461a      	mov	r2, r3
 800d338:	490d      	ldr	r1, [pc, #52]	; (800d370 <st25r3916comRx+0x88>)
 800d33a:	480d      	ldr	r0, [pc, #52]	; (800d370 <st25r3916comRx+0x88>)
 800d33c:	f7f6 fad8 	bl	80038f0 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 800d340:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <st25r3916comRx+0x84>)
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <st25r3916comRx+0x88>)
 800d348:	18d1      	adds	r1, r2, r3
 800d34a:	4b08      	ldr	r3, [pc, #32]	; (800d36c <st25r3916comRx+0x84>)
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d352:	3301      	adds	r3, #1
 800d354:	887a      	ldrh	r2, [r7, #2]
 800d356:	4293      	cmp	r3, r2
 800d358:	bf28      	it	cs
 800d35a:	4613      	movcs	r3, r2
 800d35c:	461a      	mov	r2, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f002 fce5 	bl	800fd2e <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	20000bae 	.word	0x20000bae
 800d370:	200009ac 	.word	0x200009ac

0800d374 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	4603      	mov	r3, r0
 800d37c:	71fb      	strb	r3, [r7, #7]
 800d37e:	460b      	mov	r3, r1
 800d380:	71bb      	strb	r3, [r7, #6]
 800d382:	4613      	mov	r3, r2
 800d384:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 800d38a:	797b      	ldrb	r3, [r7, #5]
 800d38c:	79ba      	ldrb	r2, [r7, #6]
 800d38e:	f107 000f 	add.w	r0, r7, #15
 800d392:	2101      	movs	r1, #1
 800d394:	f7ff ff60 	bl	800d258 <st25r3916comTx>
}
 800d398:	bf00      	nop
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	6039      	str	r1, [r7, #0]
 800d3aa:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f805 	bl	800d3c2 <st25r3916ReadMultipleRegisters>
 800d3b8:	4603      	mov	r3, r0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	6039      	str	r1, [r7, #0]
 800d3cc:	71fb      	strb	r3, [r7, #7]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800d3d2:	79bb      	ldrb	r3, [r7, #6]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01c      	beq.n	800d412 <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 800d3d8:	f7ff ff04 	bl	800d1e4 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	20fb      	movs	r0, #251	; 0xfb
 800d3ec:	f7ff ffc2 	bl	800d374 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff ffb9 	bl	800d374 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 800d402:	79bb      	ldrb	r3, [r7, #6]
 800d404:	b29b      	uxth	r3, r3
 800d406:	4619      	mov	r1, r3
 800d408:	6838      	ldr	r0, [r7, #0]
 800d40a:	f7ff ff6d 	bl	800d2e8 <st25r3916comRx>
        st25r3916comStop();
 800d40e:	f7ff ff09 	bl	800d224 <st25r3916comStop>
    }
    
    return ERR_NONE;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	4603      	mov	r3, r0
 800d424:	460a      	mov	r2, r1
 800d426:	71fb      	strb	r3, [r7, #7]
 800d428:	4613      	mov	r3, r2
 800d42a:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800d42c:	79bb      	ldrb	r3, [r7, #6]
 800d42e:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 800d430:	f107 010f 	add.w	r1, r7, #15
 800d434:	79fb      	ldrb	r3, [r7, #7]
 800d436:	2201      	movs	r2, #1
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 f805 	bl	800d448 <st25r3916WriteMultipleRegisters>
 800d43e:	4603      	mov	r3, r0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	4603      	mov	r3, r0
 800d450:	6039      	str	r1, [r7, #0]
 800d452:	71fb      	strb	r3, [r7, #7]
 800d454:	4613      	mov	r3, r2
 800d456:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800d458:	79bb      	ldrb	r3, [r7, #6]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d023      	beq.n	800d4a6 <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 800d45e:	f7ff fec1 	bl	800d1e4 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 800d46c:	2201      	movs	r2, #1
 800d46e:	2100      	movs	r1, #0
 800d470:	20fb      	movs	r0, #251	; 0xfb
 800d472:	f7ff ff7f 	bl	800d374 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2201      	movs	r2, #1
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff ff76 	bl	800d374 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800d488:	79bb      	ldrb	r3, [r7, #6]
 800d48a:	b299      	uxth	r1, r3
 800d48c:	2301      	movs	r3, #1
 800d48e:	2201      	movs	r2, #1
 800d490:	6838      	ldr	r0, [r7, #0]
 800d492:	f7ff fee1 	bl	800d258 <st25r3916comTx>
        st25r3916comStop();
 800d496:	f7ff fec5 	bl	800d224 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 800d49a:	79ba      	ldrb	r2, [r7, #6]
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fbba 	bl	800dc1a <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 800d4bc:	887b      	ldrh	r3, [r7, #2]
 800d4be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4c2:	d901      	bls.n	800d4c8 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 800d4c4:	2307      	movs	r3, #7
 800d4c6:	e012      	b.n	800d4ee <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 800d4c8:	887b      	ldrh	r3, [r7, #2]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00e      	beq.n	800d4ec <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 800d4ce:	f7ff fe89 	bl	800d1e4 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	2080      	movs	r0, #128	; 0x80
 800d4d8:	f7ff ff4c 	bl	800d374 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800d4dc:	8879      	ldrh	r1, [r7, #2]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff feb8 	bl	800d258 <st25r3916comTx>
        st25r3916comStop();
 800d4e8:	f7ff fe9c 	bl	800d224 <st25r3916comStop>
    }

    return ERR_NONE;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00d      	beq.n	800d524 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 800d508:	f7ff fe6c 	bl	800d1e4 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 800d50c:	2200      	movs	r2, #0
 800d50e:	2101      	movs	r1, #1
 800d510:	209f      	movs	r0, #159	; 0x9f
 800d512:	f7ff ff2f 	bl	800d374 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 800d516:	887b      	ldrh	r3, [r7, #2]
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff fee4 	bl	800d2e8 <st25r3916comRx>
        st25r3916comStop();
 800d520:	f7ff fe80 	bl	800d224 <st25r3916comStop>
    }

    return ERR_NONE;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b082      	sub	sp, #8
 800d532:	af00      	add	r7, sp, #0
 800d534:	4603      	mov	r3, r0
 800d536:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 800d538:	f7ff fe54 	bl	800d1e4 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2201      	movs	r2, #1
 800d546:	2101      	movs	r1, #1
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff ff13 	bl	800d374 <st25r3916comTxByte>
    st25r3916comStop();
 800d54e:	f7ff fe69 	bl	800d224 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fb81 	bl	800dc5c <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	6039      	str	r1, [r7, #0]
 800d56e:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 800d570:	f7ff fe38 	bl	800d1e4 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 800d574:	2200      	movs	r2, #0
 800d576:	2100      	movs	r1, #0
 800d578:	20fc      	movs	r0, #252	; 0xfc
 800d57a:	f7ff fefb 	bl	800d374 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2200      	movs	r2, #0
 800d588:	2101      	movs	r1, #1
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fef2 	bl	800d374 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 800d590:	2101      	movs	r1, #1
 800d592:	6838      	ldr	r0, [r7, #0]
 800d594:	f7ff fea8 	bl	800d2e8 <st25r3916comRx>
    st25r3916comStop();
 800d598:	f7ff fe44 	bl	800d224 <st25r3916comStop>
    
    return ERR_NONE;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	460a      	mov	r2, r1
 800d5b0:	71fb      	strb	r3, [r7, #7]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800d5b6:	79bb      	ldrb	r3, [r7, #6]
 800d5b8:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 800d5ba:	f7ff fe13 	bl	800d1e4 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 800d5be:	2201      	movs	r2, #1
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	20fc      	movs	r0, #252	; 0xfc
 800d5c4:	f7ff fed6 	bl	800d374 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fed0 	bl	800d374 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 800d5d4:	f107 000f 	add.w	r0, r7, #15
 800d5d8:	2301      	movs	r3, #1
 800d5da:	2201      	movs	r2, #1
 800d5dc:	2101      	movs	r1, #1
 800d5de:	f7ff fe3b 	bl	800d258 <st25r3916comTx>
    st25r3916comStop();
 800d5e2:	f7ff fe1f 	bl	800d224 <st25r3916comStop>
    
    return ERR_NONE;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	460a      	mov	r2, r1
 800d5fa:	71fb      	strb	r3, [r7, #7]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800d600:	f107 020d 	add.w	r2, r7, #13
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fec9 	bl	800d3a0 <st25r3916ReadRegister>
 800d60e:	4603      	mov	r3, r0
 800d610:	81fb      	strh	r3, [r7, #14]
 800d612:	89fb      	ldrh	r3, [r7, #14]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <st25r3916ClrRegisterBits+0x2c>
 800d618:	89fb      	ldrh	r3, [r7, #14]
 800d61a:	e01c      	b.n	800d656 <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 800d61c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d620:	43db      	mvns	r3, r3
 800d622:	b25a      	sxtb	r2, r3
 800d624:	7b7b      	ldrb	r3, [r7, #13]
 800d626:	b25b      	sxtb	r3, r3
 800d628:	4013      	ands	r3, r2
 800d62a:	b25b      	sxtb	r3, r3
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	7b7b      	ldrb	r3, [r7, #13]
 800d630:	429a      	cmp	r2, r3
 800d632:	d101      	bne.n	800d638 <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 800d634:	2300      	movs	r3, #0
 800d636:	e00e      	b.n	800d656 <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 800d638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d63c:	43db      	mvns	r3, r3
 800d63e:	b25a      	sxtb	r2, r3
 800d640:	7b7b      	ldrb	r3, [r7, #13]
 800d642:	b25b      	sxtb	r3, r3
 800d644:	4013      	ands	r3, r2
 800d646:	b25b      	sxtb	r3, r3
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fee4 	bl	800d41c <st25r3916WriteRegister>
 800d654:	4603      	mov	r3, r0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	4603      	mov	r3, r0
 800d666:	460a      	mov	r2, r1
 800d668:	71fb      	strb	r3, [r7, #7]
 800d66a:	4613      	mov	r3, r2
 800d66c:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800d66e:	f107 020d 	add.w	r2, r7, #13
 800d672:	79fb      	ldrb	r3, [r7, #7]
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff fe92 	bl	800d3a0 <st25r3916ReadRegister>
 800d67c:	4603      	mov	r3, r0
 800d67e:	81fb      	strh	r3, [r7, #14]
 800d680:	89fb      	ldrh	r3, [r7, #14]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <st25r3916SetRegisterBits+0x2c>
 800d686:	89fb      	ldrh	r3, [r7, #14]
 800d688:	e012      	b.n	800d6b0 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 800d68a:	7b7a      	ldrb	r2, [r7, #13]
 800d68c:	79bb      	ldrb	r3, [r7, #6]
 800d68e:	4313      	orrs	r3, r2
 800d690:	b2da      	uxtb	r2, r3
 800d692:	7b7b      	ldrb	r3, [r7, #13]
 800d694:	429a      	cmp	r2, r3
 800d696:	d101      	bne.n	800d69c <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 800d698:	2300      	movs	r3, #0
 800d69a:	e009      	b.n	800d6b0 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 800d69c:	7b7a      	ldrb	r2, [r7, #13]
 800d69e:	79bb      	ldrb	r3, [r7, #6]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff feb7 	bl	800d41c <st25r3916WriteRegister>
 800d6ae:	4603      	mov	r3, r0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	71fb      	strb	r3, [r7, #7]
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	71bb      	strb	r3, [r7, #6]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 800d6ca:	79ba      	ldrb	r2, [r7, #6]
 800d6cc:	797b      	ldrb	r3, [r7, #5]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	79b9      	ldrb	r1, [r7, #6]
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f805 	bl	800d6e6 <st25r3916ModifyRegister>
 800d6dc:	4603      	mov	r3, r0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	71fb      	strb	r3, [r7, #7]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	71bb      	strb	r3, [r7, #6]
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800d6f8:	f107 020c 	add.w	r2, r7, #12
 800d6fc:	79fb      	ldrb	r3, [r7, #7]
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff fe4d 	bl	800d3a0 <st25r3916ReadRegister>
 800d706:	4603      	mov	r3, r0
 800d708:	81fb      	strh	r3, [r7, #14]
 800d70a:	89fb      	ldrh	r3, [r7, #14]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <st25r3916ModifyRegister+0x2e>
 800d710:	89fb      	ldrh	r3, [r7, #14]
 800d712:	e019      	b.n	800d748 <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 800d714:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d718:	43db      	mvns	r3, r3
 800d71a:	b25a      	sxtb	r2, r3
 800d71c:	7b3b      	ldrb	r3, [r7, #12]
 800d71e:	b25b      	sxtb	r3, r3
 800d720:	4013      	ands	r3, r2
 800d722:	b25b      	sxtb	r3, r3
 800d724:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 800d726:	7b7a      	ldrb	r2, [r7, #13]
 800d728:	797b      	ldrb	r3, [r7, #5]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 800d72e:	7b3b      	ldrb	r3, [r7, #12]
 800d730:	7b7a      	ldrb	r2, [r7, #13]
 800d732:	429a      	cmp	r2, r3
 800d734:	d101      	bne.n	800d73a <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 800d736:	2300      	movs	r3, #0
 800d738:	e006      	b.n	800d748 <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 800d73a:	7b7a      	ldrb	r2, [r7, #13]
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	4611      	mov	r1, r2
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff fe6b 	bl	800d41c <st25r3916WriteRegister>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	71fb      	strb	r3, [r7, #7]
 800d75a:	460b      	mov	r3, r1
 800d75c:	71bb      	strb	r3, [r7, #6]
 800d75e:	4613      	mov	r3, r2
 800d760:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 800d762:	f107 020c 	add.w	r2, r7, #12
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff fefa 	bl	800d564 <st25r3916ReadTestRegister>
 800d770:	4603      	mov	r3, r0
 800d772:	81fb      	strh	r3, [r7, #14]
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <st25r3916ChangeTestRegisterBits+0x2e>
 800d77a:	89fb      	ldrh	r3, [r7, #14]
 800d77c:	e01c      	b.n	800d7b8 <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 800d77e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d782:	43db      	mvns	r3, r3
 800d784:	b25a      	sxtb	r2, r3
 800d786:	7b3b      	ldrb	r3, [r7, #12]
 800d788:	b25b      	sxtb	r3, r3
 800d78a:	4013      	ands	r3, r2
 800d78c:	b25b      	sxtb	r3, r3
 800d78e:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 800d790:	797a      	ldrb	r2, [r7, #5]
 800d792:	79bb      	ldrb	r3, [r7, #6]
 800d794:	4013      	ands	r3, r2
 800d796:	b2da      	uxtb	r2, r3
 800d798:	7b7b      	ldrb	r3, [r7, #13]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 800d79e:	7b3b      	ldrb	r3, [r7, #12]
 800d7a0:	7b7a      	ldrb	r2, [r7, #13]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d101      	bne.n	800d7aa <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e006      	b.n	800d7b8 <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 800d7aa:	7b7a      	ldrb	r2, [r7, #13]
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff fef8 	bl	800d5a6 <st25r3916WriteTestRegister>
 800d7b6:	4603      	mov	r3, r0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	71bb      	strb	r3, [r7, #6]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 800d7d6:	f107 020f 	add.w	r2, r7, #15
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fdde 	bl	800d3a0 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 800d7e4:	7bfa      	ldrb	r2, [r7, #15]
 800d7e6:	79bb      	ldrb	r3, [r7, #6]
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	797a      	ldrb	r2, [r7, #5]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	bf0c      	ite	eq
 800d7f2:	2301      	moveq	r3, #1
 800d7f4:	2300      	movne	r3, #0
 800d7f6:	b2db      	uxtb	r3, r3
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 800d80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	da01      	bge.n	800d816 <st25r3916IsRegValid+0x16>
    {
        return false;
 800d812:	2300      	movs	r3, #0
 800d814:	e000      	b.n	800d818 <st25r3916IsRegValid+0x18>
    }    
    return true;
 800d816:	2301      	movs	r3, #1
}
 800d818:	4618      	mov	r0, r3
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <__NVIC_EnableIRQ>:
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d832:	2b00      	cmp	r3, #0
 800d834:	db0b      	blt.n	800d84e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	f003 021f 	and.w	r2, r3, #31
 800d83c:	4907      	ldr	r1, [pc, #28]	; (800d85c <__NVIC_EnableIRQ+0x38>)
 800d83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d842:	095b      	lsrs	r3, r3, #5
 800d844:	2001      	movs	r0, #1
 800d846:	fa00 f202 	lsl.w	r2, r0, r2
 800d84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d84e:	bf00      	nop
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	e000e100 	.word	0xe000e100

0800d860 <__NVIC_DisableIRQ>:
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	db10      	blt.n	800d894 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	f003 021f 	and.w	r2, r3, #31
 800d878:	4909      	ldr	r1, [pc, #36]	; (800d8a0 <__NVIC_DisableIRQ+0x40>)
 800d87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87e:	095b      	lsrs	r3, r3, #5
 800d880:	2001      	movs	r0, #1
 800d882:	fa00 f202 	lsl.w	r2, r0, r2
 800d886:	3320      	adds	r3, #32
 800d888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d88c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d890:	f3bf 8f6f 	isb	sy
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	e000e100 	.word	0xe000e100

0800d8a4 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 800d8a8:	4b08      	ldr	r3, [pc, #32]	; (800d8cc <st25r3916InitInterrupts+0x28>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 800d8ae:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <st25r3916InitInterrupts+0x28>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <st25r3916InitInterrupts+0x28>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 800d8ba:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <st25r3916InitInterrupts+0x28>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	60da      	str	r2, [r3, #12]
}
 800d8c0:	bf00      	nop
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	20000bb0 	.word	0x20000bb0

0800d8d0 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 800d8d4:	f000 f80c 	bl	800d8f0 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 800d8d8:	4b04      	ldr	r3, [pc, #16]	; (800d8ec <st25r3916Isr+0x1c>)
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 800d8e0:	4b02      	ldr	r3, [pc, #8]	; (800d8ec <st25r3916Isr+0x1c>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	4798      	blx	r3
    }
}
 800d8e6:	bf00      	nop
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20000bb0 	.word	0x20000bb0

0800d8f0 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 800d8fa:	463b      	mov	r3, r7
 800d8fc:	2204      	movs	r2, #4
 800d8fe:	21ff      	movs	r1, #255	; 0xff
 800d900:	4618      	mov	r0, r3
 800d902:	f002 fa1f 	bl	800fd44 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800d906:	e019      	b.n	800d93c <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 800d908:	463b      	mov	r3, r7
 800d90a:	2204      	movs	r2, #4
 800d90c:	4619      	mov	r1, r3
 800d90e:	201a      	movs	r0, #26
 800d910:	f7ff fd57 	bl	800d3c2 <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 800d914:	783b      	ldrb	r3, [r7, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 800d91e:	787b      	ldrb	r3, [r7, #1]
 800d920:	021b      	lsls	r3, r3, #8
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	4313      	orrs	r3, r2
 800d926:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 800d928:	78bb      	ldrb	r3, [r7, #2]
 800d92a:	041b      	lsls	r3, r3, #16
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	4313      	orrs	r3, r2
 800d930:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	061b      	lsls	r3, r3, #24
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	4313      	orrs	r3, r2
 800d93a:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800d93c:	2110      	movs	r1, #16
 800d93e:	4818      	ldr	r0, [pc, #96]	; (800d9a0 <st25r3916CheckForReceivedInterrupts+0xb0>)
 800d940:	f7f7 f808 	bl	8004954 <HAL_GPIO_ReadPin>
 800d944:	4603      	mov	r3, r0
 800d946:	2b01      	cmp	r3, #1
 800d948:	d0de      	beq.n	800d908 <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 800d94a:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	b2da      	uxtb	r2, r3
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800d954:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	200a      	movs	r0, #10
 800d95c:	f7ff ff80 	bl	800d860 <__NVIC_DisableIRQ>
 800d960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d964:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 800d968:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4313      	orrs	r3, r2
 800d970:	4a0d      	ldr	r2, [pc, #52]	; (800d9a8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800d972:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 800d974:	4b0b      	ldr	r3, [pc, #44]	; (800d9a4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	3b01      	subs	r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800d97e:	701a      	strb	r2, [r3, #0]
 800d980:	4b08      	ldr	r3, [pc, #32]	; (800d9a4 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <st25r3916CheckForReceivedInterrupts+0x9e>
 800d988:	200a      	movs	r0, #10
 800d98a:	f7ff ff4b 	bl	800d824 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 800d98e:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	4618      	mov	r0, r3
 800d994:	f000 f927 	bl	800dbe6 <st25r3916ledEvtIrq>
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	40020800 	.word	0x40020800
 800d9a4:	20000d0c 	.word	0x20000d0c
 800d9a8:	20000bb0 	.word	0x20000bb0

0800d9ac <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 800d9b6:	4b1e      	ldr	r3, [pc, #120]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	43da      	mvns	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	401a      	ands	r2, r3
 800d9c4:	6939      	ldr	r1, [r7, #16]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	400b      	ands	r3, r1
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 800d9ce:	4b18      	ldr	r3, [pc, #96]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800d9d0:	68da      	ldr	r2, [r3, #12]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	43db      	mvns	r3, r3
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	4a15      	ldr	r2, [pc, #84]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800d9da:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 800d9dc:	4b14      	ldr	r3, [pc, #80]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	4a12      	ldr	r2, [pc, #72]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800d9e6:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	75fb      	strb	r3, [r7, #23]
 800d9ec:	e019      	b.n	800da22 <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00d      	beq.n	800da1a <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	3316      	adds	r3, #22
 800da02:	b2d8      	uxtb	r0, r3
 800da04:	4b0a      	ldr	r3, [pc, #40]	; (800da30 <st25r3916ModifyInterrupts+0x84>)
 800da06:	68da      	ldr	r2, [r3, #12]
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	00db      	lsls	r3, r3, #3
 800da0c:	fa22 f303 	lsr.w	r3, r2, r3
 800da10:	b2db      	uxtb	r3, r3
 800da12:	4619      	mov	r1, r3
 800da14:	f7ff fd02 	bl	800d41c <st25r3916WriteRegister>
 800da18:	e000      	b.n	800da1c <st25r3916ModifyInterrupts+0x70>
            continue;
 800da1a:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	3301      	adds	r3, #1
 800da20:	75fb      	strb	r3, [r7, #23]
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d9e2      	bls.n	800d9ee <st25r3916ModifyInterrupts+0x42>
    }
    return;
 800da28:	bf00      	nop
}
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	20000bb0 	.word	0x20000bb0

0800da34 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 800da40:	887b      	ldrh	r3, [r7, #2]
 800da42:	4618      	mov	r0, r3
 800da44:	f7f5 ff92 	bl	800396c <timerCalculateTimer>
 800da48:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 800da4a:	4b20      	ldr	r3, [pc, #128]	; (800dacc <st25r3916WaitForInterruptsTimed+0x98>)
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	4013      	ands	r3, r2
 800da52:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f7f5 ff97 	bl	8003988 <timerIsExpired>
 800da5a:	4603      	mov	r3, r0
 800da5c:	f083 0301 	eor.w	r3, r3, #1
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <st25r3916WaitForInterruptsTimed+0x38>
 800da66:	887b      	ldrh	r3, [r7, #2]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d102      	bne.n	800da72 <st25r3916WaitForInterruptsTimed+0x3e>
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d0eb      	beq.n	800da4a <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 800da72:	4b16      	ldr	r3, [pc, #88]	; (800dacc <st25r3916WaitForInterruptsTimed+0x98>)
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	4013      	ands	r3, r2
 800da7a:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 800da7c:	4b14      	ldr	r3, [pc, #80]	; (800dad0 <st25r3916WaitForInterruptsTimed+0x9c>)
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	b2da      	uxtb	r2, r3
 800da84:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <st25r3916WaitForInterruptsTimed+0x9c>)
 800da86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	200a      	movs	r0, #10
 800da8e:	f7ff fee7 	bl	800d860 <__NVIC_DisableIRQ>
 800da92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800da96:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 800da9a:	4b0c      	ldr	r3, [pc, #48]	; (800dacc <st25r3916WaitForInterruptsTimed+0x98>)
 800da9c:	689a      	ldr	r2, [r3, #8]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	43db      	mvns	r3, r3
 800daa2:	4013      	ands	r3, r2
 800daa4:	4a09      	ldr	r2, [pc, #36]	; (800dacc <st25r3916WaitForInterruptsTimed+0x98>)
 800daa6:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800daa8:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <st25r3916WaitForInterruptsTimed+0x9c>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	3b01      	subs	r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <st25r3916WaitForInterruptsTimed+0x9c>)
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <st25r3916WaitForInterruptsTimed+0x9c>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <st25r3916WaitForInterruptsTimed+0x8e>
 800dabc:	200a      	movs	r0, #10
 800dabe:	f7ff feb1 	bl	800d824 <__NVIC_EnableIRQ>
    
    return status;
 800dac2:	68bb      	ldr	r3, [r7, #8]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20000bb0 	.word	0x20000bb0
 800dad0:	20000d0c 	.word	0x20000d0c

0800dad4 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 800dadc:	4b17      	ldr	r3, [pc, #92]	; (800db3c <st25r3916GetInterrupt+0x68>)
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	4013      	ands	r3, r2
 800dae4:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d022      	beq.n	800db32 <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 800daec:	4b14      	ldr	r3, [pc, #80]	; (800db40 <st25r3916GetInterrupt+0x6c>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	4b12      	ldr	r3, [pc, #72]	; (800db40 <st25r3916GetInterrupt+0x6c>)
 800daf6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	200a      	movs	r0, #10
 800dafe:	f7ff feaf 	bl	800d860 <__NVIC_DisableIRQ>
 800db02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800db06:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 800db0a:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <st25r3916GetInterrupt+0x68>)
 800db0c:	689a      	ldr	r2, [r3, #8]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	43db      	mvns	r3, r3
 800db12:	4013      	ands	r3, r2
 800db14:	4a09      	ldr	r2, [pc, #36]	; (800db3c <st25r3916GetInterrupt+0x68>)
 800db16:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 800db18:	4b09      	ldr	r3, [pc, #36]	; (800db40 <st25r3916GetInterrupt+0x6c>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <st25r3916GetInterrupt+0x6c>)
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	4b06      	ldr	r3, [pc, #24]	; (800db40 <st25r3916GetInterrupt+0x6c>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d102      	bne.n	800db32 <st25r3916GetInterrupt+0x5e>
 800db2c:	200a      	movs	r0, #10
 800db2e:	f7ff fe79 	bl	800d824 <__NVIC_EnableIRQ>
    }

    return irqs;
 800db32:	68fb      	ldr	r3, [r7, #12]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20000bb0 	.word	0x20000bb0
 800db40:	20000d0c 	.word	0x20000d0c

0800db44 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 800db4c:	2100      	movs	r1, #0
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff ff2c 	bl	800d9ac <st25r3916ModifyInterrupts>
}
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	2000      	movs	r0, #0
 800db68:	f7ff ff20 	bl	800d9ac <st25r3916ModifyInterrupts>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 800db7a:	1d3b      	adds	r3, r7, #4
 800db7c:	2204      	movs	r2, #4
 800db7e:	4619      	mov	r1, r3
 800db80:	201a      	movs	r0, #26
 800db82:	f7ff fc1e 	bl	800d3c2 <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800db86:	4b12      	ldr	r3, [pc, #72]	; (800dbd0 <st25r3916ClearInterrupts+0x5c>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	3301      	adds	r3, #1
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	4b10      	ldr	r3, [pc, #64]	; (800dbd0 <st25r3916ClearInterrupts+0x5c>)
 800db90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	200a      	movs	r0, #10
 800db98:	f7ff fe62 	bl	800d860 <__NVIC_DisableIRQ>
 800db9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dba0:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 800dba4:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <st25r3916ClearInterrupts+0x60>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 800dbaa:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <st25r3916ClearInterrupts+0x5c>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <st25r3916ClearInterrupts+0x5c>)
 800dbb4:	701a      	strb	r2, [r3, #0]
 800dbb6:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <st25r3916ClearInterrupts+0x5c>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d103      	bne.n	800dbc6 <st25r3916ClearInterrupts+0x52>
 800dbbe:	200a      	movs	r0, #10
 800dbc0:	f7ff fe30 	bl	800d824 <__NVIC_EnableIRQ>
    return;
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
}
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	20000d0c 	.word	0x20000d0c
 800dbd4:	20000bb0 	.word	0x20000bb0

0800dbd8 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 800dbdc:	bf00      	nop
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b083      	sub	sp, #12
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 800dbee:	bf00      	nop
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	4603      	mov	r3, r0
 800dc02:	460a      	mov	r2, r1
 800dc04:	71fb      	strb	r3, [r7, #7]
 800dc06:	4613      	mov	r3, r2
 800dc08:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 800dc0a:	79fb      	ldrb	r3, [r7, #7]
 800dc0c:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	4603      	mov	r3, r0
 800dc22:	6039      	str	r1, [r7, #0]
 800dc24:	71fb      	strb	r3, [r7, #7]
 800dc26:	4613      	mov	r3, r2
 800dc28:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73fb      	strb	r3, [r7, #15]
 800dc2e:	e00d      	b.n	800dc4c <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 800dc30:	79fa      	ldrb	r2, [r7, #7]
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
 800dc34:	4413      	add	r3, r2
 800dc36:	b2d8      	uxtb	r0, r3
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	4619      	mov	r1, r3
 800dc42:	f7ff ffda 	bl	800dbfa <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	73fb      	strb	r3, [r7, #15]
 800dc4c:	7bfa      	ldrb	r2, [r7, #15]
 800dc4e:	79bb      	ldrb	r3, [r7, #6]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d3ed      	bcc.n	800dc30 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 800dc54:	bf00      	nop
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	4603      	mov	r3, r0
 800dc64:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <USBD_CDC_Init>:
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	70fb      	strb	r3, [r7, #3]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73fb      	strb	r3, [r7, #15]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	7c1b      	ldrb	r3, [r3, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d115      	bne.n	800dcb6 <USBD_CDC_Init+0x44>
 800dc8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc8e:	2202      	movs	r2, #2
 800dc90:	2181      	movs	r1, #129	; 0x81
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f001 feaf 	bl	800f9f6 <USBD_LL_OpenEP>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800dc9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dca2:	2202      	movs	r2, #2
 800dca4:	2101      	movs	r1, #1
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f001 fea5 	bl	800f9f6 <USBD_LL_OpenEP>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dcb4:	e012      	b.n	800dcdc <USBD_CDC_Init+0x6a>
 800dcb6:	2340      	movs	r3, #64	; 0x40
 800dcb8:	2202      	movs	r2, #2
 800dcba:	2181      	movs	r1, #129	; 0x81
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f001 fe9a 	bl	800f9f6 <USBD_LL_OpenEP>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	62da      	str	r2, [r3, #44]	; 0x2c
 800dcc8:	2340      	movs	r3, #64	; 0x40
 800dcca:	2202      	movs	r2, #2
 800dccc:	2101      	movs	r1, #1
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f001 fe91 	bl	800f9f6 <USBD_LL_OpenEP>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dcdc:	2308      	movs	r3, #8
 800dcde:	2203      	movs	r2, #3
 800dce0:	2182      	movs	r1, #130	; 0x82
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 fe87 	bl	800f9f6 <USBD_LL_OpenEP>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	641a      	str	r2, [r3, #64]	; 0x40
 800dcee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dcf2:	f001 fffd 	bl	800fcf0 <malloc>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d102      	bne.n	800dd10 <USBD_CDC_Init+0x9e>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	73fb      	strb	r3, [r7, #15]
 800dd0e:	e026      	b.n	800dd5e <USBD_CDC_Init+0xec>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd16:	60bb      	str	r3, [r7, #8]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4798      	blx	r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	7c1b      	ldrb	r3, [r3, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d109      	bne.n	800dd4e <USBD_CDC_Init+0xdc>
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd44:	2101      	movs	r1, #1
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f001 ff46 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800dd4c:	e007      	b.n	800dd5e <USBD_CDC_Init+0xec>
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd54:	2340      	movs	r3, #64	; 0x40
 800dd56:	2101      	movs	r1, #1
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f001 ff3d 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBD_CDC_DeInit>:
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
 800dd78:	2181      	movs	r1, #129	; 0x81
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f001 fe61 	bl	800fa42 <USBD_LL_CloseEP>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd86:	2101      	movs	r1, #1
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f001 fe5a 	bl	800fa42 <USBD_LL_CloseEP>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dd96:	2182      	movs	r1, #130	; 0x82
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f001 fe52 	bl	800fa42 <USBD_LL_CloseEP>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	641a      	str	r2, [r3, #64]	; 0x40
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00e      	beq.n	800ddcc <USBD_CDC_DeInit+0x64>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	4798      	blx	r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f001 ff9e 	bl	800fd00 <free>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBD_CDC_Setup>:
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	6039      	str	r1, [r7, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dde6:	613b      	str	r3, [r7, #16]
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]
 800ddec:	2300      	movs	r3, #0
 800ddee:	81bb      	strh	r3, [r7, #12]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	75fb      	strb	r3, [r7, #23]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d039      	beq.n	800de74 <USBD_CDC_Setup+0x9e>
 800de00:	2b20      	cmp	r3, #32
 800de02:	d17c      	bne.n	800defe <USBD_CDC_Setup+0x128>
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	88db      	ldrh	r3, [r3, #6]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d029      	beq.n	800de60 <USBD_CDC_Setup+0x8a>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	b25b      	sxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	da11      	bge.n	800de3a <USBD_CDC_Setup+0x64>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	7850      	ldrb	r0, [r2, #1]
 800de22:	6939      	ldr	r1, [r7, #16]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	88d2      	ldrh	r2, [r2, #6]
 800de28:	4798      	blx	r3
 800de2a:	6939      	ldr	r1, [r7, #16]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	88db      	ldrh	r3, [r3, #6]
 800de30:	461a      	mov	r2, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f001 f99c 	bl	800f170 <USBD_CtlSendData>
 800de38:	e068      	b.n	800df0c <USBD_CDC_Setup+0x136>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	785a      	ldrb	r2, [r3, #1]
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	88db      	ldrh	r3, [r3, #6]
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800de50:	6939      	ldr	r1, [r7, #16]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	88db      	ldrh	r3, [r3, #6]
 800de56:	461a      	mov	r2, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f001 f9b7 	bl	800f1cc <USBD_CtlPrepareRx>
 800de5e:	e055      	b.n	800df0c <USBD_CDC_Setup+0x136>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	7850      	ldrb	r0, [r2, #1]
 800de6c:	2200      	movs	r2, #0
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	4798      	blx	r3
 800de72:	e04b      	b.n	800df0c <USBD_CDC_Setup+0x136>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	785b      	ldrb	r3, [r3, #1]
 800de78:	2b0a      	cmp	r3, #10
 800de7a:	d017      	beq.n	800deac <USBD_CDC_Setup+0xd6>
 800de7c:	2b0b      	cmp	r3, #11
 800de7e:	d029      	beq.n	800ded4 <USBD_CDC_Setup+0xfe>
 800de80:	2b00      	cmp	r3, #0
 800de82:	d133      	bne.n	800deec <USBD_CDC_Setup+0x116>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d107      	bne.n	800de9e <USBD_CDC_Setup+0xc8>
 800de8e:	f107 030c 	add.w	r3, r7, #12
 800de92:	2202      	movs	r2, #2
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f001 f96a 	bl	800f170 <USBD_CtlSendData>
 800de9c:	e02e      	b.n	800defc <USBD_CDC_Setup+0x126>
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f001 f8fa 	bl	800f09a <USBD_CtlError>
 800dea6:	2302      	movs	r3, #2
 800dea8:	75fb      	strb	r3, [r7, #23]
 800deaa:	e027      	b.n	800defc <USBD_CDC_Setup+0x126>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d107      	bne.n	800dec6 <USBD_CDC_Setup+0xf0>
 800deb6:	f107 030f 	add.w	r3, r7, #15
 800deba:	2201      	movs	r2, #1
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f001 f956 	bl	800f170 <USBD_CtlSendData>
 800dec4:	e01a      	b.n	800defc <USBD_CDC_Setup+0x126>
 800dec6:	6839      	ldr	r1, [r7, #0]
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f001 f8e6 	bl	800f09a <USBD_CtlError>
 800dece:	2302      	movs	r3, #2
 800ded0:	75fb      	strb	r3, [r7, #23]
 800ded2:	e013      	b.n	800defc <USBD_CDC_Setup+0x126>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d00d      	beq.n	800defa <USBD_CDC_Setup+0x124>
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f001 f8da 	bl	800f09a <USBD_CtlError>
 800dee6:	2302      	movs	r3, #2
 800dee8:	75fb      	strb	r3, [r7, #23]
 800deea:	e006      	b.n	800defa <USBD_CDC_Setup+0x124>
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f001 f8d3 	bl	800f09a <USBD_CtlError>
 800def4:	2302      	movs	r3, #2
 800def6:	75fb      	strb	r3, [r7, #23]
 800def8:	e000      	b.n	800defc <USBD_CDC_Setup+0x126>
 800defa:	bf00      	nop
 800defc:	e006      	b.n	800df0c <USBD_CDC_Setup+0x136>
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f001 f8ca 	bl	800f09a <USBD_CtlError>
 800df06:	2302      	movs	r3, #2
 800df08:	75fb      	strb	r3, [r7, #23]
 800df0a:	bf00      	nop
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_CDC_DataIn>:
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	460b      	mov	r3, r1
 800df20:	70fb      	strb	r3, [r7, #3]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800df30:	60bb      	str	r3, [r7, #8]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d03a      	beq.n	800dfb2 <USBD_CDC_DataIn+0x9c>
 800df3c:	78fa      	ldrb	r2, [r7, #3]
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	440b      	add	r3, r1
 800df4a:	331c      	adds	r3, #28
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d029      	beq.n	800dfa6 <USBD_CDC_DataIn+0x90>
 800df52:	78fa      	ldrb	r2, [r7, #3]
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	331c      	adds	r3, #28
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	78f9      	ldrb	r1, [r7, #3]
 800df66:	68b8      	ldr	r0, [r7, #8]
 800df68:	460b      	mov	r3, r1
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	1a5b      	subs	r3, r3, r1
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4403      	add	r3, r0
 800df72:	3344      	adds	r3, #68	; 0x44
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	fbb2 f1f3 	udiv	r1, r2, r3
 800df7a:	fb03 f301 	mul.w	r3, r3, r1
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	d110      	bne.n	800dfa6 <USBD_CDC_DataIn+0x90>
 800df84:	78fa      	ldrb	r2, [r7, #3]
 800df86:	6879      	ldr	r1, [r7, #4]
 800df88:	4613      	mov	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	440b      	add	r3, r1
 800df92:	331c      	adds	r3, #28
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	78f9      	ldrb	r1, [r7, #3]
 800df9a:	2300      	movs	r3, #0
 800df9c:	2200      	movs	r2, #0
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f001 fdf7 	bl	800fb92 <USBD_LL_Transmit>
 800dfa4:	e003      	b.n	800dfae <USBD_CDC_DataIn+0x98>
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e000      	b.n	800dfb4 <USBD_CDC_DataIn+0x9e>
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <USBD_CDC_DataOut>:
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	70fb      	strb	r3, [r7, #3]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f001 fe22 	bl	800fc1e <USBD_LL_GetRxDataSize>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00d      	beq.n	800e008 <USBD_CDC_DataOut+0x4c>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e000:	4611      	mov	r1, r2
 800e002:	4798      	blx	r3
 800e004:	2300      	movs	r3, #0
 800e006:	e000      	b.n	800e00a <USBD_CDC_DataOut+0x4e>
 800e008:	2302      	movs	r3, #2
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBD_CDC_EP0_RxReady>:
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d015      	beq.n	800e058 <USBD_CDC_EP0_RxReady+0x46>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e032:	2bff      	cmp	r3, #255	; 0xff
 800e034:	d010      	beq.n	800e058 <USBD_CDC_EP0_RxReady+0x46>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 800e044:	68f9      	ldr	r1, [r7, #12]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 800e04c:	b292      	uxth	r2, r2
 800e04e:	4798      	blx	r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	22ff      	movs	r2, #255	; 0xff
 800e054:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800e058:	2300      	movs	r3, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <USBD_CDC_GetFSCfgDesc>:
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2243      	movs	r2, #67	; 0x43
 800e070:	801a      	strh	r2, [r3, #0]
 800e072:	4b03      	ldr	r3, [pc, #12]	; (800e080 <USBD_CDC_GetFSCfgDesc+0x1c>)
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	200000e4 	.word	0x200000e4

0800e084 <USBD_CDC_GetHSCfgDesc>:
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2243      	movs	r2, #67	; 0x43
 800e090:	801a      	strh	r2, [r3, #0]
 800e092:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	200000a0 	.word	0x200000a0

0800e0a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2243      	movs	r2, #67	; 0x43
 800e0b0:	801a      	strh	r2, [r3, #0]
 800e0b2:	4b03      	ldr	r3, [pc, #12]	; (800e0c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	20000128 	.word	0x20000128

0800e0c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	220a      	movs	r2, #10
 800e0d0:	801a      	strh	r2, [r3, #0]
 800e0d2:	4b03      	ldr	r3, [pc, #12]	; (800e0e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	2000005c 	.word	0x2000005c

0800e0e4 <USBD_CDC_RegisterInterface>:
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	73fb      	strb	r3, [r7, #15]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d005      	beq.n	800e104 <USBD_CDC_RegisterInterface+0x20>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800e100:	2300      	movs	r3, #0
 800e102:	73fb      	strb	r3, [r7, #15]
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <USBD_CDC_SetTxBuffer>:
 800e112:	b480      	push	{r7}
 800e114:	b087      	sub	sp, #28
 800e116:	af00      	add	r7, sp, #0
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	4613      	mov	r3, r2
 800e11e:	80fb      	strh	r3, [r7, #6]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e126:	617b      	str	r3, [r7, #20]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800e130:	88fa      	ldrh	r2, [r7, #6]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800e138:	2300      	movs	r3, #0
 800e13a:	4618      	mov	r0, r3
 800e13c:	371c      	adds	r7, #28
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <USBD_CDC_SetRxBuffer>:
 800e146:	b480      	push	{r7}
 800e148:	b085      	sub	sp, #20
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
 800e14e:	6039      	str	r1, [r7, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e160:	2300      	movs	r3, #0
 800e162:	4618      	mov	r0, r3
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <USBD_CDC_ReceivePacket>:
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e184:	2b00      	cmp	r3, #0
 800e186:	d017      	beq.n	800e1b8 <USBD_CDC_ReceivePacket+0x4a>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7c1b      	ldrb	r3, [r3, #16]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d109      	bne.n	800e1a4 <USBD_CDC_ReceivePacket+0x36>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e19a:	2101      	movs	r1, #1
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 fd1b 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800e1a2:	e007      	b.n	800e1b4 <USBD_CDC_ReceivePacket+0x46>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1aa:	2340      	movs	r3, #64	; 0x40
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f001 fd12 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e000      	b.n	800e1ba <USBD_CDC_ReceivePacket+0x4c>
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBD_Init>:
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b084      	sub	sp, #16
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	71fb      	strb	r3, [r7, #7]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <USBD_Init+0x18>
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	e01a      	b.n	800e210 <USBD_Init+0x4e>
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d003      	beq.n	800e1ec <USBD_Init+0x2a>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <USBD_Init+0x38>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	79fa      	ldrb	r2, [r7, #7]
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f001 fb8d 	bl	800f928 <USBD_LL_Init>
 800e20e:	2300      	movs	r3, #0
 800e210:	4618      	mov	r0, r3
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <USBD_RegisterClass>:
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d006      	beq.n	800e23a <USBD_RegisterClass+0x22>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]
 800e238:	e001      	b.n	800e23e <USBD_RegisterClass+0x26>
 800e23a:	2302      	movs	r3, #2
 800e23c:	73fb      	strb	r3, [r7, #15]
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	4618      	mov	r0, r3
 800e242:	3714      	adds	r7, #20
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <USBD_Start>:
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f001 fbb3 	bl	800f9c0 <USBD_LL_Start>
 800e25a:	2300      	movs	r3, #0
 800e25c:	4618      	mov	r0, r3
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <USBD_RunTestMode>:
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	2300      	movs	r3, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <USBD_SetClassConfig>:
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	460b      	mov	r3, r1
 800e284:	70fb      	strb	r3, [r7, #3]
 800e286:	2302      	movs	r3, #2
 800e288:	73fb      	strb	r3, [r7, #15]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00c      	beq.n	800e2ae <USBD_SetClassConfig+0x34>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	78fa      	ldrb	r2, [r7, #3]
 800e29e:	4611      	mov	r1, r2
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	4798      	blx	r3
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d101      	bne.n	800e2ae <USBD_SetClassConfig+0x34>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <USBD_ClrClassConfig>:
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	70fb      	strb	r3, [r7, #3]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	78fa      	ldrb	r2, [r7, #3]
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	4798      	blx	r3
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3708      	adds	r7, #8
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <USBD_LL_SetupStage>:
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
 800e2e6:	6039      	str	r1, [r7, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 fe95 	bl	800f020 <USBD_ParseSetupRequest>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800e304:	461a      	mov	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e312:	f003 031f 	and.w	r3, r3, #31
 800e316:	2b01      	cmp	r3, #1
 800e318:	d00c      	beq.n	800e334 <USBD_LL_SetupStage+0x56>
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d302      	bcc.n	800e324 <USBD_LL_SetupStage+0x46>
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d010      	beq.n	800e344 <USBD_LL_SetupStage+0x66>
 800e322:	e017      	b.n	800e354 <USBD_LL_SetupStage+0x76>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fa05 	bl	800e73c <USBD_StdDevReq>
 800e332:	e01a      	b.n	800e36a <USBD_LL_SetupStage+0x8c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fa67 	bl	800e810 <USBD_StdItfReq>
 800e342:	e012      	b.n	800e36a <USBD_LL_SetupStage+0x8c>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 faa5 	bl	800e89c <USBD_StdEPReq>
 800e352:	e00a      	b.n	800e36a <USBD_LL_SetupStage+0x8c>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e35a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f001 fb8c 	bl	800fa80 <USBD_LL_StallEP>
 800e368:	bf00      	nop
 800e36a:	2300      	movs	r3, #0
 800e36c:	4618      	mov	r0, r3
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <USBD_LL_DataOutStage>:
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	460b      	mov	r3, r1
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	72fb      	strb	r3, [r7, #11]
 800e382:	7afb      	ldrb	r3, [r7, #11]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d14b      	bne.n	800e420 <USBD_LL_DataOutStage+0xac>
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e38e:	617b      	str	r3, [r7, #20]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e396:	2b03      	cmp	r3, #3
 800e398:	d134      	bne.n	800e404 <USBD_LL_DataOutStage+0x90>
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	68da      	ldr	r2, [r3, #12]
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d919      	bls.n	800e3da <USBD_LL_DataOutStage+0x66>
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	68da      	ldr	r2, [r3, #12]
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	1ad2      	subs	r2, r2, r3
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	60da      	str	r2, [r3, #12]
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	68da      	ldr	r2, [r3, #12]
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d203      	bcs.n	800e3c8 <USBD_LL_DataOutStage+0x54>
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	e002      	b.n	800e3ce <USBD_LL_DataOutStage+0x5a>
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f000 ff18 	bl	800f208 <USBD_CtlContinueRx>
 800e3d8:	e038      	b.n	800e44c <USBD_LL_DataOutStage+0xd8>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00a      	beq.n	800e3fc <USBD_LL_DataOutStage+0x88>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e3ec:	2b03      	cmp	r3, #3
 800e3ee:	d105      	bne.n	800e3fc <USBD_LL_DataOutStage+0x88>
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	4798      	blx	r3
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f000 ff15 	bl	800f22c <USBD_CtlSendStatus>
 800e402:	e023      	b.n	800e44c <USBD_LL_DataOutStage+0xd8>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e40a:	2b05      	cmp	r3, #5
 800e40c:	d11e      	bne.n	800e44c <USBD_LL_DataOutStage+0xd8>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800e416:	2100      	movs	r1, #0
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f001 fb31 	bl	800fa80 <USBD_LL_StallEP>
 800e41e:	e015      	b.n	800e44c <USBD_LL_DataOutStage+0xd8>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00d      	beq.n	800e448 <USBD_LL_DataOutStage+0xd4>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e432:	2b03      	cmp	r3, #3
 800e434:	d108      	bne.n	800e448 <USBD_LL_DataOutStage+0xd4>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	7afa      	ldrb	r2, [r7, #11]
 800e440:	4611      	mov	r1, r2
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	4798      	blx	r3
 800e446:	e001      	b.n	800e44c <USBD_LL_DataOutStage+0xd8>
 800e448:	2302      	movs	r3, #2
 800e44a:	e000      	b.n	800e44e <USBD_LL_DataOutStage+0xda>
 800e44c:	2300      	movs	r3, #0
 800e44e:	4618      	mov	r0, r3
 800e450:	3718      	adds	r7, #24
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_LL_DataInStage>:
 800e456:	b580      	push	{r7, lr}
 800e458:	b086      	sub	sp, #24
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	60f8      	str	r0, [r7, #12]
 800e45e:	460b      	mov	r3, r1
 800e460:	607a      	str	r2, [r7, #4]
 800e462:	72fb      	strb	r3, [r7, #11]
 800e464:	7afb      	ldrb	r3, [r7, #11]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d17f      	bne.n	800e56a <USBD_LL_DataInStage+0x114>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3314      	adds	r3, #20
 800e46e:	617b      	str	r3, [r7, #20]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e476:	2b02      	cmp	r3, #2
 800e478:	d15c      	bne.n	800e534 <USBD_LL_DataInStage+0xde>
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	68da      	ldr	r2, [r3, #12]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	429a      	cmp	r2, r3
 800e484:	d915      	bls.n	800e4b2 <USBD_LL_DataInStage+0x5c>
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	68da      	ldr	r2, [r3, #12]
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	1ad2      	subs	r2, r2, r3
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	60da      	str	r2, [r3, #12]
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	461a      	mov	r2, r3
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 fe82 	bl	800f1a8 <USBD_CtlContinueSendData>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f001 fb94 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800e4b0:	e04e      	b.n	800e550 <USBD_LL_DataInStage+0xfa>
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	6912      	ldr	r2, [r2, #16]
 800e4ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4be:	fb02 f201 	mul.w	r2, r2, r1
 800e4c2:	1a9b      	subs	r3, r3, r2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11c      	bne.n	800e502 <USBD_LL_DataInStage+0xac>
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	689a      	ldr	r2, [r3, #8]
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d316      	bcc.n	800e502 <USBD_LL_DataInStage+0xac>
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	689a      	ldr	r2, [r3, #8]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d20f      	bcs.n	800e502 <USBD_LL_DataInStage+0xac>
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 fe5e 	bl	800f1a8 <USBD_CtlContinueSendData>
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f001 fb6c 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800e500:	e026      	b.n	800e550 <USBD_LL_DataInStage+0xfa>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <USBD_LL_DataInStage+0xce>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e514:	2b03      	cmp	r3, #3
 800e516:	d105      	bne.n	800e524 <USBD_LL_DataInStage+0xce>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	4798      	blx	r3
 800e524:	2180      	movs	r1, #128	; 0x80
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f001 faaa 	bl	800fa80 <USBD_LL_StallEP>
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 fe90 	bl	800f252 <USBD_CtlReceiveStatus>
 800e532:	e00d      	b.n	800e550 <USBD_LL_DataInStage+0xfa>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	d004      	beq.n	800e548 <USBD_LL_DataInStage+0xf2>
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d103      	bne.n	800e550 <USBD_LL_DataInStage+0xfa>
 800e548:	2180      	movs	r1, #128	; 0x80
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f001 fa98 	bl	800fa80 <USBD_LL_StallEP>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800e556:	2b01      	cmp	r3, #1
 800e558:	d11d      	bne.n	800e596 <USBD_LL_DataInStage+0x140>
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7ff fe82 	bl	800e264 <USBD_RunTestMode>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800e568:	e015      	b.n	800e596 <USBD_LL_DataInStage+0x140>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00d      	beq.n	800e592 <USBD_LL_DataInStage+0x13c>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d108      	bne.n	800e592 <USBD_LL_DataInStage+0x13c>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e586:	695b      	ldr	r3, [r3, #20]
 800e588:	7afa      	ldrb	r2, [r7, #11]
 800e58a:	4611      	mov	r1, r2
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	4798      	blx	r3
 800e590:	e001      	b.n	800e596 <USBD_LL_DataInStage+0x140>
 800e592:	2302      	movs	r3, #2
 800e594:	e000      	b.n	800e598 <USBD_LL_DataInStage+0x142>
 800e596:	2300      	movs	r3, #0
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <USBD_LL_Reset>:
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	2340      	movs	r3, #64	; 0x40
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f001 fa21 	bl	800f9f6 <USBD_LL_OpenEP>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2240      	movs	r2, #64	; 0x40
 800e5c0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800e5c4:	2340      	movs	r3, #64	; 0x40
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	2180      	movs	r1, #128	; 0x80
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 fa13 	bl	800f9f6 <USBD_LL_OpenEP>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	619a      	str	r2, [r3, #24]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2240      	movs	r2, #64	; 0x40
 800e5da:	625a      	str	r2, [r3, #36]	; 0x24
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	605a      	str	r2, [r3, #4]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <USBD_LL_Reset+0x78>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	6852      	ldr	r2, [r2, #4]
 800e610:	b2d2      	uxtb	r2, r2
 800e612:	4611      	mov	r1, r2
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	4798      	blx	r3
 800e618:	2300      	movs	r3, #0
 800e61a:	4618      	mov	r0, r3
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <USBD_LL_SetSpeed>:
 800e622:	b480      	push	{r7}
 800e624:	b083      	sub	sp, #12
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
 800e62a:	460b      	mov	r3, r1
 800e62c:	70fb      	strb	r3, [r7, #3]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	78fa      	ldrb	r2, [r7, #3]
 800e632:	741a      	strb	r2, [r3, #16]
 800e634:	2300      	movs	r3, #0
 800e636:	4618      	mov	r0, r3
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <USBD_LL_Suspend>:
 800e642:	b480      	push	{r7}
 800e644:	b083      	sub	sp, #12
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2204      	movs	r2, #4
 800e65a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800e65e:	2300      	movs	r3, #0
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USBD_LL_Resume>:
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800e680:	2300      	movs	r3, #0
 800e682:	4618      	mov	r0, r3
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <USBD_LL_SOF>:
 800e68e:	b580      	push	{r7, lr}
 800e690:	b082      	sub	sp, #8
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e69c:	2b03      	cmp	r3, #3
 800e69e:	d10b      	bne.n	800e6b8 <USBD_LL_SOF+0x2a>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d005      	beq.n	800e6b8 <USBD_LL_SOF+0x2a>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	4798      	blx	r3
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_LL_IsoINIncomplete>:
 800e6c2:	b480      	push	{r7}
 800e6c4:	b083      	sub	sp, #12
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	70fb      	strb	r3, [r7, #3]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_LL_IsoOUTIncomplete>:
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	70fb      	strb	r3, [r7, #3]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <USBD_LL_DevConnected>:
 800e6f6:	b480      	push	{r7}
 800e6f8:	b083      	sub	sp, #12
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	2300      	movs	r3, #0
 800e700:	4618      	mov	r0, r3
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <USBD_LL_DevDisconnected>:
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	6852      	ldr	r2, [r2, #4]
 800e728:	b2d2      	uxtb	r2, r2
 800e72a:	4611      	mov	r1, r2
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
 800e730:	2300      	movs	r3, #0
 800e732:	4618      	mov	r0, r3
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <USBD_StdDevReq>:
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e752:	2b20      	cmp	r3, #32
 800e754:	d004      	beq.n	800e760 <USBD_StdDevReq+0x24>
 800e756:	2b40      	cmp	r3, #64	; 0x40
 800e758:	d002      	beq.n	800e760 <USBD_StdDevReq+0x24>
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d008      	beq.n	800e770 <USBD_StdDevReq+0x34>
 800e75e:	e04c      	b.n	800e7fa <USBD_StdDevReq+0xbe>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	4798      	blx	r3
 800e76e:	e049      	b.n	800e804 <USBD_StdDevReq+0xc8>
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	785b      	ldrb	r3, [r3, #1]
 800e774:	2b09      	cmp	r3, #9
 800e776:	d83a      	bhi.n	800e7ee <USBD_StdDevReq+0xb2>
 800e778:	a201      	add	r2, pc, #4	; (adr r2, 800e780 <USBD_StdDevReq+0x44>)
 800e77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77e:	bf00      	nop
 800e780:	0800e7d1 	.word	0x0800e7d1
 800e784:	0800e7e5 	.word	0x0800e7e5
 800e788:	0800e7ef 	.word	0x0800e7ef
 800e78c:	0800e7db 	.word	0x0800e7db
 800e790:	0800e7ef 	.word	0x0800e7ef
 800e794:	0800e7b3 	.word	0x0800e7b3
 800e798:	0800e7a9 	.word	0x0800e7a9
 800e79c:	0800e7ef 	.word	0x0800e7ef
 800e7a0:	0800e7c7 	.word	0x0800e7c7
 800e7a4:	0800e7bd 	.word	0x0800e7bd
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f9d2 	bl	800eb54 <USBD_GetDescriptor>
 800e7b0:	e022      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fac7 	bl	800ed48 <USBD_SetAddress>
 800e7ba:	e01d      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fb04 	bl	800edcc <USBD_SetConfig>
 800e7c4:	e018      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fb8d 	bl	800eee8 <USBD_GetConfig>
 800e7ce:	e013      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fbbc 	bl	800ef50 <USBD_GetStatus>
 800e7d8:	e00e      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fbea 	bl	800efb6 <USBD_SetFeature>
 800e7e2:	e009      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fbf9 	bl	800efde <USBD_ClrFeature>
 800e7ec:	e004      	b.n	800e7f8 <USBD_StdDevReq+0xbc>
 800e7ee:	6839      	ldr	r1, [r7, #0]
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fc52 	bl	800f09a <USBD_CtlError>
 800e7f6:	bf00      	nop
 800e7f8:	e004      	b.n	800e804 <USBD_StdDevReq+0xc8>
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fc4c 	bl	800f09a <USBD_CtlError>
 800e802:	bf00      	nop
 800e804:	7bfb      	ldrb	r3, [r7, #15]
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop

0800e810 <USBD_StdItfReq>:
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
 800e81a:	2300      	movs	r3, #0
 800e81c:	73fb      	strb	r3, [r7, #15]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e826:	2b20      	cmp	r3, #32
 800e828:	d003      	beq.n	800e832 <USBD_StdItfReq+0x22>
 800e82a:	2b40      	cmp	r3, #64	; 0x40
 800e82c:	d001      	beq.n	800e832 <USBD_StdItfReq+0x22>
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d12a      	bne.n	800e888 <USBD_StdItfReq+0x78>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e838:	3b01      	subs	r3, #1
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d81d      	bhi.n	800e87a <USBD_StdItfReq+0x6a>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	889b      	ldrh	r3, [r3, #4]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b01      	cmp	r3, #1
 800e846:	d813      	bhi.n	800e870 <USBD_StdItfReq+0x60>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	4798      	blx	r3
 800e856:	4603      	mov	r3, r0
 800e858:	73fb      	strb	r3, [r7, #15]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	88db      	ldrh	r3, [r3, #6]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d110      	bne.n	800e884 <USBD_StdItfReq+0x74>
 800e862:	7bfb      	ldrb	r3, [r7, #15]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10d      	bne.n	800e884 <USBD_StdItfReq+0x74>
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fcdf 	bl	800f22c <USBD_CtlSendStatus>
 800e86e:	e009      	b.n	800e884 <USBD_StdItfReq+0x74>
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fc11 	bl	800f09a <USBD_CtlError>
 800e878:	e004      	b.n	800e884 <USBD_StdItfReq+0x74>
 800e87a:	6839      	ldr	r1, [r7, #0]
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fc0c 	bl	800f09a <USBD_CtlError>
 800e882:	e000      	b.n	800e886 <USBD_StdItfReq+0x76>
 800e884:	bf00      	nop
 800e886:	e004      	b.n	800e892 <USBD_StdItfReq+0x82>
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 fc05 	bl	800f09a <USBD_CtlError>
 800e890:	bf00      	nop
 800e892:	2300      	movs	r3, #0
 800e894:	4618      	mov	r0, r3
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBD_StdEPReq>:
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	73fb      	strb	r3, [r7, #15]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	889b      	ldrh	r3, [r3, #4]
 800e8ae:	73bb      	strb	r3, [r7, #14]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8b8:	2b20      	cmp	r3, #32
 800e8ba:	d004      	beq.n	800e8c6 <USBD_StdEPReq+0x2a>
 800e8bc:	2b40      	cmp	r3, #64	; 0x40
 800e8be:	d002      	beq.n	800e8c6 <USBD_StdEPReq+0x2a>
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d008      	beq.n	800e8d6 <USBD_StdEPReq+0x3a>
 800e8c4:	e13b      	b.n	800eb3e <USBD_StdEPReq+0x2a2>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
 800e8d4:	e138      	b.n	800eb48 <USBD_StdEPReq+0x2ac>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8de:	2b20      	cmp	r3, #32
 800e8e0:	d10a      	bne.n	800e8f8 <USBD_StdEPReq+0x5c>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	6839      	ldr	r1, [r7, #0]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	4798      	blx	r3
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	73fb      	strb	r3, [r7, #15]
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
 800e8f6:	e128      	b.n	800eb4a <USBD_StdEPReq+0x2ae>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d03e      	beq.n	800e97e <USBD_StdEPReq+0xe2>
 800e900:	2b03      	cmp	r3, #3
 800e902:	d002      	beq.n	800e90a <USBD_StdEPReq+0x6e>
 800e904:	2b00      	cmp	r3, #0
 800e906:	d070      	beq.n	800e9ea <USBD_StdEPReq+0x14e>
 800e908:	e113      	b.n	800eb32 <USBD_StdEPReq+0x296>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e910:	2b02      	cmp	r3, #2
 800e912:	d002      	beq.n	800e91a <USBD_StdEPReq+0x7e>
 800e914:	2b03      	cmp	r3, #3
 800e916:	d015      	beq.n	800e944 <USBD_StdEPReq+0xa8>
 800e918:	e02b      	b.n	800e972 <USBD_StdEPReq+0xd6>
 800e91a:	7bbb      	ldrb	r3, [r7, #14]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00c      	beq.n	800e93a <USBD_StdEPReq+0x9e>
 800e920:	7bbb      	ldrb	r3, [r7, #14]
 800e922:	2b80      	cmp	r3, #128	; 0x80
 800e924:	d009      	beq.n	800e93a <USBD_StdEPReq+0x9e>
 800e926:	7bbb      	ldrb	r3, [r7, #14]
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 f8a8 	bl	800fa80 <USBD_LL_StallEP>
 800e930:	2180      	movs	r1, #128	; 0x80
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f001 f8a4 	bl	800fa80 <USBD_LL_StallEP>
 800e938:	e020      	b.n	800e97c <USBD_StdEPReq+0xe0>
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fbac 	bl	800f09a <USBD_CtlError>
 800e942:	e01b      	b.n	800e97c <USBD_StdEPReq+0xe0>
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	885b      	ldrh	r3, [r3, #2]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10e      	bne.n	800e96a <USBD_StdEPReq+0xce>
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00b      	beq.n	800e96a <USBD_StdEPReq+0xce>
 800e952:	7bbb      	ldrb	r3, [r7, #14]
 800e954:	2b80      	cmp	r3, #128	; 0x80
 800e956:	d008      	beq.n	800e96a <USBD_StdEPReq+0xce>
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	88db      	ldrh	r3, [r3, #6]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d104      	bne.n	800e96a <USBD_StdEPReq+0xce>
 800e960:	7bbb      	ldrb	r3, [r7, #14]
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f001 f88b 	bl	800fa80 <USBD_LL_StallEP>
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fc5e 	bl	800f22c <USBD_CtlSendStatus>
 800e970:	e004      	b.n	800e97c <USBD_StdEPReq+0xe0>
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fb90 	bl	800f09a <USBD_CtlError>
 800e97a:	bf00      	nop
 800e97c:	e0de      	b.n	800eb3c <USBD_StdEPReq+0x2a0>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e984:	2b02      	cmp	r3, #2
 800e986:	d002      	beq.n	800e98e <USBD_StdEPReq+0xf2>
 800e988:	2b03      	cmp	r3, #3
 800e98a:	d015      	beq.n	800e9b8 <USBD_StdEPReq+0x11c>
 800e98c:	e026      	b.n	800e9dc <USBD_StdEPReq+0x140>
 800e98e:	7bbb      	ldrb	r3, [r7, #14]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00c      	beq.n	800e9ae <USBD_StdEPReq+0x112>
 800e994:	7bbb      	ldrb	r3, [r7, #14]
 800e996:	2b80      	cmp	r3, #128	; 0x80
 800e998:	d009      	beq.n	800e9ae <USBD_StdEPReq+0x112>
 800e99a:	7bbb      	ldrb	r3, [r7, #14]
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f001 f86e 	bl	800fa80 <USBD_LL_StallEP>
 800e9a4:	2180      	movs	r1, #128	; 0x80
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f001 f86a 	bl	800fa80 <USBD_LL_StallEP>
 800e9ac:	e01c      	b.n	800e9e8 <USBD_StdEPReq+0x14c>
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 fb72 	bl	800f09a <USBD_CtlError>
 800e9b6:	e017      	b.n	800e9e8 <USBD_StdEPReq+0x14c>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	885b      	ldrh	r3, [r3, #2]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d112      	bne.n	800e9e6 <USBD_StdEPReq+0x14a>
 800e9c0:	7bbb      	ldrb	r3, [r7, #14]
 800e9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d004      	beq.n	800e9d4 <USBD_StdEPReq+0x138>
 800e9ca:	7bbb      	ldrb	r3, [r7, #14]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 f875 	bl	800fabe <USBD_LL_ClearStallEP>
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 fc29 	bl	800f22c <USBD_CtlSendStatus>
 800e9da:	e004      	b.n	800e9e6 <USBD_StdEPReq+0x14a>
 800e9dc:	6839      	ldr	r1, [r7, #0]
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fb5b 	bl	800f09a <USBD_CtlError>
 800e9e4:	e000      	b.n	800e9e8 <USBD_StdEPReq+0x14c>
 800e9e6:	bf00      	nop
 800e9e8:	e0a8      	b.n	800eb3c <USBD_StdEPReq+0x2a0>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	d002      	beq.n	800e9fa <USBD_StdEPReq+0x15e>
 800e9f4:	2b03      	cmp	r3, #3
 800e9f6:	d031      	beq.n	800ea5c <USBD_StdEPReq+0x1c0>
 800e9f8:	e095      	b.n	800eb26 <USBD_StdEPReq+0x28a>
 800e9fa:	7bbb      	ldrb	r3, [r7, #14]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d007      	beq.n	800ea10 <USBD_StdEPReq+0x174>
 800ea00:	7bbb      	ldrb	r3, [r7, #14]
 800ea02:	2b80      	cmp	r3, #128	; 0x80
 800ea04:	d004      	beq.n	800ea10 <USBD_StdEPReq+0x174>
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fb46 	bl	800f09a <USBD_CtlError>
 800ea0e:	e08f      	b.n	800eb30 <USBD_StdEPReq+0x294>
 800ea10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da0b      	bge.n	800ea30 <USBD_StdEPReq+0x194>
 800ea18:	7bbb      	ldrb	r3, [r7, #14]
 800ea1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea1e:	4613      	mov	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4413      	add	r3, r2
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	3310      	adds	r3, #16
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	e00a      	b.n	800ea46 <USBD_StdEPReq+0x1aa>
 800ea30:	7bbb      	ldrb	r3, [r7, #14]
 800ea32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea36:	4613      	mov	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	60bb      	str	r3, [r7, #8]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	2202      	movs	r2, #2
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 fb8b 	bl	800f170 <USBD_CtlSendData>
 800ea5a:	e069      	b.n	800eb30 <USBD_StdEPReq+0x294>
 800ea5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da11      	bge.n	800ea88 <USBD_StdEPReq+0x1ec>
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	f003 020f 	and.w	r2, r3, #15
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	440b      	add	r3, r1
 800ea76:	3318      	adds	r3, #24
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d117      	bne.n	800eaae <USBD_StdEPReq+0x212>
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fb0a 	bl	800f09a <USBD_CtlError>
 800ea86:	e053      	b.n	800eb30 <USBD_StdEPReq+0x294>
 800ea88:	7bbb      	ldrb	r3, [r7, #14]
 800ea8a:	f003 020f 	and.w	r2, r3, #15
 800ea8e:	6879      	ldr	r1, [r7, #4]
 800ea90:	4613      	mov	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	440b      	add	r3, r1
 800ea9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d104      	bne.n	800eaae <USBD_StdEPReq+0x212>
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 faf7 	bl	800f09a <USBD_CtlError>
 800eaac:	e040      	b.n	800eb30 <USBD_StdEPReq+0x294>
 800eaae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	da0b      	bge.n	800eace <USBD_StdEPReq+0x232>
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
 800eab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eabc:	4613      	mov	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	3310      	adds	r3, #16
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	4413      	add	r3, r2
 800eaca:	3304      	adds	r3, #4
 800eacc:	e00a      	b.n	800eae4 <USBD_StdEPReq+0x248>
 800eace:	7bbb      	ldrb	r3, [r7, #14]
 800ead0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ead4:	4613      	mov	r3, r2
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	4413      	add	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	4413      	add	r3, r2
 800eae4:	60bb      	str	r3, [r7, #8]
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <USBD_StdEPReq+0x256>
 800eaec:	7bbb      	ldrb	r3, [r7, #14]
 800eaee:	2b80      	cmp	r3, #128	; 0x80
 800eaf0:	d103      	bne.n	800eafa <USBD_StdEPReq+0x25e>
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	e00e      	b.n	800eb18 <USBD_StdEPReq+0x27c>
 800eafa:	7bbb      	ldrb	r3, [r7, #14]
 800eafc:	4619      	mov	r1, r3
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 fffc 	bl	800fafc <USBD_LL_IsStallEP>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <USBD_StdEPReq+0x276>
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	601a      	str	r2, [r3, #0]
 800eb10:	e002      	b.n	800eb18 <USBD_StdEPReq+0x27c>
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fb26 	bl	800f170 <USBD_CtlSendData>
 800eb24:	e004      	b.n	800eb30 <USBD_StdEPReq+0x294>
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fab6 	bl	800f09a <USBD_CtlError>
 800eb2e:	bf00      	nop
 800eb30:	e004      	b.n	800eb3c <USBD_StdEPReq+0x2a0>
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fab0 	bl	800f09a <USBD_CtlError>
 800eb3a:	bf00      	nop
 800eb3c:	e004      	b.n	800eb48 <USBD_StdEPReq+0x2ac>
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 faaa 	bl	800f09a <USBD_CtlError>
 800eb46:	bf00      	nop
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <USBD_GetDescriptor>:
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	885b      	ldrh	r3, [r3, #2]
 800eb62:	0a1b      	lsrs	r3, r3, #8
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	3b01      	subs	r3, #1
 800eb68:	2b06      	cmp	r3, #6
 800eb6a:	f200 80c9 	bhi.w	800ed00 <USBD_GetDescriptor+0x1ac>
 800eb6e:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <USBD_GetDescriptor+0x20>)
 800eb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb74:	0800eb91 	.word	0x0800eb91
 800eb78:	0800eba9 	.word	0x0800eba9
 800eb7c:	0800ebe9 	.word	0x0800ebe9
 800eb80:	0800ed01 	.word	0x0800ed01
 800eb84:	0800ed01 	.word	0x0800ed01
 800eb88:	0800ecad 	.word	0x0800ecad
 800eb8c:	0800ecd3 	.word	0x0800ecd3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	7c12      	ldrb	r2, [r2, #16]
 800eb9c:	f107 010a 	add.w	r1, r7, #10
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
 800eba4:	60f8      	str	r0, [r7, #12]
 800eba6:	e0b0      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	7c1b      	ldrb	r3, [r3, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10d      	bne.n	800ebcc <USBD_GetDescriptor+0x78>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb8:	f107 020a 	add.w	r2, r7, #10
 800ebbc:	4610      	mov	r0, r2
 800ebbe:	4798      	blx	r3
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	2202      	movs	r2, #2
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	e09e      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd4:	f107 020a 	add.w	r2, r7, #10
 800ebd8:	4610      	mov	r0, r2
 800ebda:	4798      	blx	r3
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	701a      	strb	r2, [r3, #0]
 800ebe6:	e090      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	885b      	ldrh	r3, [r3, #2]
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b05      	cmp	r3, #5
 800ebf0:	d856      	bhi.n	800eca0 <USBD_GetDescriptor+0x14c>
 800ebf2:	a201      	add	r2, pc, #4	; (adr r2, 800ebf8 <USBD_GetDescriptor+0xa4>)
 800ebf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf8:	0800ec11 	.word	0x0800ec11
 800ebfc:	0800ec29 	.word	0x0800ec29
 800ec00:	0800ec41 	.word	0x0800ec41
 800ec04:	0800ec59 	.word	0x0800ec59
 800ec08:	0800ec71 	.word	0x0800ec71
 800ec0c:	0800ec89 	.word	0x0800ec89
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	7c12      	ldrb	r2, [r2, #16]
 800ec1c:	f107 010a 	add.w	r1, r7, #10
 800ec20:	4610      	mov	r0, r2
 800ec22:	4798      	blx	r3
 800ec24:	60f8      	str	r0, [r7, #12]
 800ec26:	e040      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	7c12      	ldrb	r2, [r2, #16]
 800ec34:	f107 010a 	add.w	r1, r7, #10
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4798      	blx	r3
 800ec3c:	60f8      	str	r0, [r7, #12]
 800ec3e:	e034      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	7c12      	ldrb	r2, [r2, #16]
 800ec4c:	f107 010a 	add.w	r1, r7, #10
 800ec50:	4610      	mov	r0, r2
 800ec52:	4798      	blx	r3
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	e028      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	7c12      	ldrb	r2, [r2, #16]
 800ec64:	f107 010a 	add.w	r1, r7, #10
 800ec68:	4610      	mov	r0, r2
 800ec6a:	4798      	blx	r3
 800ec6c:	60f8      	str	r0, [r7, #12]
 800ec6e:	e01c      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec76:	695b      	ldr	r3, [r3, #20]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	7c12      	ldrb	r2, [r2, #16]
 800ec7c:	f107 010a 	add.w	r1, r7, #10
 800ec80:	4610      	mov	r0, r2
 800ec82:	4798      	blx	r3
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	e010      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	7c12      	ldrb	r2, [r2, #16]
 800ec94:	f107 010a 	add.w	r1, r7, #10
 800ec98:	4610      	mov	r0, r2
 800ec9a:	4798      	blx	r3
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	e004      	b.n	800ecaa <USBD_GetDescriptor+0x156>
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f9f9 	bl	800f09a <USBD_CtlError>
 800eca8:	e04b      	b.n	800ed42 <USBD_GetDescriptor+0x1ee>
 800ecaa:	e02e      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	7c1b      	ldrb	r3, [r3, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d109      	bne.n	800ecc8 <USBD_GetDescriptor+0x174>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ecba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecbc:	f107 020a 	add.w	r2, r7, #10
 800ecc0:	4610      	mov	r0, r2
 800ecc2:	4798      	blx	r3
 800ecc4:	60f8      	str	r0, [r7, #12]
 800ecc6:	e020      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f9e5 	bl	800f09a <USBD_CtlError>
 800ecd0:	e037      	b.n	800ed42 <USBD_GetDescriptor+0x1ee>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	7c1b      	ldrb	r3, [r3, #16]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10d      	bne.n	800ecf6 <USBD_GetDescriptor+0x1a2>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ece0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece2:	f107 020a 	add.w	r2, r7, #10
 800ece6:	4610      	mov	r0, r2
 800ece8:	4798      	blx	r3
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	2207      	movs	r2, #7
 800ecf2:	701a      	strb	r2, [r3, #0]
 800ecf4:	e009      	b.n	800ed0a <USBD_GetDescriptor+0x1b6>
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f9ce 	bl	800f09a <USBD_CtlError>
 800ecfe:	e020      	b.n	800ed42 <USBD_GetDescriptor+0x1ee>
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f9c9 	bl	800f09a <USBD_CtlError>
 800ed08:	e01b      	b.n	800ed42 <USBD_GetDescriptor+0x1ee>
 800ed0a:	897b      	ldrh	r3, [r7, #10]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d011      	beq.n	800ed34 <USBD_GetDescriptor+0x1e0>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	88db      	ldrh	r3, [r3, #6]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00d      	beq.n	800ed34 <USBD_GetDescriptor+0x1e0>
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	88da      	ldrh	r2, [r3, #6]
 800ed1c:	897b      	ldrh	r3, [r7, #10]
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	bf28      	it	cs
 800ed22:	4613      	movcs	r3, r2
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	817b      	strh	r3, [r7, #10]
 800ed28:	897b      	ldrh	r3, [r7, #10]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68f9      	ldr	r1, [r7, #12]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fa1e 	bl	800f170 <USBD_CtlSendData>
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	88db      	ldrh	r3, [r3, #6]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d102      	bne.n	800ed42 <USBD_GetDescriptor+0x1ee>
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fa75 	bl	800f22c <USBD_CtlSendStatus>
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_SetAddress>:
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	889b      	ldrh	r3, [r3, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d130      	bne.n	800edbc <USBD_SetAddress+0x74>
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	88db      	ldrh	r3, [r3, #6]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d12c      	bne.n	800edbc <USBD_SetAddress+0x74>
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	2b7f      	cmp	r3, #127	; 0x7f
 800ed68:	d828      	bhi.n	800edbc <USBD_SetAddress+0x74>
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	885b      	ldrh	r3, [r3, #2]
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed74:	73fb      	strb	r3, [r7, #15]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	d104      	bne.n	800ed8a <USBD_SetAddress+0x42>
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f989 	bl	800f09a <USBD_CtlError>
 800ed88:	e01c      	b.n	800edc4 <USBD_SetAddress+0x7c>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7bfa      	ldrb	r2, [r7, #15]
 800ed8e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 800ed92:	7bfb      	ldrb	r3, [r7, #15]
 800ed94:	4619      	mov	r1, r3
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fedc 	bl	800fb54 <USBD_LL_SetUSBAddress>
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fa45 	bl	800f22c <USBD_CtlSendStatus>
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <USBD_SetAddress+0x6a>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2202      	movs	r2, #2
 800edac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800edb0:	e008      	b.n	800edc4 <USBD_SetAddress+0x7c>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800edba:	e003      	b.n	800edc4 <USBD_SetAddress+0x7c>
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f96b 	bl	800f09a <USBD_CtlError>
 800edc4:	bf00      	nop
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <USBD_SetConfig>:
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	885b      	ldrh	r3, [r3, #2]
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	4b41      	ldr	r3, [pc, #260]	; (800eee4 <USBD_SetConfig+0x118>)
 800edde:	701a      	strb	r2, [r3, #0]
 800ede0:	4b40      	ldr	r3, [pc, #256]	; (800eee4 <USBD_SetConfig+0x118>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d904      	bls.n	800edf2 <USBD_SetConfig+0x26>
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f955 	bl	800f09a <USBD_CtlError>
 800edf0:	e075      	b.n	800eede <USBD_SetConfig+0x112>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d002      	beq.n	800ee02 <USBD_SetConfig+0x36>
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d023      	beq.n	800ee48 <USBD_SetConfig+0x7c>
 800ee00:	e062      	b.n	800eec8 <USBD_SetConfig+0xfc>
 800ee02:	4b38      	ldr	r3, [pc, #224]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d01a      	beq.n	800ee40 <USBD_SetConfig+0x74>
 800ee0a:	4b36      	ldr	r3, [pc, #216]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	605a      	str	r2, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2203      	movs	r2, #3
 800ee18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800ee1c:	4b31      	ldr	r3, [pc, #196]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	4619      	mov	r1, r3
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff fa29 	bl	800e27a <USBD_SetClassConfig>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d104      	bne.n	800ee38 <USBD_SetConfig+0x6c>
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f932 	bl	800f09a <USBD_CtlError>
 800ee36:	e052      	b.n	800eede <USBD_SetConfig+0x112>
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f9f7 	bl	800f22c <USBD_CtlSendStatus>
 800ee3e:	e04e      	b.n	800eede <USBD_SetConfig+0x112>
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 f9f3 	bl	800f22c <USBD_CtlSendStatus>
 800ee46:	e04a      	b.n	800eede <USBD_SetConfig+0x112>
 800ee48:	4b26      	ldr	r3, [pc, #152]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d112      	bne.n	800ee76 <USBD_SetConfig+0xaa>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2202      	movs	r2, #2
 800ee54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800ee58:	4b22      	ldr	r3, [pc, #136]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	605a      	str	r2, [r3, #4]
 800ee62:	4b20      	ldr	r3, [pc, #128]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff fa25 	bl	800e2b8 <USBD_ClrClassConfig>
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f9dc 	bl	800f22c <USBD_CtlSendStatus>
 800ee74:	e033      	b.n	800eede <USBD_SetConfig+0x112>
 800ee76:	4b1b      	ldr	r3, [pc, #108]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d01d      	beq.n	800eec0 <USBD_SetConfig+0xf4>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff fa13 	bl	800e2b8 <USBD_ClrClassConfig>
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	605a      	str	r2, [r3, #4]
 800ee9c:	4b11      	ldr	r3, [pc, #68]	; (800eee4 <USBD_SetConfig+0x118>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	4619      	mov	r1, r3
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff f9e9 	bl	800e27a <USBD_SetClassConfig>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b02      	cmp	r3, #2
 800eeac:	d104      	bne.n	800eeb8 <USBD_SetConfig+0xec>
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 f8f2 	bl	800f09a <USBD_CtlError>
 800eeb6:	e012      	b.n	800eede <USBD_SetConfig+0x112>
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f9b7 	bl	800f22c <USBD_CtlSendStatus>
 800eebe:	e00e      	b.n	800eede <USBD_SetConfig+0x112>
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f9b3 	bl	800f22c <USBD_CtlSendStatus>
 800eec6:	e00a      	b.n	800eede <USBD_SetConfig+0x112>
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f8e5 	bl	800f09a <USBD_CtlError>
 800eed0:	4b04      	ldr	r3, [pc, #16]	; (800eee4 <USBD_SetConfig+0x118>)
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff f9ee 	bl	800e2b8 <USBD_ClrClassConfig>
 800eedc:	bf00      	nop
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	20000bc0 	.word	0x20000bc0

0800eee8 <USBD_GetConfig>:
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	88db      	ldrh	r3, [r3, #6]
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d004      	beq.n	800ef04 <USBD_GetConfig+0x1c>
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f8cc 	bl	800f09a <USBD_CtlError>
 800ef02:	e021      	b.n	800ef48 <USBD_GetConfig+0x60>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	db17      	blt.n	800ef3e <USBD_GetConfig+0x56>
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	dd02      	ble.n	800ef18 <USBD_GetConfig+0x30>
 800ef12:	2b03      	cmp	r3, #3
 800ef14:	d00b      	beq.n	800ef2e <USBD_GetConfig+0x46>
 800ef16:	e012      	b.n	800ef3e <USBD_GetConfig+0x56>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	609a      	str	r2, [r3, #8]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3308      	adds	r3, #8
 800ef22:	2201      	movs	r2, #1
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f922 	bl	800f170 <USBD_CtlSendData>
 800ef2c:	e00c      	b.n	800ef48 <USBD_GetConfig+0x60>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	3304      	adds	r3, #4
 800ef32:	2201      	movs	r2, #1
 800ef34:	4619      	mov	r1, r3
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f91a 	bl	800f170 <USBD_CtlSendData>
 800ef3c:	e004      	b.n	800ef48 <USBD_GetConfig+0x60>
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f8aa 	bl	800f09a <USBD_CtlError>
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <USBD_GetStatus>:
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef60:	3b01      	subs	r3, #1
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d81e      	bhi.n	800efa4 <USBD_GetStatus+0x54>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	88db      	ldrh	r3, [r3, #6]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d004      	beq.n	800ef78 <USBD_GetStatus+0x28>
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f892 	bl	800f09a <USBD_CtlError>
 800ef76:	e01a      	b.n	800efae <USBD_GetStatus+0x5e>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	60da      	str	r2, [r3, #12]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d005      	beq.n	800ef94 <USBD_GetStatus+0x44>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	f043 0202 	orr.w	r2, r3, #2
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	60da      	str	r2, [r3, #12]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	330c      	adds	r3, #12
 800ef98:	2202      	movs	r2, #2
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f8e7 	bl	800f170 <USBD_CtlSendData>
 800efa2:	e004      	b.n	800efae <USBD_GetStatus+0x5e>
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f877 	bl	800f09a <USBD_CtlError>
 800efac:	bf00      	nop
 800efae:	bf00      	nop
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBD_SetFeature>:
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	885b      	ldrh	r3, [r3, #2]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d106      	bne.n	800efd6 <USBD_SetFeature+0x20>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2201      	movs	r2, #1
 800efcc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f92b 	bl	800f22c <USBD_CtlSendStatus>
 800efd6:	bf00      	nop
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <USBD_ClrFeature>:
 800efde:	b580      	push	{r7, lr}
 800efe0:	b082      	sub	sp, #8
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	6039      	str	r1, [r7, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800efee:	3b01      	subs	r3, #1
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d80b      	bhi.n	800f00c <USBD_ClrFeature+0x2e>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	885b      	ldrh	r3, [r3, #2]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d10c      	bne.n	800f016 <USBD_ClrFeature+0x38>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f911 	bl	800f22c <USBD_CtlSendStatus>
 800f00a:	e004      	b.n	800f016 <USBD_ClrFeature+0x38>
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 f843 	bl	800f09a <USBD_CtlError>
 800f014:	e000      	b.n	800f018 <USBD_ClrFeature+0x3a>
 800f016:	bf00      	nop
 800f018:	bf00      	nop
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USBD_ParseSetupRequest>:
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	701a      	strb	r2, [r3, #0]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	785a      	ldrb	r2, [r3, #1]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	705a      	strb	r2, [r3, #1]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3302      	adds	r3, #2
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b29a      	uxth	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	3303      	adds	r3, #3
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	021b      	lsls	r3, r3, #8
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4413      	add	r3, r2
 800f050:	b29a      	uxth	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	805a      	strh	r2, [r3, #2]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	3304      	adds	r3, #4
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	3305      	adds	r3, #5
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	b29b      	uxth	r3, r3
 800f066:	021b      	lsls	r3, r3, #8
 800f068:	b29b      	uxth	r3, r3
 800f06a:	4413      	add	r3, r2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	809a      	strh	r2, [r3, #4]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	3306      	adds	r3, #6
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	3307      	adds	r3, #7
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	b29b      	uxth	r3, r3
 800f082:	021b      	lsls	r3, r3, #8
 800f084:	b29b      	uxth	r3, r3
 800f086:	4413      	add	r3, r2
 800f088:	b29a      	uxth	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	80da      	strh	r2, [r3, #6]
 800f08e:	bf00      	nop
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <USBD_CtlError>:
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b082      	sub	sp, #8
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	6039      	str	r1, [r7, #0]
 800f0a4:	2180      	movs	r1, #128	; 0x80
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fcea 	bl	800fa80 <USBD_LL_StallEP>
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fce6 	bl	800fa80 <USBD_LL_StallEP>
 800f0b4:	bf00      	nop
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBD_GetString>:
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b086      	sub	sp, #24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	75fb      	strb	r3, [r7, #23]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d032      	beq.n	800f138 <USBD_GetString+0x7c>
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f000 f834 	bl	800f140 <USBD_GetLen>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	3301      	adds	r3, #1
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	801a      	strh	r2, [r3, #0]
 800f0e6:	7dfb      	ldrb	r3, [r7, #23]
 800f0e8:	1c5a      	adds	r2, r3, #1
 800f0ea:	75fa      	strb	r2, [r7, #23]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	7812      	ldrb	r2, [r2, #0]
 800f0f6:	701a      	strb	r2, [r3, #0]
 800f0f8:	7dfb      	ldrb	r3, [r7, #23]
 800f0fa:	1c5a      	adds	r2, r3, #1
 800f0fc:	75fa      	strb	r2, [r7, #23]
 800f0fe:	461a      	mov	r2, r3
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	4413      	add	r3, r2
 800f104:	2203      	movs	r2, #3
 800f106:	701a      	strb	r2, [r3, #0]
 800f108:	e012      	b.n	800f130 <USBD_GetString+0x74>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	60fa      	str	r2, [r7, #12]
 800f110:	7dfa      	ldrb	r2, [r7, #23]
 800f112:	1c51      	adds	r1, r2, #1
 800f114:	75f9      	strb	r1, [r7, #23]
 800f116:	4611      	mov	r1, r2
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	440a      	add	r2, r1
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	7013      	strb	r3, [r2, #0]
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	75fa      	strb	r2, [r7, #23]
 800f126:	461a      	mov	r2, r3
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	4413      	add	r3, r2
 800f12c:	2200      	movs	r2, #0
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1e8      	bne.n	800f10a <USBD_GetString+0x4e>
 800f138:	bf00      	nop
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <USBD_GetLen>:
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	2300      	movs	r3, #0
 800f14a:	73fb      	strb	r3, [r7, #15]
 800f14c:	e005      	b.n	800f15a <USBD_GetLen+0x1a>
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	3301      	adds	r3, #1
 800f152:	73fb      	strb	r3, [r7, #15]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3301      	adds	r3, #1
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1f5      	bne.n	800f14e <USBD_GetLen+0xe>
 800f162:	7bfb      	ldrb	r3, [r7, #15]
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USBD_CtlSendData>:
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	4613      	mov	r3, r2
 800f17c:	80fb      	strh	r3, [r7, #6]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2202      	movs	r2, #2
 800f182:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800f186:	88fa      	ldrh	r2, [r7, #6]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	61da      	str	r2, [r3, #28]
 800f18c:	88fa      	ldrh	r2, [r7, #6]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	621a      	str	r2, [r3, #32]
 800f192:	88fb      	ldrh	r3, [r7, #6]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	2100      	movs	r1, #0
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f000 fcfa 	bl	800fb92 <USBD_LL_Transmit>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <USBD_CtlContinueSendData>:
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	80fb      	strh	r3, [r7, #6]
 800f1b6:	88fb      	ldrh	r3, [r7, #6]
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fce8 	bl	800fb92 <USBD_LL_Transmit>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <USBD_CtlPrepareRx>:
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	80fb      	strh	r3, [r7, #6]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2203      	movs	r2, #3
 800f1de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800f1e2:	88fa      	ldrh	r2, [r7, #6]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800f1ea:	88fa      	ldrh	r2, [r7, #6]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800f1f2:	88fb      	ldrh	r3, [r7, #6]
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f000 fced 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800f1fe:	2300      	movs	r3, #0
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_CtlContinueRx>:
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	4613      	mov	r3, r2
 800f214:	80fb      	strh	r3, [r7, #6]
 800f216:	88fb      	ldrh	r3, [r7, #6]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	2100      	movs	r1, #0
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 fcdb 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800f222:	2300      	movs	r3, #0
 800f224:	4618      	mov	r0, r3
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <USBD_CtlSendStatus>:
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2204      	movs	r2, #4
 800f238:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800f23c:	2300      	movs	r3, #0
 800f23e:	2200      	movs	r2, #0
 800f240:	2100      	movs	r1, #0
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fca5 	bl	800fb92 <USBD_LL_Transmit>
 800f248:	2300      	movs	r3, #0
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <USBD_CtlReceiveStatus>:
 800f252:	b580      	push	{r7, lr}
 800f254:	b082      	sub	sp, #8
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2205      	movs	r2, #5
 800f25e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800f262:	2300      	movs	r3, #0
 800f264:	2200      	movs	r2, #0
 800f266:	2100      	movs	r1, #0
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fcb5 	bl	800fbd8 <USBD_LL_PrepareReceive>
 800f26e:	2300      	movs	r3, #0
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <rxCliInput>:
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b0d      	cmp	r3, #13
 800f288:	d00d      	beq.n	800f2a6 <rxCliInput+0x2e>
 800f28a:	4b09      	ldr	r3, [pc, #36]	; (800f2b0 <rxCliInput+0x38>)
 800f28c:	2201      	movs	r2, #1
 800f28e:	719a      	strb	r2, [r3, #6]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a06      	ldr	r2, [pc, #24]	; (800f2b0 <rxCliInput+0x38>)
 800f296:	6093      	str	r3, [r2, #8]
 800f298:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <rxCliInput+0x38>)
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	461a      	mov	r2, r3
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	4804      	ldr	r0, [pc, #16]	; (800f2b4 <rxCliInput+0x3c>)
 800f2a2:	f000 fd44 	bl	800fd2e <memcpy>
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000bc4 	.word	0x20000bc4
 800f2b4:	20000bd0 	.word	0x20000bd0

0800f2b8 <MX_USB_DEVICE_Init>:
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4912      	ldr	r1, [pc, #72]	; (800f308 <MX_USB_DEVICE_Init+0x50>)
 800f2c0:	4812      	ldr	r0, [pc, #72]	; (800f30c <MX_USB_DEVICE_Init+0x54>)
 800f2c2:	f7fe ff7e 	bl	800e1c2 <USBD_Init>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <MX_USB_DEVICE_Init+0x18>
 800f2cc:	f7f4 fe02 	bl	8003ed4 <Error_Handler>
 800f2d0:	490f      	ldr	r1, [pc, #60]	; (800f310 <MX_USB_DEVICE_Init+0x58>)
 800f2d2:	480e      	ldr	r0, [pc, #56]	; (800f30c <MX_USB_DEVICE_Init+0x54>)
 800f2d4:	f7fe ffa0 	bl	800e218 <USBD_RegisterClass>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <MX_USB_DEVICE_Init+0x2a>
 800f2de:	f7f4 fdf9 	bl	8003ed4 <Error_Handler>
 800f2e2:	490c      	ldr	r1, [pc, #48]	; (800f314 <MX_USB_DEVICE_Init+0x5c>)
 800f2e4:	4809      	ldr	r0, [pc, #36]	; (800f30c <MX_USB_DEVICE_Init+0x54>)
 800f2e6:	f7fe fefd 	bl	800e0e4 <USBD_CDC_RegisterInterface>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d001      	beq.n	800f2f4 <MX_USB_DEVICE_Init+0x3c>
 800f2f0:	f7f4 fdf0 	bl	8003ed4 <Error_Handler>
 800f2f4:	4805      	ldr	r0, [pc, #20]	; (800f30c <MX_USB_DEVICE_Init+0x54>)
 800f2f6:	f7fe ffa9 	bl	800e24c <USBD_Start>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <MX_USB_DEVICE_Init+0x4c>
 800f300:	f7f4 fde8 	bl	8003ed4 <Error_Handler>
 800f304:	bf00      	nop
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20000184 	.word	0x20000184
 800f30c:	20000ec8 	.word	0x20000ec8
 800f310:	20000068 	.word	0x20000068
 800f314:	20000174 	.word	0x20000174

0800f318 <CDC_Init_FS>:
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	2200      	movs	r2, #0
 800f31e:	4905      	ldr	r1, [pc, #20]	; (800f334 <CDC_Init_FS+0x1c>)
 800f320:	4805      	ldr	r0, [pc, #20]	; (800f338 <CDC_Init_FS+0x20>)
 800f322:	f7fe fef6 	bl	800e112 <USBD_CDC_SetTxBuffer>
 800f326:	4905      	ldr	r1, [pc, #20]	; (800f33c <CDC_Init_FS+0x24>)
 800f328:	4803      	ldr	r0, [pc, #12]	; (800f338 <CDC_Init_FS+0x20>)
 800f32a:	f7fe ff0c 	bl	800e146 <USBD_CDC_SetRxBuffer>
 800f32e:	2300      	movs	r3, #0
 800f330:	4618      	mov	r0, r3
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20001564 	.word	0x20001564
 800f338:	20000ec8 	.word	0x20000ec8
 800f33c:	20001164 	.word	0x20001164

0800f340 <CDC_DeInit_FS>:
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0
 800f344:	2300      	movs	r3, #0
 800f346:	4618      	mov	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <CDC_Control_FS>:
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	6039      	str	r1, [r7, #0]
 800f35a:	71fb      	strb	r3, [r7, #7]
 800f35c:	4613      	mov	r3, r2
 800f35e:	80bb      	strh	r3, [r7, #4]
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	2b23      	cmp	r3, #35	; 0x23
 800f364:	d85c      	bhi.n	800f420 <CDC_Control_FS+0xd0>
 800f366:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <CDC_Control_FS+0x1c>)
 800f368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36c:	0800f421 	.word	0x0800f421
 800f370:	0800f421 	.word	0x0800f421
 800f374:	0800f421 	.word	0x0800f421
 800f378:	0800f421 	.word	0x0800f421
 800f37c:	0800f421 	.word	0x0800f421
 800f380:	0800f421 	.word	0x0800f421
 800f384:	0800f421 	.word	0x0800f421
 800f388:	0800f421 	.word	0x0800f421
 800f38c:	0800f421 	.word	0x0800f421
 800f390:	0800f421 	.word	0x0800f421
 800f394:	0800f421 	.word	0x0800f421
 800f398:	0800f421 	.word	0x0800f421
 800f39c:	0800f421 	.word	0x0800f421
 800f3a0:	0800f421 	.word	0x0800f421
 800f3a4:	0800f421 	.word	0x0800f421
 800f3a8:	0800f421 	.word	0x0800f421
 800f3ac:	0800f421 	.word	0x0800f421
 800f3b0:	0800f421 	.word	0x0800f421
 800f3b4:	0800f421 	.word	0x0800f421
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f421 	.word	0x0800f421
 800f3c0:	0800f421 	.word	0x0800f421
 800f3c4:	0800f421 	.word	0x0800f421
 800f3c8:	0800f421 	.word	0x0800f421
 800f3cc:	0800f421 	.word	0x0800f421
 800f3d0:	0800f421 	.word	0x0800f421
 800f3d4:	0800f421 	.word	0x0800f421
 800f3d8:	0800f421 	.word	0x0800f421
 800f3dc:	0800f421 	.word	0x0800f421
 800f3e0:	0800f421 	.word	0x0800f421
 800f3e4:	0800f421 	.word	0x0800f421
 800f3e8:	0800f421 	.word	0x0800f421
 800f3ec:	0800f3fd 	.word	0x0800f3fd
 800f3f0:	0800f40f 	.word	0x0800f40f
 800f3f4:	0800f421 	.word	0x0800f421
 800f3f8:	0800f421 	.word	0x0800f421
 800f3fc:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <CDC_Control_FS+0xe0>)
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	6810      	ldr	r0, [r2, #0]
 800f402:	6018      	str	r0, [r3, #0]
 800f404:	8891      	ldrh	r1, [r2, #4]
 800f406:	7992      	ldrb	r2, [r2, #6]
 800f408:	8099      	strh	r1, [r3, #4]
 800f40a:	719a      	strb	r2, [r3, #6]
 800f40c:	e009      	b.n	800f422 <CDC_Control_FS+0xd2>
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	4a07      	ldr	r2, [pc, #28]	; (800f430 <CDC_Control_FS+0xe0>)
 800f412:	6810      	ldr	r0, [r2, #0]
 800f414:	6018      	str	r0, [r3, #0]
 800f416:	8891      	ldrh	r1, [r2, #4]
 800f418:	7992      	ldrb	r2, [r2, #6]
 800f41a:	8099      	strh	r1, [r3, #4]
 800f41c:	719a      	strb	r2, [r3, #6]
 800f41e:	e000      	b.n	800f422 <CDC_Control_FS+0xd2>
 800f420:	bf00      	nop
 800f422:	2300      	movs	r3, #0
 800f424:	4618      	mov	r0, r3
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	2000016c 	.word	0x2000016c

0800f434 <CDC_Receive_FS>:
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	6879      	ldr	r1, [r7, #4]
 800f440:	4807      	ldr	r0, [pc, #28]	; (800f460 <CDC_Receive_FS+0x2c>)
 800f442:	f7fe fe80 	bl	800e146 <USBD_CDC_SetRxBuffer>
 800f446:	4806      	ldr	r0, [pc, #24]	; (800f460 <CDC_Receive_FS+0x2c>)
 800f448:	f7fe fe91 	bl	800e16e <USBD_CDC_ReceivePacket>
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff ff12 	bl	800f278 <rxCliInput>
 800f454:	2300      	movs	r3, #0
 800f456:	4618      	mov	r0, r3
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20000ec8 	.word	0x20000ec8

0800f464 <USBD_FS_DeviceDescriptor>:
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	4603      	mov	r3, r0
 800f46c:	6039      	str	r1, [r7, #0]
 800f46e:	71fb      	strb	r3, [r7, #7]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	2212      	movs	r2, #18
 800f474:	801a      	strh	r2, [r3, #0]
 800f476:	4b03      	ldr	r3, [pc, #12]	; (800f484 <USBD_FS_DeviceDescriptor+0x20>)
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	200001a0 	.word	0x200001a0

0800f488 <USBD_FS_LangIDStrDescriptor>:
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	6039      	str	r1, [r7, #0]
 800f492:	71fb      	strb	r3, [r7, #7]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2204      	movs	r2, #4
 800f498:	801a      	strh	r2, [r3, #0]
 800f49a:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <USBD_FS_LangIDStrDescriptor+0x20>)
 800f49c:	4618      	mov	r0, r3
 800f49e:	370c      	adds	r7, #12
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	200001b4 	.word	0x200001b4

0800f4ac <USBD_FS_ProductStrDescriptor>:
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	6039      	str	r1, [r7, #0]
 800f4b6:	71fb      	strb	r3, [r7, #7]
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d105      	bne.n	800f4ca <USBD_FS_ProductStrDescriptor+0x1e>
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	4907      	ldr	r1, [pc, #28]	; (800f4e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4c2:	4808      	ldr	r0, [pc, #32]	; (800f4e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4c4:	f7ff fdfa 	bl	800f0bc <USBD_GetString>
 800f4c8:	e004      	b.n	800f4d4 <USBD_FS_ProductStrDescriptor+0x28>
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	4904      	ldr	r1, [pc, #16]	; (800f4e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4ce:	4805      	ldr	r0, [pc, #20]	; (800f4e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4d0:	f7ff fdf4 	bl	800f0bc <USBD_GetString>
 800f4d4:	4b02      	ldr	r3, [pc, #8]	; (800f4e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	20001964 	.word	0x20001964
 800f4e4:	0800ff44 	.word	0x0800ff44

0800f4e8 <USBD_FS_ManufacturerStrDescriptor>:
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	6039      	str	r1, [r7, #0]
 800f4f2:	71fb      	strb	r3, [r7, #7]
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	4904      	ldr	r1, [pc, #16]	; (800f508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f4f8:	4804      	ldr	r0, [pc, #16]	; (800f50c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f4fa:	f7ff fddf 	bl	800f0bc <USBD_GetString>
 800f4fe:	4b02      	ldr	r3, [pc, #8]	; (800f508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f500:	4618      	mov	r0, r3
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	20001964 	.word	0x20001964
 800f50c:	0800ff5c 	.word	0x0800ff5c

0800f510 <USBD_FS_SerialStrDescriptor>:
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	6039      	str	r1, [r7, #0]
 800f51a:	71fb      	strb	r3, [r7, #7]
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	221a      	movs	r2, #26
 800f520:	801a      	strh	r2, [r3, #0]
 800f522:	f000 f843 	bl	800f5ac <Get_SerialNum>
 800f526:	4b02      	ldr	r3, [pc, #8]	; (800f530 <USBD_FS_SerialStrDescriptor+0x20>)
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	200001b8 	.word	0x200001b8

0800f534 <USBD_FS_ConfigStrDescriptor>:
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	4603      	mov	r3, r0
 800f53c:	6039      	str	r1, [r7, #0]
 800f53e:	71fb      	strb	r3, [r7, #7]
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d105      	bne.n	800f552 <USBD_FS_ConfigStrDescriptor+0x1e>
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	4907      	ldr	r1, [pc, #28]	; (800f568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f54a:	4808      	ldr	r0, [pc, #32]	; (800f56c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f54c:	f7ff fdb6 	bl	800f0bc <USBD_GetString>
 800f550:	e004      	b.n	800f55c <USBD_FS_ConfigStrDescriptor+0x28>
 800f552:	683a      	ldr	r2, [r7, #0]
 800f554:	4904      	ldr	r1, [pc, #16]	; (800f568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f556:	4805      	ldr	r0, [pc, #20]	; (800f56c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f558:	f7ff fdb0 	bl	800f0bc <USBD_GetString>
 800f55c:	4b02      	ldr	r3, [pc, #8]	; (800f568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	20001964 	.word	0x20001964
 800f56c:	0800ff70 	.word	0x0800ff70

0800f570 <USBD_FS_InterfaceStrDescriptor>:
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	6039      	str	r1, [r7, #0]
 800f57a:	71fb      	strb	r3, [r7, #7]
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d105      	bne.n	800f58e <USBD_FS_InterfaceStrDescriptor+0x1e>
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	4907      	ldr	r1, [pc, #28]	; (800f5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f586:	4808      	ldr	r0, [pc, #32]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f588:	f7ff fd98 	bl	800f0bc <USBD_GetString>
 800f58c:	e004      	b.n	800f598 <USBD_FS_InterfaceStrDescriptor+0x28>
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	4904      	ldr	r1, [pc, #16]	; (800f5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f592:	4805      	ldr	r0, [pc, #20]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f594:	f7ff fd92 	bl	800f0bc <USBD_GetString>
 800f598:	4b02      	ldr	r3, [pc, #8]	; (800f5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	20001964 	.word	0x20001964
 800f5a8:	0800ff7c 	.word	0x0800ff7c

0800f5ac <Get_SerialNum>:
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	4b0f      	ldr	r3, [pc, #60]	; (800f5f0 <Get_SerialNum+0x44>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	; (800f5f4 <Get_SerialNum+0x48>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	60bb      	str	r3, [r7, #8]
 800f5be:	4b0e      	ldr	r3, [pc, #56]	; (800f5f8 <Get_SerialNum+0x4c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	607b      	str	r3, [r7, #4]
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d009      	beq.n	800f5e6 <Get_SerialNum+0x3a>
 800f5d2:	2208      	movs	r2, #8
 800f5d4:	4909      	ldr	r1, [pc, #36]	; (800f5fc <Get_SerialNum+0x50>)
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f000 f814 	bl	800f604 <IntToUnicode>
 800f5dc:	2204      	movs	r2, #4
 800f5de:	4908      	ldr	r1, [pc, #32]	; (800f600 <Get_SerialNum+0x54>)
 800f5e0:	68b8      	ldr	r0, [r7, #8]
 800f5e2:	f000 f80f 	bl	800f604 <IntToUnicode>
 800f5e6:	bf00      	nop
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	1fff7a10 	.word	0x1fff7a10
 800f5f4:	1fff7a14 	.word	0x1fff7a14
 800f5f8:	1fff7a18 	.word	0x1fff7a18
 800f5fc:	200001ba 	.word	0x200001ba
 800f600:	200001ca 	.word	0x200001ca

0800f604 <IntToUnicode>:
 800f604:	b480      	push	{r7}
 800f606:	b087      	sub	sp, #28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	4613      	mov	r3, r2
 800f610:	71fb      	strb	r3, [r7, #7]
 800f612:	2300      	movs	r3, #0
 800f614:	75fb      	strb	r3, [r7, #23]
 800f616:	2300      	movs	r3, #0
 800f618:	75fb      	strb	r3, [r7, #23]
 800f61a:	e027      	b.n	800f66c <IntToUnicode+0x68>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	0f1b      	lsrs	r3, r3, #28
 800f620:	2b09      	cmp	r3, #9
 800f622:	d80b      	bhi.n	800f63c <IntToUnicode+0x38>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	0f1b      	lsrs	r3, r3, #28
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	4619      	mov	r1, r3
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	440b      	add	r3, r1
 800f634:	3230      	adds	r2, #48	; 0x30
 800f636:	b2d2      	uxtb	r2, r2
 800f638:	701a      	strb	r2, [r3, #0]
 800f63a:	e00a      	b.n	800f652 <IntToUnicode+0x4e>
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	0f1b      	lsrs	r3, r3, #28
 800f640:	b2da      	uxtb	r2, r3
 800f642:	7dfb      	ldrb	r3, [r7, #23]
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4619      	mov	r1, r3
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	440b      	add	r3, r1
 800f64c:	3237      	adds	r2, #55	; 0x37
 800f64e:	b2d2      	uxtb	r2, r2
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	011b      	lsls	r3, r3, #4
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	3301      	adds	r3, #1
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4413      	add	r3, r2
 800f662:	2200      	movs	r2, #0
 800f664:	701a      	strb	r2, [r3, #0]
 800f666:	7dfb      	ldrb	r3, [r7, #23]
 800f668:	3301      	adds	r3, #1
 800f66a:	75fb      	strb	r3, [r7, #23]
 800f66c:	7dfa      	ldrb	r2, [r7, #23]
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	429a      	cmp	r2, r3
 800f672:	d3d3      	bcc.n	800f61c <IntToUnicode+0x18>
 800f674:	bf00      	nop
 800f676:	371c      	adds	r7, #28
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <HAL_PCD_MspInit>:
 800f680:	b580      	push	{r7, lr}
 800f682:	b08a      	sub	sp, #40	; 0x28
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	f107 0314 	add.w	r3, r7, #20
 800f68c:	2200      	movs	r2, #0
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	605a      	str	r2, [r3, #4]
 800f692:	609a      	str	r2, [r3, #8]
 800f694:	60da      	str	r2, [r3, #12]
 800f696:	611a      	str	r2, [r3, #16]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6a0:	d152      	bne.n	800f748 <HAL_PCD_MspInit+0xc8>
 800f6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6a6:	617b      	str	r3, [r7, #20]
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	61bb      	str	r3, [r7, #24]
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	623b      	str	r3, [r7, #32]
 800f6b4:	f107 0314 	add.w	r3, r7, #20
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4825      	ldr	r0, [pc, #148]	; (800f750 <HAL_PCD_MspInit+0xd0>)
 800f6bc:	f7f4 ffc8 	bl	8004650 <HAL_GPIO_Init>
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f6c6:	4822      	ldr	r0, [pc, #136]	; (800f750 <HAL_PCD_MspInit+0xd0>)
 800f6c8:	f7f5 f95c 	bl	8004984 <HAL_GPIO_WritePin>
 800f6cc:	2005      	movs	r0, #5
 800f6ce:	f7f4 fe69 	bl	80043a4 <HAL_Delay>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	613b      	str	r3, [r7, #16]
 800f6d6:	4b1f      	ldr	r3, [pc, #124]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6da:	4a1e      	ldr	r2, [pc, #120]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f6dc:	f043 0301 	orr.w	r3, r3, #1
 800f6e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f6e2:	4b1c      	ldr	r3, [pc, #112]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	613b      	str	r3, [r7, #16]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6f2:	617b      	str	r3, [r7, #20]
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	61bb      	str	r3, [r7, #24]
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	61fb      	str	r3, [r7, #28]
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	623b      	str	r3, [r7, #32]
 800f700:	230a      	movs	r3, #10
 800f702:	627b      	str	r3, [r7, #36]	; 0x24
 800f704:	f107 0314 	add.w	r3, r7, #20
 800f708:	4619      	mov	r1, r3
 800f70a:	4811      	ldr	r0, [pc, #68]	; (800f750 <HAL_PCD_MspInit+0xd0>)
 800f70c:	f7f4 ffa0 	bl	8004650 <HAL_GPIO_Init>
 800f710:	4b10      	ldr	r3, [pc, #64]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f714:	4a0f      	ldr	r2, [pc, #60]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f71a:	6353      	str	r3, [r2, #52]	; 0x34
 800f71c:	2300      	movs	r3, #0
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f724:	4a0b      	ldr	r2, [pc, #44]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f72a:	6453      	str	r3, [r2, #68]	; 0x44
 800f72c:	4b09      	ldr	r3, [pc, #36]	; (800f754 <HAL_PCD_MspInit+0xd4>)
 800f72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f734:	60fb      	str	r3, [r7, #12]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	2100      	movs	r1, #0
 800f73c:	2043      	movs	r0, #67	; 0x43
 800f73e:	f7f4 ff2e 	bl	800459e <HAL_NVIC_SetPriority>
 800f742:	2043      	movs	r0, #67	; 0x43
 800f744:	f7f4 ff47 	bl	80045d6 <HAL_NVIC_EnableIRQ>
 800f748:	bf00      	nop
 800f74a:	3728      	adds	r7, #40	; 0x28
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	40020000 	.word	0x40020000
 800f754:	40023800 	.word	0x40023800

0800f758 <HAL_PCD_SetupStageCallback>:
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f76c:	4619      	mov	r1, r3
 800f76e:	4610      	mov	r0, r2
 800f770:	f7fe fdb5 	bl	800e2de <USBD_LL_SetupStage>
 800f774:	bf00      	nop
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <HAL_PCD_DataOutStageCallback>:
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	70fb      	strb	r3, [r7, #3]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f78e:	78fa      	ldrb	r2, [r7, #3]
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	4613      	mov	r3, r2
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	1a9b      	subs	r3, r3, r2
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	440b      	add	r3, r1
 800f79c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	f7fe fde5 	bl	800e374 <USBD_LL_DataOutStage>
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <HAL_PCD_DataInStageCallback>:
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b082      	sub	sp, #8
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	70fb      	strb	r3, [r7, #3]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f7c4:	78fa      	ldrb	r2, [r7, #3]
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	00db      	lsls	r3, r3, #3
 800f7cc:	1a9b      	subs	r3, r3, r2
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	440b      	add	r3, r1
 800f7d2:	3348      	adds	r3, #72	; 0x48
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	78fb      	ldrb	r3, [r7, #3]
 800f7d8:	4619      	mov	r1, r3
 800f7da:	f7fe fe3c 	bl	800e456 <USBD_LL_DataInStage>
 800f7de:	bf00      	nop
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <HAL_PCD_SOFCallback>:
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe ff4a 	bl	800e68e <USBD_LL_SOF>
 800f7fa:	bf00      	nop
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <HAL_PCD_ResetCallback>:
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	2301      	movs	r3, #1
 800f80c:	73fb      	strb	r3, [r7, #15]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d001      	beq.n	800f81a <HAL_PCD_ResetCallback+0x18>
 800f816:	f7f4 fb5d 	bl	8003ed4 <Error_Handler>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f820:	7bfa      	ldrb	r2, [r7, #15]
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f7fe fefc 	bl	800e622 <USBD_LL_SetSpeed>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe feb5 	bl	800e5a0 <USBD_LL_Reset>
 800f836:	bf00      	nop
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
	...

0800f840 <HAL_PCD_SuspendCallback>:
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fe fef7 	bl	800e642 <USBD_LL_Suspend>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	6812      	ldr	r2, [r2, #0]
 800f862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f866:	f043 0301 	orr.w	r3, r3, #1
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6a1b      	ldr	r3, [r3, #32]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d005      	beq.n	800f880 <HAL_PCD_SuspendCallback+0x40>
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <HAL_PCD_SuspendCallback+0x48>)
 800f876:	691b      	ldr	r3, [r3, #16]
 800f878:	4a03      	ldr	r2, [pc, #12]	; (800f888 <HAL_PCD_SuspendCallback+0x48>)
 800f87a:	f043 0306 	orr.w	r3, r3, #6
 800f87e:	6113      	str	r3, [r2, #16]
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	e000ed00 	.word	0xe000ed00

0800f88c <HAL_PCD_ResumeCallback>:
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fe fee6 	bl	800e66c <USBD_LL_Resume>
 800f8a0:	bf00      	nop
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <HAL_PCD_ISOOUTIncompleteCallback>:
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	70fb      	strb	r3, [r7, #3]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8ba:	78fa      	ldrb	r2, [r7, #3]
 800f8bc:	4611      	mov	r1, r2
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe ff0c 	bl	800e6dc <USBD_LL_IsoOUTIncomplete>
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <HAL_PCD_ISOINIncompleteCallback>:
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	70fb      	strb	r3, [r7, #3]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8de:	78fa      	ldrb	r2, [r7, #3]
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe feed 	bl	800e6c2 <USBD_LL_IsoINIncomplete>
 800f8e8:	bf00      	nop
 800f8ea:	3708      	adds	r7, #8
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <HAL_PCD_ConnectCallback>:
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fe fef9 	bl	800e6f6 <USBD_LL_DevConnected>
 800f904:	bf00      	nop
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <HAL_PCD_DisconnectCallback>:
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe fef6 	bl	800e70c <USBD_LL_DevDisconnected>
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_LL_Init>:
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d13c      	bne.n	800f9b2 <USBD_LL_Init+0x8a>
 800f938:	4a20      	ldr	r2, [pc, #128]	; (800f9bc <USBD_LL_Init+0x94>)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a1e      	ldr	r2, [pc, #120]	; (800f9bc <USBD_LL_Init+0x94>)
 800f944:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800f948:	4b1c      	ldr	r3, [pc, #112]	; (800f9bc <USBD_LL_Init+0x94>)
 800f94a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	4b1a      	ldr	r3, [pc, #104]	; (800f9bc <USBD_LL_Init+0x94>)
 800f952:	2204      	movs	r2, #4
 800f954:	605a      	str	r2, [r3, #4]
 800f956:	4b19      	ldr	r3, [pc, #100]	; (800f9bc <USBD_LL_Init+0x94>)
 800f958:	2202      	movs	r2, #2
 800f95a:	60da      	str	r2, [r3, #12]
 800f95c:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <USBD_LL_Init+0x94>)
 800f95e:	2200      	movs	r2, #0
 800f960:	611a      	str	r2, [r3, #16]
 800f962:	4b16      	ldr	r3, [pc, #88]	; (800f9bc <USBD_LL_Init+0x94>)
 800f964:	2202      	movs	r2, #2
 800f966:	619a      	str	r2, [r3, #24]
 800f968:	4b14      	ldr	r3, [pc, #80]	; (800f9bc <USBD_LL_Init+0x94>)
 800f96a:	2200      	movs	r2, #0
 800f96c:	61da      	str	r2, [r3, #28]
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <USBD_LL_Init+0x94>)
 800f970:	2200      	movs	r2, #0
 800f972:	621a      	str	r2, [r3, #32]
 800f974:	4b11      	ldr	r3, [pc, #68]	; (800f9bc <USBD_LL_Init+0x94>)
 800f976:	2200      	movs	r2, #0
 800f978:	625a      	str	r2, [r3, #36]	; 0x24
 800f97a:	4b10      	ldr	r3, [pc, #64]	; (800f9bc <USBD_LL_Init+0x94>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f980:	4b0e      	ldr	r3, [pc, #56]	; (800f9bc <USBD_LL_Init+0x94>)
 800f982:	2200      	movs	r2, #0
 800f984:	631a      	str	r2, [r3, #48]	; 0x30
 800f986:	480d      	ldr	r0, [pc, #52]	; (800f9bc <USBD_LL_Init+0x94>)
 800f988:	f7f5 fe1a 	bl	80055c0 <HAL_PCD_Init>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <USBD_LL_Init+0x6e>
 800f992:	f7f4 fa9f 	bl	8003ed4 <Error_Handler>
 800f996:	2180      	movs	r1, #128	; 0x80
 800f998:	4808      	ldr	r0, [pc, #32]	; (800f9bc <USBD_LL_Init+0x94>)
 800f99a:	f7f6 ff7e 	bl	800689a <HAL_PCDEx_SetRxFiFo>
 800f99e:	2240      	movs	r2, #64	; 0x40
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	4806      	ldr	r0, [pc, #24]	; (800f9bc <USBD_LL_Init+0x94>)
 800f9a4:	f7f6 ff32 	bl	800680c <HAL_PCDEx_SetTxFiFo>
 800f9a8:	2280      	movs	r2, #128	; 0x80
 800f9aa:	2101      	movs	r1, #1
 800f9ac:	4803      	ldr	r0, [pc, #12]	; (800f9bc <USBD_LL_Init+0x94>)
 800f9ae:	f7f6 ff2d 	bl	800680c <HAL_PCDEx_SetTxFiFo>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	20001b64 	.word	0x20001b64

0800f9c0 <USBD_LL_Start>:
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73fb      	strb	r3, [r7, #15]
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73bb      	strb	r3, [r7, #14]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7f5 ff0f 	bl	80057fa <HAL_PCD_Start>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	73fb      	strb	r3, [r7, #15]
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 f92e 	bl	800fc44 <USBD_Get_USB_Status>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73bb      	strb	r3, [r7, #14]
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <USBD_LL_OpenEP>:
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	4608      	mov	r0, r1
 800fa00:	4611      	mov	r1, r2
 800fa02:	461a      	mov	r2, r3
 800fa04:	4603      	mov	r3, r0
 800fa06:	70fb      	strb	r3, [r7, #3]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	70bb      	strb	r3, [r7, #2]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	803b      	strh	r3, [r7, #0]
 800fa10:	2300      	movs	r3, #0
 800fa12:	73fb      	strb	r3, [r7, #15]
 800fa14:	2300      	movs	r3, #0
 800fa16:	73bb      	strb	r3, [r7, #14]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800fa1e:	78bb      	ldrb	r3, [r7, #2]
 800fa20:	883a      	ldrh	r2, [r7, #0]
 800fa22:	78f9      	ldrb	r1, [r7, #3]
 800fa24:	f7f6 fae4 	bl	8005ff0 <HAL_PCD_EP_Open>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f908 	bl	800fc44 <USBD_Get_USB_Status>
 800fa34:	4603      	mov	r3, r0
 800fa36:	73bb      	strb	r3, [r7, #14]
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <USBD_LL_CloseEP>:
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	70fb      	strb	r3, [r7, #3]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	73fb      	strb	r3, [r7, #15]
 800fa52:	2300      	movs	r3, #0
 800fa54:	73bb      	strb	r3, [r7, #14]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fa5c:	78fa      	ldrb	r2, [r7, #3]
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f6 fb2d 	bl	80060c0 <HAL_PCD_EP_Close>
 800fa66:	4603      	mov	r3, r0
 800fa68:	73fb      	strb	r3, [r7, #15]
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f8e9 	bl	800fc44 <USBD_Get_USB_Status>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73bb      	strb	r3, [r7, #14]
 800fa76:	7bbb      	ldrb	r3, [r7, #14]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBD_LL_StallEP>:
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	70fb      	strb	r3, [r7, #3]
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	73fb      	strb	r3, [r7, #15]
 800fa90:	2300      	movs	r3, #0
 800fa92:	73bb      	strb	r3, [r7, #14]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fa9a:	78fa      	ldrb	r2, [r7, #3]
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f6 fc05 	bl	80062ae <HAL_PCD_EP_SetStall>
 800faa4:	4603      	mov	r3, r0
 800faa6:	73fb      	strb	r3, [r7, #15]
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	4618      	mov	r0, r3
 800faac:	f000 f8ca 	bl	800fc44 <USBD_Get_USB_Status>
 800fab0:	4603      	mov	r3, r0
 800fab2:	73bb      	strb	r3, [r7, #14]
 800fab4:	7bbb      	ldrb	r3, [r7, #14]
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <USBD_LL_ClearStallEP>:
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b084      	sub	sp, #16
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	460b      	mov	r3, r1
 800fac8:	70fb      	strb	r3, [r7, #3]
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]
 800face:	2300      	movs	r3, #0
 800fad0:	73bb      	strb	r3, [r7, #14]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fad8:	78fa      	ldrb	r2, [r7, #3]
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f6 fc4a 	bl	8006376 <HAL_PCD_EP_ClrStall>
 800fae2:	4603      	mov	r3, r0
 800fae4:	73fb      	strb	r3, [r7, #15]
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f8ab 	bl	800fc44 <USBD_Get_USB_Status>
 800faee:	4603      	mov	r3, r0
 800faf0:	73bb      	strb	r3, [r7, #14]
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <USBD_LL_IsStallEP>:
 800fafc:	b480      	push	{r7}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	da0b      	bge.n	800fb30 <USBD_LL_IsStallEP+0x34>
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb1e:	68f9      	ldr	r1, [r7, #12]
 800fb20:	4613      	mov	r3, r2
 800fb22:	00db      	lsls	r3, r3, #3
 800fb24:	1a9b      	subs	r3, r3, r2
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	440b      	add	r3, r1
 800fb2a:	333e      	adds	r3, #62	; 0x3e
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	e00b      	b.n	800fb48 <USBD_LL_IsStallEP+0x4c>
 800fb30:	78fb      	ldrb	r3, [r7, #3]
 800fb32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb36:	68f9      	ldr	r1, [r7, #12]
 800fb38:	4613      	mov	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	1a9b      	subs	r3, r3, r2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	440b      	add	r3, r1
 800fb42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3714      	adds	r7, #20
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <USBD_LL_SetUSBAddress>:
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	70fb      	strb	r3, [r7, #3]
 800fb60:	2300      	movs	r3, #0
 800fb62:	73fb      	strb	r3, [r7, #15]
 800fb64:	2300      	movs	r3, #0
 800fb66:	73bb      	strb	r3, [r7, #14]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fb6e:	78fa      	ldrb	r2, [r7, #3]
 800fb70:	4611      	mov	r1, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f6 fa17 	bl	8005fa6 <HAL_PCD_SetAddress>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	73fb      	strb	r3, [r7, #15]
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 f860 	bl	800fc44 <USBD_Get_USB_Status>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73bb      	strb	r3, [r7, #14]
 800fb88:	7bbb      	ldrb	r3, [r7, #14]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <USBD_LL_Transmit>:
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	460b      	mov	r3, r1
 800fba0:	72fb      	strb	r3, [r7, #11]
 800fba2:	4613      	mov	r3, r2
 800fba4:	813b      	strh	r3, [r7, #8]
 800fba6:	2300      	movs	r3, #0
 800fba8:	75fb      	strb	r3, [r7, #23]
 800fbaa:	2300      	movs	r3, #0
 800fbac:	75bb      	strb	r3, [r7, #22]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800fbb4:	893b      	ldrh	r3, [r7, #8]
 800fbb6:	7af9      	ldrb	r1, [r7, #11]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	f7f6 fb2e 	bl	800621a <HAL_PCD_EP_Transmit>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	75fb      	strb	r3, [r7, #23]
 800fbc2:	7dfb      	ldrb	r3, [r7, #23]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f000 f83d 	bl	800fc44 <USBD_Get_USB_Status>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	75bb      	strb	r3, [r7, #22]
 800fbce:	7dbb      	ldrb	r3, [r7, #22]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3718      	adds	r7, #24
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBD_LL_PrepareReceive>:
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	607a      	str	r2, [r7, #4]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	72fb      	strb	r3, [r7, #11]
 800fbe8:	4613      	mov	r3, r2
 800fbea:	813b      	strh	r3, [r7, #8]
 800fbec:	2300      	movs	r3, #0
 800fbee:	75fb      	strb	r3, [r7, #23]
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	75bb      	strb	r3, [r7, #22]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800fbfa:	893b      	ldrh	r3, [r7, #8]
 800fbfc:	7af9      	ldrb	r1, [r7, #11]
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	f7f6 faa8 	bl	8006154 <HAL_PCD_EP_Receive>
 800fc04:	4603      	mov	r3, r0
 800fc06:	75fb      	strb	r3, [r7, #23]
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 f81a 	bl	800fc44 <USBD_Get_USB_Status>
 800fc10:	4603      	mov	r3, r0
 800fc12:	75bb      	strb	r3, [r7, #22]
 800fc14:	7dbb      	ldrb	r3, [r7, #22]
 800fc16:	4618      	mov	r0, r3
 800fc18:	3718      	adds	r7, #24
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <USBD_LL_GetRxDataSize>:
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b082      	sub	sp, #8
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	460b      	mov	r3, r1
 800fc28:	70fb      	strb	r3, [r7, #3]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fc30:	78fa      	ldrb	r2, [r7, #3]
 800fc32:	4611      	mov	r1, r2
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7f6 fad8 	bl	80061ea <HAL_PCD_EP_GetRxCount>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <USBD_Get_USB_Status>:
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73fb      	strb	r3, [r7, #15]
 800fc52:	79fb      	ldrb	r3, [r7, #7]
 800fc54:	2b03      	cmp	r3, #3
 800fc56:	d817      	bhi.n	800fc88 <USBD_Get_USB_Status+0x44>
 800fc58:	a201      	add	r2, pc, #4	; (adr r2, 800fc60 <USBD_Get_USB_Status+0x1c>)
 800fc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc5e:	bf00      	nop
 800fc60:	0800fc71 	.word	0x0800fc71
 800fc64:	0800fc77 	.word	0x0800fc77
 800fc68:	0800fc7d 	.word	0x0800fc7d
 800fc6c:	0800fc83 	.word	0x0800fc83
 800fc70:	2300      	movs	r3, #0
 800fc72:	73fb      	strb	r3, [r7, #15]
 800fc74:	e00b      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
 800fc76:	2302      	movs	r3, #2
 800fc78:	73fb      	strb	r3, [r7, #15]
 800fc7a:	e008      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	73fb      	strb	r3, [r7, #15]
 800fc80:	e005      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
 800fc82:	2302      	movs	r3, #2
 800fc84:	73fb      	strb	r3, [r7, #15]
 800fc86:	e002      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
 800fc88:	2302      	movs	r3, #2
 800fc8a:	73fb      	strb	r3, [r7, #15]
 800fc8c:	bf00      	nop
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
 800fc90:	4618      	mov	r0, r3
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <__errno>:
 800fc9c:	4b01      	ldr	r3, [pc, #4]	; (800fca4 <__errno+0x8>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	200001d4 	.word	0x200001d4

0800fca8 <__libc_init_array>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	4e0d      	ldr	r6, [pc, #52]	; (800fce0 <__libc_init_array+0x38>)
 800fcac:	4c0d      	ldr	r4, [pc, #52]	; (800fce4 <__libc_init_array+0x3c>)
 800fcae:	1ba4      	subs	r4, r4, r6
 800fcb0:	10a4      	asrs	r4, r4, #2
 800fcb2:	2500      	movs	r5, #0
 800fcb4:	42a5      	cmp	r5, r4
 800fcb6:	d109      	bne.n	800fccc <__libc_init_array+0x24>
 800fcb8:	4e0b      	ldr	r6, [pc, #44]	; (800fce8 <__libc_init_array+0x40>)
 800fcba:	4c0c      	ldr	r4, [pc, #48]	; (800fcec <__libc_init_array+0x44>)
 800fcbc:	f000 f904 	bl	800fec8 <_init>
 800fcc0:	1ba4      	subs	r4, r4, r6
 800fcc2:	10a4      	asrs	r4, r4, #2
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	42a5      	cmp	r5, r4
 800fcc8:	d105      	bne.n	800fcd6 <__libc_init_array+0x2e>
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcd0:	4798      	blx	r3
 800fcd2:	3501      	adds	r5, #1
 800fcd4:	e7ee      	b.n	800fcb4 <__libc_init_array+0xc>
 800fcd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcda:	4798      	blx	r3
 800fcdc:	3501      	adds	r5, #1
 800fcde:	e7f2      	b.n	800fcc6 <__libc_init_array+0x1e>
 800fce0:	08013bc0 	.word	0x08013bc0
 800fce4:	08013bc0 	.word	0x08013bc0
 800fce8:	08013bc0 	.word	0x08013bc0
 800fcec:	08013bc4 	.word	0x08013bc4

0800fcf0 <malloc>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <malloc+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f000 b87b 	b.w	800fdf0 <_malloc_r>
 800fcfa:	bf00      	nop
 800fcfc:	200001d4 	.word	0x200001d4

0800fd00 <free>:
 800fd00:	4b02      	ldr	r3, [pc, #8]	; (800fd0c <free+0xc>)
 800fd02:	4601      	mov	r1, r0
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	f000 b825 	b.w	800fd54 <_free_r>
 800fd0a:	bf00      	nop
 800fd0c:	200001d4 	.word	0x200001d4

0800fd10 <memcmp>:
 800fd10:	b530      	push	{r4, r5, lr}
 800fd12:	2400      	movs	r4, #0
 800fd14:	42a2      	cmp	r2, r4
 800fd16:	d101      	bne.n	800fd1c <memcmp+0xc>
 800fd18:	2000      	movs	r0, #0
 800fd1a:	e007      	b.n	800fd2c <memcmp+0x1c>
 800fd1c:	5d03      	ldrb	r3, [r0, r4]
 800fd1e:	3401      	adds	r4, #1
 800fd20:	190d      	adds	r5, r1, r4
 800fd22:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800fd26:	42ab      	cmp	r3, r5
 800fd28:	d0f4      	beq.n	800fd14 <memcmp+0x4>
 800fd2a:	1b58      	subs	r0, r3, r5
 800fd2c:	bd30      	pop	{r4, r5, pc}

0800fd2e <memcpy>:
 800fd2e:	b510      	push	{r4, lr}
 800fd30:	1e43      	subs	r3, r0, #1
 800fd32:	440a      	add	r2, r1
 800fd34:	4291      	cmp	r1, r2
 800fd36:	d100      	bne.n	800fd3a <memcpy+0xc>
 800fd38:	bd10      	pop	{r4, pc}
 800fd3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd42:	e7f7      	b.n	800fd34 <memcpy+0x6>

0800fd44 <memset>:
 800fd44:	4402      	add	r2, r0
 800fd46:	4603      	mov	r3, r0
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d100      	bne.n	800fd4e <memset+0xa>
 800fd4c:	4770      	bx	lr
 800fd4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fd52:	e7f9      	b.n	800fd48 <memset+0x4>

0800fd54 <_free_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4605      	mov	r5, r0
 800fd58:	2900      	cmp	r1, #0
 800fd5a:	d045      	beq.n	800fde8 <_free_r+0x94>
 800fd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd60:	1f0c      	subs	r4, r1, #4
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	bfb8      	it	lt
 800fd66:	18e4      	addlt	r4, r4, r3
 800fd68:	f000 f8ac 	bl	800fec4 <__malloc_lock>
 800fd6c:	4a1f      	ldr	r2, [pc, #124]	; (800fdec <_free_r+0x98>)
 800fd6e:	6813      	ldr	r3, [r2, #0]
 800fd70:	4610      	mov	r0, r2
 800fd72:	b933      	cbnz	r3, 800fd82 <_free_r+0x2e>
 800fd74:	6063      	str	r3, [r4, #4]
 800fd76:	6014      	str	r4, [r2, #0]
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd7e:	f000 b8a2 	b.w	800fec6 <__malloc_unlock>
 800fd82:	42a3      	cmp	r3, r4
 800fd84:	d90c      	bls.n	800fda0 <_free_r+0x4c>
 800fd86:	6821      	ldr	r1, [r4, #0]
 800fd88:	1862      	adds	r2, r4, r1
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	bf04      	itt	eq
 800fd8e:	681a      	ldreq	r2, [r3, #0]
 800fd90:	685b      	ldreq	r3, [r3, #4]
 800fd92:	6063      	str	r3, [r4, #4]
 800fd94:	bf04      	itt	eq
 800fd96:	1852      	addeq	r2, r2, r1
 800fd98:	6022      	streq	r2, [r4, #0]
 800fd9a:	6004      	str	r4, [r0, #0]
 800fd9c:	e7ec      	b.n	800fd78 <_free_r+0x24>
 800fd9e:	4613      	mov	r3, r2
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	b10a      	cbz	r2, 800fda8 <_free_r+0x54>
 800fda4:	42a2      	cmp	r2, r4
 800fda6:	d9fa      	bls.n	800fd9e <_free_r+0x4a>
 800fda8:	6819      	ldr	r1, [r3, #0]
 800fdaa:	1858      	adds	r0, r3, r1
 800fdac:	42a0      	cmp	r0, r4
 800fdae:	d10b      	bne.n	800fdc8 <_free_r+0x74>
 800fdb0:	6820      	ldr	r0, [r4, #0]
 800fdb2:	4401      	add	r1, r0
 800fdb4:	1858      	adds	r0, r3, r1
 800fdb6:	4282      	cmp	r2, r0
 800fdb8:	6019      	str	r1, [r3, #0]
 800fdba:	d1dd      	bne.n	800fd78 <_free_r+0x24>
 800fdbc:	6810      	ldr	r0, [r2, #0]
 800fdbe:	6852      	ldr	r2, [r2, #4]
 800fdc0:	605a      	str	r2, [r3, #4]
 800fdc2:	4401      	add	r1, r0
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	e7d7      	b.n	800fd78 <_free_r+0x24>
 800fdc8:	d902      	bls.n	800fdd0 <_free_r+0x7c>
 800fdca:	230c      	movs	r3, #12
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	e7d3      	b.n	800fd78 <_free_r+0x24>
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	1821      	adds	r1, r4, r0
 800fdd4:	428a      	cmp	r2, r1
 800fdd6:	bf04      	itt	eq
 800fdd8:	6811      	ldreq	r1, [r2, #0]
 800fdda:	6852      	ldreq	r2, [r2, #4]
 800fddc:	6062      	str	r2, [r4, #4]
 800fdde:	bf04      	itt	eq
 800fde0:	1809      	addeq	r1, r1, r0
 800fde2:	6021      	streq	r1, [r4, #0]
 800fde4:	605c      	str	r4, [r3, #4]
 800fde6:	e7c7      	b.n	800fd78 <_free_r+0x24>
 800fde8:	bd38      	pop	{r3, r4, r5, pc}
 800fdea:	bf00      	nop
 800fdec:	20000c34 	.word	0x20000c34

0800fdf0 <_malloc_r>:
 800fdf0:	b570      	push	{r4, r5, r6, lr}
 800fdf2:	1ccd      	adds	r5, r1, #3
 800fdf4:	f025 0503 	bic.w	r5, r5, #3
 800fdf8:	3508      	adds	r5, #8
 800fdfa:	2d0c      	cmp	r5, #12
 800fdfc:	bf38      	it	cc
 800fdfe:	250c      	movcc	r5, #12
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	4606      	mov	r6, r0
 800fe04:	db01      	blt.n	800fe0a <_malloc_r+0x1a>
 800fe06:	42a9      	cmp	r1, r5
 800fe08:	d903      	bls.n	800fe12 <_malloc_r+0x22>
 800fe0a:	230c      	movs	r3, #12
 800fe0c:	6033      	str	r3, [r6, #0]
 800fe0e:	2000      	movs	r0, #0
 800fe10:	bd70      	pop	{r4, r5, r6, pc}
 800fe12:	f000 f857 	bl	800fec4 <__malloc_lock>
 800fe16:	4a21      	ldr	r2, [pc, #132]	; (800fe9c <_malloc_r+0xac>)
 800fe18:	6814      	ldr	r4, [r2, #0]
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	b991      	cbnz	r1, 800fe44 <_malloc_r+0x54>
 800fe1e:	4c20      	ldr	r4, [pc, #128]	; (800fea0 <_malloc_r+0xb0>)
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	b91b      	cbnz	r3, 800fe2c <_malloc_r+0x3c>
 800fe24:	4630      	mov	r0, r6
 800fe26:	f000 f83d 	bl	800fea4 <_sbrk_r>
 800fe2a:	6020      	str	r0, [r4, #0]
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f000 f838 	bl	800fea4 <_sbrk_r>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	d124      	bne.n	800fe82 <_malloc_r+0x92>
 800fe38:	230c      	movs	r3, #12
 800fe3a:	6033      	str	r3, [r6, #0]
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f000 f842 	bl	800fec6 <__malloc_unlock>
 800fe42:	e7e4      	b.n	800fe0e <_malloc_r+0x1e>
 800fe44:	680b      	ldr	r3, [r1, #0]
 800fe46:	1b5b      	subs	r3, r3, r5
 800fe48:	d418      	bmi.n	800fe7c <_malloc_r+0x8c>
 800fe4a:	2b0b      	cmp	r3, #11
 800fe4c:	d90f      	bls.n	800fe6e <_malloc_r+0x7e>
 800fe4e:	600b      	str	r3, [r1, #0]
 800fe50:	50cd      	str	r5, [r1, r3]
 800fe52:	18cc      	adds	r4, r1, r3
 800fe54:	4630      	mov	r0, r6
 800fe56:	f000 f836 	bl	800fec6 <__malloc_unlock>
 800fe5a:	f104 000b 	add.w	r0, r4, #11
 800fe5e:	1d23      	adds	r3, r4, #4
 800fe60:	f020 0007 	bic.w	r0, r0, #7
 800fe64:	1ac3      	subs	r3, r0, r3
 800fe66:	d0d3      	beq.n	800fe10 <_malloc_r+0x20>
 800fe68:	425a      	negs	r2, r3
 800fe6a:	50e2      	str	r2, [r4, r3]
 800fe6c:	e7d0      	b.n	800fe10 <_malloc_r+0x20>
 800fe6e:	428c      	cmp	r4, r1
 800fe70:	684b      	ldr	r3, [r1, #4]
 800fe72:	bf16      	itet	ne
 800fe74:	6063      	strne	r3, [r4, #4]
 800fe76:	6013      	streq	r3, [r2, #0]
 800fe78:	460c      	movne	r4, r1
 800fe7a:	e7eb      	b.n	800fe54 <_malloc_r+0x64>
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	6849      	ldr	r1, [r1, #4]
 800fe80:	e7cc      	b.n	800fe1c <_malloc_r+0x2c>
 800fe82:	1cc4      	adds	r4, r0, #3
 800fe84:	f024 0403 	bic.w	r4, r4, #3
 800fe88:	42a0      	cmp	r0, r4
 800fe8a:	d005      	beq.n	800fe98 <_malloc_r+0xa8>
 800fe8c:	1a21      	subs	r1, r4, r0
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f000 f808 	bl	800fea4 <_sbrk_r>
 800fe94:	3001      	adds	r0, #1
 800fe96:	d0cf      	beq.n	800fe38 <_malloc_r+0x48>
 800fe98:	6025      	str	r5, [r4, #0]
 800fe9a:	e7db      	b.n	800fe54 <_malloc_r+0x64>
 800fe9c:	20000c34 	.word	0x20000c34
 800fea0:	20000c38 	.word	0x20000c38

0800fea4 <_sbrk_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4c06      	ldr	r4, [pc, #24]	; (800fec0 <_sbrk_r+0x1c>)
 800fea8:	2300      	movs	r3, #0
 800feaa:	4605      	mov	r5, r0
 800feac:	4608      	mov	r0, r1
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	f7f4 f99a 	bl	80041e8 <_sbrk>
 800feb4:	1c43      	adds	r3, r0, #1
 800feb6:	d102      	bne.n	800febe <_sbrk_r+0x1a>
 800feb8:	6823      	ldr	r3, [r4, #0]
 800feba:	b103      	cbz	r3, 800febe <_sbrk_r+0x1a>
 800febc:	602b      	str	r3, [r5, #0]
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	20001f6c 	.word	0x20001f6c

0800fec4 <__malloc_lock>:
 800fec4:	4770      	bx	lr

0800fec6 <__malloc_unlock>:
 800fec6:	4770      	bx	lr

0800fec8 <_init>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	bf00      	nop
 800fecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fece:	bc08      	pop	{r3}
 800fed0:	469e      	mov	lr, r3
 800fed2:	4770      	bx	lr

0800fed4 <_fini>:
 800fed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed6:	bf00      	nop
 800fed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feda:	bc08      	pop	{r3}
 800fedc:	469e      	mov	lr, r3
 800fede:	4770      	bx	lr
